
var Module;

if (typeof Module === 'undefined') Module = {};

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else if (typeof location !== 'undefined') {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      throw 'using preloaded data can only be done on a web page or in a web worker';
    }
    var PACKAGE_NAME = 'build/index.data';
    var REMOTE_PACKAGE_BASE = 'index.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      Module.printErr('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = typeof Module['locateFile'] === 'function' ?
                              Module['locateFile'](REMOTE_PACKAGE_BASE) :
                              ((Module['filePackagePrefixURL'] || '') + REMOTE_PACKAGE_BASE);
  
    var REMOTE_PACKAGE_SIZE = metadata.remote_package_size;
    var PACKAGE_UUID = metadata.package_uuid;
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onload = function(event) {
        var packageData = xhr.response;
        callback(packageData);
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetched = null, fetchedCallback = null;
      fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
Module['FS_createPath']('/', 'data', true, true);
Module['FS_createPath']('/data', 'materials', true, true);
Module['FS_createPath']('/data', 'shaders', true, true);
Module['FS_createPath']('/data', 'models', true, true);
Module['FS_createPath']('/data', 'textures', true, true);

    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);

          this.finish(byteArray);

      },
      finish: function(byteArray) {
        var that = this;

        Module['FS_createPreloadedFile'](this.name, null, byteArray, true, true, function() {
          Module['removeRunDependency']('fp ' + that.name);
        }, function() {
          if (that.audio) {
            Module['removeRunDependency']('fp ' + that.name); // workaround for chromium bug 124926 (still no audio with this, but at least we don't hang)
          } else {
            Module.printErr('Preloading file ' + that.name + ' failed');
          }
        }, false, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change

        this.requests[this.name] = null;
      },
    };

        var files = metadata.files;
        for (i = 0; i < files.length; ++i) {
          new DataRequest(files[i].start, files[i].end, files[i].crunched, files[i].audio).open('GET', files[i].filename);
        }

  
    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      assert(arrayBuffer instanceof ArrayBuffer, 'bad input to processPackageData');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
        // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though
        // (we may be allocating before malloc is ready, during startup).
        if (Module['SPLIT_MEMORY']) Module.printErr('warning: you should run the file packager with --no-heap-copy when SPLIT_MEMORY is used, otherwise copying into the heap may fail due to the splitting');
        var ptr = Module['getMemory'](byteArray.length);
        Module['HEAPU8'].set(byteArray, ptr);
        DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
  
          var files = metadata.files;
          for (i = 0; i < files.length; ++i) {
            DataRequest.prototype.requests[files[i].filename].onload();
          }
              Module['removeRunDependency']('datafile_build/index.data');

    };
    Module['addRunDependency']('datafile_build/index.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": [{"audio": 0, "start": 0, "crunched": 0, "end": 236, "filename": "/data/materials/suzanne.mtl"}, {"audio": 0, "start": 236, "crunched": 0, "end": 399, "filename": "/data/materials/teapot.mtl"}, {"audio": 0, "start": 399, "crunched": 0, "end": 788, "filename": "/data/materials/car.mtl"}, {"audio": 0, "start": 788, "crunched": 0, "end": 1007, "filename": "/data/materials/bunny.mtl"}, {"audio": 0, "start": 1007, "crunched": 0, "end": 1231, "filename": "/data/materials/protagonist.mtl"}, {"audio": 0, "start": 1231, "crunched": 0, "end": 1537, "filename": "/data/shaders/normal.vert"}, {"audio": 0, "start": 1537, "crunched": 0, "end": 1673, "filename": "/data/shaders/normal.frag"}, {"audio": 0, "start": 1673, "crunched": 0, "end": 2081, "filename": "/data/shaders/textured.vert"}, {"audio": 0, "start": 2081, "crunched": 0, "end": 2412, "filename": "/data/shaders/textured.frag"}, {"audio": 0, "start": 2412, "crunched": 0, "end": 132419, "filename": "/data/models/teapot.obj"}, {"audio": 0, "start": 132419, "crunched": 0, "end": 686164, "filename": "/data/models/protagonist.obj"}, {"audio": 0, "start": 686164, "crunched": 0, "end": 1189230, "filename": "/data/models/bunny.obj"}, {"audio": 0, "start": 1189230, "crunched": 0, "end": 1624314, "filename": "/data/models/car.obj"}, {"audio": 0, "start": 1624314, "crunched": 0, "end": 1627083, "filename": "/data/models/untitled.raw"}, {"audio": 0, "start": 1627083, "crunched": 0, "end": 1712693, "filename": "/data/models/suzanne.obj"}, {"audio": 0, "start": 1712693, "crunched": 0, "end": 2696305, "filename": "/data/textures/protagonist.png"}, {"audio": 0, "start": 2696305, "crunched": 0, "end": 2787807, "filename": "/data/textures/suzanne.png"}, {"audio": 0, "start": 2787807, "crunched": 0, "end": 3019549, "filename": "/data/textures/bunny.png"}, {"audio": 0, "start": 3019549, "crunched": 0, "end": 4326201, "filename": "/data/textures/car.png"}, {"audio": 0, "start": 4326201, "crunched": 0, "end": 4346769, "filename": "/data/textures/teapot.png"}], "remote_package_size": 4346769, "package_uuid": "dcd596f6-215b-450e-b2ee-5dbbf7cc10c3"});

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module["UTF16ToString"] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module["lengthBytesUTF16"] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module["UTF32ToString"] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module["lengthBytesUTF32"] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;



buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 21824;
  /* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_main_cpp() } });
  

/* memory initializer */ allocate([172,11,0,0,197,50,0,0,252,11,0,0,189,50,0,0,0,0,0,0,1,0,0,0,8,0,0,0,2,4,0,0,212,11,0,0,168,50,0,0,16,0,0,0,0,0,0,0,252,11,0,0,28,52,0,0,0,0,0,0,2,0,0,0,88,0,0,0,2,0,0,0,112,0,0,0,0,8,0,0,252,11,0,0,231,52,0,0,0,0,0,0,1,0,0,0,136,0,0,0,2,4,0,0,212,11,0,0,210,52,0,0,128,0,0,0,0,0,0,0,172,11,0,0,225,52,0,0,172,11,0,0,238,52,0,0,212,11,0,0,84,53,0,0,184,1,0,0,0,0,0,0,212,11,0,0,165,53,0,0,192,1,0,0,0,0,0,0,252,11,0,0,213,53,0,0,0,0,0,0,2,0,0,0,88,0,0,0,2,0,0,0,128,0,0,0,0,8,0,0,212,11,0,0,95,56,0,0,224,0,0,0,0,0,0,0,172,11,0,0,108,56,0,0,212,11,0,0,121,56,0,0,224,0,0,0,0,0,0,0,212,11,0,0,137,56,0,0,232,0,0,0,0,0,0,0,212,11,0,0,154,56,0,0,224,0,0,0,0,0,0,0,172,11,0,0,172,56,0,0,212,11,0,0,185,56,0,0,224,0,0,0,0,0,0,0,212,11,0,0,197,56,0,0,24,1,0,0,0,0,0,0,212,11,0,0,230,56,0,0,48,1,0,0,0,0,0,0,212,11,0,0,44,57,0,0,48,1,0,0,0,0,0,0,212,11,0,0,8,57,0,0,80,1,0,0,0,0,0,0,212,11,0,0,78,57,0,0,64,1,0,0,0,0,0,0,212,11,0,0,115,57,0,0,64,1,0,0,0,0,0,0,212,11,0,0,249,74,0,0,232,8,0,0,0,0,0,0,172,11,0,0,19,75,0,0,212,11,0,0,37,75,0,0,160,1,0,0,0,0,0,0,172,11,0,0,79,75,0,0,252,11,0,0,128,75,0,0,0,0,0,0,1,0,0,0,168,1,0,0,3,244,255,255,212,11,0,0,175,75,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,212,11,0,0,43,76,0,0,224,8,0,0,0,0,0,0,252,11,0,0,65,76,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,16,8,0,0,2,0,0,0,252,11,0,0,83,76,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,24,8,0,0,2,0,0,0,252,11,0,0,117,76,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,24,8,0,0,2,0,0,0,252,11,0,0,152,76,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,24,8,0,0,2,0,0,0,212,11,0,0,187,76,0,0,96,2,0,0,0,0,0,0,212,11,0,0,221,76,0,0,96,2,0,0,0,0,0,0,252,11,0,0,0,77,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,24,8,0,0,2,0,0,0,212,11,0,0,34,77,0,0,240,1,0,0,0,0,0,0,212,11,0,0,56,77,0,0,240,1,0,0,0,0,0,0,212,11,0,0,76,77,0,0,240,1,0,0,0,0,0,0,252,11,0,0,96,77,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,16,8,0,0,2,0,0,0,212,11,0,0,114,77,0,0,240,1,0,0,0,0,0,0,212,11,0,0,135,77,0,0,240,1,0,0,0,0,0,0,252,11,0,0,156,77,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,32,8,0,0,0,0,0,0,252,11,0,0,224,77,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,56,8,0,0,0,0,0,0,252,11,0,0,36,78,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,80,8,0,0,0,0,0,0,252,11,0,0,104,78,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,104,8,0,0,0,0,0,0,252,11,0,0,172,78,0,0,0,0,0,0,3,0,0,0,240,1,0,0,2,0,0,0,128,8,0,0,2,0,0,0,136,8,0,0,0,8,0,0,252,11,0,0,241,78,0,0,0,0,0,0,3,0,0,0,240,1,0,0,2,0,0,0,128,8,0,0,2,0,0,0,144,8,0,0,0,8,0,0,252,11,0,0,54,79,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,152,8,0,0,0,8,0,0,252,11,0,0,123,79,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,152,8,0,0,0,8,0,0,252,11,0,0,192,79,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,160,8,0,0,2,0,0,0,252,11,0,0,220,79,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,160,8,0,0,2,0,0,0,252,11,0,0,248,79,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,160,8,0,0,2,0,0,0,252,11,0,0,20,80,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,160,8,0,0,2,0,0,0,252,11,0,0,48,80,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,168,8,0,0,0,0,0,0,252,11,0,0,118,80,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,176,8,0,0,0,0,0,0,252,11,0,0,188,80,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,184,8,0,0,0,0,0,0,252,11,0,0,2,81,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,192,8,0,0,0,0,0,0,252,11,0,0,72,81,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,200,8,0,0,2,0,0,0,252,11,0,0,93,81,0,0,0,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,200,8,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,11,0,0,192,84,0,0,172,11,0,0,169,84,0,0,252,11,0,0,147,84,0,0,0,0,0,0,1,0,0,0,216,8,0,0,0,0,0,0,252,11,0,0,100,84,0,0,0,0,0,0,1,0,0,0,216,8,0,0,0,0,0,0,252,11,0,0,78,84,0,0,0,0,0,0,1,0,0,0,208,8,0,0,0,0,0,0,252,11,0,0,31,84,0,0,0,0,0,0,1,0,0,0,208,8,0,0,0,0,0,0,172,11,0,0,12,84,0,0,172,11,0,0,234,83,0,0,172,11,0,0,200,83,0,0,172,11,0,0,179,83,0,0,172,11,0,0,158,83,0,0,172,11,0,0,133,83,0,0,172,11,0,0,108,83,0,0,172,11,0,0,83,83,0,0,172,11,0,0,58,83,0,0,172,11,0,0,34,83,0,0,172,11,0,0,53,84,0,0,172,11,0,0,122,84,0,0,172,11,0,0,213,84,0,0,212,11,0,0,238,84,0,0,8,1,0,0,0,0,0,0,172,11,0,0,5,85,0,0,212,11,0,0,30,85,0,0,248,8,0,0,0,0,0,0,0,0,0,0,40,0,0,0,1,0,0,0,3,54,0,0,241,53,0,0,186,52,0,0,12,54,0,0,16,54,0,0,196,52,0,0,0,0,0,0,56,0,0,0,2,0,0,0,108,0,0,0,0,0,0,0,160,0,0,0,3,0,0,0,4,0,0,0,148,255,255,255,148,255,255,255,160,0,0,0,5,0,0,0,6,0,0,0,76,9,0,0,196,9,0,0,216,9,0,0,96,9,0,0,0,0,0,0,144,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,108,0,0,0,0,0,0,0,192,1,0,0,21,0,0,0,22,0,0,0,148,255,255,255,148,255,255,255,192,1,0,0,23,0,0,0,24,0,0,0,0,0,0,0,88,0,0,0,25,0,0,0,3,54,0,0,241,53,0,0,12,54,0,0,16,54,0,0,0,0,0,0,176,0,0,0,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,25,0,0,0,27,0,0,0,0,0,0,0,208,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,232,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,0,0,0,0,8,1,0,0,34,0,0,0,35,0,0,0,36,0,0,0,0,0,0,0,248,0,0,0,31,0,0,0,37,0,0,0,33,0,0,0,0,0,0,0,32,1,0,0,38,0,0,0,39,0,0,0,40,0,0,0,0,0,0,0,64,1,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,0,0,0,0,112,1,0,0,41,0,0,0,49,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,0,0,0,0,128,1,0,0,41,0,0,0,53,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,73,60,0,0,208,13,0,0,64,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,0,0,0,0,0,0,0,176,22,0,0,176,16,0,0,168,48,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,0,0,0,60,0,0,0,227,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,0,0,60,0,0,0,219,68,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,1,0,0,62,0,0,0,63,0,0,0,0,0,0,0,184,1,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,14,0,0,0,15,0,0,0,71,0,0,0,17,0,0,0,72,0,0,0,19,0,0,0,73,0,0,0,0,0,0,0,144,1,0,0,74,0,0,0,75,0,0,0,36,0,0,0,0,0,0,0,160,1,0,0,76,0,0,0,77,0,0,0,0,0,0,0,216,1,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,0,0,0,0,0,0,0,0,208,2,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,2,0,0,91,0,0,0,92,0,0,0,87,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,3,0,0,96,0,0,0,97,0,0,0,87,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,3,0,0,109,0,0,0,110,0,0,0,87,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,3,0,0,122,0,0,0,123,0,0,0,87,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,129,0,0,0,130,0,0,0,131,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,3,0,0,132,0,0,0,133,0,0,0,87,0,0,0,134,0,0,0,135,0,0,0,136,0,0,0,137,0,0,0,138,0,0,0,139,0,0,0,140,0,0,0,141,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,3,0,0,142,0,0,0,143,0,0,0,87,0,0,0,144,0,0,0,145,0,0,0,146,0,0,0,147,0,0,0,148,0,0,0,149,0,0,0,150,0,0,0,248,255,255,255,176,3,0,0,151,0,0,0,152,0,0,0,153,0,0,0,154,0,0,0,155,0,0,0,156,0,0,0,157,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,3,0,0,158,0,0,0,159,0,0,0,87,0,0,0,160,0,0,0,161,0,0,0,162,0,0,0,163,0,0,0,164,0,0,0,165,0,0,0,166,0,0,0,248,255,255,255,216,3,0,0,167,0,0,0,168,0,0,0,169,0,0,0,170,0,0,0,171,0,0,0,172,0,0,0,173,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,174,0,0,0,175,0,0,0,87,0,0,0,176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,4,0,0,177,0,0,0,178,0,0,0,87,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,4,0,0,180,0,0,0,181,0,0,0,87,0,0,0,182,0,0,0,183,0,0,0,184,0,0,0,185,0,0,0,186,0,0,0,187,0,0,0,188,0,0,0,189,0,0,0,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,4,0,0,191,0,0,0,192,0,0,0,87,0,0,0,193,0,0,0,194,0,0,0,195,0,0,0,196,0,0,0,197,0,0,0,198,0,0,0,199,0,0,0,200,0,0,0,201,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,4,0,0,202,0,0,0,203,0,0,0,87,0,0,0,204,0,0,0,205,0,0,0,206,0,0,0,207,0,0,0,208,0,0,0,209,0,0,0,210,0,0,0,211,0,0,0,212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,4,0,0,213,0,0,0,214,0,0,0,87,0,0,0,215,0,0,0,216,0,0,0,217,0,0,0,218,0,0,0,219,0,0,0,220,0,0,0,221,0,0,0,222,0,0,0,223,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,4,0,0,224,0,0,0,225,0,0,0,87,0,0,0,226,0,0,0,227,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,4,0,0,228,0,0,0,229,0,0,0,87,0,0,0,230,0,0,0,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,232,0,0,0,233,0,0,0,87,0,0,0,234,0,0,0,235,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,5,0,0,236,0,0,0,237,0,0,0,87,0,0,0,238,0,0,0,239,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,5,0,0,240,0,0,0,241,0,0,0,87,0,0,0,242,0,0,0,243,0,0,0,244,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,5,0,0,245,0,0,0,246,0,0,0,87,0,0,0,247,0,0,0,248,0,0,0,249,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,2,0,0,250,0,0,0,251,0,0,0,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,2,0,0,252,0,0,0,253,0,0,0,87,0,0,0,254,0,0,0,255,0,0,0,0,1,0,0,1,1,0,0,2,1,0,0,3,1,0,0,4,1,0,0,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,2,0,0,6,1,0,0,7,1,0,0,87,0,0,0,8,1,0,0,9,1,0,0,10,1,0,0,11,1,0,0,12,1,0,0,13,1,0,0,14,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,3,0,0,15,1,0,0,16,1,0,0,87,0,0,0,17,1,0,0,18,1,0,0,19,1,0,0,20,1,0,0,21,1,0,0,0,0,0,0,32,3,0,0,22,1,0,0,23,1,0,0,87,0,0,0,24,1,0,0,25,1,0,0,26,1,0,0,27,1,0,0,28,1,0,0,0,0,0,0,240,1,0,0,29,1,0,0,30,1,0,0,87,0,0,0,0,0,0,0,0,2,0,0,29,1,0,0,31,1,0,0,87,0,0,0,32,1,0,0,33,1,0,0,34,1,0,0,35,1,0,0,36,1,0,0,37,1,0,0,38,1,0,0,39,1,0,0,40,1,0,0,41,1,0,0,42,1,0,0,43,1,0,0,0,0,0,0,32,2,0,0,29,1,0,0,44,1,0,0,87,0,0,0,45,1,0,0,46,1,0,0,47,1,0,0,48,1,0,0,49,1,0,0,50,1,0,0,51,1,0,0,0,0,0,0,64,2,0,0,29,1,0,0,52,1,0,0,87,0,0,0,53,1,0,0,54,1,0,0,55,1,0,0,56,1,0,0,57,1,0,0,58,1,0,0,59,1,0,0,0,0,0,0,96,2,0,0,29,1,0,0,60,1,0,0,87,0,0,0,61,1,0,0,62,1,0,0,63,1,0,0,64,1,0,0,65,1,0,0,66,1,0,0,67,1,0,0,0,0,0,0,128,2,0,0,29,1,0,0,68,1,0,0,87,0,0,0,61,1,0,0,62,1,0,0,63,1,0,0,64,1,0,0,65,1,0,0,66,1,0,0,67,1,0,0,0,0,0,0,144,2,0,0,29,1,0,0,69,1,0,0,87,0,0,0,61,1,0,0,62,1,0,0,63,1,0,0,64,1,0,0,65,1,0,0,66,1,0,0,67,1,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,8,0,0,70,1,0,0,71,1,0,0,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,3,32,2,32,2,32,2,32,2,32,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,1,96,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,4,192,4,192,4,192,4,192,4,192,4,192,4,192,8,213,8,213,8,213,8,213,8,213,8,213,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,4,192,4,192,4,192,4,192,4,192,4,192,8,214,8,214,8,214,8,214,8,214,8,214,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,4,192,4,192,4,192,4,192,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,55,79,98,106,101,99,116,115,57,87,105,116,104,77,111,100,101,108,69,0,54,79,98,106,101,99,116,0,49,52,84,114,97,110,115,102,111,114,109,97,116,105,111,110,0,47,100,97,116,97,47,112,114,111,103,114,97,109,115,47,0,46,102,114,97,103,0,47,100,97,116,97,47,116,101,120,116,117,114,101,115,47,0,47,104,111,109,101,47,109,101,111,119,101,103,47,109,97,116,97,98,115,116,114,105,120,47,118,101,110,100,111,114,47,103,108,109,47,103,108,109,47,100,101,116,97,105,108,47,116,121,112,101,95,118,101,99,52,46,105,110,108,0,47,104,111,109,101,47,109,101,111,119,101,103,47,109,97,116,97,98,115,116,114,105,120,47,118,101,110,100,111,114,47,103,108,109,47,103,108,109,47,100,101,116,97,105,108,47,116,121,112,101,95,109,97,116,52,120,52,46,105,110,108,0,105,32,62,61,32,48,32,38,38,32,115,116,97,116,105,99,95,99,97,115,116,60,100,101,116,97,105,108,58,58,99,111,109,112,111,110,101,110,116,95,99,111,117,110,116,95,116,62,40,105,41,32,60,32,100,101,116,97,105,108,58,58,99,111,109,112,111,110,101,110,116,95,99,111,117,110,116,40,42,116,104,105,115,41,0,47,104,111,109,101,47,109,101,111,119,101,103,47,109,97,116,97,98,115,116,114,105,120,47,118,101,110,100,111,114,47,103,108,109,47,103,108,109,47,100,101,116,97,105,108,47,116,121,112,101,95,118,101,99,51,46,105,110,108,0,47,100,97,116,97,47,115,104,97,100,101,114,115,47,0,46,118,101,114,116,0,78,54,77,111,100,101,108,115,54,83,116,97,116,105,99,69,0,116,101,120,116,117,114,101,100,0,118,32,0,118,32,37,102,32,37,102,32,37,102,0,118,116,32,0,118,116,32,37,102,32,37,102,0,118,110,32,0,118,110,32,37,102,32,37,102,32,37,102,0,102,32,0,47,47,0,102,32,37,104,117,47,47,37,104,117,32,37,104,117,47,47,37,104,117,32,37,104,117,47,47,37,104,117,0,102,32,37,104,117,47,37,104,117,47,37,104,117,32,37,104,117,47,37,104,117,47,37,104,117,32,37,104,117,47,37,104,117,47,37,104,117,0,109,116,108,108,105,98,32,0,117,115,101,109,116,108,32,0,116,101,120,95,99,111,111,114,100,0,115,117,110,95,100,105,114,101,99,116,105,111,110,0,49,50,84,101,120,116,117,114,101,100,77,101,115,104,0,52,77,101,115,104,0,53,77,111,100,101,108,0,56,82,101,115,111,117,114,99,101,0,105,32,60,32,116,104,105,115,45,62,108,101,110,103,116,104,40,41,0,47,104,111,109,101,47,109,101,111,119,101,103,47,109,97,116,97,98,115,116,114,105,120,47,118,101,110,100,111,114,47,103,108,109,47,103,108,109,47,100,101,116,97,105,108,47,116,121,112,101,95,109,97,116,51,120,51,46,105,110,108,0,111,112,101,114,97,116,111,114,91,93,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,102,105,108,101,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,119,0,97,0,114,43,0,119,43,0,97,43,0,119,98,0,97,98,0,114,98,0,114,43,98,0,119,43,98,0,97,43,98,0,78,83,116,51,95,95,49,49,52,98,97,115,105,99,95,105,102,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,54,77,111,100,101,108,115,51,82,97,119,69,0,47,100,97,116,97,47,109,111,100,101,108,115,47,0,110,111,114,109,97,108,0,114,0,37,102,32,37,102,32,37,102,0,112,111,115,105,116,105,111,110,0,109,118,112,0,108,111,99,97,108,95,109,111,100,101,108,118,105,101,119,0,47,100,97,116,97,47,109,97,116,101,114,105,97,108,115,47,0,110,101,119,109,116,108,32,0,109,97,112,95,75,100,32,0,112,114,111,116,97,103,111,110,105,115,116,46,111,98,106,0,99,97,114,46,111,98,106,0,115,117,122,97,110,110,101,46,111,98,106,0,116,101,97,112,111,116,46,111,98,106,0,98,117,110,110,121,46,111,98,106,0,117,110,116,105,116,108,101,100,46,114,97,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,98,115,40,97,115,112,101,99,116,32,45,32,115,116,100,58,58,110,117,109,101,114,105,99,95,108,105,109,105,116,115,60,84,62,58,58,101,112,115,105,108,111,110,40,41,41,32,62,32,115,116,97,116,105,99,95,99,97,115,116,60,84,62,40,48,41,0,47,104,111,109,101,47,109,101,111,119,101,103,47,109,97,116,97,98,115,116,114,105,120,47,118,101,110,100,111,114,47,103,108,109,47,103,108,109,47,103,116,99,47,109,97,116,114,105,120,95,116,114,97,110,115,102,111,114,109,46,105,110,108,0,112,101,114,115,112,101,99,116,105,118,101,82,72,0,83,116,57,98,97,100,95,97,108,108,111,99,0,83,116,57,101,120,99,101,112,116,105,111,110,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,83,116,49,50,111,117,116,95,111,102,95,114,97,110,103,101,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,83,116,57,116,121,112,101,95,105,110,102,111,0,83,116,56,98,97,100,95,99,97,115,116,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,33,34,118,101,99,116,111,114,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,47,104,111,109,101,47,109,101,111,119,101,103,47,101,109,115,100,107,95,112,111,114,116,97,98,108,101,47,101,109,115,99,114,105,112,116,101,110,47,116,97,103,45,49,46,51,53,46,52,47,115,121,115,116,101,109,47,105,110,99,108,117,100,101,47,108,105,98,99,120,120,47,118,101,99,116,111,114,0,95,95,116,104,114,111,119,95,108,101,110,103,116,104,95,101,114,114,111,114,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,47,104,111,109,101,47,109,101,111,119,101,103,47,101,109,115,100,107,95,112,111,114,116,97,98,108,101,47,101,109,115,99,114,105,112,116,101,110,47,116,97,103,45,49,46,51,53,46,52,47,115,121,115,116,101,109,47,105,110,99,108,117,100,101,47,108,105,98,99,120,120,47,115,116,114,105,110,103,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,111,117,116,95,111,102,95,114,97,110,103,101,34,0,95,95,116,104,114,111,119,95,111,117,116,95,111,102,95,114,97,110,103,101,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,117,110,99,97,117,103,104,116,0,80,79,83,73,88,0,114,119,97,0,105,110,102,105,110,105,116,121,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+5804);
/* memory initializer */ allocate([111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+16044);
/* memory initializer */ allocate([17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,105,111,115,116,114,101,97,109,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,37,112,0,67,0,37,0,0,0,0,0,108,0,108,108,0,0,76,0,37,112,0,0,0,0,37,72,58,37,77,58,37,83,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,37,72,58,37,77,37,72,58,37,77,58,37,83,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,48,49,50,51,52,53,54,55,56,57,0,37,76,102,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,48,49,50,51,52,53,54,55,56,57,0,37,46,48,76,102,0,118,101,99,116,111,114,0,116,114,117,101,0,102,97,108,115,101,0,83,117,110,100,97,121,0,77,111,110,100,97,121,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,84,104,117,114,115,100,97,121,0,70,114,105,100,97,121,0,83,97,116,117,114,100,97,121,0,83,117,110,0,77,111,110,0,84,117,101,0,87,101,100,0,84,104,117,0,70,114,105,0,83,97,116,0,74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,77,97,114,99,104,0,65,112,114,105,108,0,77,97,121,0,74,117,110,101,0,74,117,108,121,0,65,117,103,117,115,116,0,83,101,112,116,101,109,98,101,114,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,68,101,99,101,109,98,101,114,0,74,97,110,0,70,101,98,0,77,97,114,0,65,112,114,0,74,117,110,0,74,117,108,0,65,117,103,0,83,101,112,0,79,99,116,0,78,111,118,0,68,101,99,0,65,77,0,80,77,0,37,109,47,37,100,47,37,121,0,37,72,58,37,77,58,37,83,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,37,73,58,37,77,58,37,83,32,37,112,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,58,32,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+18651);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

  
  
  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],currentContext:null,byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:16,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        return source;
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes.majorVersion === 'undefined' && typeof webGLContextAttributes.minorVersion === 'undefined') {
          webGLContextAttributes.majorVersion = 1;
          webGLContextAttributes.minorVersion = 0;
        }
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes.majorVersion == 1 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else if (webGLContextAttributes.majorVersion == 2 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl2", webGLContextAttributes) || canvas.getContext("experimental-webgl2", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e, JSON.stringify(webGLContextAttributes)]);
          return 0;
        }
        // possible GL_DEBUG entry point: ctx = wrapDebugGL(ctx);
  
        if (!ctx) return 0;
        return GL.registerContext(ctx, webGLContextAttributes);
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['enableExtensionsByDefault'] === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
        return handle;
      },makeContextCurrent:function (contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
  
        if (context.version < 2) {
          // Extension available from Firefox 26 and Google Chrome 30
          var instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
          if (instancedArraysExt) {
            GLctx['vertexAttribDivisor'] = function(index, divisor) { instancedArraysExt['vertexAttribDivisorANGLE'](index, divisor); };
            GLctx['drawArraysInstanced'] = function(mode, first, count, primcount) { instancedArraysExt['drawArraysInstancedANGLE'](mode, first, count, primcount); };
            GLctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { instancedArraysExt['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
          }
  
          // Extension available from Firefox 25 and WebKit
          var vaoExt = GLctx.getExtension('OES_vertex_array_object');
          if (vaoExt) {
            GLctx['createVertexArray'] = function() { return vaoExt['createVertexArrayOES'](); };
            GLctx['deleteVertexArray'] = function(vao) { vaoExt['deleteVertexArrayOES'](vao); };
            GLctx['bindVertexArray'] = function(vao) { vaoExt['bindVertexArrayOES'](vao); };
            GLctx['isVertexArray'] = function(vao) { return vaoExt['isVertexArrayOES'](vao); };
          }
  
          var drawBuffersExt = GLctx.getExtension('WEBGL_draw_buffers');
          if (drawBuffersExt) {
            GLctx['drawBuffers'] = function(n, bufs) { drawBuffersExt['drawBuffersWEBGL'](n, bufs); };
          }
        }
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod" ];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (ext.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1 // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
  
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = GLctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
  
            GL.uniforms[id] = loc;
          }
        }
      }};function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret; 
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x1F02 /* GL_VERSION */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (var i in exts) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          ret = allocate(intArrayFromString('OpenGL ES GLSL 1.00 (WebGL)'), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }var GLEW={isLinaroFork:1,extensions:null,error:{0:null,1:null,2:null,3:null,4:null,5:null,6:null,7:null,8:null},version:{1:null,2:null,3:null,4:null},errorStringConstantFromCode:function (error) {
        if (GLEW.isLinaroFork) {
          switch (error) {
            case 4:return "OpenGL ES lib expected, found OpenGL lib"; // GLEW_ERROR_NOT_GLES_VERSION
            case 5:return "OpenGL lib expected, found OpenGL ES lib"; // GLEW_ERROR_GLES_VERSION
            case 6:return "Missing EGL version"; // GLEW_ERROR_NO_EGL_VERSION
            case 7:return "EGL 1.1 and up are supported"; // GLEW_ERROR_EGL_VERSION_10_ONLY
            default:break;
          }
        }
  
        switch (error) {
          case 0:return "No error"; // GLEW_OK || GLEW_NO_ERROR
          case 1:return "Missing GL version"; // GLEW_ERROR_NO_GL_VERSION
          case 2:return "GL 1.1 and up are supported"; // GLEW_ERROR_GL_VERSION_10_ONLY
          case 3:return "GLX 1.2 and up are supported"; // GLEW_ERROR_GLX_VERSION_11_ONLY
          default:return null;
        }
      },errorString:function (error) {
        if (!GLEW.error[error]) {
          var string = GLEW.errorStringConstantFromCode(error);
          if (!string) {
            string = "Unknown error";
            error = 8; // prevent array from growing more than this
          }
          GLEW.error[error] = allocate(intArrayFromString(string), 'i8', ALLOC_NORMAL);
        }
        return GLEW.error[error];
      },versionStringConstantFromCode:function (name) {
        switch (name) {
          case 1:return "1.10.0"; // GLEW_VERSION
          case 2:return "1"; // GLEW_VERSION_MAJOR
          case 3:return "10"; // GLEW_VERSION_MINOR
          case 4:return "0"; // GLEW_VERSION_MICRO
          default:return null;
        }
      },versionString:function (name) {
        if (!GLEW.version[name]) {
          var string = GLEW.versionStringConstantFromCode(name);
          if (!string)
            return 0;
          GLEW.version[name] = allocate(intArrayFromString(string), 'i8', ALLOC_NORMAL);
        }
        return GLEW.version[name];
      },extensionIsSupported:function (name) {
        if (!GLEW.extensions) {
          GLEW.extensions = Pointer_stringify(_glGetString(0x1F03)).split(' ');
        }
  
        if (GLEW.extensions.indexOf(name) != -1)
          return 1;
  
        // extensions from GLEmulations do not come unprefixed
        // so, try with prefix
        return (GLEW.extensions.indexOf("GL_" + name) != -1);
      }};function _glewInit() { return 0; }

   
  Module["_i64Subtract"] = _i64Subtract;

  function _glClearColor(x0, x1, x2, x3) { GLctx.clearColor(x0, x1, x2, x3) }

   
  Module["_i64Add"] = _i64Add;

  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  var _emscripten_resume=true;

  function _pthread_mutex_lock() {}

  
  
  function _emscripten_get_now() {
      if (!_emscripten_get_now.actual) {
        if (ENVIRONMENT_IS_NODE) {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() {
            var t = process['hrtime']();
            return t[0] * 1e3 + t[1] / 1e6;
          }
        } else if (typeof dateNow !== 'undefined') {
          _emscripten_get_now.actual = dateNow;
        } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() { return self['performance']['now'](); };
        } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() { return performance['now'](); };
        } else {
          _emscripten_get_now.actual = Date.now;
        }
      }
      return _emscripten_get_now.actual();
    }var GLFW={Window:function (id, width, height, title, monitor, share) {
        this.id = id;
        this.x = 0;
        this.y = 0;
        this.storedX = 0; // Used to store X before fullscreen
        this.storedY = 0; // Used to store Y before fullscreen
        this.width = width;
        this.height = height;
        this.storedWidth = width; // Used to store width before fullscreen
        this.storedHeight = height; // Used to store height before fullscreen
        this.title = title;
        this.monitor = monitor;
        this.share = share;
        this.attributes = GLFW.hints;
        this.inputModes = {
          0x00033001:0x00034001, // GLFW_CURSOR (GLFW_CURSOR_NORMAL)
          0x00033002:0, // GLFW_STICKY_KEYS
          0x00033003:0, // GLFW_STICKY_MOUSE_BUTTONS
        };
        this.buttons = 0;
        this.keys = new Array();
        this.shouldClose = 0;
        this.title = null;
        this.windowPosFunc = null; // GLFWwindowposfun
        this.windowSizeFunc = null; // GLFWwindowsizefun
        this.windowCloseFunc = null; // GLFWwindowclosefun
        this.windowRefreshFunc = null; // GLFWwindowrefreshfun
        this.windowFocusFunc = null; // GLFWwindowfocusfun
        this.windowIconifyFunc = null; // GLFWwindowiconifyfun
        this.framebufferSizeFunc = null; // GLFWframebuffersizefun
        this.mouseButtonFunc = null; // GLFWmousebuttonfun
        this.cursorPosFunc = null; // GLFWcursorposfun
        this.cursorEnterFunc = null; // GLFWcursorenterfun
        this.scrollFunc = null; // GLFWscrollfun
        this.keyFunc = null; // GLFWkeyfun
        this.charFunc = null; // GLFWcharfun
        this.userptr = null;
      },WindowFromId:function (id) {
        if (id <= 0 || !GLFW.windows) return null;
        return GLFW.windows[id - 1];
      },errorFunc:null,monitorFunc:null,active:null,windows:null,monitors:null,monitorString:null,versionString:null,initialTime:null,extensions:null,hints:null,defaultHints:{131073:0,131074:0,131075:1,131076:1,131077:1,135169:8,135170:8,135171:8,135172:8,135173:24,135174:8,135175:0,135176:0,135177:0,135178:0,135179:0,135180:0,135181:0,135182:0,135183:0,139265:196609,139266:1,139267:0,139268:0,139269:0,139270:0,139271:0,139272:0},DOMToGLFWKeyCode:function (keycode) {
        switch (keycode) {
          case 0x20:return 32; // DOM_VK_SPACE -> GLFW_KEY_SPACE
          case 0xDE:return 39; // DOM_VK_QUOTE -> GLFW_KEY_APOSTROPHE
          case 0xBC:return 44; // DOM_VK_COMMA -> GLFW_KEY_COMMA
          case 0xAD:return 45; // DOM_VK_HYPHEN_MINUS -> GLFW_KEY_MINUS
          case 0xBE:return 46; // DOM_VK_PERIOD -> GLFW_KEY_PERIOD
          case 0xBF:return 47; // DOM_VK_SLASH -> GLFW_KEY_SLASH
          case 0x30:return 48; // DOM_VK_0 -> GLFW_KEY_0
          case 0x31:return 49; // DOM_VK_1 -> GLFW_KEY_1
          case 0x32:return 50; // DOM_VK_2 -> GLFW_KEY_2
          case 0x33:return 51; // DOM_VK_3 -> GLFW_KEY_3
          case 0x34:return 52; // DOM_VK_4 -> GLFW_KEY_4
          case 0x35:return 53; // DOM_VK_5 -> GLFW_KEY_5
          case 0x36:return 54; // DOM_VK_6 -> GLFW_KEY_6
          case 0x37:return 55; // DOM_VK_7 -> GLFW_KEY_7
          case 0x38:return 56; // DOM_VK_8 -> GLFW_KEY_8
          case 0x39:return 57; // DOM_VK_9 -> GLFW_KEY_9
          case 0x3B:return 59; // DOM_VK_SEMICOLON -> GLFW_KEY_SEMICOLON
          case 0x61:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0x41:return 65; // DOM_VK_A -> GLFW_KEY_A
          case 0x42:return 66; // DOM_VK_B -> GLFW_KEY_B
          case 0x43:return 67; // DOM_VK_C -> GLFW_KEY_C
          case 0x44:return 68; // DOM_VK_D -> GLFW_KEY_D
          case 0x45:return 69; // DOM_VK_E -> GLFW_KEY_E
          case 0x46:return 70; // DOM_VK_F -> GLFW_KEY_F
          case 0x47:return 71; // DOM_VK_G -> GLFW_KEY_G
          case 0x48:return 72; // DOM_VK_H -> GLFW_KEY_H
          case 0x49:return 73; // DOM_VK_I -> GLFW_KEY_I
          case 0x4A:return 74; // DOM_VK_J -> GLFW_KEY_J
          case 0x4B:return 75; // DOM_VK_K -> GLFW_KEY_K
          case 0x4C:return 76; // DOM_VK_L -> GLFW_KEY_L
          case 0x4D:return 77; // DOM_VK_M -> GLFW_KEY_M
          case 0x4E:return 78; // DOM_VK_N -> GLFW_KEY_N
          case 0x4F:return 79; // DOM_VK_O -> GLFW_KEY_O
          case 0x50:return 80; // DOM_VK_P -> GLFW_KEY_P
          case 0x51:return 81; // DOM_VK_Q -> GLFW_KEY_Q
          case 0x52:return 82; // DOM_VK_R -> GLFW_KEY_R
          case 0x53:return 83; // DOM_VK_S -> GLFW_KEY_S
          case 0x54:return 84; // DOM_VK_T -> GLFW_KEY_T
          case 0x55:return 85; // DOM_VK_U -> GLFW_KEY_U
          case 0x56:return 86; // DOM_VK_V -> GLFW_KEY_V
          case 0x57:return 87; // DOM_VK_W -> GLFW_KEY_W
          case 0x58:return 88; // DOM_VK_X -> GLFW_KEY_X
          case 0x59:return 89; // DOM_VK_Y -> GLFW_KEY_Y
          case 0x5a:return 90; // DOM_VK_Z -> GLFW_KEY_Z
          case 0xDB:return 91; // DOM_VK_OPEN_BRACKET -> GLFW_KEY_LEFT_BRACKET
          case 0xDC:return 92; // DOM_VK_BACKSLASH -> GLFW_KEY_BACKSLASH
          case 0xDD:return 93; // DOM_VK_CLOSE_BRACKET -> GLFW_KEY_RIGHT_BRACKET
          case 0xC0:return 94; // DOM_VK_BACK_QUOTE -> GLFW_KEY_GRAVE_ACCENT
          case 0x1B:return 256; // DOM_VK_ESCAPE -> GLFW_KEY_ESCAPE
          case 0x0D:return 257; // DOM_VK_RETURN -> GLFW_KEY_ENTER
          case 0x09:return 258; // DOM_VK_TAB -> GLFW_KEY_TAB
          case 0x08:return 259; // DOM_VK_BACK -> GLFW_KEY_BACKSPACE
          case 0x2D:return 260; // DOM_VK_INSERT -> GLFW_KEY_INSERT
          case 0x2E:return 261; // DOM_VK_DELETE -> GLFW_KEY_DELETE
          case 0x27:return 262; // DOM_VK_RIGHT -> GLFW_KEY_RIGHT
          case 0x25:return 263; // DOM_VK_LEFT -> GLFW_KEY_LEFT
          case 0x28:return 264; // DOM_VK_DOWN -> GLFW_KEY_DOWN
          case 0x26:return 265; // DOM_VK_UP -> GLFW_KEY_UP
          case 0x21:return 266; // DOM_VK_PAGE_UP -> GLFW_KEY_PAGE_UP
          case 0x22:return 267; // DOM_VK_PAGE_DOWN -> GLFW_KEY_PAGE_DOWN
          case 0x24:return 268; // DOM_VK_HOME -> GLFW_KEY_HOME
          case 0x23:return 269; // DOM_VK_END -> GLFW_KEY_END
          case 0x14:return 280; // DOM_VK_CAPS_LOCK -> GLFW_KEY_CAPS_LOCK
          case 0x91:return 281; // DOM_VK_SCROLL_LOCK -> GLFW_KEY_SCROLL_LOCK
          case 0x90:return 282; // DOM_VK_NUM_LOCK -> GLFW_KEY_NUM_LOCK
          case 0x2C:return 283; // DOM_VK_SNAPSHOT -> GLFW_KEY_PRINT_SCREEN
          case 0x13:return 284; // DOM_VK_PAUSE -> GLFW_KEY_PAUSE
          case 0x70:return 290; // DOM_VK_F1 -> GLFW_KEY_F1
          case 0x71:return 291; // DOM_VK_F2 -> GLFW_KEY_F2
          case 0x72:return 292; // DOM_VK_F3 -> GLFW_KEY_F3
          case 0x73:return 293; // DOM_VK_F4 -> GLFW_KEY_F4
          case 0x74:return 294; // DOM_VK_F5 -> GLFW_KEY_F5
          case 0x75:return 295; // DOM_VK_F6 -> GLFW_KEY_F6
          case 0x76:return 296; // DOM_VK_F7 -> GLFW_KEY_F7
          case 0x77:return 297; // DOM_VK_F8 -> GLFW_KEY_F8
          case 0x78:return 298; // DOM_VK_F9 -> GLFW_KEY_F9
          case 0x79:return 299; // DOM_VK_F10 -> GLFW_KEY_F10
          case 0x7A:return 300; // DOM_VK_F11 -> GLFW_KEY_F11
          case 0x7B:return 301; // DOM_VK_F12 -> GLFW_KEY_F12
          case 0x7C:return 302; // DOM_VK_F13 -> GLFW_KEY_F13
          case 0x7D:return 303; // DOM_VK_F14 -> GLFW_KEY_F14
          case 0x7E:return 304; // DOM_VK_F15 -> GLFW_KEY_F15
          case 0x7F:return 305; // DOM_VK_F16 -> GLFW_KEY_F16
          case 0x80:return 306; // DOM_VK_F17 -> GLFW_KEY_F17
          case 0x81:return 307; // DOM_VK_F18 -> GLFW_KEY_F18
          case 0x82:return 308; // DOM_VK_F19 -> GLFW_KEY_F19
          case 0x83:return 309; // DOM_VK_F20 -> GLFW_KEY_F20
          case 0x84:return 310; // DOM_VK_F21 -> GLFW_KEY_F21
          case 0x85:return 311; // DOM_VK_F22 -> GLFW_KEY_F22
          case 0x86:return 312; // DOM_VK_F23 -> GLFW_KEY_F23
          case 0x87:return 313; // DOM_VK_F24 -> GLFW_KEY_F24
          case 0x88:return 314; // 0x88 (not used?) -> GLFW_KEY_F25
          case 0x60:return 320; // DOM_VK_NUMPAD0 -> GLFW_KEY_KP_0
          case 0x61:return 321; // DOM_VK_NUMPAD1 -> GLFW_KEY_KP_1
          case 0x62:return 322; // DOM_VK_NUMPAD2 -> GLFW_KEY_KP_2
          case 0x63:return 323; // DOM_VK_NUMPAD3 -> GLFW_KEY_KP_3
          case 0x64:return 324; // DOM_VK_NUMPAD4 -> GLFW_KEY_KP_4
          case 0x65:return 325; // DOM_VK_NUMPAD5 -> GLFW_KEY_KP_5
          case 0x66:return 326; // DOM_VK_NUMPAD6 -> GLFW_KEY_KP_6
          case 0x67:return 327; // DOM_VK_NUMPAD7 -> GLFW_KEY_KP_7
          case 0x68:return 328; // DOM_VK_NUMPAD8 -> GLFW_KEY_KP_8
          case 0x69:return 329; // DOM_VK_NUMPAD9 -> GLFW_KEY_KP_9
          case 0x6E:return 330; // DOM_VK_DECIMAL -> GLFW_KEY_KP_DECIMAL
          case 0x6F:return 331; // DOM_VK_DIVIDE -> GLFW_KEY_KP_DIVIDE
          case 0x6A:return 332; // DOM_VK_MULTIPLY -> GLFW_KEY_KP_MULTIPLY
          case 0x6D:return 333; // DOM_VK_SUBTRACT -> GLFW_KEY_KP_SUBTRACT
          case 0x6B:return 334; // DOM_VK_ADD -> GLFW_KEY_KP_ADD
          // case 0x0D:return 335; // DOM_VK_RETURN -> GLFW_KEY_KP_ENTER (DOM_KEY_LOCATION_RIGHT)
          // case 0x61:return 336; // DOM_VK_EQUALS -> GLFW_KEY_KP_EQUAL (DOM_KEY_LOCATION_RIGHT)
          case 0x10:return 340; // DOM_VK_SHIFT -> GLFW_KEY_LEFT_SHIFT
          case 0x11:return 341; // DOM_VK_CONTROL -> GLFW_KEY_LEFT_CONTROL
          case 0x12:return 342; // DOM_VK_ALT -> GLFW_KEY_LEFT_ALT
          case 0x5B:return 343; // DOM_VK_WIN -> GLFW_KEY_LEFT_SUPER
          // case 0x10:return 344; // DOM_VK_SHIFT -> GLFW_KEY_RIGHT_SHIFT (DOM_KEY_LOCATION_RIGHT)
          // case 0x11:return 345; // DOM_VK_CONTROL -> GLFW_KEY_RIGHT_CONTROL (DOM_KEY_LOCATION_RIGHT)
          // case 0x12:return 346; // DOM_VK_ALT -> GLFW_KEY_RIGHT_ALT (DOM_KEY_LOCATION_RIGHT)
          // case 0x5B:return 347; // DOM_VK_WIN -> GLFW_KEY_RIGHT_SUPER (DOM_KEY_LOCATION_RIGHT)
          case 0x5D:return 348; // DOM_VK_CONTEXT_MENU -> GLFW_KEY_MENU
  
          // XXX: GLFW_KEY_WORLD_1, GLFW_KEY_WORLD_2 what are these?
          default:return -1; // GLFW_KEY_UNKNOWN
        };
      },getModBits:function (win) {
        var mod = 0;
        if (win.keys[340]) mod |= 0x0001; // GLFW_MOD_SHIFT
        if (win.keys[341]) mod |= 0x0002; // GLFW_MOD_CONTROL
        if (win.keys[342]) mod |= 0x0004; // GLFW_MOD_ALT
        if (win.keys[343]) mod |= 0x0008; // GLFW_MOD_SUPER
        return mod;
      },onKeyPress:function (event) {
        if (!GLFW.active || !GLFW.active.charFunc) return;
  
        // correct unicode charCode is only available with onKeyPress event
        var charCode = event.charCode;
        if (charCode == 0 || (charCode >= 0x00 && charCode <= 0x1F)) return;
  
        Runtime.dynCall('vii', GLFW.active.charFunc, [charCode, 1]);
  
      },onKeyChanged:function (event, status) {
        if (!GLFW.active) return;
  
        var key = GLFW.DOMToGLFWKeyCode(event.keyCode);
        if (key == -1) return;
  
        GLFW.active.keys[key] = status;
        if (!GLFW.active.keyFunc) return;
  
        Runtime.dynCall('vii', GLFW.active.keyFunc, [key, status]);
  
      },onKeydown:function (event) {
        GLFW.onKeyChanged(event, 1); // GLFW_PRESS
  
        // This logic comes directly from the sdl implementation. We cannot
        // call preventDefault on all keydown events otherwise onKeyPress will
        // not get called
        if (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */) {
          event.preventDefault();
        }
      },onKeyup:function (event) {
        GLFW.onKeyChanged(event, 0); // GLFW_RELEASE
      },onMousemove:function (event) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorPosFunc) return;
  
        Runtime.dynCall('vii', GLFW.active.cursorPosFunc, [Browser.mouseX, Browser.mouseY]);
  
      },onMouseButtonChanged:function (event, status) {
        if (!GLFW.active || !GLFW.active.mouseButtonFunc) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"]) return;
  
        if (status == 1) { // GLFW_PRESS
          try {
            event.target.setCapture();
          } catch (e) {}
        }
  
        // DOM and glfw have different button codes
        var eventButton = event['button'];
        if (eventButton > 0) {
          if (eventButton == 1) {
            eventButton = 2;
          } else {
            eventButton = 1;
          }
        }
  
        Runtime.dynCall('vii', GLFW.active.mouseButtonFunc, [eventButton, status]);
  
      },onMouseButtonDown:function (event) {
        if (!GLFW.active) return;
        GLFW.active.buttons |= (1 << event['button']);
        GLFW.onMouseButtonChanged(event, 1); // GLFW_PRESS
      },onMouseButtonUp:function (event) {
        if (!GLFW.active) return;
        GLFW.active.buttons &= ~(1 << event['button']);
        GLFW.onMouseButtonChanged(event, 0); // GLFW_RELEASE
      },onMouseWheel:function (event) {
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
        GLFW.wheelPos += delta;
  
        if (!GLFW.active || !GLFW.active.scrollFunc || event.target != Module['canvas']) return;
  
        Runtime.dynCall('vi', GLFW.active.scrollFunc, [GLFW.wheelPos]);
  
  
        event.preventDefault();
      },onFullScreenEventChange:function () {
        if (!GLFW.active) return;
  
        if (document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          GLFW.active.storedX = GLFW.active.x;
          GLFW.active.storedY = GLFW.active.y;
          GLFW.active.storedWidth = GLFW.active.width;
          GLFW.active.storedHeight = GLFW.active.height;
          GLFW.active.x = GLFW.active.y = 0;
          GLFW.active.width = screen.width;
          GLFW.active.height = screen.height;
        } else {
          GLFW.active.x = GLFW.active.storedX;
          GLFW.active.y = GLFW.active.storedY;
          GLFW.active.width = GLFW.active.storedWidth;
          GLFW.active.height = GLFW.active.storedHeight;
        }
  
        Browser.setCanvasSize(GLFW.active.width, GLFW.active.height, true); // resets the canvas size to counter the aspect preservation of Browser.updateCanvasDimensions
  
        if (!GLFW.active.windowSizeFunc) return;
  
        Runtime.dynCall('vii', GLFW.active.windowSizeFunc, [GLFW.active.width, GLFW.active.height]);
  
      },requestFullScreen:function () {
        var RFS = Module["canvas"]['requestFullscreen'] ||
                  Module["canvas"]['requestFullScreen'] ||
                  Module["canvas"]['mozRequestFullScreen'] ||
                  Module["canvas"]['webkitRequestFullScreen'] ||
                  (function() {});
        RFS.apply(Module["canvas"], []);
      },cancelFullScreen:function () {
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
      },getTime:function () {
        return _emscripten_get_now() / 1000;
      },setWindowTitle:function (winid, title) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        win.title = Pointer_stringify(title);
        if (GLFW.active.id == win.id) {
          document.title = win.title;
        }
      },setKeyCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.keyFunc = cbfun;
      },setCharCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.charFunc = cbfun;
      },setMouseButtonCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.mouseButtonFunc = cbfun;
      },setCursorPosCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.cursorPosFunc = cbfun;
      },setScrollCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.scrollFunc = cbfun;
      },setWindowSizeCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowSizeFunc = cbfun;
      },setWindowCloseCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowCloseFunc = cbfun;
      },setWindowRefreshCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowRefreshFunc = cbfun;
      },getKey:function (winid, key) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return win.keys[key];
      },getMouseButton:function (winid, button) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return (win.buttons & (1 << button)) > 0;
      },getCursorPos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'double');
        setValue(y, Browser.mouseY, 'double');
      },getMousePos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'i32');
        setValue(y, Browser.mouseY, 'i32');
      },setCursorPos:function (winid, x, y) {
      },getWindowPos:function (winid, x, y) {
        var wx = 0;
        var wy = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          wx = win.x;
          wy = win.y;
        }
  
        setValue(x, wx, 'i32');
        setValue(y, wy, 'i32');
      },setWindowPos:function (winid, x, y) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.x = x;
        win.y = y;
      },getWindowSize:function (winid, width, height) {
        var ww = 0;
        var wh = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          ww = win.width;
          wh = win.height;
        }
  
        setValue(width, ww, 'i32');
        setValue(height, wh, 'i32');
      },setWindowSize:function (winid, width, height) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (GLFW.active.id == win.id) {
          if (width == screen.width && height == screen.height) {
            GLFW.requestFullScreen();
          } else {
            GLFW.cancelFullScreen();
            Browser.setCanvasSize(width, height);
            win.width = width;
            win.height = height;
          }
        }
  
        if (!win.windowResizeFunc) return;
  
        Runtime.dynCall('vii', win.windowResizeFunc, [width, height]);
  
      },createWindow:function (width, height, title, monitor, share) {
        var i, id;
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] !== null; i++);
        if (i > 0) throw "glfwCreateWindow only supports one window at time currently";
  
        // id for window
        id = i + 1;
  
        // not valid
        if (width <= 0 || height <= 0) return 0;
  
        if (monitor) {
          GLFW.requestFullScreen();
        } else {
          Browser.setCanvasSize(width, height);
        }
  
        // Create context when there are no existing alive windows
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] == null; i++);
        if (i == GLFW.windows.length) {
          var contextAttributes = {
            antialias: (GLFW.hints[0x0002100D] > 1), // GLFW_SAMPLES
            depth: (GLFW.hints[0x00021005] > 0),     // GLFW_DEPTH_BITS
            stencil: (GLFW.hints[0x00021006] > 0)    // GLFW_STENCIL_BITS
          }
          Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
        }
  
        // If context creation failed, do not return a valid window
        if (!Module.ctx) return 0;
  
        // Get non alive id
        var win = new GLFW.Window(id, width, height, title, monitor, share);
  
        // Set window to array
        if (id - 1 == GLFW.windows.length) {
          GLFW.windows.push(win);
        } else {
          GLFW.windows[id - 1] = win;
        }
  
        GLFW.active = win;
        return win.id;
      },destroyWindow:function (winid) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
  
        GLFW.windows[win.id - 1] = null;
        if (GLFW.active.id == win.id)
          GLFW.active = null;
  
        // Destroy context when no alive windows
        for (var i = 0; i < GLFW.windows.length; i++)
          if (GLFW.windows[i] !== null) return;
  
        Module.ctx = Browser.destroyContext(Module['canvas'], true, true);
      },swapBuffers:function (winid) {
      },GLFW2ParamToGLFW3Param:function (param) {
        table = {
          0x00030001:0, // GLFW_MOUSE_CURSOR
          0x00030002:0, // GLFW_STICKY_KEYS
          0x00030003:0, // GLFW_STICKY_MOUSE_BUTTONS
          0x00030004:0, // GLFW_SYSTEM_KEYS
          0x00030005:0, // GLFW_KEY_REPEAT
          0x00030006:0, // GLFW_AUTO_POLL_EVENTS
          0x00020001:0, // GLFW_OPENED
          0x00020002:0, // GLFW_ACTIVE
          0x00020003:0, // GLFW_ICONIFIED
          0x00020004:0, // GLFW_ACCELERATED
          0x00020005:0x00021001, // GLFW_RED_BITS
          0x00020006:0x00021002, // GLFW_GREEN_BITS
          0x00020007:0x00021003, // GLFW_BLUE_BITS
          0x00020008:0x00021004, // GLFW_ALPHA_BITS
          0x00020009:0x00021005, // GLFW_DEPTH_BITS
          0x0002000A:0x00021006, // GLFW_STENCIL_BITS
          0x0002000B:0x0002100F, // GLFW_REFRESH_RATE
          0x0002000C:0x00021007, // GLFW_ACCUM_RED_BITS
          0x0002000D:0x00021008, // GLFW_ACCUM_GREEN_BITS
          0x0002000E:0x00021009, // GLFW_ACCUM_BLUE_BITS
          0x0002000F:0x0002100A, // GLFW_ACCUM_ALPHA_BITS
          0x00020010:0x0002100B, // GLFW_AUX_BUFFERS
          0x00020011:0x0002100C, // GLFW_STEREO
          0x00020012:0, // GLFW_WINDOW_NO_RESIZE
          0x00020013:0x0002100D, // GLFW_FSAA_SAMPLES
          0x00020014:0x00022002, // GLFW_OPENGL_VERSION_MAJOR
          0x00020015:0x00022003, // GLFW_OPENGL_VERSION_MINOR
          0x00020016:0x00022006, // GLFW_OPENGL_FORWARD_COMPAT
          0x00020017:0x00022007, // GLFW_OPENGL_DEBUG_CONTEXT
          0x00020018:0x00022008, // GLFW_OPENGL_PROFILE
        };
        return table[param];
      }};function _glfwTerminate() {
      window.removeEventListener("keydown", GLFW.onKeydown, true);
      window.removeEventListener("keypress", GLFW.onKeyPress, true);
      window.removeEventListener("keyup", GLFW.onKeyup, true);
      Module["canvas"].removeEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].removeEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].removeEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].removeEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].width = Module["canvas"].height = 1;
      GLFW.windows = null;
      GLFW.active = null;
    }

  
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  var _sqrtf=Math_sqrt;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  var _emscripten_postinvoke=true;

  
  var PTHREAD_SPECIFIC={};
  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _glClear(x0) { GLctx.clear(x0) }

  function _glfwGetTime() {
      return GLFW.getTime() - GLFW.initialTime;
    }

  function _glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
  
      GLctx.bindBuffer(target, bufferObj);
    }

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~02000000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  
  var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _glfwOpenWindow(width, height, redbits, greenbits, bluebits, alphabits, depthbits, stencilbits, mode) {
      GLFW.hints[0x00021001] = redbits;     // GLFW_RED_BITS
      GLFW.hints[0x00021002] = greenbits;   // GLFW_GREEN_BITS
      GLFW.hints[0x00021003] = bluebits;    // GLFW_BLUE_BITS
      GLFW.hints[0x00021004] = alphabits;   // GLFW_ALPHA_BITS
      GLFW.hints[0x00021005] = depthbits;   // GLFW_DEPTH_BITS
      GLFW.hints[0x00021006] = stencilbits; // GLFW_STENCIL_BITS
      GLFW.createWindow(width, height, "GLFW2 Window", 0, 0);
      return 1; // GL_TRUE
    }

  function _glUniform3fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[2];
        view[0] = HEAPF32[((value)>>2)];
        view[1] = HEAPF32[(((value)+(4))>>2)];
        view[2] = HEAPF32[(((value)+(8))>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*12)>>2);
      }
      GLctx.uniform3fv(location, view);
    }

  function _glBufferData(target, size, data, usage) {
      switch (usage) { // fix usages, WebGL only has *_DRAW
        case 0x88E1: // GL_STREAM_READ
        case 0x88E2: // GL_STREAM_COPY
          usage = 0x88E0; // GL_STREAM_DRAW
          break;
        case 0x88E5: // GL_STATIC_READ
        case 0x88E6: // GL_STATIC_COPY
          usage = 0x88E4; // GL_STATIC_DRAW
          break;
        case 0x88E9: // GL_DYNAMIC_READ
        case 0x88EA: // GL_DYNAMIC_COPY
          usage = 0x88E8; // GL_DYNAMIC_DRAW
          break;
      }
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

  var _BDtoIHigh=true;

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _pthread_cond_broadcast() {
      return 0;
    }

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _pthread_mutex_unlock() {}

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  var _emscripten_landingpad=true;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  function ___cxa_guard_abort() {}

  var _tanf=Math_tan;

  var _emscripten_preinvoke=true;

  function ___gxx_personality_v0() {
    }

  function _glfwInit() {
      if (GLFW.windows) return 1; // GL_TRUE
  
      GLFW.initialTime = GLFW.getTime();
      GLFW.hints = GLFW.defaultHints;
      GLFW.windows = new Array()
      GLFW.active = null;
  
      window.addEventListener("keydown", GLFW.onKeydown, true);
      window.addEventListener("keypress", GLFW.onKeyPress, true);
      window.addEventListener("keyup", GLFW.onKeyup, true);
      Module["canvas"].addEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].addEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].addEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mousewheel', GLFW.onMouseWheel, true);
  
      Browser.resizeListeners.push(function(width, height) {
         GLFW.onFullScreenEventChange();
      });
      return 1; // GL_TRUE
    }

  function _pthread_cond_wait() {
      return 0;
    }

  function _glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var texture = GLctx.createTexture();
        if (!texture) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */); // GLES + EGL specs don't specify what should happen here, so best to issue an error and create IDs with 0.
          while(i < n) HEAP32[(((textures)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.textures);
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  function _glTexParameteri(x0, x1, x2) { GLctx.texParameteri(x0, x1, x2) }

  function ___cxa_guard_release() {}

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  var _cosf=Math_cos;

  function _glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  
  
  function emscriptenWebGLComputeImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return Math.floor((x + y - 1) / y) * y
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return (height <= 0) ? 0 :
               ((height - 1) * alignedRowSize + plainRowSize);
    }function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var sizePerPixel;
      var numChannels;
      switch(format) {
        case 0x1906 /* GL_ALPHA */:
        case 0x1909 /* GL_LUMINANCE */:
        case 0x1902 /* GL_DEPTH_COMPONENT */:
        case 0x1903 /* GL_RED */:
          numChannels = 1;
          break;
        case 0x190A /* GL_LUMINANCE_ALPHA */:
        case 0x8227 /* GL_RG */:
          numChannels = 2;
          break;
        case 0x1907 /* GL_RGB */:
        case 0x8C40 /* GL_SRGB_EXT */:
          numChannels = 3;
          break;
        case 0x1908 /* GL_RGBA */:
        case 0x8C42 /* GL_SRGB_ALPHA_EXT */:
          numChannels = 4;
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return {
            pixels: null,
            internalFormat: 0x0
          };
      }
      switch (type) {
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          sizePerPixel = numChannels*1;
          break;
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
          sizePerPixel = numChannels*2;
          break;
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x1406 /* GL_FLOAT */:
          sizePerPixel = numChannels*4;
          break;
        case 0x84FA /* UNSIGNED_INT_24_8_WEBGL/UNSIGNED_INT_24_8 */:
          sizePerPixel = 4;
          break;
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
          sizePerPixel = 2;
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return {
            pixels: null,
            internalFormat: 0x0
          };
      }
      var bytes = emscriptenWebGLComputeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      if (type == 0x1401 /* GL_UNSIGNED_BYTE */) {
        pixels = HEAPU8.subarray((pixels),(pixels+bytes));
      } else if (type == 0x1406 /* GL_FLOAT */) {
        pixels = HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
      } else if (type == 0x1405 /* GL_UNSIGNED_INT */ || type == 0x84FA /* UNSIGNED_INT_24_8_WEBGL */) {
        pixels = HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
      } else {
        pixels = HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
      }
      return {
        pixels: pixels,
        internalFormat: internalFormat
      };
    }function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      var pixelData;
      if (pixels) {
        var data = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat);
        pixelData = data.pixels;
        internalFormat = data.internalFormat;
      } else {
        pixelData = null;
      }
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixelData);
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _glfwCloseWindow() {
      GLFW.destroyWindow(GLFW.active.id);
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, normalized, stride, ptr);
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }


  function _glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  function ___lock() {}

  function ___unlock() {}

  function _glUniformMatrix3fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[8];
        for (var i = 0; i < 9; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*36)>>2);
      }
      GLctx.uniformMatrix3fv(location, transpose, view);
    }

  function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  function _glEnable(x0) { GLctx.enable(x0) }

  var _fabs=Math_abs;

  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      var ptr = EXCEPTIONS.caught.pop();
      EXCEPTIONS.last = ptr;
      throw ptr;
    }

  function _glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx.createBuffer();
        if (!buffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((buffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.buffers);
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  var _sin=Math_sin;

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  
  var JSEvents={keyEvent:0,mouseEvent:0,wheelEvent:0,uiEvent:0,focusEvent:0,deviceOrientationEvent:0,deviceMotionEvent:0,fullscreenChangeEvent:0,pointerlockChangeEvent:0,visibilityChangeEvent:0,touchEvent:0,previousFullscreenElement:null,previousScreenX:null,previousScreenY:null,removeEventListenersRegistered:false,registerRemoveEventListeners:function () {
        if (!JSEvents.removeEventListenersRegistered) {
        __ATEXIT__.push(function() {
            for(var i = JSEvents.eventHandlers.length-1; i >= 0; --i) {
              JSEvents._removeHandler(i);
            }
           });
          JSEvents.removeEventListenersRegistered = true;
        }
      },findEventTarget:function (target) {
        if (target) {
          if (typeof target == "number") {
            target = Pointer_stringify(target);
          }
          if (target == '#window') return window;
          else if (target == '#document') return document;
          else if (target == '#screen') return window.screen;
          else if (target == '#canvas') return Module['canvas'];
  
          if (typeof target == 'string') return document.getElementById(target);
          else return target;
        } else {
          // The sensible target varies between events, but use window as the default
          // since DOM events mostly can default to that. Specific callback registrations
          // override their own defaults.
          return window;
        }
      },deferredCalls:[],deferCall:function (targetFunction, precedence, argsList) {
        function arraysHaveEqualContent(arrA, arrB) {
          if (arrA.length != arrB.length) return false;
  
          for(var i in arrA) {
            if (arrA[i] != arrB[i]) return false;
          }
          return true;
        }
        // Test if the given call was already queued, and if so, don't add it again.
        for(var i in JSEvents.deferredCalls) {
          var call = JSEvents.deferredCalls[i];
          if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
            return;
          }
        }
        JSEvents.deferredCalls.push({
          targetFunction: targetFunction,
          precedence: precedence,
          argsList: argsList
        });
  
        JSEvents.deferredCalls.sort(function(x,y) { return x.precedence < y.precedence; });
      },removeDeferredCalls:function (targetFunction) {
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
            JSEvents.deferredCalls.splice(i, 1);
            --i;
          }
        }
      },canPerformEventHandlerRequests:function () {
        return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
      },runDeferredCalls:function () {
        if (!JSEvents.canPerformEventHandlerRequests()) {
          return;
        }
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          var call = JSEvents.deferredCalls[i];
          JSEvents.deferredCalls.splice(i, 1);
          --i;
          call.targetFunction.apply(this, call.argsList);
        }
      },inEventHandler:0,currentEventHandler:null,eventHandlers:[],isInternetExplorer:function () { return navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') > 0; },removeAllHandlersOnTarget:function (target, eventTypeString) {
        for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
          if (JSEvents.eventHandlers[i].target == target && 
            (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
             JSEvents._removeHandler(i--);
           }
        }
      },_removeHandler:function (i) {
        var h = JSEvents.eventHandlers[i];
        h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
        JSEvents.eventHandlers.splice(i, 1);
      },registerOrRemoveHandler:function (eventHandler) {
        var jsEventHandler = function jsEventHandler(event) {
          // Increment nesting count for the event handler.
          ++JSEvents.inEventHandler;
          JSEvents.currentEventHandler = eventHandler;
          // Process any old deferred calls the user has placed.
          JSEvents.runDeferredCalls();
          // Process the actual event, calls back to user C code handler.
          eventHandler.handlerFunc(event);
          // Process any new deferred calls that were placed right now from this event handler.
          JSEvents.runDeferredCalls();
          // Out of event handler - restore nesting count.
          --JSEvents.inEventHandler;
        }
        
        if (eventHandler.callbackfunc) {
          eventHandler.eventListenerFunc = jsEventHandler;
          eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
          JSEvents.eventHandlers.push(eventHandler);
          JSEvents.registerRemoveEventListeners();
        } else {
          for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
            if (JSEvents.eventHandlers[i].target == eventHandler.target
             && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
               JSEvents._removeHandler(i--);
             }
          }
        }
      },registerKeyEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.keyEvent) {
          JSEvents.keyEvent = _malloc( 164 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
          writeStringToMemory(e.key ? e.key : "", JSEvents.keyEvent + 0 );
          writeStringToMemory(e.code ? e.code : "", JSEvents.keyEvent + 32 );
          HEAP32[(((JSEvents.keyEvent)+(64))>>2)]=e.location;
          HEAP32[(((JSEvents.keyEvent)+(68))>>2)]=e.ctrlKey;
          HEAP32[(((JSEvents.keyEvent)+(72))>>2)]=e.shiftKey;
          HEAP32[(((JSEvents.keyEvent)+(76))>>2)]=e.altKey;
          HEAP32[(((JSEvents.keyEvent)+(80))>>2)]=e.metaKey;
          HEAP32[(((JSEvents.keyEvent)+(84))>>2)]=e.repeat;
          writeStringToMemory(e.locale ? e.locale : "", JSEvents.keyEvent + 88 );
          writeStringToMemory(e.char ? e.char : "", JSEvents.keyEvent + 120 );
          HEAP32[(((JSEvents.keyEvent)+(152))>>2)]=e.charCode;
          HEAP32[(((JSEvents.keyEvent)+(156))>>2)]=e.keyCode;
          HEAP32[(((JSEvents.keyEvent)+(160))>>2)]=e.which;
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.keyEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: JSEvents.isInternetExplorer() ? false : true, // MSIE doesn't allow fullscreen and pointerlock requests from key handlers, others do.
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },getBoundingClientRectOrZeros:function (target) {
        return target.getBoundingClientRect ? target.getBoundingClientRect() : { left: 0, top: 0 };
      },fillMouseEventData:function (eventStruct, e, target) {
        HEAPF64[((eventStruct)>>3)]=JSEvents.tick();
        HEAP32[(((eventStruct)+(8))>>2)]=e.screenX;
        HEAP32[(((eventStruct)+(12))>>2)]=e.screenY;
        HEAP32[(((eventStruct)+(16))>>2)]=e.clientX;
        HEAP32[(((eventStruct)+(20))>>2)]=e.clientY;
        HEAP32[(((eventStruct)+(24))>>2)]=e.ctrlKey;
        HEAP32[(((eventStruct)+(28))>>2)]=e.shiftKey;
        HEAP32[(((eventStruct)+(32))>>2)]=e.altKey;
        HEAP32[(((eventStruct)+(36))>>2)]=e.metaKey;
        HEAP16[(((eventStruct)+(40))>>1)]=e.button;
        HEAP16[(((eventStruct)+(42))>>1)]=e.buttons;
        HEAP32[(((eventStruct)+(44))>>2)]=e["movementX"] || e["mozMovementX"] || e["webkitMovementX"] || (e.screenX-JSEvents.previousScreenX);
        HEAP32[(((eventStruct)+(48))>>2)]=e["movementY"] || e["mozMovementY"] || e["webkitMovementY"] || (e.screenY-JSEvents.previousScreenY);
  
        if (Module['canvas']) {
          var rect = Module['canvas'].getBoundingClientRect();
          HEAP32[(((eventStruct)+(60))>>2)]=e.clientX - rect.left;
          HEAP32[(((eventStruct)+(64))>>2)]=e.clientY - rect.top;
        } else { // Canvas is not initialized, return 0.
          HEAP32[(((eventStruct)+(60))>>2)]=0;
          HEAP32[(((eventStruct)+(64))>>2)]=0;
        }
        if (target) {
          var rect = JSEvents.getBoundingClientRectOrZeros(target);
          HEAP32[(((eventStruct)+(52))>>2)]=e.clientX - rect.left;
          HEAP32[(((eventStruct)+(56))>>2)]=e.clientY - rect.top;        
        } else { // No specific target passed, return 0.
          HEAP32[(((eventStruct)+(52))>>2)]=0;
          HEAP32[(((eventStruct)+(56))>>2)]=0;
        }
        JSEvents.previousScreenX = e.screenX;
        JSEvents.previousScreenY = e.screenY;
      },registerMouseEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.mouseEvent) {
          JSEvents.mouseEvent = _malloc( 72 );
        }
        target = JSEvents.findEventTarget(target);
        var handlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.mouseEvent, e, target);
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.mouseEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: eventTypeString != 'mousemove' && eventTypeString != 'mouseenter' && eventTypeString != 'mouseleave', // Mouse move events do not allow fullscreen/pointer lock requests to be handled in them!
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        // In IE, mousedown events don't either allow deferred calls to be run!
        if (JSEvents.isInternetExplorer() && eventTypeString == 'mousedown') eventHandler.allowsDeferredCalls = false;
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerWheelEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.wheelEvent) {
          JSEvents.wheelEvent = _malloc( 104 );
        }
        target = JSEvents.findEventTarget(target);
        // The DOM Level 3 events spec event 'wheel'
        var wheelHandlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
          HEAPF64[(((JSEvents.wheelEvent)+(72))>>3)]=e["deltaX"];
          HEAPF64[(((JSEvents.wheelEvent)+(80))>>3)]=e["deltaY"];
          HEAPF64[(((JSEvents.wheelEvent)+(88))>>3)]=e["deltaZ"];
          HEAP32[(((JSEvents.wheelEvent)+(96))>>2)]=e["deltaMode"];
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.wheelEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
        // The 'mousewheel' event as implemented in Safari 6.0.5
        var mouseWheelHandlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
          HEAPF64[(((JSEvents.wheelEvent)+(72))>>3)]=e["wheelDeltaX"];
          HEAPF64[(((JSEvents.wheelEvent)+(80))>>3)]=-e["wheelDeltaY"] /* Invert to unify direction with the DOM Level 3 wheel event. */;
          HEAPF64[(((JSEvents.wheelEvent)+(88))>>3)]=0 /* Not available */;
          HEAP32[(((JSEvents.wheelEvent)+(96))>>2)]=0 /* DOM_DELTA_PIXEL */;
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.wheelEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: true,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: (eventTypeString == 'wheel') ? wheelHandlerFunc : mouseWheelHandlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },pageScrollPos:function () {
        if (window.pageXOffset > 0 || window.pageYOffset > 0) {
          return [window.pageXOffset, window.pageYOffset];
        }
        if (typeof document.documentElement.scrollLeft !== 'undefined' || typeof document.documentElement.scrollTop !== 'undefined') {
          return [document.documentElement.scrollLeft, document.documentElement.scrollTop];
        }
        return [document.body.scrollLeft|0, document.body.scrollTop|0];
      },registerUiEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.uiEvent) {
          JSEvents.uiEvent = _malloc( 36 );
        }
  
        if (eventTypeString == "scroll" && !target) {
          target = document; // By default read scroll events on document rather than window.
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
          if (e.target != target) {
            // Never take ui events such as scroll via a 'bubbled' route, but always from the direct element that
            // was targeted. Otherwise e.g. if app logs a message in response to a page scroll, the Emscripten log
            // message box could cause to scroll, generating a new (bubbled) scroll message, causing a new log print,
            // causing a new scroll, etc..
            return;
          }
          var scrollPos = JSEvents.pageScrollPos();
          HEAP32[((JSEvents.uiEvent)>>2)]=e.detail;
          HEAP32[(((JSEvents.uiEvent)+(4))>>2)]=document.body.clientWidth;
          HEAP32[(((JSEvents.uiEvent)+(8))>>2)]=document.body.clientHeight;
          HEAP32[(((JSEvents.uiEvent)+(12))>>2)]=window.innerWidth;
          HEAP32[(((JSEvents.uiEvent)+(16))>>2)]=window.innerHeight;
          HEAP32[(((JSEvents.uiEvent)+(20))>>2)]=window.outerWidth;
          HEAP32[(((JSEvents.uiEvent)+(24))>>2)]=window.outerHeight;
          HEAP32[(((JSEvents.uiEvent)+(28))>>2)]=scrollPos[0];
          HEAP32[(((JSEvents.uiEvent)+(32))>>2)]=scrollPos[1];
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.uiEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false, // Neither scroll or resize events allow running requests inside them.
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },getNodeNameForTarget:function (target) {
        if (!target) return '';
        if (target == window) return '#window';
        if (target == window.screen) return '#screen';
        return (target && target.nodeName) ? target.nodeName : '';
      },registerFocusEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.focusEvent) {
          JSEvents.focusEvent = _malloc( 256 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var nodeName = JSEvents.getNodeNameForTarget(e.target);
          var id = e.target.id ? e.target.id : '';
          writeStringToMemory(nodeName, JSEvents.focusEvent + 0 );
          writeStringToMemory(id, JSEvents.focusEvent + 128 );
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.focusEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },tick:function () {
        if (window['performance'] && window['performance']['now']) return window['performance']['now']();
        else return Date.now();
      },registerDeviceOrientationEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.deviceOrientationEvent) {
          JSEvents.deviceOrientationEvent = _malloc( 40 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          HEAPF64[((JSEvents.deviceOrientationEvent)>>3)]=JSEvents.tick();
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(8))>>3)]=e.alpha;
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(16))>>3)]=e.beta;
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(24))>>3)]=e.gamma;
          HEAP32[(((JSEvents.deviceOrientationEvent)+(32))>>2)]=e.absolute;
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.deviceOrientationEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerDeviceMotionEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.deviceMotionEvent) {
          JSEvents.deviceMotionEvent = _malloc( 80 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          HEAPF64[((JSEvents.deviceOrientationEvent)>>3)]=JSEvents.tick();
          HEAPF64[(((JSEvents.deviceMotionEvent)+(8))>>3)]=e.acceleration.x;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(16))>>3)]=e.acceleration.y;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(24))>>3)]=e.acceleration.z;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(32))>>3)]=e.accelerationIncludingGravity.x;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(40))>>3)]=e.accelerationIncludingGravity.y;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(48))>>3)]=e.accelerationIncludingGravity.z;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(56))>>3)]=e.rotationRate.alpha;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(64))>>3)]=e.rotationRate.beta;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(72))>>3)]=e.rotationRate.gamma;
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.deviceMotionEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },screenOrientation:function () {
        if (!window.screen) return undefined;
        return window.screen.orientation || window.screen.mozOrientation || window.screen.webkitOrientation || window.screen.msOrientation;
      },fillOrientationChangeEventData:function (eventStruct, e) {
        var orientations  = ["portrait-primary", "portrait-secondary", "landscape-primary", "landscape-secondary"];
        var orientations2 = ["portrait",         "portrait",           "landscape",         "landscape"];
  
        var orientationString = JSEvents.screenOrientation();
        var orientation = orientations.indexOf(orientationString);
        if (orientation == -1) {
          orientation = orientations2.indexOf(orientationString);
        }
  
        HEAP32[((eventStruct)>>2)]=1 << orientation;
        HEAP32[(((eventStruct)+(4))>>2)]=window.orientation;
      },registerOrientationChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.orientationChangeEvent) {
          JSEvents.orientationChangeEvent = _malloc( 8 );
        }
  
        if (!target) {
          target = window.screen; // Orientation events need to be captured from 'window.screen' instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillOrientationChangeEventData(JSEvents.orientationChangeEvent, e);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.orientationChangeEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        if (eventTypeString == "orientationchange" && window.screen.mozOrientation !== undefined) {
          eventTypeString = "mozorientationchange";
        }
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },fullscreenEnabled:function () {
        return document.fullscreenEnabled || document.mozFullscreenEnabled || document.mozFullScreenEnabled || document.webkitFullscreenEnabled || document.msFullscreenEnabled;
      },fillFullscreenChangeEventData:function (eventStruct, e) {
        var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
        var isFullscreen = !!fullscreenElement;
        HEAP32[((eventStruct)>>2)]=isFullscreen;
        HEAP32[(((eventStruct)+(4))>>2)]=JSEvents.fullscreenEnabled();
        // If transitioning to fullscreen, report info about the element that is now fullscreen.
        // If transitioning to windowed mode, report info about the element that just was fullscreen.
        var reportedElement = isFullscreen ? fullscreenElement : JSEvents.previousFullscreenElement;
        var nodeName = JSEvents.getNodeNameForTarget(reportedElement);
        var id = (reportedElement && reportedElement.id) ? reportedElement.id : '';
        writeStringToMemory(nodeName, eventStruct + 8 );
        writeStringToMemory(id, eventStruct + 136 );
        HEAP32[(((eventStruct)+(264))>>2)]=reportedElement ? reportedElement.clientWidth : 0;
        HEAP32[(((eventStruct)+(268))>>2)]=reportedElement ? reportedElement.clientHeight : 0;
        HEAP32[(((eventStruct)+(272))>>2)]=screen.width;
        HEAP32[(((eventStruct)+(276))>>2)]=screen.height;
        if (isFullscreen) {
          JSEvents.previousFullscreenElement = fullscreenElement;
        }
      },registerFullscreenChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.fullscreenChangeEvent) {
          JSEvents.fullscreenChangeEvent = _malloc( 280 );
        }
  
        if (!target) {
          target = document; // Fullscreen change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillFullscreenChangeEventData(JSEvents.fullscreenChangeEvent, e);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.fullscreenChangeEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },resizeCanvasForFullscreen:function (target, strategy) {
        var restoreOldStyle = __registerRestoreOldStyle(target);
        var cssWidth = strategy.softFullscreen ? window.innerWidth : screen.width;
        var cssHeight = strategy.softFullscreen ? window.innerHeight : screen.height;
        var rect = target.getBoundingClientRect();
        var windowedCssWidth = rect.right - rect.left;
        var windowedCssHeight = rect.bottom - rect.top;
        var windowedRttWidth = target.width;
        var windowedRttHeight = target.height;
  
        if (strategy.scaleMode == 3) {
          __setLetterbox(target, (cssHeight - windowedCssHeight) / 2, (cssWidth - windowedCssWidth) / 2);
          cssWidth = windowedCssWidth;
          cssHeight = windowedCssHeight;
        } else if (strategy.scaleMode == 2) {
          if (cssWidth*windowedRttHeight < windowedRttWidth*cssHeight) {
            var desiredCssHeight = windowedRttHeight * cssWidth / windowedRttWidth;
            __setLetterbox(target, (cssHeight - desiredCssHeight) / 2, 0);
            cssHeight = desiredCssHeight;
          } else {
            var desiredCssWidth = windowedRttWidth * cssHeight / windowedRttHeight;
            __setLetterbox(target, 0, (cssWidth - desiredCssWidth) / 2);
            cssWidth = desiredCssWidth;
          }
        }
  
        // If we are adding padding, must choose a background color or otherwise Chrome will give the
        // padding a default white color. Do it only if user has not customized their own background color.
        if (!target.style.backgroundColor) target.style.backgroundColor = 'black';
        // IE11 does the same, but requires the color to be set in the document body.
        if (!document.body.style.backgroundColor) document.body.style.backgroundColor = 'black'; // IE11
        // Firefox always shows black letterboxes independent of style color.
  
        target.style.width = cssWidth + 'px';
        target.style.height = cssHeight + 'px';
  
        if (strategy.filteringMode == 1) {
          target.style.imageRendering = 'optimizeSpeed';
          target.style.imageRendering = '-moz-crisp-edges';
          target.style.imageRendering = '-o-crisp-edges';
          target.style.imageRendering = '-webkit-optimize-contrast';
          target.style.imageRendering = 'optimize-contrast';
          target.style.imageRendering = 'crisp-edges';
          target.style.imageRendering = 'pixelated';
        }
  
        var dpiScale = (strategy.canvasResolutionScaleMode == 2) ? window.devicePixelRatio : 1;
        if (strategy.canvasResolutionScaleMode != 0) {
          target.width = cssWidth * dpiScale;
          target.height = cssHeight * dpiScale;
          if (target.GLctxObject) target.GLctxObject.GLctx.viewport(0, 0, target.width, target.height);
        }
        return restoreOldStyle;
      },requestFullscreen:function (target, strategy) {
        // EMSCRIPTEN_FULLSCREEN_SCALE_DEFAULT + EMSCRIPTEN_FULLSCREEN_CANVAS_SCALE_NONE is a mode where no extra logic is performed to the DOM elements.
        if (strategy.scaleMode != 0 || strategy.canvasResolutionScaleMode != 0) {
          JSEvents.resizeCanvasForFullscreen(target, strategy);
        }
  
        if (target.requestFullscreen) {
          target.requestFullscreen();
        } else if (target.msRequestFullscreen) {
          target.msRequestFullscreen();
        } else if (target.mozRequestFullScreen) {
          target.mozRequestFullScreen();
        } else if (target.mozRequestFullscreen) {
          target.mozRequestFullscreen();
        } else if (target.webkitRequestFullscreen) {
          target.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
        } else {
          if (typeof JSEvents.fullscreenEnabled() === 'undefined') {
            return -1;
          } else {
            return -3;
          }
        }
  
        if (strategy.canvasResizedCallback) {
          Runtime.dynCall('iiii', strategy.canvasResizedCallback, [37, 0, strategy.canvasResizedCallbackUserData]);
        }
  
        return 0;
      },fillPointerlockChangeEventData:function (eventStruct, e) {
        var pointerLockElement = document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement || document.msPointerLockElement;
        var isPointerlocked = !!pointerLockElement;
        HEAP32[((eventStruct)>>2)]=isPointerlocked;
        var nodeName = JSEvents.getNodeNameForTarget(pointerLockElement);
        var id = (pointerLockElement && pointerLockElement.id) ? pointerLockElement.id : '';
        writeStringToMemory(nodeName, eventStruct + 4 );
        writeStringToMemory(id, eventStruct + 132);
      },registerPointerlockChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.pointerlockChangeEvent) {
          JSEvents.pointerlockChangeEvent = _malloc( 260 );
        }
  
        if (!target) {
          target = document; // Pointer lock change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillPointerlockChangeEventData(JSEvents.pointerlockChangeEvent, e);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.pointerlockChangeEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },requestPointerLock:function (target) {
        if (target.requestPointerLock) {
          target.requestPointerLock();
        } else if (target.mozRequestPointerLock) {
          target.mozRequestPointerLock();
        } else if (target.webkitRequestPointerLock) {
          target.webkitRequestPointerLock();
        } else if (target.msRequestPointerLock) {
          target.msRequestPointerLock();
        } else {
          // document.body is known to accept pointer lock, so use that to differentiate if the user passed a bad element,
          // or if the whole browser just doesn't support the feature.
          if (document.body.requestPointerLock || document.body.mozRequestPointerLock || document.body.webkitRequestPointerLock || document.body.msRequestPointerLock) {
            return -3;
          } else {
            return -1;
          }
        }
        return 0;
      },fillVisibilityChangeEventData:function (eventStruct, e) {
        var visibilityStates = [ "hidden", "visible", "prerender", "unloaded" ];
        var visibilityState = visibilityStates.indexOf(document.visibilityState);
  
        HEAP32[((eventStruct)>>2)]=document.hidden;
        HEAP32[(((eventStruct)+(4))>>2)]=visibilityState;
      },registerVisibilityChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.visibilityChangeEvent) {
          JSEvents.visibilityChangeEvent = _malloc( 8 );
        }
  
        if (!target) {
          target = document; // Visibility change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillVisibilityChangeEventData(JSEvents.visibilityChangeEvent, e);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.visibilityChangeEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerTouchEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.touchEvent) {
          JSEvents.touchEvent = _malloc( 1684 );
        }
  
        target = JSEvents.findEventTarget(target);
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var touches = {};
          for(var i = 0; i < e.touches.length; ++i) {
            var touch = e.touches[i];
            touches[touch.identifier] = touch;
          }
          for(var i = 0; i < e.changedTouches.length; ++i) {
            var touch = e.changedTouches[i];
            touches[touch.identifier] = touch;
            touch.changed = true;
          }
          for(var i = 0; i < e.targetTouches.length; ++i) {
            var touch = e.targetTouches[i];
            touches[touch.identifier].onTarget = true;
          }
          
          var ptr = JSEvents.touchEvent;
          HEAP32[(((ptr)+(4))>>2)]=e.ctrlKey;
          HEAP32[(((ptr)+(8))>>2)]=e.shiftKey;
          HEAP32[(((ptr)+(12))>>2)]=e.altKey;
          HEAP32[(((ptr)+(16))>>2)]=e.metaKey;
          ptr += 20; // Advance to the start of the touch array.
          var canvasRect = Module['canvas'] ? Module['canvas'].getBoundingClientRect() : undefined;
          var targetRect = JSEvents.getBoundingClientRectOrZeros(target);
          var numTouches = 0;
          for(var i in touches) {
            var t = touches[i];
            HEAP32[((ptr)>>2)]=t.identifier;
            HEAP32[(((ptr)+(4))>>2)]=t.screenX;
            HEAP32[(((ptr)+(8))>>2)]=t.screenY;
            HEAP32[(((ptr)+(12))>>2)]=t.clientX;
            HEAP32[(((ptr)+(16))>>2)]=t.clientY;
            HEAP32[(((ptr)+(20))>>2)]=t.pageX;
            HEAP32[(((ptr)+(24))>>2)]=t.pageY;
            HEAP32[(((ptr)+(28))>>2)]=t.changed;
            HEAP32[(((ptr)+(32))>>2)]=t.onTarget;
            if (canvasRect) {
              HEAP32[(((ptr)+(44))>>2)]=t.clientX - canvasRect.left;
              HEAP32[(((ptr)+(48))>>2)]=t.clientY - canvasRect.top;
            } else {
              HEAP32[(((ptr)+(44))>>2)]=0;
              HEAP32[(((ptr)+(48))>>2)]=0;            
            }
            HEAP32[(((ptr)+(36))>>2)]=t.clientX - targetRect.left;
            HEAP32[(((ptr)+(40))>>2)]=t.clientY - targetRect.top;
            
            ptr += 52;
  
            if (++numTouches >= 32) {
              break;
            }
          }
          HEAP32[((JSEvents.touchEvent)>>2)]=numTouches;
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.touchEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false, // XXX Currently disabled, see bug https://bugzilla.mozilla.org/show_bug.cgi?id=966493
          // Once the above bug is resolved, enable the following condition if possible:
          // allowsDeferredCalls: eventTypeString == 'touchstart',
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },fillGamepadEventData:function (eventStruct, e) {
        HEAPF64[((eventStruct)>>3)]=e.timestamp;
        for(var i = 0; i < e.axes.length; ++i) {
          HEAPF64[(((eventStruct+i*8)+(16))>>3)]=e.axes[i];
        }
        for(var i = 0; i < e.buttons.length; ++i) {
          if (typeof(e.buttons[i]) === 'object') {
            HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i].value;
          } else {
            HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i];
          }
        }
        for(var i = 0; i < e.buttons.length; ++i) {
          if (typeof(e.buttons[i]) === 'object') {
            HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i].pressed;
          } else {
            HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i] == 1.0;
          }
        }
        HEAP32[(((eventStruct)+(1296))>>2)]=e.connected;
        HEAP32[(((eventStruct)+(1300))>>2)]=e.index;
        HEAP32[(((eventStruct)+(8))>>2)]=e.axes.length;
        HEAP32[(((eventStruct)+(12))>>2)]=e.buttons.length;
        writeStringToMemory(e.id, eventStruct + 1304 );
        writeStringToMemory(e.mapping, eventStruct + 1368 );
      },registerGamepadEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.gamepadEvent) {
          JSEvents.gamepadEvent = _malloc( 1432 );
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillGamepadEventData(JSEvents.gamepadEvent, e.gamepad);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.gamepadEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: true,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerBeforeUnloadEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var confirmationMessage = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, 0, userData]);
          
          if (confirmationMessage) {
            confirmationMessage = Pointer_stringify(confirmationMessage);
          }
          if (confirmationMessage) {
            e.preventDefault();
            e.returnValue = confirmationMessage;
            return confirmationMessage;
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },battery:function () { return navigator.battery || navigator.mozBattery || navigator.webkitBattery; },fillBatteryEventData:function (eventStruct, e) {
        HEAPF64[((eventStruct)>>3)]=e.chargingTime;
        HEAPF64[(((eventStruct)+(8))>>3)]=e.dischargingTime;
        HEAPF64[(((eventStruct)+(16))>>3)]=e.level;
        HEAP32[(((eventStruct)+(24))>>2)]=e.charging;
      },registerBatteryEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.batteryEvent) {
          JSEvents.batteryEvent = _malloc( 32 );
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillBatteryEventData(JSEvents.batteryEvent, JSEvents.battery());
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.batteryEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerWebGlEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!target) {
          target = Module['canvas'];
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, 0, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      }};function _emscripten_set_mousemove_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 8, "mousemove");
      return 0;
    }

  function _glViewport(x0, x1, x2, x3) { GLctx.viewport(x0, x1, x2, x3) }


  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[((variable)>>0)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[((variable)>>0)]=1;
        return 1;
      }
      return 0;
    }

  function _glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      GLctx.bindAttribLocation(GL.programs[program], index, name);
    }

  function _glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  var _sinf=Math_sin;

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _glUniformMatrix4fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[15];
        for (var i = 0; i < 16; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(location, transpose, view);
    }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }


  var _cos=Math_cos;

  var _BItoD=true;

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }
  
  function _putenv(string) {
      // int putenv(char *string);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/putenv.html
      // WARNING: According to the standard (and the glibc implementation), the
      //          string is taken by reference so future changes are reflected.
      //          We copy it instead, possibly breaking some uses.
      if (string === 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      string = Pointer_stringify(string);
      var splitPoint = string.indexOf('=')
      if (string === '' || string.indexOf('=') === -1) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      var name = string.slice(0, splitPoint);
      var value = string.slice(splitPoint + 1);
      if (!(name in ENV) || ENV[name] !== value) {
        ENV[name] = value;
        ___buildEnvironment(ENV);
      }
      return 0;
    }
  
  function _SDL_RWFromConstMem(mem, size) {
      var id = SDL.rwops.length; // TODO: recycle ids when they are null
      SDL.rwops.push({ bytes: mem, count: size });
      return id;
    }function _TTF_FontHeight(font) {
      var fontData = SDL.fonts[font];
      return fontData.size;
    }function _TTF_SizeText(font, text, w, h) {
      var fontData = SDL.fonts[font];
      if (w) {
        HEAP32[((w)>>2)]=SDL.estimateTextWidth(fontData, Pointer_stringify(text));
      }
      if (h) {
        HEAP32[((h)>>2)]=fontData.size;
      }
      return 0;
    }function _TTF_RenderText_Solid(font, text, color) {
      // XXX the font and color are ignored
      text = Pointer_stringify(text) || ' '; // if given an empty string, still return a valid surface
      var fontData = SDL.fonts[font];
      var w = SDL.estimateTextWidth(fontData, text);
      var h = fontData.size;
      var color = SDL.loadColorToCSSRGB(color); // XXX alpha breaks fonts?
      var fontString = h + 'px ' + fontData.name;
      var surf = SDL.makeSurface(w, h, 0, false, 'text:' + text); // bogus numbers..
      var surfData = SDL.surfaces[surf];
      surfData.ctx.save();
      surfData.ctx.fillStyle = color;
      surfData.ctx.font = fontString;
      surfData.ctx.textBaseline = 'top';
      surfData.ctx.fillText(text, 0, 0);
      surfData.ctx.restore();
      return surf;
    }function _Mix_HaltMusic() {
      var audio = SDL.music.audio;
      if (audio) {
        audio.src = audio.src; // rewind <media> element
        audio.currentPosition = 0; // rewind Web Audio graph playback.
        audio.pause();
      }
      SDL.music.audio = null;
      if (SDL.hookMusicFinished) {
        Runtime.dynCall('v', SDL.hookMusicFinished);
      }
      return 0;
    }function _Mix_PlayMusic(id, loops) {
      // Pause old music if it exists.
      if (SDL.music.audio) {
        if (!SDL.music.audio.paused) Module.printErr('Music is already playing. ' + SDL.music.source);
        SDL.music.audio.pause();
      }
      var info = SDL.audios[id];
      var audio;
      if (info.webAudio) { // Play via Web Audio API
        // Create an instance of the WebAudio object.
        audio = {};
        audio.resource = info; // This new webAudio object is an instance that refers to this existing resource.
        audio.paused = false;
        audio.currentPosition = 0;
        audio.play = function() { SDL.playWebAudio(this); }
        audio.pause = function() { SDL.pauseWebAudio(this); }
      } else if (info.audio) { // Play via the <audio> element
        audio = info.audio;
      }
      audio['onended'] = function() { if (SDL.music.audio == this) _Mix_HaltMusic(); } // will send callback
      audio.loop = loops != 0; // TODO: handle N loops for finite N
      audio.volume = SDL.music.volume;
      SDL.music.audio = audio;
      audio.play();
      return 0;
    }function _Mix_FreeChunk(id) {
      SDL.audios[id] = null;
    }function _Mix_LoadWAV_RW(rwopsID, freesrc) {
      var rwops = SDL.rwops[rwopsID];
  
  
      if (rwops === undefined)
        return 0;
  
      var filename = '';
      var audio;
      var webAudio;
      var bytes;
  
      if (rwops.filename !== undefined) {
        filename = PATH.resolve(rwops.filename);
        var raw = Module["preloadedAudios"][filename];
        if (!raw) {
          if (raw === null) Module.printErr('Trying to reuse preloaded audio, but freePreloadedMediaOnUse is set!');
          if (!Module.noAudioDecoding) Runtime.warnOnce('Cannot find preloaded audio ' + filename);
  
          // see if we can read the file-contents from the in-memory FS
          try {
            bytes = FS.readFile(filename);
          } catch (e) {
            Module.printErr('Couldn\'t find file for: ' + filename);
            return 0;
          }
        }
        if (Module['freePreloadedMediaOnUse']) {
          Module["preloadedAudios"][filename] = null;
        }
        audio = raw;
      }
      else if (rwops.bytes !== undefined) {
        // For Web Audio context buffer decoding, we must make a clone of the audio data, but for <media> element,
        // a view to existing data is sufficient.
        if (SDL.webAudioAvailable()) bytes = HEAPU8.buffer.slice(rwops.bytes, rwops.bytes + rwops.count);
        else bytes = HEAPU8.subarray(rwops.bytes, rwops.bytes + rwops.count);
      }
      else {
        return 0;
      }
  
      var arrayBuffer = bytes ? bytes.buffer || bytes : bytes;
  
      // To allow user code to work around browser bugs with audio playback on <audio> elements an Web Audio, enable
      // the user code to hook in a callback to decide on a file basis whether each file should use Web Audio or <audio> for decoding and playback.
      // In particular, see https://bugzilla.mozilla.org/show_bug.cgi?id=654787 and ?id=1012801 for tradeoffs.
      var canPlayWithWebAudio = Module['SDL_canPlayWithWebAudio'] === undefined || Module['SDL_canPlayWithWebAudio'](filename, arrayBuffer);
  
      if (bytes !== undefined && SDL.webAudioAvailable() && canPlayWithWebAudio) {
        audio = undefined;
        webAudio = {};
        // The audio decoding process is asynchronous, which gives trouble if user code plays the audio data back immediately
        // after loading. Therefore prepare an array of callback handlers to run when this audio decoding is complete, which
        // will then start the playback (with some delay).
        webAudio.onDecodeComplete = []; // While this member array exists, decoding hasn't finished yet.
        function onDecodeComplete(data) {
          webAudio.decodedBuffer = data;
          // Call all handlers that were waiting for this decode to finish, and clear the handler list.
          webAudio.onDecodeComplete.forEach(function(e) { e(); });
          webAudio.onDecodeComplete = undefined; // Don't allow more callback handlers since audio has finished decoding.
        }
  
        SDL.audioContext['decodeAudioData'](arrayBuffer, onDecodeComplete);
      } else if (audio === undefined && bytes) {
        // Here, we didn't find a preloaded audio but we either were passed a filepath for
        // which we loaded bytes, or we were passed some bytes
        var blob = new Blob([bytes], {type: rwops.mimetype});
        var url = URL.createObjectURL(blob);
        audio = new Audio();
        audio.src = url;
        audio.mozAudioChannelType = 'content'; // bugzilla 910340
      }
  
      var id = SDL.audios.length;
      // Keep the loaded audio in the audio arrays, ready for playback
      SDL.audios.push({
        source: filename,
        audio: audio, // Points to the <audio> element, if loaded
        webAudio: webAudio // Points to a Web Audio -specific resource object, if loaded
      });
      return id;
    }function _Mix_PlayChannel(channel, id, loops) {
      // TODO: handle fixed amount of N loops. Currently loops either 0 or infinite times.
  
      // Get the audio element associated with the ID
      var info = SDL.audios[id];
      if (!info) return -1;
      if (!info.audio && !info.webAudio) return -1;
  
      // If the user asks us to allocate a channel automatically, get the first
      // free one.
      if (channel == -1) {
        for (var i = SDL.channelMinimumNumber; i < SDL.numChannels; i++) {
          if (!SDL.channels[i].audio) {
            channel = i;
            break;
          }
        }
        if (channel == -1) {
          Module.printErr('All ' + SDL.numChannels + ' channels in use!');
          return -1;
        }
      }
      var channelInfo = SDL.channels[channel];
      var audio;
      if (info.webAudio) {
        // Create an instance of the WebAudio object.
        audio = {};
        audio.resource = info; // This new object is an instance that refers to this existing resource.
        audio.paused = false;
        audio.currentPosition = 0;
        // Make our instance look similar to the instance of a <media> to make api simple.
        audio.play = function() { SDL.playWebAudio(this); }
        audio.pause = function() { SDL.pauseWebAudio(this); }
      } else {
        // We clone the audio node to utilize the preloaded audio buffer, since
        // the browser has already preloaded the audio file.
        audio = info.audio.cloneNode(true);
        audio.numChannels = info.audio.numChannels;
        audio.frequency = info.audio.frequency;
      }
      audio['onended'] = function SDL_audio_onended() { // TODO: cache these
        if (channelInfo.audio == this) { channelInfo.audio.paused = true; channelInfo.audio = null; }
        if (SDL.channelFinished) Runtime.getFuncWrapper(SDL.channelFinished, 'vi')(channel);
      }
      channelInfo.audio = audio;
      // TODO: handle N loops. Behavior matches Mix_PlayMusic
      audio.loop = loops != 0;
      audio.volume = channelInfo.volume;
      audio.play();
      return channel;
    }function _SDL_PauseAudio(pauseOn) {
      if (!SDL.audio) {
        return;
      }
      if (pauseOn) {
        if (SDL.audio.timer !== undefined) {
          clearTimeout(SDL.audio.timer);
          SDL.audio.numAudioTimersPending = 0;
          SDL.audio.timer = undefined;
        }
      } else if (!SDL.audio.timer) {
        // Start the audio playback timer callback loop.
        SDL.audio.numAudioTimersPending = 1;
        SDL.audio.timer = Browser.safeSetTimeout(SDL.audio.caller, 1);
      }
      SDL.audio.paused = pauseOn;
    }function _SDL_CloseAudio() {
      if (SDL.audio) {
        _SDL_PauseAudio(1);
        _free(SDL.audio.buffer);
        SDL.audio = null;
        SDL.allocateChannels(0);
      }
    }function _SDL_UpperBlitScaled(src, srcrect, dst, dstrect) {
      return SDL.blitSurface(src, srcrect, dst, dstrect, true);
    }function _SDL_UpperBlit(src, srcrect, dst, dstrect) {
      return SDL.blitSurface(src, srcrect, dst, dstrect, false);
    }function _SDL_GetTicks() {
      return (Date.now() - SDL.startTime)|0;
    }var SDL={defaults:{width:320,height:200,copyOnLock:true,discardOnLock:false,opaqueFrontBuffer:true},version:null,surfaces:{},canvasPool:[],events:[],fonts:[null],audios:[null],rwops:[null],music:{audio:null,volume:1},mixerFrequency:22050,mixerFormat:32784,mixerNumChannels:2,mixerChunkSize:1024,channelMinimumNumber:0,GL:false,glAttributes:{0:3,1:3,2:2,3:0,4:0,5:1,6:16,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:1,16:0,17:0,18:0},keyboardState:null,keyboardMap:{},canRequestFullscreen:false,isRequestingFullscreen:false,textInput:false,startTime:null,initFlags:0,buttonState:0,modState:0,DOMButtons:[0,0,0],DOMEventToSDLEvent:{},TOUCH_DEFAULT_ID:0,eventHandler:null,eventHandlerContext:null,eventHandlerTemp:0,keyCodes:{16:1249,17:1248,18:1250,20:1081,33:1099,34:1102,35:1101,36:1098,37:1104,38:1106,39:1103,40:1105,44:316,45:1097,46:127,91:1251,93:1125,96:1122,97:1113,98:1114,99:1115,100:1116,101:1117,102:1118,103:1119,104:1120,105:1121,106:1109,107:1111,109:1110,110:1123,111:1108,112:1082,113:1083,114:1084,115:1085,116:1086,117:1087,118:1088,119:1089,120:1090,121:1091,122:1092,123:1093,124:1128,125:1129,126:1130,127:1131,128:1132,129:1133,130:1134,131:1135,132:1136,133:1137,134:1138,135:1139,144:1107,160:94,161:33,162:34,163:35,164:36,165:37,166:38,167:95,168:40,169:41,170:42,171:43,172:124,173:45,174:123,175:125,176:126,181:127,182:129,183:128,188:44,190:46,191:47,192:96,219:91,220:92,221:93,222:39,224:1251},scanCodes:{8:42,9:43,13:40,27:41,32:44,35:204,39:53,44:54,46:55,47:56,48:39,49:30,50:31,51:32,52:33,53:34,54:35,55:36,56:37,57:38,58:203,59:51,61:46,91:47,92:49,93:48,96:52,97:4,98:5,99:6,100:7,101:8,102:9,103:10,104:11,105:12,106:13,107:14,108:15,109:16,110:17,111:18,112:19,113:20,114:21,115:22,116:23,117:24,118:25,119:26,120:27,121:28,122:29,127:76,305:224,308:226,316:70},loadRect:function (rect) {
        return {
          x: HEAP32[((rect + 0)>>2)],
          y: HEAP32[((rect + 4)>>2)],
          w: HEAP32[((rect + 8)>>2)],
          h: HEAP32[((rect + 12)>>2)]
        };
      },updateRect:function (rect, r) {
        HEAP32[((rect)>>2)]=r.x;
        HEAP32[(((rect)+(4))>>2)]=r.y;
        HEAP32[(((rect)+(8))>>2)]=r.w;
        HEAP32[(((rect)+(12))>>2)]=r.h;
      },intersectionOfRects:function (first, second) {
        var leftX = Math.max(first.x, second.x);
        var leftY = Math.max(first.y, second.y);
        var rightX = Math.min(first.x + first.w, second.x + second.w);
        var rightY = Math.min(first.y + first.h, second.y + second.h);
  
        return {
          x: leftX,
          y: leftY,
          w: Math.max(leftX, rightX) - leftX,
          h: Math.max(leftY, rightY) - leftY
        }
      },checkPixelFormat:function (fmt) {
        // Canvas screens are always RGBA.
        var format = HEAP32[((fmt)>>2)];
        if (format != -2042224636) {
          Runtime.warnOnce('Unsupported pixel format!');
        }
      },loadColorToCSSRGB:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgb(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ')';
      },loadColorToCSSRGBA:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgba(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ',' + (((rgba >> 24)&255)/255) + ')';
      },translateColorToCSSRGBA:function (rgba) {
        return 'rgba(' + (rgba&0xff) + ',' + (rgba>>8 & 0xff) + ',' + (rgba>>16 & 0xff) + ',' + (rgba>>>24)/0xff + ')';
      },translateRGBAToCSSRGBA:function (r, g, b, a) {
        return 'rgba(' + (r&0xff) + ',' + (g&0xff) + ',' + (b&0xff) + ',' + (a&0xff)/255 + ')';
      },translateRGBAToColor:function (r, g, b, a) {
        return r | g << 8 | b << 16 | a << 24;
      },makeSurface:function (width, height, flags, usePageCanvas, source, rmask, gmask, bmask, amask) {
        flags = flags || 0;
        var is_SDL_HWSURFACE = flags & 0x00000001;
        var is_SDL_HWPALETTE = flags & 0x00200000;
        var is_SDL_OPENGL = flags & 0x04000000;
  
        var surf = _malloc(60);
        var pixelFormat = _malloc(44);
        //surface with SDL_HWPALETTE flag is 8bpp surface (1 byte)
        var bpp = is_SDL_HWPALETTE ? 1 : 4;
        var buffer = 0;
  
        // preemptively initialize this for software surfaces,
        // otherwise it will be lazily initialized inside of SDL_LockSurface
        if (!is_SDL_HWSURFACE && !is_SDL_OPENGL) {
          buffer = _malloc(width * height * 4);
        }
  
        HEAP32[((surf)>>2)]=flags;
        HEAP32[(((surf)+(4))>>2)]=pixelFormat;
        HEAP32[(((surf)+(8))>>2)]=width;
        HEAP32[(((surf)+(12))>>2)]=height;
        HEAP32[(((surf)+(16))>>2)]=width * bpp;  // assuming RGBA or indexed for now,
                                                                                          // since that is what ImageData gives us in browsers
        HEAP32[(((surf)+(20))>>2)]=buffer;
  
        HEAP32[(((surf)+(36))>>2)]=0;
        HEAP32[(((surf)+(40))>>2)]=0;
        HEAP32[(((surf)+(44))>>2)]=Module["canvas"].width;
        HEAP32[(((surf)+(48))>>2)]=Module["canvas"].height;
  
        HEAP32[(((surf)+(56))>>2)]=1;
  
        HEAP32[((pixelFormat)>>2)]=-2042224636;
        HEAP32[(((pixelFormat)+(4))>>2)]=0;// TODO
        HEAP8[(((pixelFormat)+(8))>>0)]=bpp * 8;
        HEAP8[(((pixelFormat)+(9))>>0)]=bpp;
  
        HEAP32[(((pixelFormat)+(12))>>2)]=rmask || 0x000000ff;
        HEAP32[(((pixelFormat)+(16))>>2)]=gmask || 0x0000ff00;
        HEAP32[(((pixelFormat)+(20))>>2)]=bmask || 0x00ff0000;
        HEAP32[(((pixelFormat)+(24))>>2)]=amask || 0xff000000;
  
        // Decide if we want to use WebGL or not
        SDL.GL = SDL.GL || is_SDL_OPENGL;
        var canvas;
        if (!usePageCanvas) {
          if (SDL.canvasPool.length > 0) {
            canvas = SDL.canvasPool.pop();
          } else {
            canvas = document.createElement('canvas');
          }
          canvas.width = width;
          canvas.height = height;
        } else {
          canvas = Module['canvas'];
        }
  
        var webGLContextAttributes = {
          antialias: ((SDL.glAttributes[13 /*SDL_GL_MULTISAMPLEBUFFERS*/] != 0) && (SDL.glAttributes[14 /*SDL_GL_MULTISAMPLESAMPLES*/] > 1)),
          depth: (SDL.glAttributes[6 /*SDL_GL_DEPTH_SIZE*/] > 0),
          stencil: (SDL.glAttributes[7 /*SDL_GL_STENCIL_SIZE*/] > 0)
        };
        
        var ctx = Browser.createContext(canvas, is_SDL_OPENGL, usePageCanvas, webGLContextAttributes);
              
        SDL.surfaces[surf] = {
          width: width,
          height: height,
          canvas: canvas,
          ctx: ctx,
          surf: surf,
          buffer: buffer,
          pixelFormat: pixelFormat,
          alpha: 255,
          flags: flags,
          locked: 0,
          usePageCanvas: usePageCanvas,
          source: source,
  
          isFlagSet: function(flag) {
            return flags & flag;
          }
        };
  
        return surf;
      },copyIndexedColorData:function (surfData, rX, rY, rW, rH) {
        // HWPALETTE works with palette
        // setted by SDL_SetColors
        if (!surfData.colors) {
          return;
        }
        
        var fullWidth  = Module['canvas'].width;
        var fullHeight = Module['canvas'].height;
  
        var startX  = rX || 0;
        var startY  = rY || 0;
        var endX    = (rW || (fullWidth - startX)) + startX;
        var endY    = (rH || (fullHeight - startY)) + startY;
        
        var buffer  = surfData.buffer;
  
        if (!surfData.image.data32) {
          surfData.image.data32 = new Uint32Array(surfData.image.data.buffer);
        }
        var data32   = surfData.image.data32;
  
        var colors32 = surfData.colors32;
  
        for (var y = startY; y < endY; ++y) {
          var base = y * fullWidth;
          for (var x = startX; x < endX; ++x) {
            data32[base + x] = colors32[HEAPU8[((buffer + base + x)>>0)]];
          }
        }
      },freeSurface:function (surf) {
        var refcountPointer = surf + 56;
        var refcount = HEAP32[((refcountPointer)>>2)];
        if (refcount > 1) {
          HEAP32[((refcountPointer)>>2)]=refcount - 1;
          return;
        }
  
        var info = SDL.surfaces[surf];
        if (!info.usePageCanvas && info.canvas) SDL.canvasPool.push(info.canvas);
        if (info.buffer) _free(info.buffer);
        _free(info.pixelFormat);
        _free(surf);
        SDL.surfaces[surf] = null;
  
        if (surf === SDL.screen) {
          SDL.screen = null;
        }
      },blitSurface__deps:["SDL_LockSurface"],blitSurface:function (src, srcrect, dst, dstrect, scale) {
        var srcData = SDL.surfaces[src];
        var dstData = SDL.surfaces[dst];
        var sr, dr;
        if (srcrect) {
          sr = SDL.loadRect(srcrect);
        } else {
          sr = { x: 0, y: 0, w: srcData.width, h: srcData.height };
        }
        if (dstrect) {
          dr = SDL.loadRect(dstrect);
        } else {
          dr = { x: 0, y: 0, w: srcData.width, h: srcData.height };
        }
        if (dstData.clipRect) {
          var widthScale = (!scale || sr.w === 0) ? 1 : sr.w / dr.w;
          var heightScale = (!scale || sr.h === 0) ? 1 : sr.h / dr.h;
          
          dr = SDL.intersectionOfRects(dstData.clipRect, dr);
          
          sr.w = dr.w * widthScale;
          sr.h = dr.h * heightScale;
          
          if (dstrect) {
            SDL.updateRect(dstrect, dr);
          }
        }
        var blitw, blith;
        if (scale) {
          blitw = dr.w; blith = dr.h;
        } else {
          blitw = sr.w; blith = sr.h;
        }
        if (sr.w === 0 || sr.h === 0 || blitw === 0 || blith === 0) {
          return 0;
        }
        var oldAlpha = dstData.ctx.globalAlpha;
        dstData.ctx.globalAlpha = srcData.alpha/255;
        dstData.ctx.drawImage(srcData.canvas, sr.x, sr.y, sr.w, sr.h, dr.x, dr.y, blitw, blith);
        dstData.ctx.globalAlpha = oldAlpha;
        if (dst != SDL.screen) {
          // XXX As in IMG_Load, for compatibility we write out |pixels|
          Runtime.warnOnce('WARNING: copying canvas data to memory for compatibility');
          _SDL_LockSurface(dst);
          dstData.locked--; // The surface is not actually locked in this hack
        }
        return 0;
      },downFingers:{},savedKeydown:null,receiveEvent:function (event) {
        function unpressAllPressedKeys() {
          // Un-press all pressed keys: TODO
          for (var code in SDL.keyboardMap) {
            SDL.events.push({
              type: 'keyup',
              keyCode: SDL.keyboardMap[code]
            });
          }
        };
        switch(event.type) {
          case 'touchstart': case 'touchmove': {
            event.preventDefault();
  
            var touches = [];
            
            // Clear out any touchstart events that we've already processed
            if (event.type === 'touchstart') {
              for (var i = 0; i < event.touches.length; i++) {
                var touch = event.touches[i];
                if (SDL.downFingers[touch.identifier] != true) {
                  SDL.downFingers[touch.identifier] = true;
                  touches.push(touch);
                }
              }
            } else {
              touches = event.touches;
            }
            
            var firstTouch = touches[0];
            if (event.type == 'touchstart') {
              SDL.DOMButtons[0] = 1;
            }
            var mouseEventType;
            switch(event.type) {
              case 'touchstart': mouseEventType = 'mousedown'; break;
              case 'touchmove': mouseEventType = 'mousemove'; break;
            }
            var mouseEvent = {
              type: mouseEventType,
              button: 0,
              pageX: firstTouch.clientX,
              pageY: firstTouch.clientY
            };
            SDL.events.push(mouseEvent);
  
            for (var i = 0; i < touches.length; i++) {
              var touch = touches[i];
              SDL.events.push({
                type: event.type,
                touch: touch
              });
            };
            break;
          }
          case 'touchend': {
            event.preventDefault();
            
            // Remove the entry in the SDL.downFingers hash
            // because the finger is no longer down.
            for(var i = 0; i < event.changedTouches.length; i++) {
              var touch = event.changedTouches[i];
              if (SDL.downFingers[touch.identifier] === true) {
                delete SDL.downFingers[touch.identifier];
              }
            }
  
            var mouseEvent = {
              type: 'mouseup',
              button: 0,
              pageX: event.changedTouches[0].clientX,
              pageY: event.changedTouches[0].clientY
            };
            SDL.DOMButtons[0] = 0;
            SDL.events.push(mouseEvent);
            
            for (var i = 0; i < event.changedTouches.length; i++) {
              var touch = event.changedTouches[i];
              SDL.events.push({
                type: 'touchend',
                touch: touch
              });
            };
            break;
          }
          case 'DOMMouseScroll': case 'mousewheel': case 'wheel':
            var delta = -Browser.getMouseWheelDelta(event); // Flip the wheel direction to translate from browser wheel direction (+:down) to SDL direction (+:up)
            delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
  
            // Simulate old-style SDL events representing mouse wheel input as buttons
            var button = delta > 0 ? 3 /*SDL_BUTTON_WHEELUP-1*/ : 4 /*SDL_BUTTON_WHEELDOWN-1*/; // Subtract one since JS->C marshalling is defined to add one back.
            SDL.events.push({ type: 'mousedown', button: button, pageX: event.pageX, pageY: event.pageY });
            SDL.events.push({ type: 'mouseup', button: button, pageX: event.pageX, pageY: event.pageY });
  
            // Pass a delta motion event.
            SDL.events.push({ type: 'wheel', deltaX: 0, deltaY: delta });
            event.preventDefault(); // If we don't prevent this, then 'wheel' event will be sent again by the browser as 'DOMMouseScroll' and we will receive this same event the second time.
            break;
          case 'mousemove':
            if (SDL.DOMButtons[0] === 1) {
              SDL.events.push({
                type: 'touchmove',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
            }
            if (Browser.pointerLock) {
              // workaround for firefox bug 750111
              if ('mozMovementX' in event) {
                event['movementX'] = event['mozMovementX'];
                event['movementY'] = event['mozMovementY'];
              }
              // workaround for Firefox bug 782777
              if (event['movementX'] == 0 && event['movementY'] == 0) {
                // ignore a mousemove event if it doesn't contain any movement info
                // (without pointer lock, we infer movement from pageX/pageY, so this check is unnecessary)
                event.preventDefault();
                return;
              }
            }
            // fall through
          case 'keydown': case 'keyup': case 'keypress': case 'mousedown': case 'mouseup':
            // If we preventDefault on keydown events, the subsequent keypress events
            // won't fire. However, it's fine (and in some cases necessary) to
            // preventDefault for keys that don't generate a character. Otherwise,
            // preventDefault is the right thing to do in general.
            if (event.type !== 'keydown' || (!SDL.unicode && !SDL.textInput) || (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */)) {
              event.preventDefault();
            }
  
            if (event.type == 'mousedown') {
              SDL.DOMButtons[event.button] = 1;
              SDL.events.push({
                type: 'touchstart',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
            } else if (event.type == 'mouseup') {
              // ignore extra ups, can happen if we leave the canvas while pressing down, then return,
              // since we add a mouseup in that case
              if (!SDL.DOMButtons[event.button]) {
                return;
              }
  
              SDL.events.push({
                type: 'touchend',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
              SDL.DOMButtons[event.button] = 0;
            }
  
            // We can only request fullscreen as the result of user input.
            // Due to this limitation, we toggle a boolean on keydown which
            // SDL_WM_ToggleFullScreen will check and subsequently set another
            // flag indicating for us to request fullscreen on the following
            // keyup. This isn't perfect, but it enables SDL_WM_ToggleFullScreen
            // to work as the result of a keypress (which is an extremely
            // common use case).
            if (event.type === 'keydown' || event.type === 'mousedown') {
              SDL.canRequestFullscreen = true;
            } else if (event.type === 'keyup' || event.type === 'mouseup') {
              if (SDL.isRequestingFullscreen) {
                Module['requestFullScreen'](true, true);
                SDL.isRequestingFullscreen = false;
              }
              SDL.canRequestFullscreen = false;
            }
  
            // SDL expects a unicode character to be passed to its keydown events.
            // Unfortunately, the browser APIs only provide a charCode property on
            // keypress events, so we must backfill in keydown events with their
            // subsequent keypress event's charCode.
            if (event.type === 'keypress' && SDL.savedKeydown) {
              // charCode is read-only
              SDL.savedKeydown.keypressCharCode = event.charCode;
              SDL.savedKeydown = null;
            } else if (event.type === 'keydown') {
              SDL.savedKeydown = event;
            }
  
            // Don't push keypress events unless SDL_StartTextInput has been called.
            if (event.type !== 'keypress' || SDL.textInput) {
              SDL.events.push(event);
            }
            break;
          case 'mouseout':
            // Un-press all pressed mouse buttons, because we might miss the release outside of the canvas
            for (var i = 0; i < 3; i++) {
              if (SDL.DOMButtons[i]) {
                SDL.events.push({
                  type: 'mouseup',
                  button: i,
                  pageX: event.pageX,
                  pageY: event.pageY
                });
                SDL.DOMButtons[i] = 0;
              }
            }
            event.preventDefault();
            break;
          case 'focus':
            SDL.events.push(event);
            event.preventDefault();
            break;
          case 'blur':
            SDL.events.push(event);
            unpressAllPressedKeys();
            event.preventDefault();
            break;
          case 'visibilitychange':
            SDL.events.push({
              type: 'visibilitychange',
              visible: !document.hidden
            });
            unpressAllPressedKeys();
            event.preventDefault();
            break;
          case 'unload':
            if (Browser.mainLoop.runner) {
              SDL.events.push(event);
              // Force-run a main event loop, since otherwise this event will never be caught!
              Browser.mainLoop.runner();
            }
            return;
          case 'resize':
            SDL.events.push(event);
            // manually triggered resize event doesn't have a preventDefault member
            if (event.preventDefault) {
              event.preventDefault();
            }
            break;
        }
        if (SDL.events.length >= 10000) {
          Module.printErr('SDL event queue full, dropping events');
          SDL.events = SDL.events.slice(0, 10000);
        }
        // If we have a handler installed, this will push the events to the app
        // instead of the app polling for them.
        SDL.flushEventsToHandler();
        return;
      },lookupKeyCodeForEvent:function (event) {
          var code = event.keyCode;
          if (code >= 65 && code <= 90) {
            code += 32; // make lowercase for SDL
          } else {
            code = SDL.keyCodes[event.keyCode] || event.keyCode;
            // If this is one of the modifier keys (224 | 1<<10 - 227 | 1<<10), and the event specifies that it is
            // a right key, add 4 to get the right key SDL key code.
            if (event.location === KeyboardEvent.DOM_KEY_LOCATION_RIGHT && code >= (224 | 1<<10) && code <= (227 | 1<<10)) {
              code += 4;
            }
          }
          return code;
      },handleEvent:function (event) {
        if (event.handled) return;
        event.handled = true;
  
        switch (event.type) {
          case 'touchstart': case 'touchend': case 'touchmove': {
            Browser.calculateMouseEvent(event);
            break;
          }
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            var code = SDL.lookupKeyCodeForEvent(event);
            HEAP8[(((SDL.keyboardState)+(code))>>0)]=down;
            // TODO: lmeta, rmeta, numlock, capslock, KMOD_MODE, KMOD_RESERVED
            SDL.modState = (HEAP8[(((SDL.keyboardState)+(1248))>>0)] ? 0x0040 : 0) | // KMOD_LCTRL
              (HEAP8[(((SDL.keyboardState)+(1249))>>0)] ? 0x0001 : 0) | // KMOD_LSHIFT
              (HEAP8[(((SDL.keyboardState)+(1250))>>0)] ? 0x0100 : 0) | // KMOD_LALT
              (HEAP8[(((SDL.keyboardState)+(1252))>>0)] ? 0x0080 : 0) | // KMOD_RCTRL
              (HEAP8[(((SDL.keyboardState)+(1253))>>0)] ? 0x0002 : 0) | // KMOD_RSHIFT
              (HEAP8[(((SDL.keyboardState)+(1254))>>0)] ? 0x0200 : 0); //  KMOD_RALT
            if (down) {
              SDL.keyboardMap[code] = event.keyCode; // save the DOM input, which we can use to unpress it during blur
            } else {
              delete SDL.keyboardMap[code];
            }
  
            break;
          }
          case 'mousedown': case 'mouseup':
            if (event.type == 'mousedown') {
              // SDL_BUTTON(x) is defined as (1 << ((x)-1)).  SDL buttons are 1-3,
              // and DOM buttons are 0-2, so this means that the below formula is
              // correct.
              SDL.buttonState |= 1 << event.button;
            } else if (event.type == 'mouseup') {
              SDL.buttonState &= ~(1 << event.button);
            }
            // fall through
          case 'mousemove': {
            Browser.calculateMouseEvent(event);
            break;
          }
        }
      },flushEventsToHandler:function () {
        if (!SDL.eventHandler) return;
  
        while (SDL.pollEvent(SDL.eventHandlerTemp)) {
          Runtime.dynCall('iii', SDL.eventHandler, [SDL.eventHandlerContext, SDL.eventHandlerTemp]);
        }
      },pollEvent:function (ptr) {
        if (SDL.initFlags & 0x200 && SDL.joystickEventState) {
          // If SDL_INIT_JOYSTICK was supplied AND the joystick system is configured
          // to automatically query for events, query for joystick events.
          SDL.queryJoysticks();
        }
        if (ptr) {
          while (SDL.events.length > 0) {
            if (SDL.makeCEvent(SDL.events.shift(), ptr) !== false) return 1;
          }
          return 0;
        } else {
          // XXX: somewhat risky in that we do not check if the event is real or not (makeCEvent returns false) if no pointer supplied
          return SDL.events.length > 0;
        }
      },makeCEvent:function (event, ptr) {
        if (typeof event === 'number') {
          // This is a pointer to a copy of a native C event that was SDL_PushEvent'ed
          _memcpy(ptr, event, 28);
          _free(event); // the copy is no longer needed
          return;
        }
  
        SDL.handleEvent(event);
  
        switch (event.type) {
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            //Module.print('Received key event: ' + event.keyCode);
            var key = SDL.lookupKeyCodeForEvent(event);
            var scan;
            if (key >= 1024) {
              scan = key - 1024;
            } else {
              scan = SDL.scanCodes[key] || key;
            }
  
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(8))>>0)]=down ? 1 : 0;
            HEAP8[(((ptr)+(9))>>0)]=0; // TODO
            HEAP32[(((ptr)+(12))>>2)]=scan;
            HEAP32[(((ptr)+(16))>>2)]=key;
            HEAP16[(((ptr)+(20))>>1)]=SDL.modState;
            // some non-character keys (e.g. backspace and tab) won't have keypressCharCode set, fill in with the keyCode.
            HEAP32[(((ptr)+(24))>>2)]=event.keypressCharCode || key;
  
            break;
          }
          case 'keypress': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            // Not filling in windowID for now
            var cStr = intArrayFromString(String.fromCharCode(event.charCode));
            for (var i = 0; i < cStr.length; ++i) {
              HEAP8[(((ptr)+(8 + i))>>0)]=cStr[i];
            }
            break;
          }
          case 'mousedown': case 'mouseup': case 'mousemove': {
            if (event.type != 'mousemove') {
              var down = event.type === 'mousedown';
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=0;
              HEAP32[(((ptr)+(8))>>2)]=0;
              HEAP32[(((ptr)+(12))>>2)]=0;
              HEAP8[(((ptr)+(16))>>0)]=event.button+1; // DOM buttons are 0-2, SDL 1-3
              HEAP8[(((ptr)+(17))>>0)]=down ? 1 : 0;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseY;
            } else {
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=0;
              HEAP32[(((ptr)+(8))>>2)]=0;
              HEAP32[(((ptr)+(12))>>2)]=0;
              HEAP32[(((ptr)+(16))>>2)]=SDL.buttonState;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseY;
              HEAP32[(((ptr)+(28))>>2)]=Browser.mouseMovementX;
              HEAP32[(((ptr)+(32))>>2)]=Browser.mouseMovementY;
            }
            break;
          }
          case 'wheel': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(16))>>2)]=event.deltaX;
            HEAP32[(((ptr)+(20))>>2)]=event.deltaY; 
            break;       
          }
          case 'touchstart': case 'touchend': case 'touchmove': {
            var touch = event.touch;
            if (!Browser.touches[touch.identifier]) break;
            var w = Module['canvas'].width;
            var h = Module['canvas'].height;
            var x = Browser.touches[touch.identifier].x / w;
            var y = Browser.touches[touch.identifier].y / h;
            var lx = Browser.lastTouches[touch.identifier].x / w;
            var ly = Browser.lastTouches[touch.identifier].y / h;
            var dx = x - lx;
            var dy = y - ly;
            if (touch['deviceID'] === undefined) touch.deviceID = SDL.TOUCH_DEFAULT_ID;
            if (dx === 0 && dy === 0 && event.type === 'touchmove') return false; // don't send these if nothing happened
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=_SDL_GetTicks();
            (tempI64 = [touch.deviceID>>>0,(tempDouble=touch.deviceID,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((ptr)+(8))>>2)]=tempI64[0],HEAP32[(((ptr)+(12))>>2)]=tempI64[1]);
            (tempI64 = [touch.identifier>>>0,(tempDouble=touch.identifier,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((ptr)+(16))>>2)]=tempI64[0],HEAP32[(((ptr)+(20))>>2)]=tempI64[1]);
            HEAPF32[(((ptr)+(24))>>2)]=x;
            HEAPF32[(((ptr)+(28))>>2)]=y;
            HEAPF32[(((ptr)+(32))>>2)]=dx;
            HEAPF32[(((ptr)+(36))>>2)]=dy;
            if (touch.force !== undefined) {
              HEAPF32[(((ptr)+(40))>>2)]=touch.force;
            } else { // No pressure data, send a digital 0/1 pressure.
              HEAPF32[(((ptr)+(40))>>2)]=event.type == "touchend" ? 0 : 1;
            }
            break;
          }
          case 'unload': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            break;
          }
          case 'resize': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=event.w;
            HEAP32[(((ptr)+(8))>>2)]=event.h;
            break;
          }
          case 'joystick_button_up': case 'joystick_button_down': {
            var state = event.type === 'joystick_button_up' ? 0 : 1;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))>>0)]=event.index;
            HEAP8[(((ptr)+(5))>>0)]=event.button;
            HEAP8[(((ptr)+(6))>>0)]=state;
            break;
          }
          case 'joystick_axis_motion': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))>>0)]=event.index;
            HEAP8[(((ptr)+(5))>>0)]=event.axis;
            HEAP32[(((ptr)+(8))>>2)]=SDL.joystickAxisValueConversion(event.value);
            break;
          }
          case 'focus': {
            var SDL_WINDOWEVENT_FOCUS_GAINED = 12 /* SDL_WINDOWEVENT_FOCUS_GAINED */;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=SDL_WINDOWEVENT_FOCUS_GAINED;
            break;
          }
          case 'blur': {
            var SDL_WINDOWEVENT_FOCUS_LOST = 13 /* SDL_WINDOWEVENT_FOCUS_LOST */;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=SDL_WINDOWEVENT_FOCUS_LOST;
            break;
          }
          case 'visibilitychange': {
            var SDL_WINDOWEVENT_SHOWN  = 1 /* SDL_WINDOWEVENT_SHOWN */;
            var SDL_WINDOWEVENT_HIDDEN = 2 /* SDL_WINDOWEVENT_HIDDEN */;
            var visibilityEventID = event.visible ? SDL_WINDOWEVENT_SHOWN : SDL_WINDOWEVENT_HIDDEN;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=visibilityEventID;
            break;
          }
          default: throw 'Unhandled SDL event: ' + event.type;
        }
      },estimateTextWidth:function (fontData, text) {
        var h = fontData.size;
        var fontString = h + 'px ' + fontData.name;
        var tempCtx = SDL.ttfContext;
        assert(tempCtx, 'TTF_Init must have been called');
        tempCtx.save();
        tempCtx.font = fontString;
        var ret = tempCtx.measureText(text).width | 0;
        tempCtx.restore();
        return ret;
      },allocateChannels:function (num) { // called from Mix_AllocateChannels and init
        if (SDL.numChannels && SDL.numChannels >= num && num != 0) return;
        SDL.numChannels = num;
        SDL.channels = [];
        for (var i = 0; i < num; i++) {
          SDL.channels[i] = {
            audio: null,
            volume: 1.0
          };
        }
      },setGetVolume:function (info, volume) {
        if (!info) return 0;
        var ret = info.volume * 128; // MIX_MAX_VOLUME
        if (volume != -1) {
          info.volume = Math.min(Math.max(volume, 0), 128) / 128;
          if (info.audio) {
            try {
              info.audio.volume = info.volume; // For <audio> element
              if (info.audio.webAudioGainNode) info.audio.webAudioGainNode['gain']['value'] = info.volume; // For WebAudio playback
            } catch(e) {
              Module.printErr('setGetVolume failed to set audio volume: ' + e);
            }
          }
        }
        return ret;
      },setPannerPosition:function (info, x, y, z) {
        if (!info) return;
        if (info.audio) {
          if (info.audio.webAudioPannerNode) {
            info.audio.webAudioPannerNode['setPosition'](x, y, z);
          }
        }
      },playWebAudio:function (audio) {
        if (!audio) return;
        if (audio.webAudioNode) return; // This instance is already playing, don't start again.
        if (!SDL.webAudioAvailable()) return;
        try {
          var webAudio = audio.resource.webAudio;
          audio.paused = false;
          if (!webAudio.decodedBuffer) {
            if (webAudio.onDecodeComplete === undefined) abort("Cannot play back audio object that was not loaded");
            webAudio.onDecodeComplete.push(function() { if (!audio.paused) SDL.playWebAudio(audio); });
            return;
          }
          audio.webAudioNode = SDL.audioContext['createBufferSource']();
          audio.webAudioNode['buffer'] = webAudio.decodedBuffer;
          audio.webAudioNode['loop'] = audio.loop;
          audio.webAudioNode['onended'] = function() { audio['onended'](); } // For <media> element compatibility, route the onended signal to the instance.
  
          audio.webAudioPannerNode = SDL.audioContext['createPanner']();
          audio.webAudioPannerNode['panningModel'] = 'equalpower';
  
          // Add an intermediate gain node to control volume.
          audio.webAudioGainNode = SDL.audioContext['createGain']();
          audio.webAudioGainNode['gain']['value'] = audio.volume;
  
          audio.webAudioNode['connect'](audio.webAudioPannerNode);
          audio.webAudioPannerNode['connect'](audio.webAudioGainNode);
          audio.webAudioGainNode['connect'](SDL.audioContext['destination']);
  
          audio.webAudioNode['start'](0, audio.currentPosition);
          audio.startTime = SDL.audioContext['currentTime'] - audio.currentPosition;
        } catch(e) {
          Module.printErr('playWebAudio failed: ' + e);
        }
      },pauseWebAudio:function (audio) {
        if (!audio) return;
        if (audio.webAudioNode) {
          try {
            // Remember where we left off, so that if/when we resume, we can restart the playback at a proper place.
            audio.currentPosition = (SDL.audioContext['currentTime'] - audio.startTime) % audio.resource.webAudio.decodedBuffer.duration;
            // Important: When we reach here, the audio playback is stopped by the user. But when calling .stop() below, the Web Audio
            // graph will send the onended signal, but we don't want to process that, since pausing should not clear/destroy the audio
            // channel.
            audio.webAudioNode['onended'] = undefined;
            audio.webAudioNode.stop(0); // 0 is a default parameter, but WebKit is confused by it #3861
            audio.webAudioNode = undefined;
          } catch(e) {
            Module.printErr('pauseWebAudio failed: ' + e);
          }
        }
        audio.paused = true;
      },openAudioContext:function () {
        // Initialize Web Audio API if we haven't done so yet. Note: Only initialize Web Audio context ever once on the web page,
        // since initializing multiple times fails on Chrome saying 'audio resources have been exhausted'.
        if (!SDL.audioContext) {
          if (typeof(AudioContext) !== 'undefined') SDL.audioContext = new AudioContext();
          else if (typeof(webkitAudioContext) !== 'undefined') SDL.audioContext = new webkitAudioContext();
        }
      },webAudioAvailable:function () { return !!SDL.audioContext; },fillWebAudioBufferFromHeap:function (heapPtr, sizeSamplesPerChannel, dstAudioBuffer) {
        // The input audio data is interleaved across the channels, i.e. [L, R, L, R, L, R, ...] and is either 8-bit or 16-bit as
        // supported by the SDL API. The output audio wave data for Web Audio API must be in planar buffers of [-1,1]-normalized Float32 data,
        // so perform a buffer conversion for the data.
        var numChannels = SDL.audio.channels;
        for(var c = 0; c < numChannels; ++c) {
          var channelData = dstAudioBuffer['getChannelData'](c);
          if (channelData.length != sizeSamplesPerChannel) {
            throw 'Web Audio output buffer length mismatch! Destination size: ' + channelData.length + ' samples vs expected ' + sizeSamplesPerChannel + ' samples!';
          }
          if (SDL.audio.format == 0x8010 /*AUDIO_S16LSB*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              channelData[j] = (HEAP16[(((heapPtr)+((j*numChannels + c)*2))>>1)]) / 0x8000;
            }
          } else if (SDL.audio.format == 0x0008 /*AUDIO_U8*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              var v = (HEAP8[(((heapPtr)+(j*numChannels + c))>>0)]);
              channelData[j] = ((v >= 0) ? v-128 : v+128) /128;
            }
          }
        }
      },debugSurface:function (surfData) {
        console.log('dumping surface ' + [surfData.surf, surfData.source, surfData.width, surfData.height]);
        var image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
        var data = image.data;
        var num = Math.min(surfData.width, surfData.height);
        for (var i = 0; i < num; i++) {
          console.log('   diagonal ' + i + ':' + [data[i*surfData.width*4 + i*4 + 0], data[i*surfData.width*4 + i*4 + 1], data[i*surfData.width*4 + i*4 + 2], data[i*surfData.width*4 + i*4 + 3]]);
        }
      },joystickEventState:1,lastJoystickState:{},joystickNamePool:{},recordJoystickState:function (joystick, state) {
        // Standardize button state.
        var buttons = new Array(state.buttons.length);
        for (var i = 0; i < state.buttons.length; i++) {
          buttons[i] = SDL.getJoystickButtonState(state.buttons[i]);
        }
  
        SDL.lastJoystickState[joystick] = {
          buttons: buttons,
          axes: state.axes.slice(0),
          timestamp: state.timestamp,
          index: state.index,
          id: state.id
        };
      },getJoystickButtonState:function (button) {
        if (typeof button === 'object') {
          // Current gamepad API editor's draft (Firefox Nightly)
          // https://dvcs.w3.org/hg/gamepad/raw-file/default/gamepad.html#idl-def-GamepadButton
          return button.pressed;
        } else {
          // Current gamepad API working draft (Firefox / Chrome Stable)
          // http://www.w3.org/TR/2012/WD-gamepad-20120529/#gamepad-interface
          return button > 0;
        }
      },queryJoysticks:function () {
        for (var joystick in SDL.lastJoystickState) {
          var state = SDL.getGamepad(joystick - 1);
          var prevState = SDL.lastJoystickState[joystick];
          // Check only if the timestamp has differed.
          // NOTE: Timestamp is not available in Firefox.
          if (typeof state.timestamp !== 'number' || state.timestamp !== prevState.timestamp) {
            var i;
            for (i = 0; i < state.buttons.length; i++) {
              var buttonState = SDL.getJoystickButtonState(state.buttons[i]);
              // NOTE: The previous state already has a boolean representation of
              //       its button, so no need to standardize its button state here.
              if (buttonState !== prevState.buttons[i]) {
                // Insert button-press event.
                SDL.events.push({
                  type: buttonState ? 'joystick_button_down' : 'joystick_button_up',
                  joystick: joystick,
                  index: joystick - 1,
                  button: i
                });
              }
            }
            for (i = 0; i < state.axes.length; i++) {
              if (state.axes[i] !== prevState.axes[i]) {
                // Insert axes-change event.
                SDL.events.push({
                  type: 'joystick_axis_motion',
                  joystick: joystick,
                  index: joystick - 1,
                  axis: i,
                  value: state.axes[i]
                });
              }
            }
  
            SDL.recordJoystickState(joystick, state);
          }
        }
      },joystickAxisValueConversion:function (value) {
        // Ensures that 0 is 0, 1 is 32767, and -1 is 32768.
        return Math.ceil(((value+1) * 32767.5) - 32768);
      },getGamepads:function () {
        var fcn = navigator.getGamepads || navigator.webkitGamepads || navigator.mozGamepads || navigator.gamepads || navigator.webkitGetGamepads;
        if (fcn !== undefined) {
          // The function must be applied on the navigator object.
          return fcn.apply(navigator);
        } else {
          return [];
        }
      },getGamepad:function (deviceIndex) {
        var gamepads = SDL.getGamepads();
        if (gamepads.length > deviceIndex && deviceIndex >= 0) {
          return gamepads[deviceIndex];
        }
        return null;
      }};function _SDL_LockSurface(surf) {
      var surfData = SDL.surfaces[surf];
  
      surfData.locked++;
      if (surfData.locked > 1) return 0;
  
      if (!surfData.buffer) {
        surfData.buffer = _malloc(surfData.width * surfData.height * 4);
        HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
      }
  
      // Mark in C/C++-accessible SDL structure
      // SDL_Surface has the following fields: Uint32 flags, SDL_PixelFormat *format; int w, h; Uint16 pitch; void *pixels; ...
      // So we have fields all of the same size, and 5 of them before us.
      // TODO: Use macros like in library.js
      HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
  
      if (surf == SDL.screen && Module.screenIsReadOnly && surfData.image) return 0;
  
      if (SDL.defaults.discardOnLock) {
        if (!surfData.image) {
          surfData.image = surfData.ctx.createImageData(surfData.width, surfData.height);
        }
        if (!SDL.defaults.opaqueFrontBuffer) return;
      } else {
        surfData.image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
      }
  
      // Emulate desktop behavior and kill alpha values on the locked surface. (very costly!) Set SDL.defaults.opaqueFrontBuffer = false
      // if you don't want this.
      if (surf == SDL.screen && SDL.defaults.opaqueFrontBuffer) {
        var data = surfData.image.data;
        var num = data.length;
        for (var i = 0; i < num/4; i++) {
          data[i*4+3] = 255; // opacity, as canvases blend alpha
        }
      }
  
      if (SDL.defaults.copyOnLock && !SDL.defaults.discardOnLock) {
        // Copy pixel data to somewhere accessible to 'C/C++'
        if (surfData.isFlagSet(0x00200000 /* SDL_HWPALETTE */)) {
          // If this is neaded then
          // we should compact the data from 32bpp to 8bpp index.
          // I think best way to implement this is use
          // additional colorMap hash (color->index).
          // Something like this:
          //
          // var size = surfData.width * surfData.height;
          // var data = '';
          // for (var i = 0; i<size; i++) {
          //   var color = SDL.translateRGBAToColor(
          //     surfData.image.data[i*4   ], 
          //     surfData.image.data[i*4 +1], 
          //     surfData.image.data[i*4 +2], 
          //     255);
          //   var index = surfData.colorMap[color];
          //   HEAP8[(((surfData.buffer)+(i))>>0)]=index;
          // }
          throw 'CopyOnLock is not supported for SDL_LockSurface with SDL_HWPALETTE flag set' + new Error().stack;
        } else {
          HEAPU8.set(surfData.image.data, surfData.buffer);
        }
      }
  
      return 0;
    }
  
  function _SDL_FreeRW(rwopsID) {
      SDL.rwops[rwopsID] = null;
      while (SDL.rwops.length > 0 && SDL.rwops[SDL.rwops.length-1] === null) {
        SDL.rwops.pop();
      }
    }function _IMG_Load_RW(rwopsID, freeSrc) {
      try {
        // stb_image integration support
        function cleanup() {
          if (rwops && freeSrc) _SDL_FreeRW(rwopsID);
        };
        function addCleanup(func) {
          var old = cleanup;
          cleanup = function added_cleanup() {
            old();
            func();
          }
        }
        function callStbImage(func, params) {
          var x = Module['_malloc'](4);
          var y = Module['_malloc'](4);
          var comp = Module['_malloc'](4);
          addCleanup(function() {
            Module['_free'](x);
            Module['_free'](y);
            Module['_free'](comp);
            if (data) Module['_stbi_image_free'](data);
          });
          var data = Module['_' + func].apply(null, params.concat([x, y, comp, 0]));
          if (!data) return null;
          return {
            rawData: true,
            data: data,
            width: HEAP32[((x)>>2)],
            height: HEAP32[((y)>>2)],
            size: HEAP32[((x)>>2)] * HEAP32[((y)>>2)] * HEAP32[((comp)>>2)],
            bpp: HEAP32[((comp)>>2)]
          };
        }
  
        var rwops = SDL.rwops[rwopsID];
        if (rwops === undefined) {
          return 0;
        }
  
        var filename = rwops.filename;
        if (filename === undefined) {
          Runtime.warnOnce('Only file names that have been preloaded are supported for IMG_Load_RW. Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js), or package files with --use-preload-plugins');
          return 0;
        }
  
        if (!raw) {
          filename = PATH.resolve(filename);
          var raw = Module["preloadedImages"][filename];
          if (!raw) {
            if (raw === null) Module.printErr('Trying to reuse preloaded image, but freePreloadedMediaOnUse is set!');
            Runtime.warnOnce('Cannot find preloaded image ' + filename);
            Runtime.warnOnce('Cannot find preloaded image ' + filename + '. Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js), or package files with --use-preload-plugins');
            return 0;
          } else if (Module['freePreloadedMediaOnUse']) {
            Module["preloadedImages"][filename] = null;
          }
        }
  
        var surf = SDL.makeSurface(raw.width, raw.height, 0, false, 'load:' + filename);
        var surfData = SDL.surfaces[surf];
        surfData.ctx.globalCompositeOperation = "copy";
        if (!raw.rawData) {
          surfData.ctx.drawImage(raw, 0, 0, raw.width, raw.height, 0, 0, raw.width, raw.height);
        } else {
          var imageData = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
          if (raw.bpp == 4) {
            // rgba
            imageData.data.set(HEAPU8.subarray((raw.data),(raw.data+raw.size)));
          } else if (raw.bpp == 3) {
            // rgb
            var pixels = raw.size/3;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = 255;
            }
          } else if (raw.bpp == 1) {
            // grayscale
            var pixels = raw.size;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              var value = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = value;
              data[destPtr++] = value;
              data[destPtr++] = value;
              data[destPtr++] = 255;
            }
          } else {
            Module.printErr('cannot handle bpp ' + raw.bpp);
            return 0;
          }
          surfData.ctx.putImageData(imageData, 0, 0);
        }
        surfData.ctx.globalCompositeOperation = "source-over";
        // XXX SDL does not specify that loaded images must have available pixel data, in fact
        //     there are cases where you just want to blit them, so you just need the hardware
        //     accelerated version. However, code everywhere seems to assume that the pixels
        //     are in fact available, so we retrieve it here. This does add overhead though.
        _SDL_LockSurface(surf);
        surfData.locked--; // The surface is not actually locked in this hack
        if (SDL.GL) {
          // After getting the pixel data, we can free the canvas and context if we do not need to do 2D canvas blitting
          surfData.canvas = surfData.ctx = null;
        }
        return surf;
      } finally {
        cleanup();
      }
    }
  
  function _SDL_RWFromFile(_name, mode) {
      var id = SDL.rwops.length; // TODO: recycle ids when they are null
      var name = Pointer_stringify(_name)
      SDL.rwops.push({ filename: name, mimetype: Browser.getMimetype(name) });
      return id;
    }function _IMG_Load(filename){
      var rwops = _SDL_RWFromFile(filename);
      var result = _IMG_Load_RW(rwops, 1);
      return result;
    }

  function _glfwSetKeyCallback(cbfun) {
      GLFW.setKeyCallback(GLFW.active.id, cbfun);
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  function _SDL_FreeSurface(surf) {
      if (surf) SDL.freeSurface(surf);
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);
var GLctx; GL.init()
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
___buildEnvironment(ENV);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diii(x) { Module["printErr"]("Invalid function pointer called with signature 'diii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    return Module["dynCall_iiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_diii(index,a1,a2,a3) {
  try {
    return Module["dynCall_diii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiid(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiid"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_iiiiiid": nullFunc_iiiiiid, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_ii": nullFunc_ii, "nullFunc_iiiiiiiiiiii": nullFunc_iiiiiiiiiiii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiiiiii": nullFunc_viiiiiiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_diii": nullFunc_diii, "nullFunc_i": nullFunc_i, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_iiiiid": nullFunc_iiiiid, "nullFunc_viiii": nullFunc_viiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_iiiiiid": invoke_iiiiiid, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_ii": invoke_ii, "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii, "invoke_iiii": invoke_iiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiiiiii": invoke_viiiiiiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_diii": invoke_diii, "invoke_i": invoke_i, "invoke_iiiii": invoke_iiiii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_iiiiid": invoke_iiiiid, "invoke_viiii": invoke_viiii, "_glUseProgram": _glUseProgram, "_fabs": _fabs, "_glUniformMatrix3fv": _glUniformMatrix3fv, "_sqrtf": _sqrtf, "_glUniformMatrix4fv": _glUniformMatrix4fv, "___cxa_guard_acquire": ___cxa_guard_acquire, "_SDL_RWFromFile": _SDL_RWFromFile, "___assert_fail": ___assert_fail, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_glBindBuffer": _glBindBuffer, "_glCreateProgram": _glCreateProgram, "__addDays": __addDays, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "_SDL_FreeSurface": _SDL_FreeSurface, "___cxa_begin_catch": ___cxa_begin_catch, "_TTF_RenderText_Solid": _TTF_RenderText_Solid, "_sysconf": _sysconf, "emscriptenWebGLComputeImageSize": emscriptenWebGLComputeImageSize, "___syscall221": ___syscall221, "_cos": _cos, "_Mix_LoadWAV_RW": _Mix_LoadWAV_RW, "_glfwInit": _glfwInit, "__isLeapYear": __isLeapYear, "_glGenBuffers": _glGenBuffers, "_glShaderSource": _glShaderSource, "___cxa_atexit": ___cxa_atexit, "___cxa_rethrow": ___cxa_rethrow, "_pthread_cleanup_push": _pthread_cleanup_push, "_Mix_HaltMusic": _Mix_HaltMusic, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "_pthread_cleanup_pop": _pthread_cleanup_pop, "_glVertexAttribPointer": _glVertexAttribPointer, "_SDL_GetTicks": _SDL_GetTicks, "_glfwOpenWindow": _glfwOpenWindow, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_glDrawElements": _glDrawElements, "___cxa_guard_release": ___cxa_guard_release, "_SDL_LockSurface": _SDL_LockSurface, "_glViewport": _glViewport, "___setErrNo": ___setErrNo, "___resumeException": ___resumeException, "_pthread_once": _pthread_once, "_glGenTextures": _glGenTextures, "_glEnable": _glEnable, "_emscripten_get_now": _emscripten_get_now, "_glAttachShader": _glAttachShader, "___lock": ___lock, "emscriptenWebGLGetTexPixelData": emscriptenWebGLGetTexPixelData, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "_time": _time, "_pthread_mutex_lock": _pthread_mutex_lock, "_SDL_UpperBlitScaled": _SDL_UpperBlitScaled, "_exit": _exit, "___cxa_guard_abort": ___cxa_guard_abort, "_glGetString": _glGetString, "_putenv": _putenv, "_IMG_Load": _IMG_Load, "_TTF_FontHeight": _TTF_FontHeight, "___cxa_allocate_exception": ___cxa_allocate_exception, "___buildEnvironment": ___buildEnvironment, "_glUniform3fv": _glUniform3fv, "_glClearColor": _glClearColor, "_glBindTexture": _glBindTexture, "___cxa_end_catch": ___cxa_end_catch, "_glDisableVertexAttribArray": _glDisableVertexAttribArray, "_Mix_PlayChannel": _Mix_PlayChannel, "_strftime": _strftime, "_glCreateShader": _glCreateShader, "_getenv": _getenv, "_pthread_key_create": _pthread_key_create, "_pthread_cond_broadcast": _pthread_cond_broadcast, "_glfwTerminate": _glfwTerminate, "_glCompileShader": _glCompileShader, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_abort": _abort, "_glBufferData": _glBufferData, "_glTexImage2D": _glTexImage2D, "_glewInit": _glewInit, "___cxa_pure_virtual": ___cxa_pure_virtual, "_tanf": _tanf, "_pthread_getspecific": _pthread_getspecific, "_pthread_cond_wait": _pthread_cond_wait, "_sin": _sin, "_cosf": _cosf, "_glfwGetTime": _glfwGetTime, "_Mix_PlayMusic": _Mix_PlayMusic, "_SDL_CloseAudio": _SDL_CloseAudio, "___gxx_personality_v0": ___gxx_personality_v0, "_emscripten_set_mousemove_callback": _emscripten_set_mousemove_callback, "_glLinkProgram": _glLinkProgram, "_SDL_FreeRW": _SDL_FreeRW, "_strftime_l": _strftime_l, "_SDL_PauseAudio": _SDL_PauseAudio, "_glGetUniformLocation": _glGetUniformLocation, "_glClear": _glClear, "_Mix_FreeChunk": _Mix_FreeChunk, "_sinf": _sinf, "__exit": __exit, "_IMG_Load_RW": _IMG_Load_RW, "_glBindAttribLocation": _glBindAttribLocation, "__arraySum": __arraySum, "_pthread_self": _pthread_self, "_pthread_mutex_unlock": _pthread_mutex_unlock, "_TTF_SizeText": _TTF_SizeText, "___syscall54": ___syscall54, "___unlock": ___unlock, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_pthread_setspecific": _pthread_setspecific, "___cxa_throw": ___cxa_throw, "_glfwSetKeyCallback": _glfwSetKeyCallback, "_glfwCloseWindow": _glfwCloseWindow, "_glTexParameteri": _glTexParameteri, "_atexit": _atexit, "_SDL_UpperBlit": _SDL_UpperBlit, "_SDL_RWFromConstMem": _SDL_RWFromConstMem, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "___dso_handle": ___dso_handle };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ___dso_handle=env.___dso_handle|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_iiiiiid=env.nullFunc_iiiiiid;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iiiiiiiiiiii=env.nullFunc_iiiiiiiiiiii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiiiiiiii=env.nullFunc_viiiiiiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_diii=env.nullFunc_diii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_iiiiid=env.nullFunc_iiiiid;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_iiiiiid=env.invoke_iiiiiid;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_iiiiiiiiiiii=env.invoke_iiiiiiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiiiiii=env.invoke_viiiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_diii=env.invoke_diii;
  var invoke_i=env.invoke_i;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_iiiiid=env.invoke_iiiiid;
  var invoke_viiii=env.invoke_viiii;
  var _glUseProgram=env._glUseProgram;
  var _fabs=env._fabs;
  var _glUniformMatrix3fv=env._glUniformMatrix3fv;
  var _sqrtf=env._sqrtf;
  var _glUniformMatrix4fv=env._glUniformMatrix4fv;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var _SDL_RWFromFile=env._SDL_RWFromFile;
  var ___assert_fail=env.___assert_fail;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _glBindBuffer=env._glBindBuffer;
  var _glCreateProgram=env._glCreateProgram;
  var __addDays=env.__addDays;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var _SDL_FreeSurface=env._SDL_FreeSurface;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _TTF_RenderText_Solid=env._TTF_RenderText_Solid;
  var _sysconf=env._sysconf;
  var emscriptenWebGLComputeImageSize=env.emscriptenWebGLComputeImageSize;
  var ___syscall221=env.___syscall221;
  var _cos=env._cos;
  var _Mix_LoadWAV_RW=env._Mix_LoadWAV_RW;
  var _glfwInit=env._glfwInit;
  var __isLeapYear=env.__isLeapYear;
  var _glGenBuffers=env._glGenBuffers;
  var _glShaderSource=env._glShaderSource;
  var ___cxa_atexit=env.___cxa_atexit;
  var ___cxa_rethrow=env.___cxa_rethrow;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var _Mix_HaltMusic=env._Mix_HaltMusic;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var _glVertexAttribPointer=env._glVertexAttribPointer;
  var _SDL_GetTicks=env._SDL_GetTicks;
  var _glfwOpenWindow=env._glfwOpenWindow;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _glDrawElements=env._glDrawElements;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var _SDL_LockSurface=env._SDL_LockSurface;
  var _glViewport=env._glViewport;
  var ___setErrNo=env.___setErrNo;
  var ___resumeException=env.___resumeException;
  var _pthread_once=env._pthread_once;
  var _glGenTextures=env._glGenTextures;
  var _glEnable=env._glEnable;
  var _emscripten_get_now=env._emscripten_get_now;
  var _glAttachShader=env._glAttachShader;
  var ___lock=env.___lock;
  var emscriptenWebGLGetTexPixelData=env.emscriptenWebGLGetTexPixelData;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var _time=env._time;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var _SDL_UpperBlitScaled=env._SDL_UpperBlitScaled;
  var _exit=env._exit;
  var ___cxa_guard_abort=env.___cxa_guard_abort;
  var _glGetString=env._glGetString;
  var _putenv=env._putenv;
  var _IMG_Load=env._IMG_Load;
  var _TTF_FontHeight=env._TTF_FontHeight;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___buildEnvironment=env.___buildEnvironment;
  var _glUniform3fv=env._glUniform3fv;
  var _glClearColor=env._glClearColor;
  var _glBindTexture=env._glBindTexture;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var _glDisableVertexAttribArray=env._glDisableVertexAttribArray;
  var _Mix_PlayChannel=env._Mix_PlayChannel;
  var _strftime=env._strftime;
  var _glCreateShader=env._glCreateShader;
  var _getenv=env._getenv;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var _glfwTerminate=env._glfwTerminate;
  var _glCompileShader=env._glCompileShader;
  var _glEnableVertexAttribArray=env._glEnableVertexAttribArray;
  var _abort=env._abort;
  var _glBufferData=env._glBufferData;
  var _glTexImage2D=env._glTexImage2D;
  var _glewInit=env._glewInit;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var _tanf=env._tanf;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _sin=env._sin;
  var _cosf=env._cosf;
  var _glfwGetTime=env._glfwGetTime;
  var _Mix_PlayMusic=env._Mix_PlayMusic;
  var _SDL_CloseAudio=env._SDL_CloseAudio;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var _emscripten_set_mousemove_callback=env._emscripten_set_mousemove_callback;
  var _glLinkProgram=env._glLinkProgram;
  var _SDL_FreeRW=env._SDL_FreeRW;
  var _strftime_l=env._strftime_l;
  var _SDL_PauseAudio=env._SDL_PauseAudio;
  var _glGetUniformLocation=env._glGetUniformLocation;
  var _glClear=env._glClear;
  var _Mix_FreeChunk=env._Mix_FreeChunk;
  var _sinf=env._sinf;
  var __exit=env.__exit;
  var _IMG_Load_RW=env._IMG_Load_RW;
  var _glBindAttribLocation=env._glBindAttribLocation;
  var __arraySum=env.__arraySum;
  var _pthread_self=env._pthread_self;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var _TTF_SizeText=env._TTF_SizeText;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _pthread_setspecific=env._pthread_setspecific;
  var ___cxa_throw=env.___cxa_throw;
  var _glfwSetKeyCallback=env._glfwSetKeyCallback;
  var _glfwCloseWindow=env._glfwCloseWindow;
  var _glTexParameteri=env._glTexParameteri;
  var _atexit=env._atexit;
  var _SDL_UpperBlit=env._SDL_UpperBlit;
  var _SDL_RWFromConstMem=env._SDL_RWFromConstMem;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __ZNK7Objects9WithModel6renderERK5SceneRKN3glm7tmat4x4IfLNS4_9precisionE0EEE($this,$scene,$mvp) {
 $this = $this|0;
 $scene = $scene|0;
 $mvp = $mvp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $0 = $this;
 $1 = $scene;
 $2 = $mvp;
 $4 = $0;
 $5 = ((($4)) + 96|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = $2;
 $11 = ((($4)) + 4|0);
 __ZNK14Transformation14transformationEv($3,$11);
 FUNCTION_TABLE_viiii[$8 & 511]($6,$9,$10,$3);
 STACKTOP = sp;return;
}
function __ZN7Program8filenameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($agg$result,$name) {
 $agg$result = $agg$result|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = $0;
 __ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_($agg$result,13014,$1);
 STACKTOP = sp;return;
}
function __ZN7ProgramC2ER5StoreRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($this,$store,$name) {
 $this = $this|0;
 $store = $store|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 20|0;
 $6 = sp;
 $0 = $this;
 $1 = $store;
 $2 = $name;
 $7 = $0;
 __ZN8ResourceC2Ev($7);
 $8 = ((($7)) + 4|0);
 $9 = $1;
 $10 = $2;
 __ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_($3,$10,13334);
 __THREW__ = 0;
 $11 = (invoke_iii(328,($9|0),($3|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  $4 = $20;
  $5 = $21;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
  $24 = $4;
  $25 = $5;
  ___resumeException($24|0);
  // unreachable;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
 HEAP32[$8>>2] = $11;
 $14 = ((($7)) + 8|0);
 $15 = $1;
 $16 = $2;
 __ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_($6,$16,13030);
 __THREW__ = 0;
 $17 = (invoke_iii(328,($15|0),($6|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if (!($19)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
  HEAP32[$14>>2] = $17;
  STACKTOP = sp;return;
 }
 $22 = ___cxa_find_matching_catch()|0;
 $23 = tempRet0;
 $4 = $22;
 $5 = $23;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
 $24 = $4;
 $25 = $5;
 ___resumeException($24|0);
 // unreachable;
}
function __ZNK7Program5buildEjPKPKcjS3_($this,$attrib_count,$attribs,$uniform_count,$uniforms) {
 $this = $this|0;
 $attrib_count = $attrib_count|0;
 $attribs = $attribs|0;
 $uniform_count = $uniform_count|0;
 $uniforms = $uniforms|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $attrib = 0, $exe = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $attrib_count;
 $2 = $attribs;
 $3 = $uniform_count;
 $4 = $uniforms;
 $7 = $0;
 $8 = (__Znwj(16)|0);
 __THREW__ = 0;
 invoke_vi(329,($8|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $28 = ___cxa_find_matching_catch()|0;
  $29 = tempRet0;
  $5 = $28;
  $6 = $29;
  __ZdlPv($8);
  $30 = $5;
  $31 = $6;
  ___resumeException($30|0);
  // unreachable;
 }
 $exe = $8;
 $11 = $exe;
 $12 = ((($7)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 __ZN10Executable13attach_shaderERK6Shader($11,$13);
 $14 = $exe;
 $15 = ((($7)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 __ZN10Executable13attach_shaderERK6Shader($14,$16);
 $attrib = 0;
 while(1) {
  $17 = $attrib;
  $18 = $1;
  $19 = ($17>>>0)<($18>>>0);
  $20 = $exe;
  if (!($19)) {
   break;
  }
  $21 = $attrib;
  $22 = $attrib;
  $23 = $2;
  $24 = (($23) + ($22<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  __ZN10Executable20bind_attrib_locationEjPKc($20,$21,$25);
  $26 = $attrib;
  $27 = (($26) + 1)|0;
  $attrib = $27;
 }
 __ZN10Executable4linkEv($20);
 $32 = $exe;
 $33 = $3;
 $34 = $4;
 __ZN10Executable12get_uniformsEjPKPKc($32,$33,$34);
 $35 = $exe;
 STACKTOP = sp;return ($35|0);
}
function __ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_($agg$result,$__lhs,$__rhs) {
 $agg$result = $agg$result|0;
 $__lhs = $__lhs|0;
 $__rhs = $__rhs|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i = 0, $__i$i$i = 0, $__lhs_sz = 0, $__rhs_sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 195|0;
 $9 = sp;
 $12 = sp + 194|0;
 $43 = sp + 193|0;
 $44 = sp + 192|0;
 $41 = $__lhs;
 $42 = $__rhs;
 $$expand_i1_val = 0;
 HEAP8[$43>>0] = $$expand_i1_val;
 $47 = $42;
 $40 = $47;
 $48 = $40;
 $39 = $48;
 $49 = $39;
 $38 = $49;
 $50 = $38;
 $37 = $50;
 $10 = $agg$result;
 $11 = $44;
 $51 = $10;
 ;HEAP8[$9>>0]=HEAP8[$12>>0]|0;
 $7 = $51;
 $52 = $7;
 $6 = $9;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $4 = $52;
 $3 = $5;
 $2 = $51;
 $53 = $2;
 $1 = $53;
 $54 = $1;
 $0 = $54;
 $55 = $0;
 $__a$i$i = $55;
 $__i$i$i = 0;
 while(1) {
  $56 = $__i$i$i;
  $57 = ($56>>>0)<(3);
  if (!($57)) {
   break;
  }
  $58 = $__i$i$i;
  $59 = $__a$i$i;
  $60 = (($59) + ($58<<2)|0);
  HEAP32[$60>>2] = 0;
  $61 = $__i$i$i;
  $62 = (($61) + 1)|0;
  $__i$i$i = $62;
 }
 $63 = $41;
 __THREW__ = 0;
 $64 = (invoke_ii(330,($63|0))|0);
 $65 = __THREW__; __THREW__ = 0;
 $66 = $65&1;
 if ($66) {
  $122 = ___cxa_find_matching_catch()|0;
  $123 = tempRet0;
  $45 = $122;
  $46 = $123;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
  $124 = $45;
  $125 = $46;
  ___resumeException($124|0);
  // unreachable;
 }
 $__lhs_sz = $64;
 $67 = $42;
 $22 = $67;
 $68 = $22;
 $21 = $68;
 $69 = $21;
 $20 = $69;
 $70 = $20;
 $19 = $70;
 $71 = $19;
 $72 = HEAP8[$71>>0]|0;
 $73 = $72&255;
 $74 = $73 & 1;
 $75 = ($74|0)!=(0);
 if ($75) {
  $15 = $68;
  $76 = $15;
  $14 = $76;
  $77 = $14;
  $13 = $77;
  $78 = $13;
  $79 = ((($78)) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $87 = $80;
 } else {
  $18 = $68;
  $81 = $18;
  $17 = $81;
  $82 = $17;
  $16 = $82;
  $83 = $16;
  $84 = HEAP8[$83>>0]|0;
  $85 = $84&255;
  $86 = $85 >> 1;
  $87 = $86;
 }
 $__rhs_sz = $87;
 $88 = $41;
 $89 = $__lhs_sz;
 $90 = $__lhs_sz;
 $91 = $__rhs_sz;
 $92 = (($90) + ($91))|0;
 __THREW__ = 0;
 invoke_viiii(331,($agg$result|0),($88|0),($89|0),($92|0));
 $93 = __THREW__; __THREW__ = 0;
 $94 = $93&1;
 if ($94) {
  $122 = ___cxa_find_matching_catch()|0;
  $123 = tempRet0;
  $45 = $122;
  $46 = $123;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
  $124 = $45;
  $125 = $46;
  ___resumeException($124|0);
  // unreachable;
 }
 $95 = $42;
 $36 = $95;
 $96 = $36;
 $35 = $96;
 $97 = $35;
 $34 = $97;
 $98 = $34;
 $33 = $98;
 $99 = $33;
 $32 = $99;
 $100 = $32;
 $101 = HEAP8[$100>>0]|0;
 $102 = $101&255;
 $103 = $102 & 1;
 $104 = ($103|0)!=(0);
 if ($104) {
  $26 = $97;
  $105 = $26;
  $25 = $105;
  $106 = $25;
  $24 = $106;
  $107 = $24;
  $108 = ((($107)) + 8|0);
  $109 = HEAP32[$108>>2]|0;
  $116 = $109;
 } else {
  $31 = $97;
  $110 = $31;
  $30 = $110;
  $111 = $30;
  $29 = $111;
  $112 = $29;
  $113 = ((($112)) + 1|0);
  $28 = $113;
  $114 = $28;
  $27 = $114;
  $115 = $27;
  $116 = $115;
 }
 $23 = $116;
 $117 = $23;
 $118 = $__rhs_sz;
 __THREW__ = 0;
 (invoke_iiii(332,($agg$result|0),($117|0),($118|0))|0);
 $119 = __THREW__; __THREW__ = 0;
 $120 = $119&1;
 if ($120) {
  $122 = ___cxa_find_matching_catch()|0;
  $123 = tempRet0;
  $45 = $122;
  $46 = $123;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
  $124 = $45;
  $125 = $46;
  ___resumeException($124|0);
  // unreachable;
 }
 $$expand_i1_val2 = 1;
 HEAP8[$43>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$43>>0]|0;
 $121 = $$pre_trunc&1;
 if ($121) {
  STACKTOP = sp;return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
 STACKTOP = sp;return;
}
function __ZN8ResourceC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_($agg$result,$__lhs,$__rhs) {
 $agg$result = $agg$result|0;
 $__lhs = $__lhs|0;
 $__rhs = $__rhs|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i = 0, $__i$i$i = 0, $__lhs_sz = 0, $__rhs_sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = sp + 8|0;
 $18 = sp + 195|0;
 $19 = sp;
 $22 = sp + 194|0;
 $43 = sp + 193|0;
 $44 = sp + 192|0;
 $41 = $__lhs;
 $42 = $__rhs;
 $$expand_i1_val = 0;
 HEAP8[$43>>0] = $$expand_i1_val;
 $47 = $41;
 $40 = $47;
 $48 = $40;
 $39 = $48;
 $49 = $39;
 $38 = $49;
 $50 = $38;
 $37 = $50;
 $20 = $agg$result;
 $21 = $44;
 $51 = $20;
 ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
 $17 = $51;
 $52 = $17;
 $16 = $19;
 ;HEAP8[$15>>0]=HEAP8[$18>>0]|0;
 $14 = $52;
 $13 = $15;
 $12 = $51;
 $53 = $12;
 $11 = $53;
 $54 = $11;
 $10 = $54;
 $55 = $10;
 $__a$i$i = $55;
 $__i$i$i = 0;
 while(1) {
  $56 = $__i$i$i;
  $57 = ($56>>>0)<(3);
  if (!($57)) {
   break;
  }
  $58 = $__i$i$i;
  $59 = $__a$i$i;
  $60 = (($59) + ($58<<2)|0);
  HEAP32[$60>>2] = 0;
  $61 = $__i$i$i;
  $62 = (($61) + 1)|0;
  $__i$i$i = $62;
 }
 $63 = $41;
 $9 = $63;
 $64 = $9;
 $8 = $64;
 $65 = $8;
 $7 = $65;
 $66 = $7;
 $6 = $66;
 $67 = $6;
 $68 = HEAP8[$67>>0]|0;
 $69 = $68&255;
 $70 = $69 & 1;
 $71 = ($70|0)!=(0);
 if ($71) {
  $2 = $64;
  $72 = $2;
  $1 = $72;
  $73 = $1;
  $0 = $73;
  $74 = $0;
  $75 = ((($74)) + 4|0);
  $76 = HEAP32[$75>>2]|0;
  $83 = $76;
 } else {
  $5 = $64;
  $77 = $5;
  $4 = $77;
  $78 = $4;
  $3 = $78;
  $79 = $3;
  $80 = HEAP8[$79>>0]|0;
  $81 = $80&255;
  $82 = $81 >> 1;
  $83 = $82;
 }
 $__lhs_sz = $83;
 $84 = $42;
 __THREW__ = 0;
 $85 = (invoke_ii(330,($84|0))|0);
 $86 = __THREW__; __THREW__ = 0;
 $87 = $86&1;
 if ($87) {
  $122 = ___cxa_find_matching_catch()|0;
  $123 = tempRet0;
  $45 = $122;
  $46 = $123;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
  $124 = $45;
  $125 = $46;
  ___resumeException($124|0);
  // unreachable;
 }
 $__rhs_sz = $85;
 $88 = $41;
 $36 = $88;
 $89 = $36;
 $35 = $89;
 $90 = $35;
 $34 = $90;
 $91 = $34;
 $33 = $91;
 $92 = $33;
 $32 = $92;
 $93 = $32;
 $94 = HEAP8[$93>>0]|0;
 $95 = $94&255;
 $96 = $95 & 1;
 $97 = ($96|0)!=(0);
 if ($97) {
  $26 = $90;
  $98 = $26;
  $25 = $98;
  $99 = $25;
  $24 = $99;
  $100 = $24;
  $101 = ((($100)) + 8|0);
  $102 = HEAP32[$101>>2]|0;
  $109 = $102;
 } else {
  $31 = $90;
  $103 = $31;
  $30 = $103;
  $104 = $30;
  $29 = $104;
  $105 = $29;
  $106 = ((($105)) + 1|0);
  $28 = $106;
  $107 = $28;
  $27 = $107;
  $108 = $27;
  $109 = $108;
 }
 $23 = $109;
 $110 = $23;
 $111 = $__lhs_sz;
 $112 = $__lhs_sz;
 $113 = $__rhs_sz;
 $114 = (($112) + ($113))|0;
 __THREW__ = 0;
 invoke_viiii(331,($agg$result|0),($110|0),($111|0),($114|0));
 $115 = __THREW__; __THREW__ = 0;
 $116 = $115&1;
 if ($116) {
  $122 = ___cxa_find_matching_catch()|0;
  $123 = tempRet0;
  $45 = $122;
  $46 = $123;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
  $124 = $45;
  $125 = $46;
  ___resumeException($124|0);
  // unreachable;
 }
 $117 = $42;
 $118 = $__rhs_sz;
 __THREW__ = 0;
 (invoke_iiii(332,($agg$result|0),($117|0),($118|0))|0);
 $119 = __THREW__; __THREW__ = 0;
 $120 = $119&1;
 if ($120) {
  $122 = ___cxa_find_matching_catch()|0;
  $123 = tempRet0;
  $45 = $122;
  $46 = $123;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
  $124 = $45;
  $125 = $46;
  ___resumeException($124|0);
  // unreachable;
 }
 $$expand_i1_val2 = 1;
 HEAP8[$43>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$43>>0]|0;
 $121 = $$pre_trunc&1;
 if ($121) {
  STACKTOP = sp;return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
 STACKTOP = sp;return;
}
function __ZN5Store4loadI6ShaderEEPKT_RKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $13 = sp + 120|0;
 $15 = sp + 112|0;
 $17 = sp + 104|0;
 $19 = sp;
 $20 = sp + 96|0;
 $23 = sp + 84|0;
 $26 = sp + 72|0;
 $27 = sp + 60|0;
 $30 = sp + 48|0;
 $31 = sp + 36|0;
 $32 = sp + 24|0;
 $33 = sp + 12|0;
 $24 = $this;
 $25 = $name;
 $34 = $24;
 $35 = $25;
 __ZN6Shader8filenameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($27,$35);
 $21 = $34;
 $22 = $27;
 $36 = $21;
 $37 = $22;
 __THREW__ = 0;
 $38 = (invoke_iii(333,($36|0),($37|0))|0);
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 if ($40) {
  $71 = ___cxa_find_matching_catch()|0;
  $72 = tempRet0;
  $28 = $71;
  $29 = $72;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($27);
  $93 = $28;
  $94 = $29;
  ___resumeException($93|0);
  // unreachable;
 }
 HEAP32[$23>>2] = $38;
 ;HEAP8[$19>>0]=HEAP8[$23>>0]|0;HEAP8[$19+1>>0]=HEAP8[$23+1>>0]|0;HEAP8[$19+2>>0]=HEAP8[$23+2>>0]|0;HEAP8[$19+3>>0]=HEAP8[$23+3>>0]|0;
 $18 = $20;
 $41 = $18;
 ;HEAP32[$41>>2]=HEAP32[$19>>2]|0;
 $42 = HEAP32[$20>>2]|0;
 HEAP32[$26>>2] = $42;
 $16 = $34;
 $43 = $16;
 $14 = $43;
 $44 = $14;
 $12 = $44;
 $45 = $12;
 $46 = ((($45)) + 4|0);
 $11 = $46;
 $47 = $11;
 $10 = $47;
 $48 = $10;
 $9 = $48;
 $49 = $9;
 $8 = $49;
 $50 = $8;
 $6 = $13;
 $7 = $50;
 $51 = $6;
 $52 = $7;
 HEAP32[$51>>2] = $52;
 $53 = HEAP32[$13>>2]|0;
 HEAP32[$17>>2] = $53;
 ;HEAP8[$5>>0]=HEAP8[$17>>0]|0;HEAP8[$5+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[$17+3>>0]|0;
 $4 = $15;
 $54 = $4;
 ;HEAP32[$54>>2]=HEAP32[$5>>2]|0;
 $55 = HEAP32[$15>>2]|0;
 HEAP32[$30>>2] = $55;
 $2 = $26;
 $3 = $30;
 $56 = $2;
 $57 = $3;
 $0 = $56;
 $1 = $57;
 $58 = $0;
 $59 = HEAP32[$58>>2]|0;
 $60 = $1;
 $61 = HEAP32[$60>>2]|0;
 $62 = ($59|0)==($61|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($27);
 do {
  if ($62) {
   $63 = (__Znwj(8)|0);
   $64 = $25;
   __THREW__ = 0;
   invoke_viii(334,($63|0),($34|0),($64|0));
   $65 = __THREW__; __THREW__ = 0;
   $66 = $65&1;
   if ($66) {
    $73 = ___cxa_find_matching_catch()|0;
    $74 = tempRet0;
    $28 = $73;
    $29 = $74;
    __ZdlPv($63);
    $93 = $28;
    $94 = $29;
    ___resumeException($93|0);
    // unreachable;
   }
   $67 = $25;
   __ZN6Shader8filenameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($31,$67);
   __THREW__ = 0;
   $68 = (invoke_iii(335,($34|0),($31|0))|0);
   $69 = __THREW__; __THREW__ = 0;
   $70 = $69&1;
   if (!($70)) {
    HEAP32[$68>>2] = $63;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($31);
    break;
   }
   $75 = ___cxa_find_matching_catch()|0;
   $76 = tempRet0;
   $28 = $75;
   $29 = $76;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($31);
   $93 = $28;
   $94 = $29;
   ___resumeException($93|0);
   // unreachable;
  }
 } while(0);
 $77 = $25;
 __ZN6Shader8filenameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($32,$77);
 __THREW__ = 0;
 $78 = (invoke_iii(335,($34|0),($32|0))|0);
 $79 = __THREW__; __THREW__ = 0;
 $80 = $79&1;
 if ($80) {
  $89 = ___cxa_find_matching_catch()|0;
  $90 = tempRet0;
  $28 = $89;
  $29 = $90;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($32);
  $93 = $28;
  $94 = $29;
  ___resumeException($93|0);
  // unreachable;
 }
 $81 = HEAP32[$78>>2]|0;
 $82 = HEAP32[$81>>2]|0;
 $83 = (($82) + 1)|0;
 HEAP32[$81>>2] = $83;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($32);
 $84 = $25;
 __ZN6Shader8filenameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($33,$84);
 __THREW__ = 0;
 $85 = (invoke_iii(335,($34|0),($33|0))|0);
 $86 = __THREW__; __THREW__ = 0;
 $87 = $86&1;
 if (!($87)) {
  $88 = HEAP32[$85>>2]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($33);
  STACKTOP = sp;return ($88|0);
 }
 $91 = ___cxa_find_matching_catch()|0;
 $92 = tempRet0;
 $28 = $91;
 $29 = $92;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($33);
 $93 = $28;
 $94 = $29;
 ___resumeException($93|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP8ResourceEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE4findIS7_EENS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEEiEERKT_($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lhs_sz$i$i$i$i = 0, $__p = 0, $__result$i$i$i$i = 0, $__rhs_sz$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = sp + 384|0;
 $41 = sp;
 $44 = sp + 448|0;
 $__lhs_sz$i$i$i$i = sp + 124|0;
 $__rhs_sz$i$i$i$i = sp + 120|0;
 $97 = sp + 52|0;
 $105 = sp + 20|0;
 $__p = sp + 8|0;
 $108 = sp + 4|0;
 $106 = $this;
 $107 = $__v;
 $109 = $106;
 $110 = $107;
 $104 = $109;
 $111 = $104;
 $103 = $111;
 $112 = $103;
 $113 = ((($112)) + 4|0);
 $102 = $113;
 $114 = $102;
 $101 = $114;
 $115 = $101;
 $100 = $115;
 $116 = $100;
 $99 = $116;
 $117 = $99;
 $118 = HEAP32[$117>>2]|0;
 $21 = $109;
 $119 = $21;
 $120 = ((($119)) + 4|0);
 $20 = $120;
 $121 = $20;
 $19 = $121;
 $122 = $19;
 $18 = $122;
 $123 = $18;
 $17 = $123;
 $124 = $17;
 $125 = (__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP8ResourceEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE13__lower_boundIS7_EENS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEEiEERKT_SM_SM_($109,$110,$118,$124)|0);
 HEAP32[$__p>>2] = $125;
 $16 = $109;
 $126 = $16;
 $14 = $126;
 $127 = $14;
 $128 = ((($127)) + 4|0);
 $13 = $128;
 $129 = $13;
 $12 = $129;
 $130 = $12;
 $11 = $130;
 $131 = $11;
 $10 = $131;
 $132 = $10;
 $8 = $15;
 $9 = $132;
 $133 = $8;
 $134 = $9;
 HEAP32[$133>>2] = $134;
 $135 = HEAP32[$15>>2]|0;
 HEAP32[$108>>2] = $135;
 $2 = $__p;
 $3 = $108;
 $136 = $2;
 $137 = $3;
 $0 = $136;
 $1 = $137;
 $138 = $0;
 $139 = HEAP32[$138>>2]|0;
 $140 = $1;
 $141 = HEAP32[$140>>2]|0;
 $142 = ($139|0)==($141|0);
 $143 = $142 ^ 1;
 if ($143) {
  $6 = $109;
  $144 = $6;
  $145 = ((($144)) + 8|0);
  $5 = $145;
  $146 = $5;
  $4 = $146;
  $147 = $4;
  $148 = $107;
  $7 = $__p;
  $149 = $7;
  $150 = HEAP32[$149>>2]|0;
  $151 = ((($150)) + 16|0);
  $87 = $147;
  $88 = $148;
  $89 = $151;
  $152 = $87;
  $153 = $88;
  $154 = $89;
  $84 = $152;
  $85 = $153;
  $86 = $154;
  $155 = $85;
  $156 = $86;
  $82 = $155;
  $83 = $156;
  $157 = $82;
  $158 = $83;
  $80 = $157;
  $81 = $158;
  $159 = $80;
  $78 = $159;
  $160 = $78;
  $77 = $160;
  $161 = $77;
  $76 = $161;
  $162 = $76;
  $75 = $162;
  $163 = $75;
  $164 = HEAP8[$163>>0]|0;
  $165 = $164&255;
  $166 = $165 & 1;
  $167 = ($166|0)!=(0);
  if ($167) {
   $71 = $160;
   $168 = $71;
   $70 = $168;
   $169 = $70;
   $69 = $169;
   $170 = $69;
   $171 = ((($170)) + 4|0);
   $172 = HEAP32[$171>>2]|0;
   $179 = $172;
  } else {
   $74 = $160;
   $173 = $74;
   $73 = $173;
   $174 = $73;
   $72 = $174;
   $175 = $72;
   $176 = HEAP8[$175>>0]|0;
   $177 = $176&255;
   $178 = $177 >> 1;
   $179 = $178;
  }
  HEAP32[$__lhs_sz$i$i$i$i>>2] = $179;
  $180 = $81;
  $68 = $180;
  $181 = $68;
  $67 = $181;
  $182 = $67;
  $66 = $182;
  $183 = $66;
  $65 = $183;
  $184 = $65;
  $185 = HEAP8[$184>>0]|0;
  $186 = $185&255;
  $187 = $186 & 1;
  $188 = ($187|0)!=(0);
  if ($188) {
   $61 = $181;
   $189 = $61;
   $60 = $189;
   $190 = $60;
   $59 = $190;
   $191 = $59;
   $192 = ((($191)) + 4|0);
   $193 = HEAP32[$192>>2]|0;
   $200 = $193;
  } else {
   $64 = $181;
   $194 = $64;
   $63 = $194;
   $195 = $63;
   $62 = $195;
   $196 = $62;
   $197 = HEAP8[$196>>0]|0;
   $198 = $197&255;
   $199 = $198 >> 1;
   $200 = $199;
  }
  HEAP32[$__rhs_sz$i$i$i$i>>2] = $200;
  $58 = $159;
  $201 = $58;
  $57 = $201;
  $202 = $57;
  $56 = $202;
  $203 = $56;
  $55 = $203;
  $204 = $55;
  $54 = $204;
  $205 = $54;
  $206 = HEAP8[$205>>0]|0;
  $207 = $206&255;
  $208 = $207 & 1;
  $209 = ($208|0)!=(0);
  if ($209) {
   $48 = $202;
   $210 = $48;
   $47 = $210;
   $211 = $47;
   $46 = $211;
   $212 = $46;
   $213 = ((($212)) + 8|0);
   $214 = HEAP32[$213>>2]|0;
   $221 = $214;
  } else {
   $53 = $202;
   $215 = $53;
   $52 = $215;
   $216 = $52;
   $51 = $216;
   $217 = $51;
   $218 = ((($217)) + 1|0);
   $50 = $218;
   $219 = $50;
   $49 = $219;
   $220 = $49;
   $221 = $220;
  }
  $45 = $221;
  $222 = $45;
  $223 = $81;
  $35 = $223;
  $224 = $35;
  $34 = $224;
  $225 = $34;
  $33 = $225;
  $226 = $33;
  $32 = $226;
  $227 = $32;
  $31 = $227;
  $228 = $31;
  $229 = HEAP8[$228>>0]|0;
  $230 = $229&255;
  $231 = $230 & 1;
  $232 = ($231|0)!=(0);
  if ($232) {
   $25 = $225;
   $233 = $25;
   $24 = $233;
   $234 = $24;
   $23 = $234;
   $235 = $23;
   $236 = ((($235)) + 8|0);
   $237 = HEAP32[$236>>2]|0;
   $244 = $237;
  } else {
   $30 = $225;
   $238 = $30;
   $29 = $238;
   $239 = $29;
   $28 = $239;
   $240 = $28;
   $241 = ((($240)) + 1|0);
   $27 = $241;
   $242 = $27;
   $26 = $242;
   $243 = $26;
   $244 = $243;
  }
  $22 = $244;
  $245 = $22;
  $42 = $__lhs_sz$i$i$i$i;
  $43 = $__rhs_sz$i$i$i$i;
  $246 = $42;
  $247 = $43;
  ;HEAP8[$41>>0]=HEAP8[$44>>0]|0;
  $39 = $246;
  $40 = $247;
  $248 = $40;
  $249 = $39;
  $36 = $41;
  $37 = $248;
  $38 = $249;
  $250 = $37;
  $251 = HEAP32[$250>>2]|0;
  $252 = $38;
  $253 = HEAP32[$252>>2]|0;
  $254 = ($251>>>0)<($253>>>0);
  $255 = $40;
  $256 = $39;
  $257 = $254 ? $255 : $256;
  $258 = HEAP32[$257>>2]|0;
  __THREW__ = 0;
  $259 = (invoke_iiii(336,($222|0),($245|0),($258|0))|0);
  $260 = __THREW__; __THREW__ = 0;
  $261 = $260&1;
  if ($261) {
   $271 = ___cxa_find_matching_catch(0|0)|0;
   $272 = tempRet0;
   ___clang_call_terminate($271);
   // unreachable;
  }
  $__result$i$i$i$i = $259;
  $262 = $__result$i$i$i$i;
  $263 = ($262|0)!=(0);
  do {
   if ($263) {
    $264 = $__result$i$i$i$i;
    $79 = $264;
   } else {
    $265 = HEAP32[$__lhs_sz$i$i$i$i>>2]|0;
    $266 = HEAP32[$__rhs_sz$i$i$i$i>>2]|0;
    $267 = ($265>>>0)<($266>>>0);
    if ($267) {
     $79 = -1;
     break;
    }
    $268 = HEAP32[$__lhs_sz$i$i$i$i>>2]|0;
    $269 = HEAP32[$__rhs_sz$i$i$i$i>>2]|0;
    $270 = ($268>>>0)>($269>>>0);
    if ($270) {
     $79 = 1;
     break;
    } else {
     $79 = 0;
     break;
    }
   }
  } while(0);
  $273 = $79;
  $274 = ($273|0)<(0);
  if (!($274)) {
   ;HEAP32[$105>>2]=HEAP32[$__p>>2]|0;
   $285 = HEAP32[$105>>2]|0;
   STACKTOP = sp;return ($285|0);
  }
 }
 $98 = $109;
 $275 = $98;
 $96 = $275;
 $276 = $96;
 $277 = ((($276)) + 4|0);
 $95 = $277;
 $278 = $95;
 $94 = $278;
 $279 = $94;
 $93 = $279;
 $280 = $93;
 $92 = $280;
 $281 = $92;
 $90 = $97;
 $91 = $281;
 $282 = $90;
 $283 = $91;
 HEAP32[$282>>2] = $283;
 $284 = HEAP32[$97>>2]|0;
 HEAP32[$105>>2] = $284;
 $285 = HEAP32[$105>>2]|0;
 STACKTOP = sp;return ($285|0);
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP8ResourceNS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEEixERSC_($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__child = 0, $__h = 0, $__parent = 0, $__r = 0, $__t$i = 0;
 var $__tmp$i$i = 0, $__tmp$i$i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 24|0;
 $9 = sp + 339|0;
 $20 = sp + 16|0;
 $23 = sp + 338|0;
 $43 = sp + 8|0;
 $46 = sp + 337|0;
 $57 = sp;
 $60 = sp + 336|0;
 $__parent = sp + 56|0;
 $__h = sp + 36|0;
 $72 = $this;
 $73 = $__k;
 $76 = $72;
 $77 = $73;
 $78 = (__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP8ResourceNS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERSC_($76,$__parent,$77)|0);
 $__child = $78;
 $79 = $__child;
 $80 = HEAP32[$79>>2]|0;
 $__r = $80;
 $81 = $__child;
 $82 = HEAP32[$81>>2]|0;
 $83 = ($82|0)==(0|0);
 if (!($83)) {
  $190 = $__r;
  $191 = ((($190)) + 16|0);
  $192 = ((($191)) + 12|0);
  STACKTOP = sp;return ($192|0);
 }
 $84 = $73;
 __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP8ResourceNS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEE25__construct_node_with_keyERSC_($__h,$76,$84);
 $85 = HEAP32[$__parent>>2]|0;
 $86 = $__child;
 $71 = $__h;
 $87 = $71;
 $70 = $87;
 $88 = $70;
 $69 = $88;
 $89 = $69;
 $90 = HEAP32[$89>>2]|0;
 __THREW__ = 0;
 invoke_viiii(337,($76|0),($85|0),($86|0),($90|0));
 $91 = __THREW__; __THREW__ = 0;
 $92 = $91&1;
 if ($92) {
  $144 = ___cxa_find_matching_catch()|0;
  $145 = tempRet0;
  $74 = $144;
  $75 = $145;
  $68 = $__h;
  $146 = $68;
  $66 = $146;
  $67 = 0;
  $147 = $66;
  $65 = $147;
  $148 = $65;
  $64 = $148;
  $149 = $64;
  $150 = HEAP32[$149>>2]|0;
  $__tmp$i$i = $150;
  $151 = $67;
  $40 = $147;
  $152 = $40;
  $39 = $152;
  $153 = $39;
  HEAP32[$153>>2] = $151;
  $154 = $__tmp$i$i;
  $155 = ($154|0)!=(0|0);
  if (!($155)) {
   $193 = $74;
   $194 = $75;
   ___resumeException($193|0);
   // unreachable;
  }
  $38 = $147;
  $156 = $38;
  $37 = $156;
  $157 = $37;
  $158 = ((($157)) + 4|0);
  $159 = $__tmp$i$i;
  $62 = $158;
  $63 = $159;
  $160 = $62;
  $161 = ((($160)) + 5|0);
  $162 = HEAP8[$161>>0]|0;
  $163 = $162&1;
  if ($163) {
   $164 = HEAP32[$160>>2]|0;
   $165 = $63;
   $166 = ((($165)) + 16|0);
   $167 = ((($166)) + 12|0);
   $61 = $167;
   $168 = $61;
   $58 = $164;
   $59 = $168;
   $169 = $58;
   $170 = $59;
   ;HEAP8[$57>>0]=HEAP8[$60>>0]|0;
   $55 = $169;
   $56 = $170;
  }
  $171 = ((($160)) + 4|0);
  $172 = HEAP8[$171>>0]|0;
  $173 = $172&1;
  if ($173) {
   $174 = HEAP32[$160>>2]|0;
   $175 = $63;
   $176 = ((($175)) + 16|0);
   $47 = $176;
   $177 = $47;
   $44 = $174;
   $45 = $177;
   $178 = $44;
   $179 = $45;
   ;HEAP8[$43>>0]=HEAP8[$46>>0]|0;
   $41 = $178;
   $42 = $179;
   $180 = $42;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($180);
  }
  $181 = $63;
  $182 = ($181|0)!=(0|0);
  if (!($182)) {
   $193 = $74;
   $194 = $75;
   ___resumeException($193|0);
   // unreachable;
  }
  $183 = HEAP32[$160>>2]|0;
  $184 = $63;
  $52 = $183;
  $53 = $184;
  $54 = 1;
  $185 = $52;
  $186 = $53;
  $187 = $54;
  $49 = $185;
  $50 = $186;
  $51 = $187;
  $188 = $50;
  $48 = $188;
  $189 = $48;
  __ZdlPv($189);
  $193 = $74;
  $194 = $75;
  ___resumeException($193|0);
  // unreachable;
 } else {
  $36 = $__h;
  $93 = $36;
  $35 = $93;
  $94 = $35;
  $34 = $94;
  $95 = $34;
  $96 = HEAP32[$95>>2]|0;
  $__t$i = $96;
  $33 = $93;
  $97 = $33;
  $32 = $97;
  $98 = $32;
  HEAP32[$98>>2] = 0;
  $99 = $__t$i;
  $__r = $99;
  $31 = $__h;
  $100 = $31;
  $29 = $100;
  $30 = 0;
  $101 = $29;
  $28 = $101;
  $102 = $28;
  $27 = $102;
  $103 = $27;
  $104 = HEAP32[$103>>2]|0;
  $__tmp$i$i$1 = $104;
  $105 = $30;
  $3 = $101;
  $106 = $3;
  $2 = $106;
  $107 = $2;
  HEAP32[$107>>2] = $105;
  $108 = $__tmp$i$i$1;
  $109 = ($108|0)!=(0|0);
  if (!($109)) {
   $190 = $__r;
   $191 = ((($190)) + 16|0);
   $192 = ((($191)) + 12|0);
   STACKTOP = sp;return ($192|0);
  }
  $1 = $101;
  $110 = $1;
  $0 = $110;
  $111 = $0;
  $112 = ((($111)) + 4|0);
  $113 = $__tmp$i$i$1;
  $25 = $112;
  $26 = $113;
  $114 = $25;
  $115 = ((($114)) + 5|0);
  $116 = HEAP8[$115>>0]|0;
  $117 = $116&1;
  if ($117) {
   $118 = HEAP32[$114>>2]|0;
   $119 = $26;
   $120 = ((($119)) + 16|0);
   $121 = ((($120)) + 12|0);
   $24 = $121;
   $122 = $24;
   $21 = $118;
   $22 = $122;
   $123 = $21;
   $124 = $22;
   ;HEAP8[$20>>0]=HEAP8[$23>>0]|0;
   $18 = $123;
   $19 = $124;
  }
  $125 = ((($114)) + 4|0);
  $126 = HEAP8[$125>>0]|0;
  $127 = $126&1;
  if ($127) {
   $128 = HEAP32[$114>>2]|0;
   $129 = $26;
   $130 = ((($129)) + 16|0);
   $10 = $130;
   $131 = $10;
   $7 = $128;
   $8 = $131;
   $132 = $7;
   $133 = $8;
   ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
   $4 = $132;
   $5 = $133;
   $134 = $5;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($134);
  }
  $135 = $26;
  $136 = ($135|0)!=(0|0);
  if (!($136)) {
   $190 = $__r;
   $191 = ((($190)) + 16|0);
   $192 = ((($191)) + 12|0);
   STACKTOP = sp;return ($192|0);
  }
  $137 = HEAP32[$114>>2]|0;
  $138 = $26;
  $15 = $137;
  $16 = $138;
  $17 = 1;
  $139 = $15;
  $140 = $16;
  $141 = $17;
  $12 = $139;
  $13 = $140;
  $14 = $141;
  $142 = $13;
  $11 = $142;
  $143 = $11;
  __ZdlPv($143);
  $190 = $__r;
  $191 = ((($190)) + 16|0);
  $192 = ((($191)) + 12|0);
  STACKTOP = sp;return ($192|0);
 }
 return (0)|0;
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP8ResourceNS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERSC_($this,$__parent,$__k) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lhs_sz$i$i$i = 0, $__lhs_sz$i$i$i$1 = 0, $__nd = 0, $__result$i$i$i = 0, $__result$i$i$i$3 = 0, $__rhs_sz$i$i$i = 0, $__rhs_sz$i$i$i$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = sp + 8|0;
 $22 = sp + 637|0;
 $__lhs_sz$i$i$i$1 = sp + 400|0;
 $__rhs_sz$i$i$i$2 = sp + 396|0;
 $92 = sp;
 $95 = sp + 636|0;
 $__lhs_sz$i$i$i = sp + 104|0;
 $__rhs_sz$i$i$i = sp + 100|0;
 $150 = $this;
 $151 = $__parent;
 $152 = $__k;
 $153 = $150;
 $148 = $153;
 $154 = $148;
 $147 = $154;
 $155 = $147;
 $156 = ((($155)) + 4|0);
 $146 = $156;
 $157 = $146;
 $145 = $157;
 $158 = $145;
 $144 = $158;
 $159 = $144;
 $143 = $159;
 $160 = $143;
 $161 = HEAP32[$160>>2]|0;
 $__nd = $161;
 $162 = $__nd;
 $163 = ($162|0)!=(0|0);
 if (!($163)) {
  $142 = $153;
  $441 = $142;
  $442 = ((($441)) + 4|0);
  $141 = $442;
  $443 = $141;
  $140 = $443;
  $444 = $140;
  $139 = $444;
  $445 = $139;
  $138 = $445;
  $446 = $138;
  $447 = $151;
  HEAP32[$447>>2] = $446;
  $448 = $151;
  $449 = HEAP32[$448>>2]|0;
  $149 = $449;
  $450 = $149;
  STACKTOP = sp;return ($450|0);
 }
 while(1) {
  $72 = $153;
  $164 = $72;
  $165 = ((($164)) + 8|0);
  $71 = $165;
  $166 = $71;
  $70 = $166;
  $167 = $70;
  $69 = $167;
  $168 = $69;
  $169 = $152;
  $170 = $__nd;
  $171 = ((($170)) + 16|0);
  $62 = $168;
  $63 = $169;
  $64 = $171;
  $172 = $63;
  $173 = $64;
  $60 = $172;
  $61 = $173;
  $174 = $60;
  $175 = $61;
  $58 = $174;
  $59 = $175;
  $176 = $58;
  $56 = $176;
  $177 = $56;
  $55 = $177;
  $178 = $55;
  $54 = $178;
  $179 = $54;
  $53 = $179;
  $180 = $53;
  $181 = HEAP8[$180>>0]|0;
  $182 = $181&255;
  $183 = $182 & 1;
  $184 = ($183|0)!=(0);
  if ($184) {
   $49 = $177;
   $185 = $49;
   $48 = $185;
   $186 = $48;
   $47 = $186;
   $187 = $47;
   $188 = ((($187)) + 4|0);
   $189 = HEAP32[$188>>2]|0;
   $196 = $189;
  } else {
   $52 = $177;
   $190 = $52;
   $51 = $190;
   $191 = $51;
   $50 = $191;
   $192 = $50;
   $193 = HEAP8[$192>>0]|0;
   $194 = $193&255;
   $195 = $194 >> 1;
   $196 = $195;
  }
  HEAP32[$__lhs_sz$i$i$i$1>>2] = $196;
  $197 = $59;
  $46 = $197;
  $198 = $46;
  $45 = $198;
  $199 = $45;
  $44 = $199;
  $200 = $44;
  $43 = $200;
  $201 = $43;
  $202 = HEAP8[$201>>0]|0;
  $203 = $202&255;
  $204 = $203 & 1;
  $205 = ($204|0)!=(0);
  if ($205) {
   $39 = $198;
   $206 = $39;
   $38 = $206;
   $207 = $38;
   $37 = $207;
   $208 = $37;
   $209 = ((($208)) + 4|0);
   $210 = HEAP32[$209>>2]|0;
   $217 = $210;
  } else {
   $42 = $198;
   $211 = $42;
   $41 = $211;
   $212 = $41;
   $40 = $212;
   $213 = $40;
   $214 = HEAP8[$213>>0]|0;
   $215 = $214&255;
   $216 = $215 >> 1;
   $217 = $216;
  }
  HEAP32[$__rhs_sz$i$i$i$2>>2] = $217;
  $36 = $176;
  $218 = $36;
  $35 = $218;
  $219 = $35;
  $34 = $219;
  $220 = $34;
  $33 = $220;
  $221 = $33;
  $32 = $221;
  $222 = $32;
  $223 = HEAP8[$222>>0]|0;
  $224 = $223&255;
  $225 = $224 & 1;
  $226 = ($225|0)!=(0);
  if ($226) {
   $26 = $219;
   $227 = $26;
   $25 = $227;
   $228 = $25;
   $24 = $228;
   $229 = $24;
   $230 = ((($229)) + 8|0);
   $231 = HEAP32[$230>>2]|0;
   $238 = $231;
  } else {
   $31 = $219;
   $232 = $31;
   $30 = $232;
   $233 = $30;
   $29 = $233;
   $234 = $29;
   $235 = ((($234)) + 1|0);
   $28 = $235;
   $236 = $28;
   $27 = $236;
   $237 = $27;
   $238 = $237;
  }
  $23 = $238;
  $239 = $23;
  $240 = $59;
  $13 = $240;
  $241 = $13;
  $12 = $241;
  $242 = $12;
  $11 = $242;
  $243 = $11;
  $10 = $243;
  $244 = $10;
  $9 = $244;
  $245 = $9;
  $246 = HEAP8[$245>>0]|0;
  $247 = $246&255;
  $248 = $247 & 1;
  $249 = ($248|0)!=(0);
  if ($249) {
   $3 = $242;
   $250 = $3;
   $2 = $250;
   $251 = $2;
   $1 = $251;
   $252 = $1;
   $253 = ((($252)) + 8|0);
   $254 = HEAP32[$253>>2]|0;
   $261 = $254;
  } else {
   $8 = $242;
   $255 = $8;
   $7 = $255;
   $256 = $7;
   $6 = $256;
   $257 = $6;
   $258 = ((($257)) + 1|0);
   $5 = $258;
   $259 = $5;
   $4 = $259;
   $260 = $4;
   $261 = $260;
  }
  $0 = $261;
  $262 = $0;
  $20 = $__lhs_sz$i$i$i$1;
  $21 = $__rhs_sz$i$i$i$2;
  $263 = $20;
  $264 = $21;
  ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
  $17 = $263;
  $18 = $264;
  $265 = $18;
  $266 = $17;
  $14 = $19;
  $15 = $265;
  $16 = $266;
  $267 = $15;
  $268 = HEAP32[$267>>2]|0;
  $269 = $16;
  $270 = HEAP32[$269>>2]|0;
  $271 = ($268>>>0)<($270>>>0);
  $272 = $18;
  $273 = $17;
  $274 = $271 ? $272 : $273;
  $275 = HEAP32[$274>>2]|0;
  __THREW__ = 0;
  $276 = (invoke_iiii(336,($239|0),($262|0),($275|0))|0);
  $277 = __THREW__; __THREW__ = 0;
  $278 = $277&1;
  if ($278) {
   label = 22;
   break;
  }
  $__result$i$i$i$3 = $276;
  $279 = $__result$i$i$i$3;
  $280 = ($279|0)!=(0);
  do {
   if ($280) {
    $281 = $__result$i$i$i$3;
    $57 = $281;
   } else {
    $282 = HEAP32[$__lhs_sz$i$i$i$1>>2]|0;
    $283 = HEAP32[$__rhs_sz$i$i$i$2>>2]|0;
    $284 = ($282>>>0)<($283>>>0);
    if ($284) {
     $57 = -1;
     break;
    }
    $285 = HEAP32[$__lhs_sz$i$i$i$1>>2]|0;
    $286 = HEAP32[$__rhs_sz$i$i$i$2>>2]|0;
    $287 = ($285>>>0)>($286>>>0);
    if ($287) {
     $57 = 1;
     break;
    } else {
     $57 = 0;
     break;
    }
   }
  } while(0);
  $290 = $57;
  $291 = ($290|0)<(0);
  if ($291) {
   $292 = $__nd;
   $293 = HEAP32[$292>>2]|0;
   $294 = ($293|0)!=(0|0);
   $295 = $__nd;
   if (!($294)) {
    label = 26;
    break;
   }
   $296 = HEAP32[$295>>2]|0;
   $__nd = $296;
   continue;
  }
  $67 = $153;
  $300 = $67;
  $301 = ((($300)) + 8|0);
  $66 = $301;
  $302 = $66;
  $65 = $302;
  $303 = $65;
  $68 = $303;
  $304 = $68;
  $305 = $__nd;
  $306 = ((($305)) + 16|0);
  $307 = $152;
  $135 = $304;
  $136 = $306;
  $137 = $307;
  $308 = $136;
  $309 = $137;
  $133 = $308;
  $134 = $309;
  $310 = $133;
  $311 = $134;
  $131 = $310;
  $132 = $311;
  $312 = $131;
  $129 = $312;
  $313 = $129;
  $128 = $313;
  $314 = $128;
  $127 = $314;
  $315 = $127;
  $126 = $315;
  $316 = $126;
  $317 = HEAP8[$316>>0]|0;
  $318 = $317&255;
  $319 = $318 & 1;
  $320 = ($319|0)!=(0);
  if ($320) {
   $122 = $313;
   $321 = $122;
   $121 = $321;
   $322 = $121;
   $120 = $322;
   $323 = $120;
   $324 = ((($323)) + 4|0);
   $325 = HEAP32[$324>>2]|0;
   $332 = $325;
  } else {
   $125 = $313;
   $326 = $125;
   $124 = $326;
   $327 = $124;
   $123 = $327;
   $328 = $123;
   $329 = HEAP8[$328>>0]|0;
   $330 = $329&255;
   $331 = $330 >> 1;
   $332 = $331;
  }
  HEAP32[$__lhs_sz$i$i$i>>2] = $332;
  $333 = $132;
  $119 = $333;
  $334 = $119;
  $118 = $334;
  $335 = $118;
  $117 = $335;
  $336 = $117;
  $116 = $336;
  $337 = $116;
  $338 = HEAP8[$337>>0]|0;
  $339 = $338&255;
  $340 = $339 & 1;
  $341 = ($340|0)!=(0);
  if ($341) {
   $112 = $334;
   $342 = $112;
   $111 = $342;
   $343 = $111;
   $110 = $343;
   $344 = $110;
   $345 = ((($344)) + 4|0);
   $346 = HEAP32[$345>>2]|0;
   $353 = $346;
  } else {
   $115 = $334;
   $347 = $115;
   $114 = $347;
   $348 = $114;
   $113 = $348;
   $349 = $113;
   $350 = HEAP8[$349>>0]|0;
   $351 = $350&255;
   $352 = $351 >> 1;
   $353 = $352;
  }
  HEAP32[$__rhs_sz$i$i$i>>2] = $353;
  $109 = $312;
  $354 = $109;
  $108 = $354;
  $355 = $108;
  $107 = $355;
  $356 = $107;
  $106 = $356;
  $357 = $106;
  $105 = $357;
  $358 = $105;
  $359 = HEAP8[$358>>0]|0;
  $360 = $359&255;
  $361 = $360 & 1;
  $362 = ($361|0)!=(0);
  if ($362) {
   $99 = $355;
   $363 = $99;
   $98 = $363;
   $364 = $98;
   $97 = $364;
   $365 = $97;
   $366 = ((($365)) + 8|0);
   $367 = HEAP32[$366>>2]|0;
   $374 = $367;
  } else {
   $104 = $355;
   $368 = $104;
   $103 = $368;
   $369 = $103;
   $102 = $369;
   $370 = $102;
   $371 = ((($370)) + 1|0);
   $101 = $371;
   $372 = $101;
   $100 = $372;
   $373 = $100;
   $374 = $373;
  }
  $96 = $374;
  $375 = $96;
  $376 = $132;
  $86 = $376;
  $377 = $86;
  $85 = $377;
  $378 = $85;
  $84 = $378;
  $379 = $84;
  $83 = $379;
  $380 = $83;
  $82 = $380;
  $381 = $82;
  $382 = HEAP8[$381>>0]|0;
  $383 = $382&255;
  $384 = $383 & 1;
  $385 = ($384|0)!=(0);
  if ($385) {
   $76 = $378;
   $386 = $76;
   $75 = $386;
   $387 = $75;
   $74 = $387;
   $388 = $74;
   $389 = ((($388)) + 8|0);
   $390 = HEAP32[$389>>2]|0;
   $397 = $390;
  } else {
   $81 = $378;
   $391 = $81;
   $80 = $391;
   $392 = $80;
   $79 = $392;
   $393 = $79;
   $394 = ((($393)) + 1|0);
   $78 = $394;
   $395 = $78;
   $77 = $395;
   $396 = $77;
   $397 = $396;
  }
  $73 = $397;
  $398 = $73;
  $93 = $__lhs_sz$i$i$i;
  $94 = $__rhs_sz$i$i$i;
  $399 = $93;
  $400 = $94;
  ;HEAP8[$92>>0]=HEAP8[$95>>0]|0;
  $90 = $399;
  $91 = $400;
  $401 = $91;
  $402 = $90;
  $87 = $92;
  $88 = $401;
  $89 = $402;
  $403 = $88;
  $404 = HEAP32[$403>>2]|0;
  $405 = $89;
  $406 = HEAP32[$405>>2]|0;
  $407 = ($404>>>0)<($406>>>0);
  $408 = $91;
  $409 = $90;
  $410 = $407 ? $408 : $409;
  $411 = HEAP32[$410>>2]|0;
  __THREW__ = 0;
  $412 = (invoke_iiii(336,($375|0),($398|0),($411|0))|0);
  $413 = __THREW__; __THREW__ = 0;
  $414 = $413&1;
  if ($414) {
   label = 47;
   break;
  }
  $__result$i$i$i = $412;
  $415 = $__result$i$i$i;
  $416 = ($415|0)!=(0);
  do {
   if ($416) {
    $417 = $__result$i$i$i;
    $130 = $417;
   } else {
    $418 = HEAP32[$__lhs_sz$i$i$i>>2]|0;
    $419 = HEAP32[$__rhs_sz$i$i$i>>2]|0;
    $420 = ($418>>>0)<($419>>>0);
    if ($420) {
     $130 = -1;
     break;
    }
    $421 = HEAP32[$__lhs_sz$i$i$i>>2]|0;
    $422 = HEAP32[$__rhs_sz$i$i$i>>2]|0;
    $423 = ($421>>>0)>($422>>>0);
    if ($423) {
     $130 = 1;
     break;
    } else {
     $130 = 0;
     break;
    }
   }
  } while(0);
  $426 = $130;
  $427 = ($426|0)<(0);
  $428 = $__nd;
  if (!($427)) {
   label = 52;
   break;
  }
  $429 = ((($428)) + 4|0);
  $430 = HEAP32[$429>>2]|0;
  $431 = ($430|0)!=(0|0);
  $432 = $__nd;
  if (!($431)) {
   label = 51;
   break;
  }
  $433 = ((($432)) + 4|0);
  $434 = HEAP32[$433>>2]|0;
  $__nd = $434;
 }
 if ((label|0) == 22) {
  $288 = ___cxa_find_matching_catch(0|0)|0;
  $289 = tempRet0;
  ___clang_call_terminate($288);
  // unreachable;
 }
 else if ((label|0) == 26) {
  $297 = $151;
  HEAP32[$297>>2] = $295;
  $298 = $151;
  $299 = HEAP32[$298>>2]|0;
  $149 = $299;
  $450 = $149;
  STACKTOP = sp;return ($450|0);
 }
 else if ((label|0) == 47) {
  $424 = ___cxa_find_matching_catch(0|0)|0;
  $425 = tempRet0;
  ___clang_call_terminate($424);
  // unreachable;
 }
 else if ((label|0) == 51) {
  $435 = $151;
  HEAP32[$435>>2] = $432;
  $436 = $151;
  $437 = HEAP32[$436>>2]|0;
  $438 = ((($437)) + 4|0);
  $149 = $438;
  $450 = $149;
  STACKTOP = sp;return ($450|0);
 }
 else if ((label|0) == 52) {
  $439 = $151;
  HEAP32[$439>>2] = $428;
  $440 = $151;
  $149 = $440;
  $450 = $149;
  STACKTOP = sp;return ($450|0);
 }
 return (0)|0;
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP8ResourceNS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEE25__construct_node_with_keyERSC_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__na = 0, $__t$i$i = 0, $__tmp$i$i = 0, $__tmp$i$i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 704|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 72|0;
 $13 = sp + 701|0;
 $25 = sp + 64|0;
 $28 = sp + 700|0;
 $38 = sp + 556|0;
 $39 = sp + 56|0;
 $42 = sp + 544|0;
 $43 = sp + 536|0;
 $44 = sp + 48|0;
 $55 = sp + 480|0;
 $66 = sp + 40|0;
 $69 = sp + 699|0;
 $80 = sp + 32|0;
 $83 = sp + 698|0;
 $96 = sp + 324|0;
 $97 = sp + 24|0;
 $100 = sp + 312|0;
 $101 = sp + 304|0;
 $102 = sp + 16|0;
 $107 = sp + 280|0;
 $122 = sp + 8|0;
 $125 = sp + 697|0;
 $136 = sp;
 $139 = sp + 696|0;
 $__h = sp + 96|0;
 $153 = sp + 88|0;
 $151 = $this;
 $152 = $__k;
 $156 = $151;
 $150 = $156;
 $157 = $150;
 $158 = ((($157)) + 4|0);
 $149 = $158;
 $159 = $149;
 $148 = $159;
 $160 = $148;
 $__na = $160;
 $161 = $__na;
 $114 = $161;
 $115 = 1;
 $162 = $114;
 $163 = $115;
 $111 = $162;
 $112 = $163;
 $113 = 0;
 $164 = $112;
 $165 = $164<<5;
 $110 = $165;
 $166 = $110;
 $167 = (__Znwj($166)|0);
 $168 = $__na;
 $108 = $153;
 $109 = $168;
 $169 = $108;
 $170 = $109;
 HEAP32[$169>>2] = $170;
 $171 = ((($169)) + 4|0);
 HEAP8[$171>>0] = 0;
 $172 = ((($169)) + 5|0);
 HEAP8[$172>>0] = 0;
 $104 = $__h;
 $105 = $167;
 $106 = $153;
 $173 = $104;
 $174 = $105;
 $175 = $106;
 $103 = $175;
 $176 = $103;
 ;HEAP32[$107>>2]=HEAP32[$176>>2]|0;HEAP32[$107+4>>2]=HEAP32[$176+4>>2]|0;
 ;HEAP8[$102>>0]=HEAP8[$107>>0]|0;HEAP8[$102+1>>0]=HEAP8[$107+1>>0]|0;HEAP8[$102+2>>0]=HEAP8[$107+2>>0]|0;HEAP8[$102+3>>0]=HEAP8[$107+3>>0]|0;HEAP8[$102+4>>0]=HEAP8[$107+4>>0]|0;HEAP8[$102+5>>0]=HEAP8[$107+5>>0]|0;HEAP8[$102+6>>0]=HEAP8[$107+6>>0]|0;HEAP8[$102+7>>0]=HEAP8[$107+7>>0]|0;
 $99 = $173;
 HEAP32[$100>>2] = $174;
 $177 = $99;
 $98 = $100;
 $178 = $98;
 $179 = HEAP32[$178>>2]|0;
 $92 = $102;
 $180 = $92;
 ;HEAP32[$101>>2]=HEAP32[$180>>2]|0;HEAP32[$101+4>>2]=HEAP32[$180+4>>2]|0;
 ;HEAP8[$97>>0]=HEAP8[$101>>0]|0;HEAP8[$97+1>>0]=HEAP8[$101+1>>0]|0;HEAP8[$97+2>>0]=HEAP8[$101+2>>0]|0;HEAP8[$97+3>>0]=HEAP8[$101+3>>0]|0;HEAP8[$97+4>>0]=HEAP8[$101+4>>0]|0;HEAP8[$97+5>>0]=HEAP8[$101+5>>0]|0;HEAP8[$97+6>>0]=HEAP8[$101+6>>0]|0;HEAP8[$97+7>>0]=HEAP8[$101+7>>0]|0;
 $95 = $177;
 HEAP32[$96>>2] = $179;
 $181 = $95;
 $94 = $96;
 $182 = $94;
 $183 = HEAP32[$182>>2]|0;
 HEAP32[$181>>2] = $183;
 $184 = ((($181)) + 4|0);
 $93 = $97;
 $185 = $93;
 ;HEAP32[$184>>2]=HEAP32[$185>>2]|0;HEAP32[$184+4>>2]=HEAP32[$185+4>>2]|0;
 $186 = $__na;
 $59 = $__h;
 $187 = $59;
 $58 = $187;
 $188 = $58;
 $57 = $188;
 $189 = $57;
 $190 = HEAP32[$189>>2]|0;
 $191 = ((($190)) + 16|0);
 $56 = $191;
 $192 = $56;
 $193 = $152;
 $10 = $186;
 $11 = $192;
 $12 = $193;
 $194 = $10;
 $195 = $11;
 $196 = $12;
 $9 = $196;
 $197 = $9;
 ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
 $5 = $194;
 $6 = $195;
 $7 = $197;
 $198 = $5;
 $199 = $6;
 $200 = $7;
 $4 = $200;
 $201 = $4;
 $1 = $198;
 $2 = $199;
 $3 = $201;
 $202 = $2;
 $203 = $3;
 $0 = $203;
 $204 = $0;
 __THREW__ = 0;
 invoke_vii(338,($202|0),($204|0));
 $205 = __THREW__; __THREW__ = 0;
 $206 = $205&1;
 if ($206) {
  $299 = ___cxa_find_matching_catch()|0;
  $300 = tempRet0;
  $154 = $299;
  $155 = $300;
  $147 = $__h;
  $301 = $147;
  $145 = $301;
  $146 = 0;
  $302 = $145;
  $144 = $302;
  $303 = $144;
  $143 = $303;
  $304 = $143;
  $305 = HEAP32[$304>>2]|0;
  $__tmp$i$i = $305;
  $306 = $146;
  $119 = $302;
  $307 = $119;
  $118 = $307;
  $308 = $118;
  HEAP32[$308>>2] = $306;
  $309 = $__tmp$i$i;
  $310 = ($309|0)!=(0|0);
  if (!($310)) {
   $345 = $154;
   $346 = $155;
   ___resumeException($345|0);
   // unreachable;
  }
  $117 = $302;
  $311 = $117;
  $116 = $311;
  $312 = $116;
  $313 = ((($312)) + 4|0);
  $314 = $__tmp$i$i;
  $141 = $313;
  $142 = $314;
  $315 = $141;
  $316 = ((($315)) + 5|0);
  $317 = HEAP8[$316>>0]|0;
  $318 = $317&1;
  if ($318) {
   $319 = HEAP32[$315>>2]|0;
   $320 = $142;
   $321 = ((($320)) + 16|0);
   $322 = ((($321)) + 12|0);
   $140 = $322;
   $323 = $140;
   $137 = $319;
   $138 = $323;
   $324 = $137;
   $325 = $138;
   ;HEAP8[$136>>0]=HEAP8[$139>>0]|0;
   $134 = $324;
   $135 = $325;
  }
  $326 = ((($315)) + 4|0);
  $327 = HEAP8[$326>>0]|0;
  $328 = $327&1;
  if ($328) {
   $329 = HEAP32[$315>>2]|0;
   $330 = $142;
   $331 = ((($330)) + 16|0);
   $126 = $331;
   $332 = $126;
   $123 = $329;
   $124 = $332;
   $333 = $123;
   $334 = $124;
   ;HEAP8[$122>>0]=HEAP8[$125>>0]|0;
   $120 = $333;
   $121 = $334;
   $335 = $121;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($335);
  }
  $336 = $142;
  $337 = ($336|0)!=(0|0);
  if (!($337)) {
   $345 = $154;
   $346 = $155;
   ___resumeException($345|0);
   // unreachable;
  }
  $338 = HEAP32[$315>>2]|0;
  $339 = $142;
  $131 = $338;
  $132 = $339;
  $133 = 1;
  $340 = $131;
  $341 = $132;
  $342 = $133;
  $128 = $340;
  $129 = $341;
  $130 = $342;
  $343 = $129;
  $127 = $343;
  $344 = $127;
  __ZdlPv($344);
  $345 = $154;
  $346 = $155;
  ___resumeException($345|0);
  // unreachable;
 } else {
  $16 = $__h;
  $207 = $16;
  $15 = $207;
  $208 = $15;
  $14 = $208;
  $209 = $14;
  $210 = ((($209)) + 4|0);
  $211 = ((($210)) + 4|0);
  HEAP8[$211>>0] = 1;
  $212 = $__na;
  $19 = $__h;
  $213 = $19;
  $18 = $213;
  $214 = $18;
  $17 = $214;
  $215 = $17;
  $216 = HEAP32[$215>>2]|0;
  $217 = ((($216)) + 16|0);
  $218 = ((($217)) + 12|0);
  $20 = $218;
  $219 = $20;
  $26 = $212;
  $27 = $219;
  $220 = $26;
  $221 = $27;
  ;HEAP8[$25>>0]=HEAP8[$28>>0]|0;
  $23 = $220;
  $24 = $221;
  $222 = $23;
  $223 = $24;
  $21 = $222;
  $22 = $223;
  $224 = $22;
  HEAP32[$224>>2] = 0;
  $31 = $__h;
  $225 = $31;
  $30 = $225;
  $226 = $30;
  $29 = $226;
  $227 = $29;
  $228 = ((($227)) + 4|0);
  $229 = ((($228)) + 5|0);
  HEAP8[$229>>0] = 1;
  $32 = $__h;
  $230 = $32;
  $53 = $agg$result;
  $54 = $230;
  $231 = $53;
  $232 = $54;
  $52 = $232;
  $233 = $52;
  $51 = $233;
  $234 = $51;
  $50 = $234;
  $235 = $50;
  $236 = HEAP32[$235>>2]|0;
  $__t$i$i = $236;
  $49 = $233;
  $237 = $49;
  $48 = $237;
  $238 = $48;
  HEAP32[$238>>2] = 0;
  $239 = $__t$i$i;
  $240 = $54;
  $47 = $240;
  $241 = $47;
  $46 = $241;
  $242 = $46;
  $45 = $242;
  $243 = $45;
  $244 = ((($243)) + 4|0);
  $33 = $244;
  $245 = $33;
  ;HEAP32[$55>>2]=HEAP32[$245>>2]|0;HEAP32[$55+4>>2]=HEAP32[$245+4>>2]|0;
  ;HEAP8[$44>>0]=HEAP8[$55>>0]|0;HEAP8[$44+1>>0]=HEAP8[$55+1>>0]|0;HEAP8[$44+2>>0]=HEAP8[$55+2>>0]|0;HEAP8[$44+3>>0]=HEAP8[$55+3>>0]|0;HEAP8[$44+4>>0]=HEAP8[$55+4>>0]|0;HEAP8[$44+5>>0]=HEAP8[$55+5>>0]|0;HEAP8[$44+6>>0]=HEAP8[$55+6>>0]|0;HEAP8[$44+7>>0]=HEAP8[$55+7>>0]|0;
  $41 = $231;
  HEAP32[$42>>2] = $239;
  $246 = $41;
  $40 = $42;
  $247 = $40;
  $248 = HEAP32[$247>>2]|0;
  $34 = $44;
  $249 = $34;
  ;HEAP32[$43>>2]=HEAP32[$249>>2]|0;HEAP32[$43+4>>2]=HEAP32[$249+4>>2]|0;
  ;HEAP8[$39>>0]=HEAP8[$43>>0]|0;HEAP8[$39+1>>0]=HEAP8[$43+1>>0]|0;HEAP8[$39+2>>0]=HEAP8[$43+2>>0]|0;HEAP8[$39+3>>0]=HEAP8[$43+3>>0]|0;HEAP8[$39+4>>0]=HEAP8[$43+4>>0]|0;HEAP8[$39+5>>0]=HEAP8[$43+5>>0]|0;HEAP8[$39+6>>0]=HEAP8[$43+6>>0]|0;HEAP8[$39+7>>0]=HEAP8[$43+7>>0]|0;
  $37 = $246;
  HEAP32[$38>>2] = $248;
  $250 = $37;
  $36 = $38;
  $251 = $36;
  $252 = HEAP32[$251>>2]|0;
  HEAP32[$250>>2] = $252;
  $253 = ((($250)) + 4|0);
  $35 = $39;
  $254 = $35;
  ;HEAP32[$253>>2]=HEAP32[$254>>2]|0;HEAP32[$253+4>>2]=HEAP32[$254+4>>2]|0;
  $91 = $__h;
  $255 = $91;
  $89 = $255;
  $90 = 0;
  $256 = $89;
  $88 = $256;
  $257 = $88;
  $87 = $257;
  $258 = $87;
  $259 = HEAP32[$258>>2]|0;
  $__tmp$i$i$1 = $259;
  $260 = $90;
  $63 = $256;
  $261 = $63;
  $62 = $261;
  $262 = $62;
  HEAP32[$262>>2] = $260;
  $263 = $__tmp$i$i$1;
  $264 = ($263|0)!=(0|0);
  if (!($264)) {
   STACKTOP = sp;return;
  }
  $61 = $256;
  $265 = $61;
  $60 = $265;
  $266 = $60;
  $267 = ((($266)) + 4|0);
  $268 = $__tmp$i$i$1;
  $85 = $267;
  $86 = $268;
  $269 = $85;
  $270 = ((($269)) + 5|0);
  $271 = HEAP8[$270>>0]|0;
  $272 = $271&1;
  if ($272) {
   $273 = HEAP32[$269>>2]|0;
   $274 = $86;
   $275 = ((($274)) + 16|0);
   $276 = ((($275)) + 12|0);
   $84 = $276;
   $277 = $84;
   $81 = $273;
   $82 = $277;
   $278 = $81;
   $279 = $82;
   ;HEAP8[$80>>0]=HEAP8[$83>>0]|0;
   $78 = $278;
   $79 = $279;
  }
  $280 = ((($269)) + 4|0);
  $281 = HEAP8[$280>>0]|0;
  $282 = $281&1;
  if ($282) {
   $283 = HEAP32[$269>>2]|0;
   $284 = $86;
   $285 = ((($284)) + 16|0);
   $70 = $285;
   $286 = $70;
   $67 = $283;
   $68 = $286;
   $287 = $67;
   $288 = $68;
   ;HEAP8[$66>>0]=HEAP8[$69>>0]|0;
   $64 = $287;
   $65 = $288;
   $289 = $65;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($289);
  }
  $290 = $86;
  $291 = ($290|0)!=(0|0);
  if (!($291)) {
   STACKTOP = sp;return;
  }
  $292 = HEAP32[$269>>2]|0;
  $293 = $86;
  $75 = $292;
  $76 = $293;
  $77 = 1;
  $294 = $75;
  $295 = $76;
  $296 = $77;
  $72 = $294;
  $73 = $295;
  $74 = $296;
  $297 = $73;
  $71 = $297;
  $298 = $71;
  __ZdlPv($298);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP8ResourceEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSK_SK_($this,$__parent,$__child,$__new_node) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__child = $__child|0;
 $__new_node = $__new_node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = $this;
 $12 = $__parent;
 $13 = $__child;
 $14 = $__new_node;
 $15 = $11;
 $16 = $14;
 HEAP32[$16>>2] = 0;
 $17 = $14;
 $18 = ((($17)) + 4|0);
 HEAP32[$18>>2] = 0;
 $19 = $12;
 $20 = $14;
 $21 = ((($20)) + 8|0);
 HEAP32[$21>>2] = $19;
 $22 = $14;
 $23 = $13;
 HEAP32[$23>>2] = $22;
 $10 = $15;
 $24 = $10;
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if ($27) {
  $6 = $15;
  $28 = $6;
  $29 = HEAP32[$28>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $0 = $15;
  $31 = $0;
  HEAP32[$31>>2] = $30;
 }
 $5 = $15;
 $32 = $5;
 $33 = ((($32)) + 4|0);
 $4 = $33;
 $34 = $4;
 $3 = $34;
 $35 = $3;
 $2 = $35;
 $36 = $2;
 $1 = $36;
 $37 = $1;
 $38 = HEAP32[$37>>2]|0;
 $39 = $13;
 $40 = HEAP32[$39>>2]|0;
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($38,$40);
 $9 = $15;
 $41 = $9;
 $42 = ((($41)) + 8|0);
 $8 = $42;
 $43 = $8;
 $7 = $43;
 $44 = $7;
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + 1)|0;
 HEAP32[$44>>2] = $46;
 STACKTOP = sp;return;
}
function __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($__root,$__x) {
 $__root = $__root|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__y = 0, $__y1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $__root;
 $4 = $__x;
 $5 = $4;
 $6 = $3;
 $7 = ($5|0)==($6|0);
 $8 = $4;
 $9 = ((($8)) + 12|0);
 $10 = $7&1;
 HEAP8[$9>>0] = $10;
 while(1) {
  $11 = $4;
  $12 = $3;
  $13 = ($11|0)!=($12|0);
  if (!($13)) {
   label = 17;
   break;
  }
  $14 = $4;
  $15 = ((($14)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 12|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&1;
  $20 = $19 ^ 1;
  if (!($20)) {
   label = 17;
   break;
  }
  $21 = $4;
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $2 = $23;
  $24 = $2;
  $25 = $2;
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = HEAP32[$27>>2]|0;
  $29 = ($24|0)==($28|0);
  $30 = $4;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($32)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  if ($29) {
   $35 = ((($34)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $__y = $36;
   $37 = $__y;
   $38 = ($37|0)!=(0|0);
   if (!($38)) {
    label = 8;
    break;
   }
   $39 = $__y;
   $40 = ((($39)) + 12|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&1;
   if ($42) {
    label = 8;
    break;
   }
   $43 = $4;
   $44 = ((($43)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $4 = $45;
   $46 = $4;
   $47 = ((($46)) + 12|0);
   HEAP8[$47>>0] = 1;
   $48 = $4;
   $49 = ((($48)) + 8|0);
   $50 = HEAP32[$49>>2]|0;
   $4 = $50;
   $51 = $4;
   $52 = $3;
   $53 = ($51|0)==($52|0);
   $54 = $4;
   $55 = ((($54)) + 12|0);
   $56 = $53&1;
   HEAP8[$55>>0] = $56;
   $57 = $__y;
   $58 = ((($57)) + 12|0);
   HEAP8[$58>>0] = 1;
   continue;
  } else {
   $81 = HEAP32[$34>>2]|0;
   $__y1 = $81;
   $82 = $__y1;
   $83 = ($82|0)!=(0|0);
   if (!($83)) {
    label = 14;
    break;
   }
   $84 = $__y1;
   $85 = ((($84)) + 12|0);
   $86 = HEAP8[$85>>0]|0;
   $87 = $86&1;
   if ($87) {
    label = 14;
    break;
   }
   $88 = $4;
   $89 = ((($88)) + 8|0);
   $90 = HEAP32[$89>>2]|0;
   $4 = $90;
   $91 = $4;
   $92 = ((($91)) + 12|0);
   HEAP8[$92>>0] = 1;
   $93 = $4;
   $94 = ((($93)) + 8|0);
   $95 = HEAP32[$94>>2]|0;
   $4 = $95;
   $96 = $4;
   $97 = $3;
   $98 = ($96|0)==($97|0);
   $99 = $4;
   $100 = ((($99)) + 12|0);
   $101 = $98&1;
   HEAP8[$100>>0] = $101;
   $102 = $__y1;
   $103 = ((($102)) + 12|0);
   HEAP8[$103>>0] = 1;
   continue;
  }
 }
 if ((label|0) == 8) {
  $59 = $4;
  $1 = $59;
  $60 = $1;
  $61 = $1;
  $62 = ((($61)) + 8|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = HEAP32[$63>>2]|0;
  $65 = ($60|0)==($64|0);
  if (!($65)) {
   $66 = $4;
   $67 = ((($66)) + 8|0);
   $68 = HEAP32[$67>>2]|0;
   $4 = $68;
   $69 = $4;
   __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($69);
  }
  $70 = $4;
  $71 = ((($70)) + 8|0);
  $72 = HEAP32[$71>>2]|0;
  $4 = $72;
  $73 = $4;
  $74 = ((($73)) + 12|0);
  HEAP8[$74>>0] = 1;
  $75 = $4;
  $76 = ((($75)) + 8|0);
  $77 = HEAP32[$76>>2]|0;
  $4 = $77;
  $78 = $4;
  $79 = ((($78)) + 12|0);
  HEAP8[$79>>0] = 0;
  $80 = $4;
  __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($80);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 14) {
  $104 = $4;
  $0 = $104;
  $105 = $0;
  $106 = $0;
  $107 = ((($106)) + 8|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = HEAP32[$108>>2]|0;
  $110 = ($105|0)==($109|0);
  if ($110) {
   $111 = $4;
   $112 = ((($111)) + 8|0);
   $113 = HEAP32[$112>>2]|0;
   $4 = $113;
   $114 = $4;
   __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($114);
  }
  $115 = $4;
  $116 = ((($115)) + 8|0);
  $117 = HEAP32[$116>>2]|0;
  $4 = $117;
  $118 = $4;
  $119 = ((($118)) + 12|0);
  HEAP8[$119>>0] = 1;
  $120 = $4;
  $121 = ((($120)) + 8|0);
  $122 = HEAP32[$121>>2]|0;
  $4 = $122;
  $123 = $4;
  $124 = ((($123)) + 12|0);
  HEAP8[$124>>0] = 0;
  $125 = $4;
  __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($125);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 17) {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x) {
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $__x;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $__y = $4;
 $5 = $__y;
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 HEAP32[$8>>2] = $6;
 $9 = $1;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $1;
  $14 = $1;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 8|0);
  HEAP32[$17>>2] = $13;
 }
 $18 = $1;
 $19 = ((($18)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $__y;
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = $20;
 $23 = $1;
 $0 = $23;
 $24 = $0;
 $25 = $0;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$27>>2]|0;
 $29 = ($24|0)==($28|0);
 $30 = $__y;
 $31 = $1;
 $32 = ((($31)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 if ($29) {
  HEAP32[$33>>2] = $30;
  $35 = $1;
  $36 = $__y;
  HEAP32[$36>>2] = $35;
  $37 = $__y;
  $38 = $1;
  $39 = ((($38)) + 8|0);
  HEAP32[$39>>2] = $37;
  STACKTOP = sp;return;
 } else {
  $34 = ((($33)) + 4|0);
  HEAP32[$34>>2] = $30;
  $35 = $1;
  $36 = $__y;
  HEAP32[$36>>2] = $35;
  $37 = $__y;
  $38 = $1;
  $39 = ((($38)) + 8|0);
  HEAP32[$39>>2] = $37;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x) {
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__y = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $__x;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $__y = $3;
 $4 = $__y;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 HEAP32[$7>>2] = $6;
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $1;
  $12 = $1;
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 8|0);
  HEAP32[$14>>2] = $11;
 }
 $15 = $1;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $__y;
 $19 = ((($18)) + 8|0);
 HEAP32[$19>>2] = $17;
 $20 = $1;
 $0 = $20;
 $21 = $0;
 $22 = $0;
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$24>>2]|0;
 $26 = ($21|0)==($25|0);
 $27 = $__y;
 $28 = $1;
 $29 = ((($28)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 if ($26) {
  HEAP32[$30>>2] = $27;
  $32 = $1;
  $33 = $__y;
  $34 = ((($33)) + 4|0);
  HEAP32[$34>>2] = $32;
  $35 = $__y;
  $36 = $1;
  $37 = ((($36)) + 8|0);
  HEAP32[$37>>2] = $35;
  STACKTOP = sp;return;
 } else {
  $31 = ((($30)) + 4|0);
  HEAP32[$31>>2] = $27;
  $32 = $1;
  $33 = $__y;
  $34 = ((($33)) + 4|0);
  HEAP32[$34>>2] = $32;
  $35 = $__y;
  $36 = $1;
  $37 = ((($36)) + 8|0);
  HEAP32[$37>>2] = $35;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111char_traitsIcE7compareEPKcS3_j($__s1,$__s2,$__n) {
 $__s1 = $__s1|0;
 $__s2 = $__s2|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__s1;
 $1 = $__s2;
 $2 = $__n;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_memcmp($3,$4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP8ResourceEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE13__lower_boundIS7_EENS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEEiEERKT_SM_SM_($this,$__v,$__root,$__result) {
 $this = $this|0;
 $__v = $__v|0;
 $__root = $__root|0;
 $__result = $__result|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__lhs_sz$i$i$i$i = 0, $__result$i$i$i$i = 0, $__rhs_sz$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = sp;
 $22 = sp + 320|0;
 $__lhs_sz$i$i$i$i = sp + 84|0;
 $__rhs_sz$i$i$i$i = sp + 80|0;
 $73 = sp + 20|0;
 $74 = $this;
 $75 = $__v;
 $76 = $__root;
 $77 = $__result;
 $78 = $74;
 while(1) {
  $79 = $76;
  $80 = ($79|0)!=(0|0);
  if (!($80)) {
   label = 27;
   break;
  }
  $72 = $78;
  $81 = $72;
  $82 = ((($81)) + 8|0);
  $71 = $82;
  $83 = $71;
  $70 = $83;
  $84 = $70;
  $85 = $76;
  $86 = ((($85)) + 16|0);
  $87 = $75;
  $65 = $84;
  $66 = $86;
  $67 = $87;
  $88 = $65;
  $89 = $66;
  $90 = $67;
  $62 = $88;
  $63 = $89;
  $64 = $90;
  $91 = $63;
  $92 = $64;
  $60 = $91;
  $61 = $92;
  $93 = $60;
  $94 = $61;
  $58 = $93;
  $59 = $94;
  $95 = $58;
  $56 = $95;
  $96 = $56;
  $55 = $96;
  $97 = $55;
  $54 = $97;
  $98 = $54;
  $53 = $98;
  $99 = $53;
  $100 = HEAP8[$99>>0]|0;
  $101 = $100&255;
  $102 = $101 & 1;
  $103 = ($102|0)!=(0);
  if ($103) {
   $49 = $96;
   $104 = $49;
   $48 = $104;
   $105 = $48;
   $47 = $105;
   $106 = $47;
   $107 = ((($106)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $115 = $108;
  } else {
   $52 = $96;
   $109 = $52;
   $51 = $109;
   $110 = $51;
   $50 = $110;
   $111 = $50;
   $112 = HEAP8[$111>>0]|0;
   $113 = $112&255;
   $114 = $113 >> 1;
   $115 = $114;
  }
  HEAP32[$__lhs_sz$i$i$i$i>>2] = $115;
  $116 = $59;
  $46 = $116;
  $117 = $46;
  $45 = $117;
  $118 = $45;
  $44 = $118;
  $119 = $44;
  $43 = $119;
  $120 = $43;
  $121 = HEAP8[$120>>0]|0;
  $122 = $121&255;
  $123 = $122 & 1;
  $124 = ($123|0)!=(0);
  if ($124) {
   $39 = $117;
   $125 = $39;
   $38 = $125;
   $126 = $38;
   $37 = $126;
   $127 = $37;
   $128 = ((($127)) + 4|0);
   $129 = HEAP32[$128>>2]|0;
   $136 = $129;
  } else {
   $42 = $117;
   $130 = $42;
   $41 = $130;
   $131 = $41;
   $40 = $131;
   $132 = $40;
   $133 = HEAP8[$132>>0]|0;
   $134 = $133&255;
   $135 = $134 >> 1;
   $136 = $135;
  }
  HEAP32[$__rhs_sz$i$i$i$i>>2] = $136;
  $36 = $95;
  $137 = $36;
  $35 = $137;
  $138 = $35;
  $34 = $138;
  $139 = $34;
  $33 = $139;
  $140 = $33;
  $32 = $140;
  $141 = $32;
  $142 = HEAP8[$141>>0]|0;
  $143 = $142&255;
  $144 = $143 & 1;
  $145 = ($144|0)!=(0);
  if ($145) {
   $26 = $138;
   $146 = $26;
   $25 = $146;
   $147 = $25;
   $24 = $147;
   $148 = $24;
   $149 = ((($148)) + 8|0);
   $150 = HEAP32[$149>>2]|0;
   $157 = $150;
  } else {
   $31 = $138;
   $151 = $31;
   $30 = $151;
   $152 = $30;
   $29 = $152;
   $153 = $29;
   $154 = ((($153)) + 1|0);
   $28 = $154;
   $155 = $28;
   $27 = $155;
   $156 = $27;
   $157 = $156;
  }
  $23 = $157;
  $158 = $23;
  $159 = $59;
  $13 = $159;
  $160 = $13;
  $12 = $160;
  $161 = $12;
  $11 = $161;
  $162 = $11;
  $10 = $162;
  $163 = $10;
  $9 = $163;
  $164 = $9;
  $165 = HEAP8[$164>>0]|0;
  $166 = $165&255;
  $167 = $166 & 1;
  $168 = ($167|0)!=(0);
  if ($168) {
   $3 = $161;
   $169 = $3;
   $2 = $169;
   $170 = $2;
   $1 = $170;
   $171 = $1;
   $172 = ((($171)) + 8|0);
   $173 = HEAP32[$172>>2]|0;
   $180 = $173;
  } else {
   $8 = $161;
   $174 = $8;
   $7 = $174;
   $175 = $7;
   $6 = $175;
   $176 = $6;
   $177 = ((($176)) + 1|0);
   $5 = $177;
   $178 = $5;
   $4 = $178;
   $179 = $4;
   $180 = $179;
  }
  $0 = $180;
  $181 = $0;
  $20 = $__lhs_sz$i$i$i$i;
  $21 = $__rhs_sz$i$i$i$i;
  $182 = $20;
  $183 = $21;
  ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
  $17 = $182;
  $18 = $183;
  $184 = $18;
  $185 = $17;
  $14 = $19;
  $15 = $184;
  $16 = $185;
  $186 = $15;
  $187 = HEAP32[$186>>2]|0;
  $188 = $16;
  $189 = HEAP32[$188>>2]|0;
  $190 = ($187>>>0)<($189>>>0);
  $191 = $18;
  $192 = $17;
  $193 = $190 ? $191 : $192;
  $194 = HEAP32[$193>>2]|0;
  __THREW__ = 0;
  $195 = (invoke_iiii(336,($158|0),($181|0),($194|0))|0);
  $196 = __THREW__; __THREW__ = 0;
  $197 = $196&1;
  if ($197) {
   label = 23;
   break;
  }
  $__result$i$i$i$i = $195;
  $198 = $__result$i$i$i$i;
  $199 = ($198|0)!=(0);
  do {
   if ($199) {
    $200 = $__result$i$i$i$i;
    $57 = $200;
   } else {
    $201 = HEAP32[$__lhs_sz$i$i$i$i>>2]|0;
    $202 = HEAP32[$__rhs_sz$i$i$i$i>>2]|0;
    $203 = ($201>>>0)<($202>>>0);
    if ($203) {
     $57 = -1;
     break;
    }
    $204 = HEAP32[$__lhs_sz$i$i$i$i>>2]|0;
    $205 = HEAP32[$__rhs_sz$i$i$i$i>>2]|0;
    $206 = ($204>>>0)>($205>>>0);
    if ($206) {
     $57 = 1;
     break;
    } else {
     $57 = 0;
     break;
    }
   }
  } while(0);
  $209 = $57;
  $210 = ($209|0)<(0);
  $211 = $76;
  if ($210) {
   $214 = ((($211)) + 4|0);
   $215 = HEAP32[$214>>2]|0;
   $76 = $215;
   continue;
  } else {
   $77 = $211;
   $212 = $76;
   $213 = HEAP32[$212>>2]|0;
   $76 = $213;
   continue;
  }
 }
 if ((label|0) == 23) {
  $207 = ___cxa_find_matching_catch(0|0)|0;
  $208 = tempRet0;
  ___clang_call_terminate($207);
  // unreachable;
 }
 else if ((label|0) == 27) {
  $216 = $77;
  $68 = $73;
  $69 = $216;
  $217 = $68;
  $218 = $69;
  HEAP32[$217>>2] = $218;
  $219 = HEAP32[$73>>2]|0;
  STACKTOP = sp;return ($219|0);
 }
 return (0)|0;
}
function __ZNSt3__111char_traitsIcE6lengthEPKc($__s) {
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__s;
 $1 = $0;
 $2 = (_strlen($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN7Texture8filenameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($agg$result,$name) {
 $agg$result = $agg$result|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = $0;
 __ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_($agg$result,13036,$1);
 STACKTOP = sp;return;
}
function __ZN7TextureC2ER5StoreRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($this,$store,$name) {
 $this = $this|0;
 $store = $store|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $surface = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $15 = $this;
 $16 = $store;
 $17 = $name;
 $21 = $15;
 __ZN8ResourceC2Ev($21);
 $22 = $17;
 __ZN7Texture8filenameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($18,$22);
 $14 = $18;
 $23 = $14;
 $13 = $23;
 $24 = $13;
 $12 = $24;
 $25 = $12;
 $11 = $25;
 $26 = $11;
 $10 = $26;
 $27 = $10;
 $9 = $27;
 $28 = $9;
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = $30 & 1;
 $32 = ($31|0)!=(0);
 if ($32) {
  $3 = $25;
  $33 = $3;
  $2 = $33;
  $34 = $2;
  $1 = $34;
  $35 = $1;
  $36 = ((($35)) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $44 = $37;
 } else {
  $8 = $25;
  $38 = $8;
  $7 = $38;
  $39 = $7;
  $6 = $39;
  $40 = $6;
  $41 = ((($40)) + 1|0);
  $5 = $41;
  $42 = $5;
  $4 = $42;
  $43 = $4;
  $44 = $43;
 }
 $0 = $44;
 $45 = $0;
 __THREW__ = 0;
 $46 = (invoke_ii(339,($45|0))|0);
 $47 = __THREW__; __THREW__ = 0;
 $48 = $47&1;
 if ($48) {
  $62 = ___cxa_find_matching_catch()|0;
  $63 = tempRet0;
  $19 = $62;
  $20 = $63;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($18);
  $64 = $19;
  $65 = $20;
  ___resumeException($64|0);
  // unreachable;
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($18);
  $surface = $46;
  $49 = ((($21)) + 4|0);
  _glGenTextures(1,($49|0));
  $50 = ((($21)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  _glBindTexture(3553,($51|0));
  _glTexParameteri(3553,10241,9729);
  $52 = $surface;
  $53 = ((($52)) + 8|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $surface;
  $56 = ((($55)) + 12|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $surface;
  $59 = ((($58)) + 20|0);
  $60 = HEAP32[$59>>2]|0;
  _glTexImage2D(3553,0,6408,($54|0),($57|0),0,6408,5121,($60|0));
  $61 = $surface;
  _SDL_FreeSurface(($61|0));
  STACKTOP = sp;return;
 }
}
function __ZNK7Texture3useEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 _glBindTexture(3553,($3|0));
 STACKTOP = sp;return;
}
function __ZN10ExecutableC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 36|0;
 $6 = sp + 24|0;
 $10 = $this;
 $13 = $10;
 $14 = ((($13)) + 4|0);
 $9 = $14;
 $15 = $9;
 $8 = $15;
 $16 = $8;
 $7 = $16;
 HEAP32[$16>>2] = 0;
 $17 = ((($16)) + 4|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($16)) + 8|0);
 $5 = $18;
 HEAP32[$6>>2] = 0;
 $19 = $5;
 $4 = $6;
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 $2 = $19;
 HEAP32[$3>>2] = $21;
 $22 = $2;
 $1 = $22;
 $0 = $3;
 $23 = $0;
 $24 = HEAP32[$23>>2]|0;
 HEAP32[$22>>2] = $24;
 __THREW__ = 0;
 $25 = (invoke_i(340)|0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $28 = ___cxa_find_matching_catch()|0;
  $29 = tempRet0;
  $11 = $28;
  $12 = $29;
  __ZNSt3__16vectorIjNS_9allocatorIjEEED2Ev($14);
  $30 = $11;
  $31 = $12;
  ___resumeException($30|0);
  // unreachable;
 } else {
  HEAP32[$13>>2] = $25;
  STACKTOP = sp;return;
 }
}
function __ZN10Executable13attach_shaderERK6Shader($this,$shader) {
 $this = $this|0;
 $shader = $shader|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $shader;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = (__ZNK6Shader2idEv($4)|0);
 _glAttachShader(($3|0),($5|0));
 STACKTOP = sp;return;
}
function __ZN10Executable20bind_attrib_locationEjPKc($this,$index,$name) {
 $this = $this|0;
 $index = $index|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $index;
 $2 = $name;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = $2;
 _glBindAttribLocation(($4|0),($5|0),($6|0));
 STACKTOP = sp;return;
}
function __ZN10Executable4linkEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 _glLinkProgram(($2|0));
 STACKTOP = sp;return;
}
function __ZNK10Executable3useEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 _glUseProgram(($2|0));
 STACKTOP = sp;return;
}
function __ZN10Executable12get_uniformsEjPKPKc($this,$count,$names) {
 $this = $this|0;
 $count = $count|0;
 $names = $names|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $count;
 $4 = $names;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = $3;
 __ZNSt3__16vectorIjNS_9allocatorIjEEE6resizeEj($6,$7);
 $index = 0;
 while(1) {
  $8 = $index;
  $9 = $3;
  $10 = ($8>>>0)<($9>>>0);
  if (!($10)) {
   break;
  }
  $11 = HEAP32[$5>>2]|0;
  $12 = $index;
  $13 = $4;
  $14 = (($13) + ($12<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_glGetUniformLocation(($11|0),($15|0))|0);
  $17 = ((($5)) + 4|0);
  $18 = $index;
  $0 = $17;
  $1 = $18;
  $19 = $0;
  $20 = $1;
  $21 = HEAP32[$19>>2]|0;
  $22 = (($21) + ($20<<2)|0);
  HEAP32[$22>>2] = $16;
  $23 = $index;
  $24 = (($23) + 1)|0;
  $index = $24;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIjNS_9allocatorIjEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNK6Shader2idEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $__cs = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 84|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$21>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = (($27|0) / 4)&-1;
 $__cs = $28;
 $29 = $__cs;
 $30 = $19;
 $31 = ($29>>>0)<($30>>>0);
 if ($31) {
  $32 = $19;
  $33 = $__cs;
  $34 = (($32) - ($33))|0;
  __ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEj($20,$34);
  STACKTOP = sp;return;
 }
 $35 = $__cs;
 $36 = $19;
 $37 = ($35>>>0)>($36>>>0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = HEAP32[$20>>2]|0;
 $39 = $19;
 $40 = (($38) + ($39<<2)|0);
 $15 = $20;
 $16 = $40;
 $41 = $15;
 $14 = $41;
 $42 = $14;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$42>>2]|0;
 $46 = $44;
 $47 = $45;
 $48 = (($46) - ($47))|0;
 $49 = (($48|0) / 4)&-1;
 $__old_size$i = $49;
 $50 = $16;
 $12 = $41;
 $13 = $50;
 $51 = $12;
 while(1) {
  $52 = $13;
  $53 = ((($51)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)!=($54|0);
  if (!($55)) {
   break;
  }
  $11 = $51;
  $56 = $11;
  $57 = ((($56)) + 8|0);
  $10 = $57;
  $58 = $10;
  $9 = $58;
  $59 = $9;
  $60 = ((($51)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + -4|0);
  HEAP32[$60>>2] = $62;
  $8 = $62;
  $63 = $8;
  $5 = $59;
  $6 = $63;
  $64 = $5;
  $65 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $64;
  $3 = $65;
  $66 = $2;
  $67 = $3;
  $0 = $66;
  $1 = $67;
 }
 $68 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(341,($41|0),($68|0));
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if ($70) {
  $71 = ___cxa_find_matching_catch(0|0)|0;
  $72 = tempRet0;
  ___clang_call_terminate($71);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 148|0;
 $17 = sp + 84|0;
 $18 = sp + 72|0;
 $__v = sp + 12|0;
 $26 = $this;
 $27 = $__n;
 $30 = $26;
 $25 = $30;
 $31 = $25;
 $32 = ((($31)) + 8|0);
 $24 = $32;
 $33 = $24;
 $23 = $33;
 $34 = $23;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($30)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $35;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = (($40|0) / 4)&-1;
 $42 = $27;
 $43 = ($41>>>0)>=($42>>>0);
 if ($43) {
  $44 = $27;
  __ZNSt3__16vectorIjNS_9allocatorIjEEE18__construct_at_endEj($30,$44);
  STACKTOP = sp;return;
 }
 $22 = $30;
 $45 = $22;
 $46 = ((($45)) + 8|0);
 $21 = $46;
 $47 = $21;
 $20 = $47;
 $48 = $20;
 $__a = $48;
 $19 = $30;
 $49 = $19;
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$49>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 4)&-1;
 $57 = $27;
 $58 = (($56) + ($57))|0;
 $16 = $30;
 HEAP32[$17>>2] = $58;
 $59 = $16;
 $60 = (__ZNKSt3__16vectorIjNS_9allocatorIjEEE8max_sizeEv($59)|0);
 $__ms$i = $60;
 $61 = HEAP32[$17>>2]|0;
 $62 = $__ms$i;
 $63 = ($61>>>0)>($62>>>0);
 if ($63) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($59);
  // unreachable;
 }
 $14 = $59;
 $64 = $14;
 $13 = $64;
 $65 = $13;
 $12 = $65;
 $66 = $12;
 $67 = ((($66)) + 8|0);
 $11 = $67;
 $68 = $11;
 $10 = $68;
 $69 = $10;
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$65>>2]|0;
 $72 = $70;
 $73 = $71;
 $74 = (($72) - ($73))|0;
 $75 = (($74|0) / 4)&-1;
 $__cap$i = $75;
 $76 = $__cap$i;
 $77 = $__ms$i;
 $78 = (($77>>>0) / 2)&-1;
 $79 = ($76>>>0)>=($78>>>0);
 if ($79) {
  $80 = $__ms$i;
  $15 = $80;
 } else {
  $81 = $__cap$i;
  $82 = $81<<1;
  HEAP32[$18>>2] = $82;
  $7 = $18;
  $8 = $17;
  $83 = $7;
  $84 = $8;
  ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
  $4 = $83;
  $5 = $84;
  $85 = $4;
  $86 = $5;
  $1 = $6;
  $2 = $85;
  $3 = $86;
  $87 = $2;
  $88 = HEAP32[$87>>2]|0;
  $89 = $3;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($88>>>0)<($90>>>0);
  $92 = $5;
  $93 = $4;
  $94 = $91 ? $92 : $93;
  $95 = HEAP32[$94>>2]|0;
  $15 = $95;
 }
 $96 = $15;
 $0 = $30;
 $97 = $0;
 $98 = ((($97)) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = HEAP32[$97>>2]|0;
 $101 = $99;
 $102 = $100;
 $103 = (($101) - ($102))|0;
 $104 = (($103|0) / 4)&-1;
 $105 = $__a;
 __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEEC2EjjS3_($__v,$96,$104,$105);
 $106 = $27;
 __THREW__ = 0;
 invoke_vii(342,($__v|0),($106|0));
 $107 = __THREW__; __THREW__ = 0;
 $108 = $107&1;
 if ($108) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(343,($30|0),($__v|0));
 $109 = __THREW__; __THREW__ = 0;
 $110 = $109&1;
 if ($110) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIjNS_9allocatorIjEEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 4)&-1;
 $35 = (($22) + ($34<<2)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<2)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 4)&-1;
 $52 = (($43) + ($51<<2)|0);
 __ZNKSt3__16vectorIjNS_9allocatorIjEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIjNS_9allocatorIjEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 57|0;
 $__annotator = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 8|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $__a = $18;
 while(1) {
  __ZNSt3__16vectorIjNS_9allocatorIjEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator,$14,1);
  $19 = $__a;
  $20 = ((($14)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $8 = $21;
  $22 = $8;
  $5 = $19;
  $6 = $22;
  $23 = $5;
  $24 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $23;
  $3 = $24;
  $25 = $2;
  $26 = $3;
  $0 = $25;
  $1 = $26;
  $27 = $1;
  HEAP32[$27>>2] = 0;
  $28 = ((($14)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 4|0);
  HEAP32[$28>>2] = $30;
  $31 = $13;
  $32 = (($31) + -1)|0;
  $13 = $32;
  __ZNSt3__16vectorIjNS_9allocatorIjEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $33 = $13;
  $34 = ($33>>>0)>(0);
  if (!($34)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIjNS_9allocatorIjEEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 1073741823;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEEC2EjjS3_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<2;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<2)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<2)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 12|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $__a = $20;
 while(1) {
  $21 = $__a;
  $22 = ((($14)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $0 = $23;
  $24 = $0;
  $6 = $21;
  $7 = $24;
  $25 = $6;
  $26 = $7;
  ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
  $3 = $25;
  $4 = $26;
  $27 = $3;
  $28 = $4;
  $1 = $27;
  $2 = $28;
  $29 = $2;
  HEAP32[$29>>2] = 0;
  $30 = ((($14)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 4|0);
  HEAP32[$30>>2] = $32;
  $33 = $13;
  $34 = (($33) + -1)|0;
  $13 = $34;
  $35 = $13;
  $36 = ($35>>>0)>(0);
  if (!($36)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEE26__swap_out_circular_bufferERNS_14__split_bufferIjRS2_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i$1 = 0, $__t$i$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i$2 = sp + 120|0;
 $__t$i$1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIjNS_9allocatorIjEEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 4)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<2)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<2;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i$2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i$2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i$1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i$1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 4)&-1;
 __ZNKSt3__16vectorIjNS_9allocatorIjEEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -4|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 4)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIjNS_9allocatorIjEEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 4)&-1;
 $51 = (($42) + ($50<<2)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 4)&-1;
 $67 = (($54) + ($66<<2)|0);
 __ZNKSt3__16vectorIjNS_9allocatorIjEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIjNS_9allocatorIjEEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 4)&-1;
 $55 = (($42) + ($54<<2)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<2)|0);
 __ZNKSt3__16vectorIjNS_9allocatorIjEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIjNS_9allocatorIjEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -4|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 4)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNK6Camera14transformationEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 64|0;
 $2 = sp;
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 88|0);
 __ZNK14Transformation14transformationEv($2,$3);
 __ZN3glm7inverseIfLNS_9precisionE0ENS_7tmat4x4EEET1_IT_XT0_EERKS5_($1,$2);
 __ZN3glmmlIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_S6_($agg$result,$4,$1);
 STACKTOP = sp;return;
}
function __ZN3glm7inverseIfLNS_9precisionE0ENS_7tmat4x4EEET1_IT_XT0_EERKS5_($agg$result,$m) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 __ZN3glm6detail15compute_inverseIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS5_($agg$result,$1);
 STACKTOP = sp;return;
}
function __ZN3glmmlIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_S6_($agg$result,$m1,$m2) {
 $agg$result = $agg$result|0;
 $m1 = $m1|0;
 $m2 = $m2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0;
 var $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0;
 var $81 = 0.0, $9 = 0, $SrcA0 = 0, $SrcA1 = 0, $SrcA2 = 0, $SrcA3 = 0, $SrcB0 = 0, $SrcB1 = 0, $SrcB2 = 0, $SrcB3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $SrcA0 = sp + 560|0;
 $SrcA1 = sp + 544|0;
 $SrcA2 = sp + 528|0;
 $SrcA3 = sp + 512|0;
 $SrcB0 = sp + 496|0;
 $SrcB1 = sp + 480|0;
 $SrcB2 = sp + 464|0;
 $SrcB3 = sp + 448|0;
 $2 = sp + 432|0;
 $3 = sp + 416|0;
 $4 = sp + 400|0;
 $5 = sp + 384|0;
 $6 = sp + 368|0;
 $7 = sp + 352|0;
 $8 = sp + 336|0;
 $9 = sp + 320|0;
 $10 = sp + 304|0;
 $11 = sp + 288|0;
 $12 = sp + 272|0;
 $13 = sp + 256|0;
 $14 = sp + 240|0;
 $15 = sp + 224|0;
 $16 = sp + 208|0;
 $17 = sp + 192|0;
 $18 = sp + 176|0;
 $19 = sp + 160|0;
 $20 = sp + 144|0;
 $21 = sp + 128|0;
 $22 = sp + 112|0;
 $23 = sp + 96|0;
 $24 = sp + 80|0;
 $25 = sp + 64|0;
 $26 = sp + 48|0;
 $27 = sp + 32|0;
 $28 = sp + 16|0;
 $29 = sp;
 $0 = $m1;
 $1 = $m2;
 $30 = $0;
 $31 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($30,0)|0);
 ;HEAP32[$SrcA0>>2]=HEAP32[$31>>2]|0;HEAP32[$SrcA0+4>>2]=HEAP32[$31+4>>2]|0;HEAP32[$SrcA0+8>>2]=HEAP32[$31+8>>2]|0;HEAP32[$SrcA0+12>>2]=HEAP32[$31+12>>2]|0;
 $32 = $0;
 $33 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($32,1)|0);
 ;HEAP32[$SrcA1>>2]=HEAP32[$33>>2]|0;HEAP32[$SrcA1+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$SrcA1+8>>2]=HEAP32[$33+8>>2]|0;HEAP32[$SrcA1+12>>2]=HEAP32[$33+12>>2]|0;
 $34 = $0;
 $35 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($34,2)|0);
 ;HEAP32[$SrcA2>>2]=HEAP32[$35>>2]|0;HEAP32[$SrcA2+4>>2]=HEAP32[$35+4>>2]|0;HEAP32[$SrcA2+8>>2]=HEAP32[$35+8>>2]|0;HEAP32[$SrcA2+12>>2]=HEAP32[$35+12>>2]|0;
 $36 = $0;
 $37 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($36,3)|0);
 ;HEAP32[$SrcA3>>2]=HEAP32[$37>>2]|0;HEAP32[$SrcA3+4>>2]=HEAP32[$37+4>>2]|0;HEAP32[$SrcA3+8>>2]=HEAP32[$37+8>>2]|0;HEAP32[$SrcA3+12>>2]=HEAP32[$37+12>>2]|0;
 $38 = $1;
 $39 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($38,0)|0);
 ;HEAP32[$SrcB0>>2]=HEAP32[$39>>2]|0;HEAP32[$SrcB0+4>>2]=HEAP32[$39+4>>2]|0;HEAP32[$SrcB0+8>>2]=HEAP32[$39+8>>2]|0;HEAP32[$SrcB0+12>>2]=HEAP32[$39+12>>2]|0;
 $40 = $1;
 $41 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($40,1)|0);
 ;HEAP32[$SrcB1>>2]=HEAP32[$41>>2]|0;HEAP32[$SrcB1+4>>2]=HEAP32[$41+4>>2]|0;HEAP32[$SrcB1+8>>2]=HEAP32[$41+8>>2]|0;HEAP32[$SrcB1+12>>2]=HEAP32[$41+12>>2]|0;
 $42 = $1;
 $43 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($42,2)|0);
 ;HEAP32[$SrcB2>>2]=HEAP32[$43>>2]|0;HEAP32[$SrcB2+4>>2]=HEAP32[$43+4>>2]|0;HEAP32[$SrcB2+8>>2]=HEAP32[$43+8>>2]|0;HEAP32[$SrcB2+12>>2]=HEAP32[$43+12>>2]|0;
 $44 = $1;
 $45 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($44,3)|0);
 ;HEAP32[$SrcB3>>2]=HEAP32[$45>>2]|0;HEAP32[$SrcB3+4>>2]=HEAP32[$45+4>>2]|0;HEAP32[$SrcB3+8>>2]=HEAP32[$45+8>>2]|0;HEAP32[$SrcB3+12>>2]=HEAP32[$45+12>>2]|0;
 __ZN3glm7tmat4x4IfLNS_9precisionE0EEC2ENS_4ctorE($agg$result,0);
 $46 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($agg$result,0)|0);
 $47 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($SrcB0,0)|0);
 $48 = +HEAPF32[$47>>2];
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_($5,$SrcA0,$48);
 $49 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($SrcB0,1)|0);
 $50 = +HEAPF32[$49>>2];
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_($6,$SrcA1,$50);
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($4,$5,$6);
 $51 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($SrcB0,2)|0);
 $52 = +HEAPF32[$51>>2];
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_($7,$SrcA2,$52);
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($3,$4,$7);
 $53 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($SrcB0,3)|0);
 $54 = +HEAPF32[$53>>2];
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_($8,$SrcA3,$54);
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($2,$3,$8);
 ;HEAP32[$46>>2]=HEAP32[$2>>2]|0;HEAP32[$46+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$46+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$46+12>>2]=HEAP32[$2+12>>2]|0;
 $55 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($agg$result,1)|0);
 $56 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($SrcB1,0)|0);
 $57 = +HEAPF32[$56>>2];
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_($12,$SrcA0,$57);
 $58 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($SrcB1,1)|0);
 $59 = +HEAPF32[$58>>2];
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_($13,$SrcA1,$59);
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($11,$12,$13);
 $60 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($SrcB1,2)|0);
 $61 = +HEAPF32[$60>>2];
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_($14,$SrcA2,$61);
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($10,$11,$14);
 $62 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($SrcB1,3)|0);
 $63 = +HEAPF32[$62>>2];
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_($15,$SrcA3,$63);
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($9,$10,$15);
 ;HEAP32[$55>>2]=HEAP32[$9>>2]|0;HEAP32[$55+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$55+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$55+12>>2]=HEAP32[$9+12>>2]|0;
 $64 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($agg$result,2)|0);
 $65 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($SrcB2,0)|0);
 $66 = +HEAPF32[$65>>2];
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_($19,$SrcA0,$66);
 $67 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($SrcB2,1)|0);
 $68 = +HEAPF32[$67>>2];
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_($20,$SrcA1,$68);
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($18,$19,$20);
 $69 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($SrcB2,2)|0);
 $70 = +HEAPF32[$69>>2];
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_($21,$SrcA2,$70);
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($17,$18,$21);
 $71 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($SrcB2,3)|0);
 $72 = +HEAPF32[$71>>2];
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_($22,$SrcA3,$72);
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($16,$17,$22);
 ;HEAP32[$64>>2]=HEAP32[$16>>2]|0;HEAP32[$64+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$64+8>>2]=HEAP32[$16+8>>2]|0;HEAP32[$64+12>>2]=HEAP32[$16+12>>2]|0;
 $73 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($agg$result,3)|0);
 $74 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($SrcB3,0)|0);
 $75 = +HEAPF32[$74>>2];
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_($26,$SrcA0,$75);
 $76 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($SrcB3,1)|0);
 $77 = +HEAPF32[$76>>2];
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_($27,$SrcA1,$77);
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($25,$26,$27);
 $78 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($SrcB3,2)|0);
 $79 = +HEAPF32[$78>>2];
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_($28,$SrcA2,$79);
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($24,$25,$28);
 $80 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($SrcB3,3)|0);
 $81 = +HEAPF32[$80>>2];
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_($29,$SrcA3,$81);
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($23,$24,$29);
 ;HEAP32[$73>>2]=HEAP32[$23>>2]|0;HEAP32[$73+4>>2]=HEAP32[$23+4>>2]|0;HEAP32[$73+8>>2]=HEAP32[$23+8>>2]|0;HEAP32[$73+12>>2]=HEAP32[$23+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EE6lengthEv($2)|0);
 $5 = ($3|0)<($4|0);
 if ($5) {
  $6 = $1;
  $7 = (($2) + ($6<<4)|0);
  STACKTOP = sp;return ($7|0);
 } else {
  ___assert_fail((13560|0),(13112|0),370,(13641|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZN3glm7tmat4x4IfLNS_9precisionE0EEC2ENS_4ctorE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + 64|0);
 $5 = $3;
 while(1) {
  __ZN3glm5tvec4IfLNS_9precisionE0EEC2Ev($5);
  $6 = ((($5)) + 16|0);
  $7 = ($6|0)==($4|0);
  if ($7) {
   break;
  } else {
   $5 = $6;
  }
 }
 STACKTOP = sp;return;
}
function __ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EE6lengthEv($2)|0);
 $5 = ($3|0)<($4|0);
 if ($5) {
  $6 = $1;
  $7 = (($2) + ($6<<4)|0);
  STACKTOP = sp;return ($7|0);
 } else {
  ___assert_fail((13560|0),(13112|0),363,(13641|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)>=(0);
 if ($4) {
  $5 = $1;
  $6 = (__ZN3glm6detail15component_countINS_5tvec4IfLNS_9precisionE0EEEEEiRKT_($2)|0);
  $7 = ($5|0)<($6|0);
  if ($7) {
   $8 = $1;
   $9 = (($2) + ($8<<2)|0);
   STACKTOP = sp;return ($9|0);
  }
 }
 ___assert_fail((13174|0),(13052|0),310,(13641|0));
 // unreachable;
 return (0)|0;
}
function __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_($agg$result,$v,$scalar) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 $scalar = +$scalar;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $scalar;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = $3 * $4;
 $6 = $0;
 $7 = ((($6)) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $1;
 $10 = $8 * $9;
 $11 = $0;
 $12 = ((($11)) + 8|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $1;
 $15 = $13 * $14;
 $16 = $0;
 $17 = ((($16)) + 12|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $1;
 $20 = $18 * $19;
 __ZN3glm5tvec4IfLNS_9precisionE0EEC2Effff($agg$result,$5,$10,$15,$20);
 STACKTOP = sp;return;
}
function __ZN3glmplIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($agg$result,$v1,$v2) {
 $agg$result = $agg$result|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v1;
 $1 = $v2;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 + $5;
 $7 = $0;
 $8 = ((($7)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 + $12;
 $14 = $0;
 $15 = ((($14)) + 8|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $1;
 $18 = ((($17)) + 8|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $16 + $19;
 $21 = $0;
 $22 = ((($21)) + 12|0);
 $23 = +HEAPF32[$22>>2];
 $24 = $1;
 $25 = ((($24)) + 12|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $23 + $26;
 __ZN3glm5tvec4IfLNS_9precisionE0EEC2Effff($agg$result,$6,$13,$20,$27);
 STACKTOP = sp;return;
}
function __ZN3glm5tvec4IfLNS_9precisionE0EEC2Effff($this,$a,$b,$c,$d) {
 $this = $this|0;
 $a = +$a;
 $b = +$b;
 $c = +$c;
 $d = +$d;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $a;
 $2 = $b;
 $3 = $c;
 $4 = $d;
 $5 = $0;
 $6 = $1;
 HEAPF32[$5>>2] = $6;
 $7 = ((($5)) + 4|0);
 $8 = $2;
 HEAPF32[$7>>2] = $8;
 $9 = ((($5)) + 8|0);
 $10 = $3;
 HEAPF32[$9>>2] = $10;
 $11 = ((($5)) + 12|0);
 $12 = $4;
 HEAPF32[$11>>2] = $12;
 STACKTOP = sp;return;
}
function __ZN3glm6detail15component_countINS_5tvec4IfLNS_9precisionE0EEEEEiRKT_($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = (__ZNK3glm5tvec4IfLNS_9precisionE0EE6lengthEv($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK3glm5tvec4IfLNS_9precisionE0EE6lengthEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 4;
}
function __ZNK3glm7tmat4x4IfLNS_9precisionE0EE6lengthEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 4;
}
function __ZN3glm5tvec4IfLNS_9precisionE0EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAPF32[$1>>2] = 0.0;
 $2 = ((($1)) + 4|0);
 HEAPF32[$2>>2] = 0.0;
 $3 = ((($1)) + 8|0);
 HEAPF32[$3>>2] = 0.0;
 $4 = ((($1)) + 12|0);
 HEAPF32[$4>>2] = 0.0;
 STACKTOP = sp;return;
}
function __ZN3glm6detail15compute_inverseIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS5_($agg$result,$m) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0, $204 = 0.0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0.0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0.0, $240 = 0, $241 = 0;
 var $242 = 0.0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0, $254 = 0, $255 = 0, $256 = 0.0, $257 = 0.0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0.0, $262 = 0, $263 = 0, $264 = 0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0, $275 = 0.0, $276 = 0.0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0.0, $280 = 0.0, $281 = 0, $282 = 0, $283 = 0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0.0, $291 = 0, $292 = 0, $293 = 0, $294 = 0.0, $295 = 0.0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0.0;
 var $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0.0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0, $326 = 0, $327 = 0, $328 = 0.0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0;
 var $332 = 0.0, $333 = 0.0, $334 = 0, $335 = 0, $336 = 0, $337 = 0.0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0, $345 = 0, $346 = 0, $347 = 0.0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0.0, $352 = 0.0, $353 = 0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0;
 var $369 = 0.0, $37 = 0.0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0.0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0.0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0.0, $390 = 0.0, $391 = 0, $392 = 0, $393 = 0, $394 = 0.0, $395 = 0, $396 = 0, $397 = 0, $398 = 0.0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0.0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0.0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0, $412 = 0, $413 = 0, $414 = 0.0, $415 = 0, $416 = 0, $417 = 0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0.0, $423 = 0, $424 = 0, $425 = 0, $426 = 0.0, $427 = 0, $428 = 0, $429 = 0, $43 = 0.0, $430 = 0.0, $431 = 0, $432 = 0, $433 = 0, $434 = 0.0, $435 = 0, $436 = 0, $437 = 0, $438 = 0.0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0.0, $443 = 0, $444 = 0, $445 = 0, $446 = 0.0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0.0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0, $455 = 0, $456 = 0.0, $457 = 0, $458 = 0;
 var $459 = 0.0, $46 = 0, $460 = 0, $461 = 0, $462 = 0.0, $463 = 0, $464 = 0, $465 = 0.0, $466 = 0, $467 = 0.0, $468 = 0.0, $469 = 0, $47 = 0.0, $470 = 0.0, $471 = 0, $472 = 0.0, $473 = 0.0, $474 = 0.0, $475 = 0.0, $476 = 0.0;
 var $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $Coef00 = 0.0, $Coef02 = 0.0, $Coef03 = 0.0;
 var $Coef04 = 0.0, $Coef06 = 0.0, $Coef07 = 0.0, $Coef08 = 0.0, $Coef10 = 0.0, $Coef11 = 0.0, $Coef12 = 0.0, $Coef14 = 0.0, $Coef15 = 0.0, $Coef16 = 0.0, $Coef18 = 0.0, $Coef19 = 0.0, $Coef20 = 0.0, $Coef22 = 0.0, $Coef23 = 0.0, $Dot0 = 0, $Dot1 = 0.0, $Fac0 = 0, $Fac1 = 0, $Fac2 = 0;
 var $Fac3 = 0, $Fac4 = 0, $Fac5 = 0, $Inv0 = 0, $Inv1 = 0, $Inv2 = 0, $Inv3 = 0, $Inverse = 0, $OneOverDeterminant = 0, $Row0 = 0, $SignA = 0, $SignB = 0, $Vec0 = 0, $Vec1 = 0, $Vec2 = 0, $Vec3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 768|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $Fac0 = sp + 664|0;
 $Fac1 = sp + 648|0;
 $Fac2 = sp + 632|0;
 $Fac3 = sp + 616|0;
 $Fac4 = sp + 600|0;
 $Fac5 = sp + 584|0;
 $Vec0 = sp + 568|0;
 $Vec1 = sp + 552|0;
 $Vec2 = sp + 536|0;
 $Vec3 = sp + 520|0;
 $Inv0 = sp + 504|0;
 $1 = sp + 488|0;
 $2 = sp + 472|0;
 $3 = sp + 456|0;
 $4 = sp + 440|0;
 $Inv1 = sp + 424|0;
 $5 = sp + 408|0;
 $6 = sp + 392|0;
 $7 = sp + 376|0;
 $8 = sp + 360|0;
 $Inv2 = sp + 344|0;
 $9 = sp + 328|0;
 $10 = sp + 312|0;
 $11 = sp + 296|0;
 $12 = sp + 280|0;
 $Inv3 = sp + 264|0;
 $13 = sp + 248|0;
 $14 = sp + 232|0;
 $15 = sp + 216|0;
 $16 = sp + 200|0;
 $SignA = sp + 184|0;
 $SignB = sp + 168|0;
 $Inverse = sp + 104|0;
 $17 = sp + 88|0;
 $18 = sp + 72|0;
 $19 = sp + 56|0;
 $20 = sp + 40|0;
 $Row0 = sp + 24|0;
 $Dot0 = sp + 8|0;
 $OneOverDeterminant = sp;
 $0 = $m;
 $21 = $0;
 $22 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($21,2)|0);
 $23 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($22,2)|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $0;
 $26 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($25,3)|0);
 $27 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($26,3)|0);
 $28 = +HEAPF32[$27>>2];
 $29 = $24 * $28;
 $30 = $0;
 $31 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($30,3)|0);
 $32 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($31,2)|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $0;
 $35 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($34,2)|0);
 $36 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($35,3)|0);
 $37 = +HEAPF32[$36>>2];
 $38 = $33 * $37;
 $39 = $29 - $38;
 $Coef00 = $39;
 $40 = $0;
 $41 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($40,1)|0);
 $42 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($41,2)|0);
 $43 = +HEAPF32[$42>>2];
 $44 = $0;
 $45 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($44,3)|0);
 $46 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($45,3)|0);
 $47 = +HEAPF32[$46>>2];
 $48 = $43 * $47;
 $49 = $0;
 $50 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($49,3)|0);
 $51 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($50,2)|0);
 $52 = +HEAPF32[$51>>2];
 $53 = $0;
 $54 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($53,1)|0);
 $55 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($54,3)|0);
 $56 = +HEAPF32[$55>>2];
 $57 = $52 * $56;
 $58 = $48 - $57;
 $Coef02 = $58;
 $59 = $0;
 $60 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($59,1)|0);
 $61 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($60,2)|0);
 $62 = +HEAPF32[$61>>2];
 $63 = $0;
 $64 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($63,2)|0);
 $65 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($64,3)|0);
 $66 = +HEAPF32[$65>>2];
 $67 = $62 * $66;
 $68 = $0;
 $69 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($68,2)|0);
 $70 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($69,2)|0);
 $71 = +HEAPF32[$70>>2];
 $72 = $0;
 $73 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($72,1)|0);
 $74 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($73,3)|0);
 $75 = +HEAPF32[$74>>2];
 $76 = $71 * $75;
 $77 = $67 - $76;
 $Coef03 = $77;
 $78 = $0;
 $79 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($78,2)|0);
 $80 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($79,1)|0);
 $81 = +HEAPF32[$80>>2];
 $82 = $0;
 $83 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($82,3)|0);
 $84 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($83,3)|0);
 $85 = +HEAPF32[$84>>2];
 $86 = $81 * $85;
 $87 = $0;
 $88 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($87,3)|0);
 $89 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($88,1)|0);
 $90 = +HEAPF32[$89>>2];
 $91 = $0;
 $92 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($91,2)|0);
 $93 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($92,3)|0);
 $94 = +HEAPF32[$93>>2];
 $95 = $90 * $94;
 $96 = $86 - $95;
 $Coef04 = $96;
 $97 = $0;
 $98 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($97,1)|0);
 $99 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($98,1)|0);
 $100 = +HEAPF32[$99>>2];
 $101 = $0;
 $102 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($101,3)|0);
 $103 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($102,3)|0);
 $104 = +HEAPF32[$103>>2];
 $105 = $100 * $104;
 $106 = $0;
 $107 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($106,3)|0);
 $108 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($107,1)|0);
 $109 = +HEAPF32[$108>>2];
 $110 = $0;
 $111 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($110,1)|0);
 $112 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($111,3)|0);
 $113 = +HEAPF32[$112>>2];
 $114 = $109 * $113;
 $115 = $105 - $114;
 $Coef06 = $115;
 $116 = $0;
 $117 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($116,1)|0);
 $118 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($117,1)|0);
 $119 = +HEAPF32[$118>>2];
 $120 = $0;
 $121 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($120,2)|0);
 $122 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($121,3)|0);
 $123 = +HEAPF32[$122>>2];
 $124 = $119 * $123;
 $125 = $0;
 $126 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($125,2)|0);
 $127 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($126,1)|0);
 $128 = +HEAPF32[$127>>2];
 $129 = $0;
 $130 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($129,1)|0);
 $131 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($130,3)|0);
 $132 = +HEAPF32[$131>>2];
 $133 = $128 * $132;
 $134 = $124 - $133;
 $Coef07 = $134;
 $135 = $0;
 $136 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($135,2)|0);
 $137 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($136,1)|0);
 $138 = +HEAPF32[$137>>2];
 $139 = $0;
 $140 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($139,3)|0);
 $141 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($140,2)|0);
 $142 = +HEAPF32[$141>>2];
 $143 = $138 * $142;
 $144 = $0;
 $145 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($144,3)|0);
 $146 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($145,1)|0);
 $147 = +HEAPF32[$146>>2];
 $148 = $0;
 $149 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($148,2)|0);
 $150 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($149,2)|0);
 $151 = +HEAPF32[$150>>2];
 $152 = $147 * $151;
 $153 = $143 - $152;
 $Coef08 = $153;
 $154 = $0;
 $155 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($154,1)|0);
 $156 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($155,1)|0);
 $157 = +HEAPF32[$156>>2];
 $158 = $0;
 $159 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($158,3)|0);
 $160 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($159,2)|0);
 $161 = +HEAPF32[$160>>2];
 $162 = $157 * $161;
 $163 = $0;
 $164 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($163,3)|0);
 $165 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($164,1)|0);
 $166 = +HEAPF32[$165>>2];
 $167 = $0;
 $168 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($167,1)|0);
 $169 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($168,2)|0);
 $170 = +HEAPF32[$169>>2];
 $171 = $166 * $170;
 $172 = $162 - $171;
 $Coef10 = $172;
 $173 = $0;
 $174 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($173,1)|0);
 $175 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($174,1)|0);
 $176 = +HEAPF32[$175>>2];
 $177 = $0;
 $178 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($177,2)|0);
 $179 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($178,2)|0);
 $180 = +HEAPF32[$179>>2];
 $181 = $176 * $180;
 $182 = $0;
 $183 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($182,2)|0);
 $184 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($183,1)|0);
 $185 = +HEAPF32[$184>>2];
 $186 = $0;
 $187 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($186,1)|0);
 $188 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($187,2)|0);
 $189 = +HEAPF32[$188>>2];
 $190 = $185 * $189;
 $191 = $181 - $190;
 $Coef11 = $191;
 $192 = $0;
 $193 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($192,2)|0);
 $194 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($193,0)|0);
 $195 = +HEAPF32[$194>>2];
 $196 = $0;
 $197 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($196,3)|0);
 $198 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($197,3)|0);
 $199 = +HEAPF32[$198>>2];
 $200 = $195 * $199;
 $201 = $0;
 $202 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($201,3)|0);
 $203 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($202,0)|0);
 $204 = +HEAPF32[$203>>2];
 $205 = $0;
 $206 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($205,2)|0);
 $207 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($206,3)|0);
 $208 = +HEAPF32[$207>>2];
 $209 = $204 * $208;
 $210 = $200 - $209;
 $Coef12 = $210;
 $211 = $0;
 $212 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($211,1)|0);
 $213 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($212,0)|0);
 $214 = +HEAPF32[$213>>2];
 $215 = $0;
 $216 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($215,3)|0);
 $217 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($216,3)|0);
 $218 = +HEAPF32[$217>>2];
 $219 = $214 * $218;
 $220 = $0;
 $221 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($220,3)|0);
 $222 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($221,0)|0);
 $223 = +HEAPF32[$222>>2];
 $224 = $0;
 $225 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($224,1)|0);
 $226 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($225,3)|0);
 $227 = +HEAPF32[$226>>2];
 $228 = $223 * $227;
 $229 = $219 - $228;
 $Coef14 = $229;
 $230 = $0;
 $231 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($230,1)|0);
 $232 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($231,0)|0);
 $233 = +HEAPF32[$232>>2];
 $234 = $0;
 $235 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($234,2)|0);
 $236 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($235,3)|0);
 $237 = +HEAPF32[$236>>2];
 $238 = $233 * $237;
 $239 = $0;
 $240 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($239,2)|0);
 $241 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($240,0)|0);
 $242 = +HEAPF32[$241>>2];
 $243 = $0;
 $244 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($243,1)|0);
 $245 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($244,3)|0);
 $246 = +HEAPF32[$245>>2];
 $247 = $242 * $246;
 $248 = $238 - $247;
 $Coef15 = $248;
 $249 = $0;
 $250 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($249,2)|0);
 $251 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($250,0)|0);
 $252 = +HEAPF32[$251>>2];
 $253 = $0;
 $254 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($253,3)|0);
 $255 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($254,2)|0);
 $256 = +HEAPF32[$255>>2];
 $257 = $252 * $256;
 $258 = $0;
 $259 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($258,3)|0);
 $260 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($259,0)|0);
 $261 = +HEAPF32[$260>>2];
 $262 = $0;
 $263 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($262,2)|0);
 $264 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($263,2)|0);
 $265 = +HEAPF32[$264>>2];
 $266 = $261 * $265;
 $267 = $257 - $266;
 $Coef16 = $267;
 $268 = $0;
 $269 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($268,1)|0);
 $270 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($269,0)|0);
 $271 = +HEAPF32[$270>>2];
 $272 = $0;
 $273 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($272,3)|0);
 $274 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($273,2)|0);
 $275 = +HEAPF32[$274>>2];
 $276 = $271 * $275;
 $277 = $0;
 $278 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($277,3)|0);
 $279 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($278,0)|0);
 $280 = +HEAPF32[$279>>2];
 $281 = $0;
 $282 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($281,1)|0);
 $283 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($282,2)|0);
 $284 = +HEAPF32[$283>>2];
 $285 = $280 * $284;
 $286 = $276 - $285;
 $Coef18 = $286;
 $287 = $0;
 $288 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($287,1)|0);
 $289 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($288,0)|0);
 $290 = +HEAPF32[$289>>2];
 $291 = $0;
 $292 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($291,2)|0);
 $293 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($292,2)|0);
 $294 = +HEAPF32[$293>>2];
 $295 = $290 * $294;
 $296 = $0;
 $297 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($296,2)|0);
 $298 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($297,0)|0);
 $299 = +HEAPF32[$298>>2];
 $300 = $0;
 $301 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($300,1)|0);
 $302 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($301,2)|0);
 $303 = +HEAPF32[$302>>2];
 $304 = $299 * $303;
 $305 = $295 - $304;
 $Coef19 = $305;
 $306 = $0;
 $307 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($306,2)|0);
 $308 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($307,0)|0);
 $309 = +HEAPF32[$308>>2];
 $310 = $0;
 $311 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($310,3)|0);
 $312 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($311,1)|0);
 $313 = +HEAPF32[$312>>2];
 $314 = $309 * $313;
 $315 = $0;
 $316 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($315,3)|0);
 $317 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($316,0)|0);
 $318 = +HEAPF32[$317>>2];
 $319 = $0;
 $320 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($319,2)|0);
 $321 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($320,1)|0);
 $322 = +HEAPF32[$321>>2];
 $323 = $318 * $322;
 $324 = $314 - $323;
 $Coef20 = $324;
 $325 = $0;
 $326 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($325,1)|0);
 $327 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($326,0)|0);
 $328 = +HEAPF32[$327>>2];
 $329 = $0;
 $330 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($329,3)|0);
 $331 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($330,1)|0);
 $332 = +HEAPF32[$331>>2];
 $333 = $328 * $332;
 $334 = $0;
 $335 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($334,3)|0);
 $336 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($335,0)|0);
 $337 = +HEAPF32[$336>>2];
 $338 = $0;
 $339 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($338,1)|0);
 $340 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($339,1)|0);
 $341 = +HEAPF32[$340>>2];
 $342 = $337 * $341;
 $343 = $333 - $342;
 $Coef22 = $343;
 $344 = $0;
 $345 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($344,1)|0);
 $346 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($345,0)|0);
 $347 = +HEAPF32[$346>>2];
 $348 = $0;
 $349 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($348,2)|0);
 $350 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($349,1)|0);
 $351 = +HEAPF32[$350>>2];
 $352 = $347 * $351;
 $353 = $0;
 $354 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($353,2)|0);
 $355 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($354,0)|0);
 $356 = +HEAPF32[$355>>2];
 $357 = $0;
 $358 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($357,1)|0);
 $359 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($358,1)|0);
 $360 = +HEAPF32[$359>>2];
 $361 = $356 * $360;
 $362 = $352 - $361;
 $Coef23 = $362;
 $363 = $Coef00;
 $364 = $Coef00;
 $365 = $Coef02;
 $366 = $Coef03;
 __ZN3glm5tvec4IfLNS_9precisionE0EEC2Effff($Fac0,$363,$364,$365,$366);
 $367 = $Coef04;
 $368 = $Coef04;
 $369 = $Coef06;
 $370 = $Coef07;
 __ZN3glm5tvec4IfLNS_9precisionE0EEC2Effff($Fac1,$367,$368,$369,$370);
 $371 = $Coef08;
 $372 = $Coef08;
 $373 = $Coef10;
 $374 = $Coef11;
 __ZN3glm5tvec4IfLNS_9precisionE0EEC2Effff($Fac2,$371,$372,$373,$374);
 $375 = $Coef12;
 $376 = $Coef12;
 $377 = $Coef14;
 $378 = $Coef15;
 __ZN3glm5tvec4IfLNS_9precisionE0EEC2Effff($Fac3,$375,$376,$377,$378);
 $379 = $Coef16;
 $380 = $Coef16;
 $381 = $Coef18;
 $382 = $Coef19;
 __ZN3glm5tvec4IfLNS_9precisionE0EEC2Effff($Fac4,$379,$380,$381,$382);
 $383 = $Coef20;
 $384 = $Coef20;
 $385 = $Coef22;
 $386 = $Coef23;
 __ZN3glm5tvec4IfLNS_9precisionE0EEC2Effff($Fac5,$383,$384,$385,$386);
 $387 = $0;
 $388 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($387,1)|0);
 $389 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($388,0)|0);
 $390 = +HEAPF32[$389>>2];
 $391 = $0;
 $392 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($391,0)|0);
 $393 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($392,0)|0);
 $394 = +HEAPF32[$393>>2];
 $395 = $0;
 $396 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($395,0)|0);
 $397 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($396,0)|0);
 $398 = +HEAPF32[$397>>2];
 $399 = $0;
 $400 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($399,0)|0);
 $401 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($400,0)|0);
 $402 = +HEAPF32[$401>>2];
 __ZN3glm5tvec4IfLNS_9precisionE0EEC2Effff($Vec0,$390,$394,$398,$402);
 $403 = $0;
 $404 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($403,1)|0);
 $405 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($404,1)|0);
 $406 = +HEAPF32[$405>>2];
 $407 = $0;
 $408 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($407,0)|0);
 $409 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($408,1)|0);
 $410 = +HEAPF32[$409>>2];
 $411 = $0;
 $412 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($411,0)|0);
 $413 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($412,1)|0);
 $414 = +HEAPF32[$413>>2];
 $415 = $0;
 $416 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($415,0)|0);
 $417 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($416,1)|0);
 $418 = +HEAPF32[$417>>2];
 __ZN3glm5tvec4IfLNS_9precisionE0EEC2Effff($Vec1,$406,$410,$414,$418);
 $419 = $0;
 $420 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($419,1)|0);
 $421 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($420,2)|0);
 $422 = +HEAPF32[$421>>2];
 $423 = $0;
 $424 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($423,0)|0);
 $425 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($424,2)|0);
 $426 = +HEAPF32[$425>>2];
 $427 = $0;
 $428 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($427,0)|0);
 $429 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($428,2)|0);
 $430 = +HEAPF32[$429>>2];
 $431 = $0;
 $432 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($431,0)|0);
 $433 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($432,2)|0);
 $434 = +HEAPF32[$433>>2];
 __ZN3glm5tvec4IfLNS_9precisionE0EEC2Effff($Vec2,$422,$426,$430,$434);
 $435 = $0;
 $436 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($435,1)|0);
 $437 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($436,3)|0);
 $438 = +HEAPF32[$437>>2];
 $439 = $0;
 $440 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($439,0)|0);
 $441 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($440,3)|0);
 $442 = +HEAPF32[$441>>2];
 $443 = $0;
 $444 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($443,0)|0);
 $445 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($444,3)|0);
 $446 = +HEAPF32[$445>>2];
 $447 = $0;
 $448 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($447,0)|0);
 $449 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($448,3)|0);
 $450 = +HEAPF32[$449>>2];
 __ZN3glm5tvec4IfLNS_9precisionE0EEC2Effff($Vec3,$438,$442,$446,$450);
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($2,$Vec1,$Fac0);
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($3,$Vec2,$Fac1);
 __ZN3glmmiIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($1,$2,$3);
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($4,$Vec3,$Fac2);
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($Inv0,$1,$4);
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($6,$Vec0,$Fac0);
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($7,$Vec2,$Fac3);
 __ZN3glmmiIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($5,$6,$7);
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($8,$Vec3,$Fac4);
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($Inv1,$5,$8);
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($10,$Vec0,$Fac1);
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($11,$Vec1,$Fac3);
 __ZN3glmmiIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($9,$10,$11);
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($12,$Vec3,$Fac5);
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($Inv2,$9,$12);
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($14,$Vec0,$Fac2);
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($15,$Vec1,$Fac4);
 __ZN3glmmiIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($13,$14,$15);
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($16,$Vec2,$Fac5);
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($Inv3,$13,$16);
 __ZN3glm5tvec4IfLNS_9precisionE0EEC2IiiiiEET_T0_T1_T2_($SignA,1,-1,1,-1);
 __ZN3glm5tvec4IfLNS_9precisionE0EEC2IiiiiEET_T0_T1_T2_($SignB,-1,1,-1,1);
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($17,$Inv0,$SignA);
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($18,$Inv1,$SignB);
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($19,$Inv2,$SignA);
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($20,$Inv3,$SignB);
 __ZN3glm7tmat4x4IfLNS_9precisionE0EEC2ERKNS_5tvec4IfLS1_0EEES6_S6_S6_($Inverse,$17,$18,$19,$20);
 $451 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($Inverse,0)|0);
 $452 = (__ZN3glm5tvec4IfLNS_9precisionE0EEixEi($451,0)|0);
 $453 = +HEAPF32[$452>>2];
 $454 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($Inverse,1)|0);
 $455 = (__ZN3glm5tvec4IfLNS_9precisionE0EEixEi($454,0)|0);
 $456 = +HEAPF32[$455>>2];
 $457 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($Inverse,2)|0);
 $458 = (__ZN3glm5tvec4IfLNS_9precisionE0EEixEi($457,0)|0);
 $459 = +HEAPF32[$458>>2];
 $460 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($Inverse,3)|0);
 $461 = (__ZN3glm5tvec4IfLNS_9precisionE0EEixEi($460,0)|0);
 $462 = +HEAPF32[$461>>2];
 __ZN3glm5tvec4IfLNS_9precisionE0EEC2Effff($Row0,$453,$456,$459,$462);
 $463 = $0;
 $464 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($463,0)|0);
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($Dot0,$464,$Row0);
 $465 = +HEAPF32[$Dot0>>2];
 $466 = ((($Dot0)) + 4|0);
 $467 = +HEAPF32[$466>>2];
 $468 = $465 + $467;
 $469 = ((($Dot0)) + 8|0);
 $470 = +HEAPF32[$469>>2];
 $471 = ((($Dot0)) + 12|0);
 $472 = +HEAPF32[$471>>2];
 $473 = $470 + $472;
 $474 = $468 + $473;
 $Dot1 = $474;
 $475 = $Dot1;
 $476 = 1.0 / $475;
 HEAPF32[$OneOverDeterminant>>2] = $476;
 __ZN3glmmlIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_RKS3_($agg$result,$Inverse,$OneOverDeterminant);
 STACKTOP = sp;return;
}
function __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($agg$result,$v1,$v2) {
 $agg$result = $agg$result|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v1;
 $1 = $v2;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 * $5;
 $7 = $0;
 $8 = ((($7)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 * $12;
 $14 = $0;
 $15 = ((($14)) + 8|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $1;
 $18 = ((($17)) + 8|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $16 * $19;
 $21 = $0;
 $22 = ((($21)) + 12|0);
 $23 = +HEAPF32[$22>>2];
 $24 = $1;
 $25 = ((($24)) + 12|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $23 * $26;
 __ZN3glm5tvec4IfLNS_9precisionE0EEC2Effff($agg$result,$6,$13,$20,$27);
 STACKTOP = sp;return;
}
function __ZN3glmmiIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($agg$result,$v1,$v2) {
 $agg$result = $agg$result|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v1;
 $1 = $v2;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 - $5;
 $7 = $0;
 $8 = ((($7)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 - $12;
 $14 = $0;
 $15 = ((($14)) + 8|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $1;
 $18 = ((($17)) + 8|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $16 - $19;
 $21 = $0;
 $22 = ((($21)) + 12|0);
 $23 = +HEAPF32[$22>>2];
 $24 = $1;
 $25 = ((($24)) + 12|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $23 - $26;
 __ZN3glm5tvec4IfLNS_9precisionE0EEC2Effff($agg$result,$6,$13,$20,$27);
 STACKTOP = sp;return;
}
function __ZN3glm5tvec4IfLNS_9precisionE0EEC2IiiiiEET_T0_T1_T2_($this,$a,$b,$c,$d) {
 $this = $this|0;
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 $d = $d|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $a;
 $2 = $b;
 $3 = $c;
 $4 = $d;
 $5 = $0;
 $6 = $1;
 $7 = (+($6|0));
 HEAPF32[$5>>2] = $7;
 $8 = ((($5)) + 4|0);
 $9 = $2;
 $10 = (+($9|0));
 HEAPF32[$8>>2] = $10;
 $11 = ((($5)) + 8|0);
 $12 = $3;
 $13 = (+($12|0));
 HEAPF32[$11>>2] = $13;
 $14 = ((($5)) + 12|0);
 $15 = $4;
 $16 = (+($15|0));
 HEAPF32[$14>>2] = $16;
 STACKTOP = sp;return;
}
function __ZN3glm7tmat4x4IfLNS_9precisionE0EEC2ERKNS_5tvec4IfLS1_0EEES6_S6_S6_($this,$v0,$v1,$v2,$v3) {
 $this = $this|0;
 $v0 = $v0|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 $v3 = $v3|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $v0;
 $2 = $v1;
 $3 = $v2;
 $4 = $v3;
 $5 = $0;
 $6 = ((($5)) + 64|0);
 $7 = $5;
 while(1) {
  __ZN3glm5tvec4IfLNS_9precisionE0EEC2Ev($7);
  $8 = ((($7)) + 16|0);
  $9 = ($8|0)==($6|0);
  if ($9) {
   break;
  } else {
   $7 = $8;
  }
 }
 $10 = $1;
 ;HEAP32[$5>>2]=HEAP32[$10>>2]|0;HEAP32[$5+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$10+12>>2]|0;
 $11 = ((($5)) + 16|0);
 $12 = $2;
 ;HEAP32[$11>>2]=HEAP32[$12>>2]|0;HEAP32[$11+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$11+12>>2]=HEAP32[$12+12>>2]|0;
 $13 = ((($5)) + 32|0);
 $14 = $3;
 ;HEAP32[$13>>2]=HEAP32[$14>>2]|0;HEAP32[$13+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$14+8>>2]|0;HEAP32[$13+12>>2]=HEAP32[$14+12>>2]|0;
 $15 = ((($5)) + 48|0);
 $16 = $4;
 ;HEAP32[$15>>2]=HEAP32[$16>>2]|0;HEAP32[$15+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$15+8>>2]=HEAP32[$16+8>>2]|0;HEAP32[$15+12>>2]=HEAP32[$16+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZN3glm5tvec4IfLNS_9precisionE0EEixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)>=(0);
 if ($4) {
  $5 = $1;
  $6 = (__ZN3glm6detail15component_countINS_5tvec4IfLNS_9precisionE0EEEEEiRKT_($2)|0);
  $7 = ($5|0)<($6|0);
  if ($7) {
   $8 = $1;
   $9 = (($2) + ($8<<2)|0);
   STACKTOP = sp;return ($9|0);
  }
 }
 ___assert_fail((13174|0),(13052|0),303,(13641|0));
 // unreachable;
 return (0)|0;
}
function __ZN3glmmlIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_RKS3_($agg$result,$m,$s) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 48|0;
 $3 = sp + 32|0;
 $4 = sp + 16|0;
 $5 = sp;
 $0 = $m;
 $1 = $s;
 $6 = $0;
 $7 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($6,0)|0);
 $8 = $1;
 $9 = +HEAPF32[$8>>2];
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_($2,$7,$9);
 $10 = $0;
 $11 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($10,1)|0);
 $12 = $1;
 $13 = +HEAPF32[$12>>2];
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_($3,$11,$13);
 $14 = $0;
 $15 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($14,2)|0);
 $16 = $1;
 $17 = +HEAPF32[$16>>2];
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_($4,$15,$17);
 $18 = $0;
 $19 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($18,3)|0);
 $20 = $1;
 $21 = +HEAPF32[$20>>2];
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_($5,$19,$21);
 __ZN3glm7tmat4x4IfLNS_9precisionE0EEC2ERKNS_5tvec4IfLS1_0EEES6_S6_S6_($agg$result,$2,$3,$4,$5);
 STACKTOP = sp;return;
}
function __ZNK14Transformation14transformationEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rotation = 0;
 var $translation = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 816|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $translation = sp + 744|0;
 $1 = sp + 680|0;
 $2 = sp + 672|0;
 $rotation = sp + 608|0;
 $3 = sp + 544|0;
 $4 = sp + 480|0;
 $5 = sp + 416|0;
 $6 = sp + 408|0;
 $7 = sp + 396|0;
 $8 = sp + 392|0;
 $9 = sp + 388|0;
 $10 = sp + 384|0;
 $11 = sp + 320|0;
 $12 = sp + 256|0;
 $13 = sp + 248|0;
 $14 = sp + 236|0;
 $15 = sp + 232|0;
 $16 = sp + 228|0;
 $17 = sp + 224|0;
 $18 = sp + 160|0;
 $19 = sp + 96|0;
 $20 = sp + 88|0;
 $21 = sp + 76|0;
 $22 = sp + 72|0;
 $23 = sp + 68|0;
 $24 = sp + 64|0;
 $25 = sp;
 $0 = $this;
 $26 = $0;
 HEAPF32[$2>>2] = 1.0;
 __ZN3glm7tmat4x4IfLNS_9precisionE0EEC2ERKf($1,$2);
 $27 = ((($26)) + 64|0);
 __ZN3glm9translateIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_RKNS_5tvec3IS3_XT0_EEE($translation,$1,$27);
 HEAPF32[$6>>2] = 1.0;
 __ZN3glm7tmat4x4IfLNS_9precisionE0EEC2ERKf($5,$6);
 $28 = ((($26)) + 76|0);
 $29 = ((($28)) + 4|0);
 $30 = +HEAPF32[$29>>2];
 $31 = (+__ZN3glm7radiansIfEET_S1_($30));
 HEAPF32[$8>>2] = 0.0;
 HEAPF32[$9>>2] = 1.0;
 HEAPF32[$10>>2] = 0.0;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($7,$8,$9,$10);
 __ZN3glm6rotateIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_S3_RKNS_5tvec3IS3_XT0_EEE($4,$5,$31,$7);
 HEAPF32[$13>>2] = 1.0;
 __ZN3glm7tmat4x4IfLNS_9precisionE0EEC2ERKf($12,$13);
 $32 = ((($26)) + 76|0);
 $33 = +HEAPF32[$32>>2];
 $34 = (+__ZN3glm7radiansIfEET_S1_($33));
 HEAPF32[$15>>2] = 1.0;
 HEAPF32[$16>>2] = 0.0;
 HEAPF32[$17>>2] = 0.0;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($14,$15,$16,$17);
 __ZN3glm6rotateIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_S3_RKNS_5tvec3IS3_XT0_EEE($11,$12,$34,$14);
 __ZN3glmmlIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_S6_($3,$4,$11);
 HEAPF32[$20>>2] = 1.0;
 __ZN3glm7tmat4x4IfLNS_9precisionE0EEC2ERKf($19,$20);
 $35 = ((($26)) + 76|0);
 $36 = ((($35)) + 8|0);
 $37 = +HEAPF32[$36>>2];
 $38 = (+__ZN3glm7radiansIfEET_S1_($37));
 HEAPF32[$22>>2] = 0.0;
 HEAPF32[$23>>2] = 0.0;
 HEAPF32[$24>>2] = 1.0;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($21,$22,$23,$24);
 __ZN3glm6rotateIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_S3_RKNS_5tvec3IS3_XT0_EEE($18,$19,$38,$21);
 __ZN3glmmlIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_S6_($rotation,$3,$18);
 __ZN3glmmlIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_S6_($25,$26,$translation);
 __ZN3glmmlIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_S6_($agg$result,$25,$rotation);
 STACKTOP = sp;return;
}
function __ZN3glm7tmat4x4IfLNS_9precisionE0EEC2ERKf($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 48|0;
 $3 = sp + 32|0;
 $4 = sp + 16|0;
 $5 = sp;
 $0 = $this;
 $1 = $s;
 $6 = $0;
 $7 = ((($6)) + 64|0);
 $8 = $6;
 while(1) {
  __ZN3glm5tvec4IfLNS_9precisionE0EEC2Ev($8);
  $9 = ((($8)) + 16|0);
  $10 = ($9|0)==($7|0);
  if ($10) {
   break;
  } else {
   $8 = $9;
  }
 }
 $11 = $1;
 $12 = +HEAPF32[$11>>2];
 __ZN3glm5tvec4IfLNS_9precisionE0EEC2IfiiiEET_T0_T1_T2_($2,$12,0,0,0);
 ;HEAP32[$6>>2]=HEAP32[$2>>2]|0;HEAP32[$6+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$2+12>>2]|0;
 $13 = ((($6)) + 16|0);
 $14 = $1;
 $15 = +HEAPF32[$14>>2];
 __ZN3glm5tvec4IfLNS_9precisionE0EEC2IifiiEET_T0_T1_T2_($3,0,$15,0,0);
 ;HEAP32[$13>>2]=HEAP32[$3>>2]|0;HEAP32[$13+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$13+12>>2]=HEAP32[$3+12>>2]|0;
 $16 = ((($6)) + 32|0);
 $17 = $1;
 $18 = +HEAPF32[$17>>2];
 __ZN3glm5tvec4IfLNS_9precisionE0EEC2IiifiEET_T0_T1_T2_($4,0,0,$18,0);
 ;HEAP32[$16>>2]=HEAP32[$4>>2]|0;HEAP32[$16+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$16+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$16+12>>2]=HEAP32[$4+12>>2]|0;
 $19 = ((($6)) + 48|0);
 $20 = $1;
 $21 = +HEAPF32[$20>>2];
 __ZN3glm5tvec4IfLNS_9precisionE0EEC2IiiifEET_T0_T1_T2_($5,0,0,0,$21);
 ;HEAP32[$19>>2]=HEAP32[$5>>2]|0;HEAP32[$19+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$19+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$19+12>>2]=HEAP32[$5+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZN3glm9translateIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_RKNS_5tvec3IS3_XT0_EEE($agg$result,$m,$v) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 80|0;
 $3 = sp + 64|0;
 $4 = sp + 48|0;
 $5 = sp + 32|0;
 $6 = sp + 16|0;
 $7 = sp;
 $0 = $m;
 $1 = $v;
 $8 = $0;
 dest=$agg$result; src=$8; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $9 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($agg$result,3)|0);
 $10 = $0;
 $11 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($10,0)|0);
 $12 = $1;
 $13 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($12,0)|0);
 $14 = +HEAPF32[$13>>2];
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_($5,$11,$14);
 $15 = $0;
 $16 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($15,1)|0);
 $17 = $1;
 $18 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($17,1)|0);
 $19 = +HEAPF32[$18>>2];
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_($6,$16,$19);
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($4,$5,$6);
 $20 = $0;
 $21 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($20,2)|0);
 $22 = $1;
 $23 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($22,2)|0);
 $24 = +HEAPF32[$23>>2];
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_($7,$21,$24);
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($3,$4,$7);
 $25 = $0;
 $26 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($25,3)|0);
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($2,$3,$26);
 ;HEAP32[$9>>2]=HEAP32[$2>>2]|0;HEAP32[$9+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$9+12>>2]=HEAP32[$2+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZN3glm7radiansIfEET_S1_($degrees) {
 $degrees = +$degrees;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $degrees;
 $1 = $0;
 $2 = $1 * 0.01745329238474369;
 STACKTOP = sp;return (+$2);
}
function __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($this,$a,$b,$c) {
 $this = $this|0;
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $a;
 $2 = $b;
 $3 = $c;
 $4 = $0;
 $5 = $1;
 $6 = +HEAPF32[$5>>2];
 HEAPF32[$4>>2] = $6;
 $7 = ((($4)) + 4|0);
 $8 = $2;
 $9 = +HEAPF32[$8>>2];
 HEAPF32[$7>>2] = $9;
 $10 = ((($4)) + 8|0);
 $11 = $3;
 $12 = +HEAPF32[$11>>2];
 HEAPF32[$10>>2] = $12;
 STACKTOP = sp;return;
}
function __ZN3glm6rotateIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_S3_RKNS_5tvec3IS3_XT0_EEE($agg$result,$m,$angle,$v) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 $angle = +$angle;
 $v = $v|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0;
 var $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0.0;
 var $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0;
 var $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, $Rotate = 0, $a = 0.0, $axis = 0, $c = 0.0, $s = 0.0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $axis = sp + 320|0;
 $temp = sp + 308|0;
 $5 = sp + 304|0;
 $Rotate = sp + 240|0;
 $6 = sp + 224|0;
 $7 = sp + 208|0;
 $8 = sp + 192|0;
 $9 = sp + 176|0;
 $10 = sp + 160|0;
 $11 = sp + 144|0;
 $12 = sp + 128|0;
 $13 = sp + 112|0;
 $14 = sp + 96|0;
 $15 = sp + 80|0;
 $16 = sp + 64|0;
 $17 = sp + 48|0;
 $18 = sp + 32|0;
 $19 = sp + 16|0;
 $20 = sp;
 $2 = $m;
 $3 = $angle;
 $4 = $v;
 $21 = $3;
 $a = $21;
 $22 = $a;
 $1 = $22;
 $23 = $1;
 $24 = (+Math_cos((+$23)));
 $c = $24;
 $25 = $a;
 $0 = $25;
 $26 = $0;
 $27 = (+Math_sin((+$26)));
 $s = $27;
 $28 = $4;
 __ZN3glm9normalizeIfLNS_9precisionE0ENS_5tvec3EEET1_IT_XT0_EERKS5_($axis,$28);
 $29 = $c;
 $30 = 1.0 - $29;
 HEAPF32[$5>>2] = $30;
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS3_RKS4_($temp,$5,$axis);
 __ZN3glm7tmat4x4IfLNS_9precisionE0EEC2ENS_4ctorE($Rotate,0);
 $31 = $c;
 $32 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($temp,0)|0);
 $33 = +HEAPF32[$32>>2];
 $34 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($axis,0)|0);
 $35 = +HEAPF32[$34>>2];
 $36 = $33 * $35;
 $37 = $31 + $36;
 $38 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($Rotate,0)|0);
 $39 = (__ZN3glm5tvec4IfLNS_9precisionE0EEixEi($38,0)|0);
 HEAPF32[$39>>2] = $37;
 $40 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($temp,0)|0);
 $41 = +HEAPF32[$40>>2];
 $42 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($axis,1)|0);
 $43 = +HEAPF32[$42>>2];
 $44 = $41 * $43;
 $45 = 0.0 + $44;
 $46 = $s;
 $47 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($axis,2)|0);
 $48 = +HEAPF32[$47>>2];
 $49 = $46 * $48;
 $50 = $45 + $49;
 $51 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($Rotate,0)|0);
 $52 = (__ZN3glm5tvec4IfLNS_9precisionE0EEixEi($51,1)|0);
 HEAPF32[$52>>2] = $50;
 $53 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($temp,0)|0);
 $54 = +HEAPF32[$53>>2];
 $55 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($axis,2)|0);
 $56 = +HEAPF32[$55>>2];
 $57 = $54 * $56;
 $58 = 0.0 + $57;
 $59 = $s;
 $60 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($axis,1)|0);
 $61 = +HEAPF32[$60>>2];
 $62 = $59 * $61;
 $63 = $58 - $62;
 $64 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($Rotate,0)|0);
 $65 = (__ZN3glm5tvec4IfLNS_9precisionE0EEixEi($64,2)|0);
 HEAPF32[$65>>2] = $63;
 $66 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($temp,1)|0);
 $67 = +HEAPF32[$66>>2];
 $68 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($axis,0)|0);
 $69 = +HEAPF32[$68>>2];
 $70 = $67 * $69;
 $71 = 0.0 + $70;
 $72 = $s;
 $73 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($axis,2)|0);
 $74 = +HEAPF32[$73>>2];
 $75 = $72 * $74;
 $76 = $71 - $75;
 $77 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($Rotate,1)|0);
 $78 = (__ZN3glm5tvec4IfLNS_9precisionE0EEixEi($77,0)|0);
 HEAPF32[$78>>2] = $76;
 $79 = $c;
 $80 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($temp,1)|0);
 $81 = +HEAPF32[$80>>2];
 $82 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($axis,1)|0);
 $83 = +HEAPF32[$82>>2];
 $84 = $81 * $83;
 $85 = $79 + $84;
 $86 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($Rotate,1)|0);
 $87 = (__ZN3glm5tvec4IfLNS_9precisionE0EEixEi($86,1)|0);
 HEAPF32[$87>>2] = $85;
 $88 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($temp,1)|0);
 $89 = +HEAPF32[$88>>2];
 $90 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($axis,2)|0);
 $91 = +HEAPF32[$90>>2];
 $92 = $89 * $91;
 $93 = 0.0 + $92;
 $94 = $s;
 $95 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($axis,0)|0);
 $96 = +HEAPF32[$95>>2];
 $97 = $94 * $96;
 $98 = $93 + $97;
 $99 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($Rotate,1)|0);
 $100 = (__ZN3glm5tvec4IfLNS_9precisionE0EEixEi($99,2)|0);
 HEAPF32[$100>>2] = $98;
 $101 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($temp,2)|0);
 $102 = +HEAPF32[$101>>2];
 $103 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($axis,0)|0);
 $104 = +HEAPF32[$103>>2];
 $105 = $102 * $104;
 $106 = 0.0 + $105;
 $107 = $s;
 $108 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($axis,1)|0);
 $109 = +HEAPF32[$108>>2];
 $110 = $107 * $109;
 $111 = $106 + $110;
 $112 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($Rotate,2)|0);
 $113 = (__ZN3glm5tvec4IfLNS_9precisionE0EEixEi($112,0)|0);
 HEAPF32[$113>>2] = $111;
 $114 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($temp,2)|0);
 $115 = +HEAPF32[$114>>2];
 $116 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($axis,1)|0);
 $117 = +HEAPF32[$116>>2];
 $118 = $115 * $117;
 $119 = 0.0 + $118;
 $120 = $s;
 $121 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($axis,0)|0);
 $122 = +HEAPF32[$121>>2];
 $123 = $120 * $122;
 $124 = $119 - $123;
 $125 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($Rotate,2)|0);
 $126 = (__ZN3glm5tvec4IfLNS_9precisionE0EEixEi($125,1)|0);
 HEAPF32[$126>>2] = $124;
 $127 = $c;
 $128 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($temp,2)|0);
 $129 = +HEAPF32[$128>>2];
 $130 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($axis,2)|0);
 $131 = +HEAPF32[$130>>2];
 $132 = $129 * $131;
 $133 = $127 + $132;
 $134 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($Rotate,2)|0);
 $135 = (__ZN3glm5tvec4IfLNS_9precisionE0EEixEi($134,2)|0);
 HEAPF32[$135>>2] = $133;
 __ZN3glm7tmat4x4IfLNS_9precisionE0EEC2ENS_4ctorE($agg$result,0);
 $136 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($agg$result,0)|0);
 $137 = $2;
 $138 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($137,0)|0);
 $139 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($Rotate,0)|0);
 $140 = (__ZN3glm5tvec4IfLNS_9precisionE0EEixEi($139,0)|0);
 $141 = +HEAPF32[$140>>2];
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_($8,$138,$141);
 $142 = $2;
 $143 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($142,1)|0);
 $144 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($Rotate,0)|0);
 $145 = (__ZN3glm5tvec4IfLNS_9precisionE0EEixEi($144,1)|0);
 $146 = +HEAPF32[$145>>2];
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_($9,$143,$146);
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($7,$8,$9);
 $147 = $2;
 $148 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($147,2)|0);
 $149 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($Rotate,0)|0);
 $150 = (__ZN3glm5tvec4IfLNS_9precisionE0EEixEi($149,2)|0);
 $151 = +HEAPF32[$150>>2];
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_($10,$148,$151);
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($6,$7,$10);
 ;HEAP32[$136>>2]=HEAP32[$6>>2]|0;HEAP32[$136+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$136+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$136+12>>2]=HEAP32[$6+12>>2]|0;
 $152 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($agg$result,1)|0);
 $153 = $2;
 $154 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($153,0)|0);
 $155 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($Rotate,1)|0);
 $156 = (__ZN3glm5tvec4IfLNS_9precisionE0EEixEi($155,0)|0);
 $157 = +HEAPF32[$156>>2];
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_($13,$154,$157);
 $158 = $2;
 $159 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($158,1)|0);
 $160 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($Rotate,1)|0);
 $161 = (__ZN3glm5tvec4IfLNS_9precisionE0EEixEi($160,1)|0);
 $162 = +HEAPF32[$161>>2];
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_($14,$159,$162);
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($12,$13,$14);
 $163 = $2;
 $164 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($163,2)|0);
 $165 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($Rotate,1)|0);
 $166 = (__ZN3glm5tvec4IfLNS_9precisionE0EEixEi($165,2)|0);
 $167 = +HEAPF32[$166>>2];
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_($15,$164,$167);
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($11,$12,$15);
 ;HEAP32[$152>>2]=HEAP32[$11>>2]|0;HEAP32[$152+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$152+8>>2]=HEAP32[$11+8>>2]|0;HEAP32[$152+12>>2]=HEAP32[$11+12>>2]|0;
 $168 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($agg$result,2)|0);
 $169 = $2;
 $170 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($169,0)|0);
 $171 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($Rotate,2)|0);
 $172 = (__ZN3glm5tvec4IfLNS_9precisionE0EEixEi($171,0)|0);
 $173 = +HEAPF32[$172>>2];
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_($18,$170,$173);
 $174 = $2;
 $175 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($174,1)|0);
 $176 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($Rotate,2)|0);
 $177 = (__ZN3glm5tvec4IfLNS_9precisionE0EEixEi($176,1)|0);
 $178 = +HEAPF32[$177>>2];
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_($19,$175,$178);
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($17,$18,$19);
 $179 = $2;
 $180 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($179,2)|0);
 $181 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($Rotate,2)|0);
 $182 = (__ZN3glm5tvec4IfLNS_9precisionE0EEixEi($181,2)|0);
 $183 = +HEAPF32[$182>>2];
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_($20,$180,$183);
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($16,$17,$20);
 ;HEAP32[$168>>2]=HEAP32[$16>>2]|0;HEAP32[$168+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$168+8>>2]=HEAP32[$16+8>>2]|0;HEAP32[$168+12>>2]=HEAP32[$16+12>>2]|0;
 $184 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($agg$result,3)|0);
 $185 = $2;
 $186 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($185,3)|0);
 ;HEAP32[$184>>2]=HEAP32[$186>>2]|0;HEAP32[$184+4>>2]=HEAP32[$186+4>>2]|0;HEAP32[$184+8>>2]=HEAP32[$186+8>>2]|0;HEAP32[$184+12>>2]=HEAP32[$186+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZN3glm9normalizeIfLNS_9precisionE0ENS_5tvec3EEET1_IT_XT0_EERKS5_($agg$result,$x) {
 $agg$result = $agg$result|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $0 = $x;
 $2 = $0;
 $3 = $0;
 $4 = $0;
 $5 = (+__ZN3glm3dotIfLNS_9precisionE0ENS_5tvec3EEET_RKT1_IS3_XT0_EES7_($3,$4));
 $6 = (+__ZN3glm11inversesqrtIfEET_S1_($5));
 HEAPF32[$1>>2] = $6;
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_RKS3_($agg$result,$2,$1);
 STACKTOP = sp;return;
}
function __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS3_RKS4_($agg$result,$scalar,$v) {
 $agg$result = $agg$result|0;
 $scalar = $scalar|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0;
 var $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $0 = $scalar;
 $1 = $v;
 $5 = $0;
 $6 = +HEAPF32[$5>>2];
 $7 = $1;
 $8 = +HEAPF32[$7>>2];
 $9 = $6 * $8;
 HEAPF32[$2>>2] = $9;
 $10 = $0;
 $11 = +HEAPF32[$10>>2];
 $12 = $1;
 $13 = ((($12)) + 4|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $11 * $14;
 HEAPF32[$3>>2] = $15;
 $16 = $0;
 $17 = +HEAPF32[$16>>2];
 $18 = $1;
 $19 = ((($18)) + 8|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $17 * $20;
 HEAPF32[$4>>2] = $21;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($agg$result,$2,$3,$4);
 STACKTOP = sp;return;
}
function __ZN3glm5tvec3IfLNS_9precisionE0EEixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)>=(0);
 if ($4) {
  $5 = $1;
  $6 = (__ZN3glm6detail15component_countINS_5tvec3IfLNS_9precisionE0EEEEEiRKT_($2)|0);
  $7 = ($5|0)<($6|0);
  if ($7) {
   $8 = $1;
   $9 = (($2) + ($8<<2)|0);
   STACKTOP = sp;return ($9|0);
  }
 }
 ___assert_fail((13174|0),(13259|0),201,(13641|0));
 // unreachable;
 return (0)|0;
}
function __ZN3glm6detail15component_countINS_5tvec3IfLNS_9precisionE0EEEEEiRKT_($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = (__ZNK3glm5tvec3IfLNS_9precisionE0EE6lengthEv($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK3glm5tvec3IfLNS_9precisionE0EE6lengthEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZN3glm3dotIfLNS_9precisionE0ENS_5tvec3EEET_RKT1_IS3_XT0_EES7_($x,$y) {
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $1 = $y;
 $2 = $0;
 $3 = $1;
 $4 = (+__ZN3glm6detail11compute_dotINS_5tvec3EfLNS_9precisionE0EE4callERKNS2_IfLS3_0EEES7_($2,$3));
 STACKTOP = sp;return (+$4);
}
function __ZN3glm11inversesqrtIfEET_S1_($x) {
 $x = +$x;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $x;
 $2 = $1;
 $0 = $2;
 $3 = $0;
 $4 = (+Math_sqrt((+$3)));
 $5 = 1.0 / $4;
 STACKTOP = sp;return (+$5);
}
function __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_RKS3_($agg$result,$v,$scalar) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 $scalar = $scalar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0;
 var $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $0 = $v;
 $1 = $scalar;
 $5 = $0;
 $6 = +HEAPF32[$5>>2];
 $7 = $1;
 $8 = +HEAPF32[$7>>2];
 $9 = $6 * $8;
 HEAPF32[$2>>2] = $9;
 $10 = $0;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $1;
 $14 = +HEAPF32[$13>>2];
 $15 = $12 * $14;
 HEAPF32[$3>>2] = $15;
 $16 = $0;
 $17 = ((($16)) + 8|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $1;
 $20 = +HEAPF32[$19>>2];
 $21 = $18 * $20;
 HEAPF32[$4>>2] = $21;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($agg$result,$2,$3,$4);
 STACKTOP = sp;return;
}
function __ZN3glm6detail11compute_dotINS_5tvec3EfLNS_9precisionE0EE4callERKNS2_IfLS3_0EEES7_($x,$y) {
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp;
 $0 = $x;
 $1 = $y;
 $2 = $0;
 $3 = $1;
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_S6_($tmp,$2,$3);
 $4 = +HEAPF32[$tmp>>2];
 $5 = ((($tmp)) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $4 + $6;
 $8 = ((($tmp)) + 8|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $7 + $9;
 STACKTOP = sp;return (+$10);
}
function __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_S6_($agg$result,$v1,$v2) {
 $agg$result = $agg$result|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $0 = $v1;
 $1 = $v2;
 $5 = $0;
 $6 = +HEAPF32[$5>>2];
 $7 = $1;
 $8 = +HEAPF32[$7>>2];
 $9 = $6 * $8;
 HEAPF32[$2>>2] = $9;
 $10 = $0;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $1;
 $14 = ((($13)) + 4|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $12 * $15;
 HEAPF32[$3>>2] = $16;
 $17 = $0;
 $18 = ((($17)) + 8|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $1;
 $21 = ((($20)) + 8|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $19 * $22;
 HEAPF32[$4>>2] = $23;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($agg$result,$2,$3,$4);
 STACKTOP = sp;return;
}
function __ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)>=(0);
 if ($4) {
  $5 = $1;
  $6 = (__ZN3glm6detail15component_countINS_5tvec3IfLNS_9precisionE0EEEEEiRKT_($2)|0);
  $7 = ($5|0)<($6|0);
  if ($7) {
   $8 = $1;
   $9 = (($2) + ($8<<2)|0);
   STACKTOP = sp;return ($9|0);
  }
 }
 ___assert_fail((13174|0),(13259|0),208,(13641|0));
 // unreachable;
 return (0)|0;
}
function __ZN3glm5tvec4IfLNS_9precisionE0EEC2IfiiiEET_T0_T1_T2_($this,$a,$b,$c,$d) {
 $this = $this|0;
 $a = +$a;
 $b = $b|0;
 $c = $c|0;
 $d = $d|0;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $a;
 $2 = $b;
 $3 = $c;
 $4 = $d;
 $5 = $0;
 $6 = $1;
 HEAPF32[$5>>2] = $6;
 $7 = ((($5)) + 4|0);
 $8 = $2;
 $9 = (+($8|0));
 HEAPF32[$7>>2] = $9;
 $10 = ((($5)) + 8|0);
 $11 = $3;
 $12 = (+($11|0));
 HEAPF32[$10>>2] = $12;
 $13 = ((($5)) + 12|0);
 $14 = $4;
 $15 = (+($14|0));
 HEAPF32[$13>>2] = $15;
 STACKTOP = sp;return;
}
function __ZN3glm5tvec4IfLNS_9precisionE0EEC2IifiiEET_T0_T1_T2_($this,$a,$b,$c,$d) {
 $this = $this|0;
 $a = $a|0;
 $b = +$b;
 $c = $c|0;
 $d = $d|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $a;
 $2 = $b;
 $3 = $c;
 $4 = $d;
 $5 = $0;
 $6 = $1;
 $7 = (+($6|0));
 HEAPF32[$5>>2] = $7;
 $8 = ((($5)) + 4|0);
 $9 = $2;
 HEAPF32[$8>>2] = $9;
 $10 = ((($5)) + 8|0);
 $11 = $3;
 $12 = (+($11|0));
 HEAPF32[$10>>2] = $12;
 $13 = ((($5)) + 12|0);
 $14 = $4;
 $15 = (+($14|0));
 HEAPF32[$13>>2] = $15;
 STACKTOP = sp;return;
}
function __ZN3glm5tvec4IfLNS_9precisionE0EEC2IiifiEET_T0_T1_T2_($this,$a,$b,$c,$d) {
 $this = $this|0;
 $a = $a|0;
 $b = $b|0;
 $c = +$c;
 $d = $d|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $a;
 $2 = $b;
 $3 = $c;
 $4 = $d;
 $5 = $0;
 $6 = $1;
 $7 = (+($6|0));
 HEAPF32[$5>>2] = $7;
 $8 = ((($5)) + 4|0);
 $9 = $2;
 $10 = (+($9|0));
 HEAPF32[$8>>2] = $10;
 $11 = ((($5)) + 8|0);
 $12 = $3;
 HEAPF32[$11>>2] = $12;
 $13 = ((($5)) + 12|0);
 $14 = $4;
 $15 = (+($14|0));
 HEAPF32[$13>>2] = $15;
 STACKTOP = sp;return;
}
function __ZN3glm5tvec4IfLNS_9precisionE0EEC2IiiifEET_T0_T1_T2_($this,$a,$b,$c,$d) {
 $this = $this|0;
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 $d = +$d;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $a;
 $2 = $b;
 $3 = $c;
 $4 = $d;
 $5 = $0;
 $6 = $1;
 $7 = (+($6|0));
 HEAPF32[$5>>2] = $7;
 $8 = ((($5)) + 4|0);
 $9 = $2;
 $10 = (+($9|0));
 HEAPF32[$8>>2] = $10;
 $11 = ((($5)) + 8|0);
 $12 = $3;
 $13 = (+($12|0));
 HEAPF32[$11>>2] = $13;
 $14 = ((($5)) + 12|0);
 $15 = $4;
 HEAPF32[$14>>2] = $15;
 STACKTOP = sp;return;
}
function __ZN6Shader8filenameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($agg$result,$name) {
 $agg$result = $agg$result|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = $0;
 __ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_($agg$result,13319,$1);
 STACKTOP = sp;return;
}
function __ZN6ShaderC2ER5StoreRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($this,$store,$name) {
 $this = $this|0;
 $store = $store|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $file = 0, $size = 0, $source = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $36 = sp + 32|0;
 $37 = sp + 16|0;
 $source = sp;
 $33 = $this;
 $34 = $store;
 $35 = $name;
 $40 = $33;
 __ZN8ResourceC2Ev($40);
 $41 = $35;
 $42 = $35;
 $32 = $42;
 $43 = $32;
 $31 = $43;
 $44 = $31;
 $30 = $44;
 $45 = $30;
 $29 = $45;
 $46 = $29;
 $47 = HEAP8[$46>>0]|0;
 $48 = $47&255;
 $49 = $48 & 1;
 $50 = ($49|0)!=(0);
 if ($50) {
  $25 = $43;
  $51 = $25;
  $24 = $51;
  $52 = $24;
  $23 = $52;
  $53 = $23;
  $54 = ((($53)) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $63 = $55;
 } else {
  $28 = $43;
  $56 = $28;
  $27 = $56;
  $57 = $27;
  $26 = $57;
  $58 = $26;
  $59 = HEAP8[$58>>0]|0;
  $60 = $59&255;
  $61 = $60 >> 1;
  $63 = $61;
 }
 $62 = (($63) - 5)|0;
 $5 = $41;
 $6 = $62;
 $7 = -1;
 $64 = $5;
 $65 = $6;
 $66 = $7;
 $4 = $64;
 $67 = $4;
 $3 = $67;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($36,$64,$65,$66,$69);
 $0 = $36;
 $1 = 13334;
 $70 = $0;
 $71 = $1;
 $72 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($70,$71)|0);
 $73 = ($72|0)==(0);
 $74 = $73 ? 35633 : 35632;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($36);
 $type = $74;
 $75 = $35;
 __ZN6Shader8filenameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($37,$75);
 $22 = $37;
 $76 = $22;
 $21 = $76;
 $77 = $21;
 $20 = $77;
 $78 = $20;
 $19 = $78;
 $79 = $19;
 $18 = $79;
 $80 = $18;
 $17 = $80;
 $81 = $17;
 $82 = HEAP8[$81>>0]|0;
 $83 = $82&255;
 $84 = $83 & 1;
 $85 = ($84|0)!=(0);
 if ($85) {
  $11 = $78;
  $86 = $11;
  $10 = $86;
  $87 = $10;
  $9 = $87;
  $88 = $9;
  $89 = ((($88)) + 8|0);
  $90 = HEAP32[$89>>2]|0;
  $97 = $90;
 } else {
  $16 = $78;
  $91 = $16;
  $15 = $91;
  $92 = $15;
  $14 = $92;
  $93 = $14;
  $94 = ((($93)) + 1|0);
  $13 = $94;
  $95 = $13;
  $12 = $95;
  $96 = $12;
  $97 = $96;
 }
 $8 = $97;
 $98 = $8;
 __THREW__ = 0;
 $99 = (invoke_iii(344,($98|0),(13816|0))|0);
 $100 = __THREW__; __THREW__ = 0;
 $101 = $100&1;
 if ($101) {
  $124 = ___cxa_find_matching_catch()|0;
  $125 = tempRet0;
  $38 = $124;
  $39 = $125;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($37);
  $126 = $38;
  $127 = $39;
  ___resumeException($126|0);
  // unreachable;
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($37);
  $file = $99;
  $102 = $file;
  (_fseek($102,0,2)|0);
  $103 = $file;
  $104 = (_ftell($103)|0);
  $size = $104;
  $105 = $file;
  (_fseek($105,0,0)|0);
  $106 = $size;
  $107 = (($106) + 1)|0;
  $108 = (_malloc($107)|0);
  HEAP32[$source>>2] = $108;
  $109 = HEAP32[$source>>2]|0;
  $110 = $size;
  $111 = $file;
  (_fread($109,$110,1,$111)|0);
  $112 = $size;
  $113 = HEAP32[$source>>2]|0;
  $114 = (($113) + ($112)|0);
  HEAP8[$114>>0] = 0;
  $115 = $file;
  (_fclose($115)|0);
  $116 = $type;
  $117 = (_glCreateShader(($116|0))|0);
  $118 = ((($40)) + 4|0);
  HEAP32[$118>>2] = $117;
  $119 = ((($40)) + 4|0);
  $120 = HEAP32[$119>>2]|0;
  _glShaderSource(($120|0),1,($source|0),(0|0));
  $121 = ((($40)) + 4|0);
  $122 = HEAP32[$121>>2]|0;
  _glCompileShader(($122|0));
  $123 = HEAP32[$source>>2]|0;
  _free($123);
  STACKTOP = sp;return;
 }
}
function __ZN6Models6Static8filenameERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$name) {
 $agg$result = $agg$result|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = $0;
 __ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_($agg$result,13795,$1);
 STACKTOP = sp;return;
}
function __ZN6Models6StaticC2ER5StoreRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE($this,$store,$name) {
 $this = $this|0;
 $store = $store|0;
 $name = $name|0;
 var $$byval_copy = 0, $$byval_copy$36 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0;
 var $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0;
 var $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0;
 var $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0;
 var $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0;
 var $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0;
 var $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0;
 var $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0;
 var $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0;
 var $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0;
 var $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0;
 var $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0;
 var $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0;
 var $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0;
 var $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0;
 var $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0;
 var $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0;
 var $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0;
 var $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0;
 var $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0;
 var $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0;
 var $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0;
 var $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0;
 var $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0;
 var $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0;
 var $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0;
 var $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0;
 var $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0;
 var $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0;
 var $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0;
 var $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0;
 var $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0;
 var $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0;
 var $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0;
 var $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0;
 var $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0;
 var $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0;
 var $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0;
 var $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0;
 var $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0;
 var $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0;
 var $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $__a$i$i = 0, $__annotator$i = 0, $__annotator$i$14 = 0, $__annotator$i$19 = 0, $__i$i$i = 0, $__r$i$i = 0, $attr_count = 0;
 var $eh$lpad$body7$index32Z2D = 0, $eh$lpad$body7$indexZ2D = 0, $file = 0, $i = 0, $line = 0, $mtllib = 0, $tmp_normals = 0, $tmp_positions = 0, $tmp_tex_coords = 0, $v = 0, $v1 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer20 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0;
 var $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr30 = 0, $vararg_ptr6 = 0, $vn = 0, $vn3 = 0, $vt = 0, $vt2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1936|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy$36 = sp + 1929|0;
 $$byval_copy = sp + 1928|0;
 $vararg_buffer20 = sp + 88|0;
 $vararg_buffer12 = sp + 64|0;
 $vararg_buffer7 = sp + 48|0;
 $vararg_buffer3 = sp + 40|0;
 $vararg_buffer = sp + 24|0;
 $84 = sp + 1927|0;
 $85 = sp + 1926|0;
 $129 = sp + 16|0;
 $134 = sp + 1925|0;
 $__annotator$i$19 = sp + 1924|0;
 $174 = sp + 8|0;
 $179 = sp + 1923|0;
 $__annotator$i$14 = sp + 1922|0;
 $219 = sp;
 $224 = sp + 1921|0;
 $__annotator$i = sp + 1920|0;
 $264 = sp + 876|0;
 $279 = sp + 808|0;
 $282 = sp + 796|0;
 $289 = sp + 768|0;
 $292 = sp + 756|0;
 $299 = sp + 728|0;
 $302 = sp + 716|0;
 $348 = sp + 524|0;
 $file = sp + 328|0;
 $351 = sp + 316|0;
 $tmp_positions = sp + 300|0;
 $tmp_tex_coords = sp + 288|0;
 $tmp_normals = sp + 276|0;
 $line = sp + 260|0;
 $352 = sp + 248|0;
 $v = sp + 236|0;
 $353 = sp + 224|0;
 $vt = sp + 216|0;
 $354 = sp + 200|0;
 $vn = sp + 188|0;
 $355 = sp + 176|0;
 $v1 = sp + 1912|0;
 $vt2 = sp + 1906|0;
 $vn3 = sp + 1900|0;
 $356 = sp + 160|0;
 $357 = sp + 148|0;
 $358 = sp + 136|0;
 $359 = sp + 124|0;
 $345 = $this;
 $346 = $store;
 $347 = $name;
 $360 = $345;
 __ZN5ModelC2Ev($360);
 $361 = ((($360)) + 8|0);
 __ZN12TexturedMeshC2Ev($361);
 $362 = 2364;
 HEAP32[$360>>2] = $362;
 $363 = $346;
 $343 = $348;
 $344 = 13357;
 $364 = $343;
 $342 = $364;
 $365 = $342;
 $341 = $365;
 $366 = $341;
 $340 = $366;
 $367 = $344;
 $368 = $344;
 __THREW__ = 0;
 $369 = (invoke_ii(330,($368|0))|0);
 $370 = __THREW__; __THREW__ = 0;
 $371 = $370&1;
 do {
  if (!($371)) {
   __THREW__ = 0;
   invoke_viii(345,($364|0),($367|0),($369|0));
   $372 = __THREW__; __THREW__ = 0;
   $373 = $372&1;
   if (!($373)) {
    __THREW__ = 0;
    $374 = (invoke_iii(346,($363|0),($348|0))|0);
    $375 = __THREW__; __THREW__ = 0;
    $376 = $375&1;
    if (!($376)) {
     __THREW__ = 0;
     $377 = (invoke_iiiiii(347,($374|0),3,(2332|0),3,(2344|0))|0);
     $378 = __THREW__; __THREW__ = 0;
     $379 = $378&1;
     if (!($379)) {
      $380 = ((($360)) + 76|0);
      HEAP32[$380>>2] = $377;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($348);
      $381 = $347;
      __THREW__ = 0;
      invoke_vii(348,($351|0),($381|0));
      $382 = __THREW__; __THREW__ = 0;
      $383 = $382&1;
      if ($383) {
       break;
      }
      $335 = $file;
      $336 = $351;
      $337 = 8;
      $384 = $335;
      $385 = ((($384)) + 108|0);
      $334 = $385;
      $386 = $334;
      $333 = $386;
      $387 = $333;
      $388 = 7436;
      HEAP32[$387>>2] = $388;
      $389 = 7336;
      HEAP32[$386>>2] = $389;
      $390 = 2380;
      HEAP32[$384>>2] = $390;
      $391 = ((($384)) + 108|0);
      $392 = 2400;
      HEAP32[$391>>2] = $392;
      $393 = ((($384)) + 8|0);
      $330 = $384;
      $394 = 2412;
      $331 = $394;
      $332 = $393;
      $395 = $330;
      $396 = $331;
      $397 = HEAP32[$396>>2]|0;
      HEAP32[$395>>2] = $397;
      $398 = ((($396)) + 4|0);
      $399 = HEAP32[$398>>2]|0;
      $400 = HEAP32[$395>>2]|0;
      $401 = ((($400)) + -12|0);
      $402 = HEAP32[$401>>2]|0;
      $403 = (($395) + ($402)|0);
      HEAP32[$403>>2] = $399;
      $404 = ((($395)) + 4|0);
      HEAP32[$404>>2] = 0;
      $405 = HEAP32[$395>>2]|0;
      $406 = ((($405)) + -12|0);
      $407 = HEAP32[$406>>2]|0;
      $408 = (($395) + ($407)|0);
      $409 = $332;
      $328 = $408;
      $329 = $409;
      $410 = $328;
      $411 = $329;
      __THREW__ = 0;
      invoke_vii(349,($410|0),($411|0));
      $412 = __THREW__; __THREW__ = 0;
      $413 = $412&1;
      if ($413) {
       $470 = ___cxa_find_matching_catch()|0;
       $471 = tempRet0;
       $338 = $470;
       $339 = $471;
      } else {
       $414 = ((($410)) + 72|0);
       HEAP32[$414>>2] = 0;
       $415 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
       $416 = ((($410)) + 76|0);
       HEAP32[$416>>2] = $415;
       $417 = 2380;
       HEAP32[$384>>2] = $417;
       $418 = ((($384)) + 108|0);
       $419 = 2400;
       HEAP32[$418>>2] = $419;
       $420 = ((($384)) + 8|0);
       __THREW__ = 0;
       invoke_vi(350,($420|0));
       $421 = __THREW__; __THREW__ = 0;
       $422 = $421&1;
       if ($422) {
        $472 = ___cxa_find_matching_catch()|0;
        $473 = tempRet0;
        $338 = $472;
        $339 = $473;
       } else {
        $423 = ((($384)) + 8|0);
        $424 = $336;
        $425 = $337;
        $426 = $425 | 8;
        $325 = $423;
        $326 = $424;
        $327 = $426;
        $427 = $325;
        $428 = $326;
        $324 = $428;
        $429 = $324;
        $323 = $429;
        $430 = $323;
        $322 = $430;
        $431 = $322;
        $321 = $431;
        $432 = $321;
        $320 = $432;
        $433 = $320;
        $319 = $433;
        $434 = $319;
        $435 = HEAP8[$434>>0]|0;
        $436 = $435&255;
        $437 = $436 & 1;
        $438 = ($437|0)!=(0);
        if ($438) {
         $313 = $431;
         $439 = $313;
         $312 = $439;
         $440 = $312;
         $311 = $440;
         $441 = $311;
         $442 = ((($441)) + 8|0);
         $443 = HEAP32[$442>>2]|0;
         $450 = $443;
        } else {
         $318 = $431;
         $444 = $318;
         $317 = $444;
         $445 = $317;
         $316 = $445;
         $446 = $316;
         $447 = ((($446)) + 1|0);
         $315 = $447;
         $448 = $315;
         $314 = $448;
         $449 = $314;
         $450 = $449;
        }
        $310 = $450;
        $451 = $310;
        $452 = $327;
        __THREW__ = 0;
        $453 = (invoke_iiii(351,($427|0),($451|0),($452|0))|0);
        $454 = __THREW__; __THREW__ = 0;
        $455 = $454&1;
        do {
         if (!($455)) {
          $456 = ($453|0)==(0|0);
          if ($456) {
           $457 = HEAP32[$384>>2]|0;
           $458 = ((($457)) + -12|0);
           $459 = HEAP32[$458>>2]|0;
           $460 = (($384) + ($459)|0);
           $308 = $460;
           $309 = 4;
           $461 = $308;
           $462 = $309;
           $306 = $461;
           $307 = $462;
           $463 = $306;
           $464 = ((($463)) + 16|0);
           $465 = HEAP32[$464>>2]|0;
           $466 = $307;
           $467 = $465 | $466;
           __THREW__ = 0;
           invoke_vii(352,($463|0),($467|0));
           $468 = __THREW__; __THREW__ = 0;
           $469 = $468&1;
           if ($469) {
            break;
           }
          }
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($351);
          $mtllib = 0;
          $305 = $tmp_positions;
          $479 = $305;
          $304 = $479;
          $480 = $304;
          $303 = $480;
          HEAP32[$480>>2] = 0;
          $481 = ((($480)) + 4|0);
          HEAP32[$481>>2] = 0;
          $482 = ((($480)) + 8|0);
          $301 = $482;
          HEAP32[$302>>2] = 0;
          $483 = $301;
          $300 = $302;
          $484 = $300;
          $485 = HEAP32[$484>>2]|0;
          $298 = $483;
          HEAP32[$299>>2] = $485;
          $486 = $298;
          $297 = $486;
          $296 = $299;
          $487 = $296;
          $488 = HEAP32[$487>>2]|0;
          HEAP32[$486>>2] = $488;
          $295 = $tmp_tex_coords;
          $489 = $295;
          $294 = $489;
          $490 = $294;
          $293 = $490;
          HEAP32[$490>>2] = 0;
          $491 = ((($490)) + 4|0);
          HEAP32[$491>>2] = 0;
          $492 = ((($490)) + 8|0);
          $291 = $492;
          HEAP32[$292>>2] = 0;
          $493 = $291;
          $290 = $292;
          $494 = $290;
          $495 = HEAP32[$494>>2]|0;
          $288 = $493;
          HEAP32[$289>>2] = $495;
          $496 = $288;
          $287 = $496;
          $286 = $289;
          $497 = $286;
          $498 = HEAP32[$497>>2]|0;
          HEAP32[$496>>2] = $498;
          $285 = $tmp_normals;
          $499 = $285;
          $284 = $499;
          $500 = $284;
          $283 = $500;
          HEAP32[$500>>2] = 0;
          $501 = ((($500)) + 4|0);
          HEAP32[$501>>2] = 0;
          $502 = ((($500)) + 8|0);
          $281 = $502;
          HEAP32[$282>>2] = 0;
          $503 = $281;
          $280 = $282;
          $504 = $280;
          $505 = HEAP32[$504>>2]|0;
          $278 = $503;
          HEAP32[$279>>2] = $505;
          $506 = $278;
          $277 = $506;
          $276 = $279;
          $507 = $276;
          $508 = HEAP32[$507>>2]|0;
          HEAP32[$506>>2] = $508;
          $attr_count = 0;
          $275 = $line;
          $509 = $275;
          $274 = $509;
          $510 = $274;
          $273 = $510;
          $511 = $273;
          $272 = $511;
          $271 = $509;
          $512 = $271;
          $270 = $512;
          $513 = $270;
          $269 = $513;
          $514 = $269;
          $__a$i$i = $514;
          $__i$i$i = 0;
          while(1) {
           $515 = $__i$i$i;
           $516 = ($515>>>0)<(3);
           if (!($516)) {
            break;
           }
           $517 = $__i$i$i;
           $518 = $__a$i$i;
           $519 = (($518) + ($517<<2)|0);
           HEAP32[$519>>2] = 0;
           $520 = $__i$i$i;
           $521 = (($520) + 1)|0;
           $__i$i$i = $521;
          }
          L26: while(1) {
           $267 = $file;
           $268 = $line;
           $522 = $267;
           $523 = $268;
           $524 = $267;
           $525 = HEAP32[$524>>2]|0;
           $526 = ((($525)) + -12|0);
           $527 = HEAP32[$526>>2]|0;
           $528 = (($524) + ($527)|0);
           $262 = $528;
           $263 = 10;
           $529 = $262;
           __THREW__ = 0;
           $530 = (invoke_ii(353,($529|0))|0);
           $531 = __THREW__; __THREW__ = 0;
           $532 = $531&1;
           if ($532) {
            label = 40;
            break;
           }
           HEAP32[$264>>2] = $530;
           $261 = $264;
           $533 = $261;
           __THREW__ = 0;
           $534 = (invoke_iii(354,($533|0),(8588|0))|0);
           $535 = __THREW__; __THREW__ = 0;
           $536 = $535&1;
           if ($536) {
            label = 25;
            break;
           }
           $537 = $263;
           $259 = $534;
           $260 = $537;
           $538 = $259;
           $539 = HEAP32[$538>>2]|0;
           $540 = ((($539)) + 28|0);
           $541 = HEAP32[$540>>2]|0;
           $542 = $260;
           __THREW__ = 0;
           $543 = (invoke_iii($541|0,($538|0),($542|0))|0);
           $544 = __THREW__; __THREW__ = 0;
           $545 = $544&1;
           if ($545) {
            label = 25;
            break;
           }
           __ZNSt3__16localeD2Ev($264);
           __THREW__ = 0;
           $550 = (invoke_iiii(355,($522|0),($523|0),($543|0))|0);
           $551 = __THREW__; __THREW__ = 0;
           $552 = $551&1;
           if ($552) {
            label = 40;
            break;
           }
           $553 = HEAP32[$550>>2]|0;
           $554 = ((($553)) + -12|0);
           $555 = HEAP32[$554>>2]|0;
           $556 = (($550) + ($555)|0);
           $258 = $556;
           $557 = $258;
           $257 = $557;
           $558 = $257;
           $256 = $558;
           $559 = $256;
           $560 = ((($559)) + 16|0);
           $561 = HEAP32[$560>>2]|0;
           $562 = $561 & 5;
           $563 = ($562|0)!=(0);
           $564 = $563 ^ 1;
           if (!($564)) {
            label = 113;
            break;
           }
           $253 = $line;
           $254 = 0;
           $255 = 2;
           $565 = $253;
           $566 = $254;
           $567 = $255;
           $252 = $565;
           $568 = $252;
           $251 = $568;
           $569 = $251;
           $250 = $569;
           $570 = $250;
           __THREW__ = 0;
           invoke_viiiii(356,($352|0),($565|0),($566|0),($567|0),($570|0));
           $571 = __THREW__; __THREW__ = 0;
           $572 = $571&1;
           if ($572) {
            label = 40;
            break;
           }
           $248 = $352;
           $249 = 13366;
           $573 = $248;
           $574 = $249;
           $575 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($573,$574)|0);
           $576 = ($575|0)==(0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($352);
           if ($576) {
            __THREW__ = 0;
            invoke_vi(357,($v|0));
            $577 = __THREW__; __THREW__ = 0;
            $578 = $577&1;
            if ($578) {
             label = 40;
             break;
            }
            $247 = $line;
            $579 = $247;
            $246 = $579;
            $580 = $246;
            $245 = $580;
            $581 = $245;
            $244 = $581;
            $582 = $244;
            $243 = $582;
            $583 = $243;
            $584 = HEAP8[$583>>0]|0;
            $585 = $584&255;
            $586 = $585 & 1;
            $587 = ($586|0)!=(0);
            if ($587) {
             $237 = $580;
             $588 = $237;
             $236 = $588;
             $589 = $236;
             $235 = $589;
             $590 = $235;
             $591 = ((($590)) + 8|0);
             $592 = HEAP32[$591>>2]|0;
             $599 = $592;
            } else {
             $242 = $580;
             $593 = $242;
             $241 = $593;
             $594 = $241;
             $240 = $594;
             $595 = $240;
             $596 = ((($595)) + 1|0);
             $239 = $596;
             $597 = $239;
             $238 = $597;
             $598 = $238;
             $599 = $598;
            }
            $234 = $599;
            $600 = $234;
            $601 = ((($v)) + 4|0);
            $602 = ((($v)) + 8|0);
            __THREW__ = 0;
            HEAP32[$vararg_buffer>>2] = $v;
            $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
            HEAP32[$vararg_ptr1>>2] = $601;
            $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
            HEAP32[$vararg_ptr2>>2] = $602;
            (invoke_iiii(358,($600|0),(13369|0),($vararg_buffer|0))|0);
            $603 = __THREW__; __THREW__ = 0;
            $604 = $603&1;
            if ($604) {
             label = 40;
             break;
            }
            $232 = $tmp_positions;
            $233 = $v;
            $605 = $232;
            $606 = ((($605)) + 4|0);
            $607 = HEAP32[$606>>2]|0;
            $231 = $605;
            $608 = $231;
            $609 = ((($608)) + 8|0);
            $230 = $609;
            $610 = $230;
            $229 = $610;
            $611 = $229;
            $612 = HEAP32[$611>>2]|0;
            $613 = ($607|0)!=($612|0);
            if ($613) {
             __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i,$605,1);
             $228 = $605;
             $614 = $228;
             $615 = ((($614)) + 8|0);
             $227 = $615;
             $616 = $227;
             $226 = $616;
             $617 = $226;
             $618 = ((($605)) + 4|0);
             $619 = HEAP32[$618>>2]|0;
             $225 = $619;
             $620 = $225;
             $621 = $233;
             $221 = $617;
             $222 = $620;
             $223 = $621;
             $622 = $221;
             $623 = $222;
             $624 = $223;
             $220 = $624;
             $625 = $220;
             ;HEAP8[$219>>0]=HEAP8[$224>>0]|0;
             $216 = $622;
             $217 = $623;
             $218 = $625;
             $626 = $216;
             $627 = $217;
             $628 = $218;
             $215 = $628;
             $629 = $215;
             $212 = $626;
             $213 = $627;
             $214 = $629;
             $630 = $213;
             $631 = $214;
             $211 = $631;
             $632 = $211;
             ;HEAP32[$630>>2]=HEAP32[$632>>2]|0;HEAP32[$630+4>>2]=HEAP32[$632+4>>2]|0;HEAP32[$630+8>>2]=HEAP32[$632+8>>2]|0;
             __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
             $633 = ((($605)) + 4|0);
             $634 = HEAP32[$633>>2]|0;
             $635 = ((($634)) + 12|0);
             HEAP32[$633>>2] = $635;
             continue;
            } else {
             $636 = $233;
             __THREW__ = 0;
             invoke_vii(359,($605|0),($636|0));
             $637 = __THREW__; __THREW__ = 0;
             $638 = $637&1;
             if ($638) {
              label = 40;
              break;
             } else {
              continue;
             }
            }
           }
           $208 = $line;
           $209 = 0;
           $210 = 3;
           $645 = $208;
           $646 = $209;
           $647 = $210;
           $207 = $645;
           $648 = $207;
           $206 = $648;
           $649 = $206;
           $205 = $649;
           $650 = $205;
           __THREW__ = 0;
           invoke_viiiii(356,($353|0),($645|0),($646|0),($647|0),($650|0));
           $651 = __THREW__; __THREW__ = 0;
           $652 = $651&1;
           if ($652) {
            label = 40;
            break;
           }
           $203 = $353;
           $204 = 13380;
           $653 = $203;
           $654 = $204;
           $655 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($653,$654)|0);
           $656 = ($655|0)==(0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($353);
           if ($656) {
            __THREW__ = 0;
            invoke_vi(360,($vt|0));
            $657 = __THREW__; __THREW__ = 0;
            $658 = $657&1;
            if ($658) {
             label = 40;
             break;
            }
            $202 = $line;
            $659 = $202;
            $201 = $659;
            $660 = $201;
            $200 = $660;
            $661 = $200;
            $199 = $661;
            $662 = $199;
            $198 = $662;
            $663 = $198;
            $664 = HEAP8[$663>>0]|0;
            $665 = $664&255;
            $666 = $665 & 1;
            $667 = ($666|0)!=(0);
            if ($667) {
             $192 = $660;
             $668 = $192;
             $191 = $668;
             $669 = $191;
             $190 = $669;
             $670 = $190;
             $671 = ((($670)) + 8|0);
             $672 = HEAP32[$671>>2]|0;
             $679 = $672;
            } else {
             $197 = $660;
             $673 = $197;
             $196 = $673;
             $674 = $196;
             $195 = $674;
             $675 = $195;
             $676 = ((($675)) + 1|0);
             $194 = $676;
             $677 = $194;
             $193 = $677;
             $678 = $193;
             $679 = $678;
            }
            $189 = $679;
            $680 = $189;
            $681 = ((($vt)) + 4|0);
            __THREW__ = 0;
            HEAP32[$vararg_buffer3>>2] = $vt;
            $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
            HEAP32[$vararg_ptr6>>2] = $681;
            (invoke_iiii(358,($680|0),(13384|0),($vararg_buffer3|0))|0);
            $682 = __THREW__; __THREW__ = 0;
            $683 = $682&1;
            if ($683) {
             label = 40;
             break;
            }
            $187 = $tmp_tex_coords;
            $188 = $vt;
            $684 = $187;
            $685 = ((($684)) + 4|0);
            $686 = HEAP32[$685>>2]|0;
            $186 = $684;
            $687 = $186;
            $688 = ((($687)) + 8|0);
            $185 = $688;
            $689 = $185;
            $184 = $689;
            $690 = $184;
            $691 = HEAP32[$690>>2]|0;
            $692 = ($686|0)!=($691|0);
            if ($692) {
             __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i$14,$684,1);
             $183 = $684;
             $693 = $183;
             $694 = ((($693)) + 8|0);
             $182 = $694;
             $695 = $182;
             $181 = $695;
             $696 = $181;
             $697 = ((($684)) + 4|0);
             $698 = HEAP32[$697>>2]|0;
             $180 = $698;
             $699 = $180;
             $700 = $188;
             $176 = $696;
             $177 = $699;
             $178 = $700;
             $701 = $176;
             $702 = $177;
             $703 = $178;
             $175 = $703;
             $704 = $175;
             ;HEAP8[$174>>0]=HEAP8[$179>>0]|0;
             $171 = $701;
             $172 = $702;
             $173 = $704;
             $705 = $171;
             $706 = $172;
             $707 = $173;
             $170 = $707;
             $708 = $170;
             $167 = $705;
             $168 = $706;
             $169 = $708;
             $709 = $168;
             $710 = $169;
             $166 = $710;
             $711 = $166;
             ;HEAP32[$709>>2]=HEAP32[$711>>2]|0;HEAP32[$709+4>>2]=HEAP32[$711+4>>2]|0;
             __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i$14);
             $712 = ((($684)) + 4|0);
             $713 = HEAP32[$712>>2]|0;
             $714 = ((($713)) + 8|0);
             HEAP32[$712>>2] = $714;
             continue;
            } else {
             $715 = $188;
             __THREW__ = 0;
             invoke_vii(361,($684|0),($715|0));
             $716 = __THREW__; __THREW__ = 0;
             $717 = $716&1;
             if ($717) {
              label = 40;
              break;
             } else {
              continue;
             }
            }
           }
           $163 = $line;
           $164 = 0;
           $165 = 3;
           $718 = $163;
           $719 = $164;
           $720 = $165;
           $162 = $718;
           $721 = $162;
           $161 = $721;
           $722 = $161;
           $160 = $722;
           $723 = $160;
           __THREW__ = 0;
           invoke_viiiii(356,($354|0),($718|0),($719|0),($720|0),($723|0));
           $724 = __THREW__; __THREW__ = 0;
           $725 = $724&1;
           if ($725) {
            label = 40;
            break;
           }
           $158 = $354;
           $159 = 13393;
           $726 = $158;
           $727 = $159;
           $728 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($726,$727)|0);
           $729 = ($728|0)==(0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($354);
           if ($729) {
            __THREW__ = 0;
            invoke_vi(357,($vn|0));
            $730 = __THREW__; __THREW__ = 0;
            $731 = $730&1;
            if ($731) {
             label = 40;
             break;
            }
            $157 = $line;
            $732 = $157;
            $156 = $732;
            $733 = $156;
            $155 = $733;
            $734 = $155;
            $154 = $734;
            $735 = $154;
            $153 = $735;
            $736 = $153;
            $737 = HEAP8[$736>>0]|0;
            $738 = $737&255;
            $739 = $738 & 1;
            $740 = ($739|0)!=(0);
            if ($740) {
             $147 = $733;
             $741 = $147;
             $146 = $741;
             $742 = $146;
             $145 = $742;
             $743 = $145;
             $744 = ((($743)) + 8|0);
             $745 = HEAP32[$744>>2]|0;
             $752 = $745;
            } else {
             $152 = $733;
             $746 = $152;
             $151 = $746;
             $747 = $151;
             $150 = $747;
             $748 = $150;
             $749 = ((($748)) + 1|0);
             $149 = $749;
             $750 = $149;
             $148 = $750;
             $751 = $148;
             $752 = $751;
            }
            $144 = $752;
            $753 = $144;
            $754 = ((($vn)) + 4|0);
            $755 = ((($vn)) + 8|0);
            __THREW__ = 0;
            HEAP32[$vararg_buffer7>>2] = $vn;
            $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
            HEAP32[$vararg_ptr10>>2] = $754;
            $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
            HEAP32[$vararg_ptr11>>2] = $755;
            (invoke_iiii(358,($753|0),(13397|0),($vararg_buffer7|0))|0);
            $756 = __THREW__; __THREW__ = 0;
            $757 = $756&1;
            if ($757) {
             label = 40;
             break;
            }
            $142 = $tmp_normals;
            $143 = $vn;
            $758 = $142;
            $759 = ((($758)) + 4|0);
            $760 = HEAP32[$759>>2]|0;
            $141 = $758;
            $761 = $141;
            $762 = ((($761)) + 8|0);
            $140 = $762;
            $763 = $140;
            $139 = $763;
            $764 = $139;
            $765 = HEAP32[$764>>2]|0;
            $766 = ($760|0)!=($765|0);
            if ($766) {
             __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i$19,$758,1);
             $138 = $758;
             $767 = $138;
             $768 = ((($767)) + 8|0);
             $137 = $768;
             $769 = $137;
             $136 = $769;
             $770 = $136;
             $771 = ((($758)) + 4|0);
             $772 = HEAP32[$771>>2]|0;
             $135 = $772;
             $773 = $135;
             $774 = $143;
             $131 = $770;
             $132 = $773;
             $133 = $774;
             $775 = $131;
             $776 = $132;
             $777 = $133;
             $130 = $777;
             $778 = $130;
             ;HEAP8[$129>>0]=HEAP8[$134>>0]|0;
             $126 = $775;
             $127 = $776;
             $128 = $778;
             $779 = $126;
             $780 = $127;
             $781 = $128;
             $125 = $781;
             $782 = $125;
             $122 = $779;
             $123 = $780;
             $124 = $782;
             $783 = $123;
             $784 = $124;
             $121 = $784;
             $785 = $121;
             ;HEAP32[$783>>2]=HEAP32[$785>>2]|0;HEAP32[$783+4>>2]=HEAP32[$785+4>>2]|0;HEAP32[$783+8>>2]=HEAP32[$785+8>>2]|0;
             __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i$19);
             $786 = ((($758)) + 4|0);
             $787 = HEAP32[$786>>2]|0;
             $788 = ((($787)) + 12|0);
             HEAP32[$786>>2] = $788;
             continue;
            } else {
             $789 = $143;
             __THREW__ = 0;
             invoke_vii(359,($758|0),($789|0));
             $790 = __THREW__; __THREW__ = 0;
             $791 = $790&1;
             if ($791) {
              label = 40;
              break;
             } else {
              continue;
             }
            }
           }
           $118 = $line;
           $119 = 0;
           $120 = 2;
           $792 = $118;
           $793 = $119;
           $794 = $120;
           $117 = $792;
           $795 = $117;
           $116 = $795;
           $796 = $116;
           $115 = $796;
           $797 = $115;
           __THREW__ = 0;
           invoke_viiiii(356,($355|0),($792|0),($793|0),($794|0),($797|0));
           $798 = __THREW__; __THREW__ = 0;
           $799 = $798&1;
           if ($799) {
            label = 40;
            break;
           }
           $113 = $355;
           $114 = 13409;
           $800 = $113;
           $801 = $114;
           $802 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($800,$801)|0);
           $803 = ($802|0)==(0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($355);
           if (!($803)) {
            $37 = $line;
            $38 = 0;
            $39 = 7;
            $1011 = $37;
            $1012 = $38;
            $1013 = $39;
            $36 = $1011;
            $1014 = $36;
            $35 = $1014;
            $1015 = $35;
            $34 = $1015;
            $1016 = $34;
            __THREW__ = 0;
            invoke_viiiii(356,($356|0),($1011|0),($1012|0),($1013|0),($1016|0));
            $1017 = __THREW__; __THREW__ = 0;
            $1018 = $1017&1;
            if ($1018) {
             label = 40;
             break;
            }
            $32 = $356;
            $33 = 13482;
            $1019 = $32;
            $1020 = $33;
            $1021 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($1019,$1020)|0);
            $1022 = ($1021|0)==(0);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($356);
            if ($1022) {
             $1023 = $346;
             $29 = $line;
             $30 = 7;
             $31 = -1;
             $1024 = $29;
             $1025 = $30;
             $1026 = $31;
             $28 = $1024;
             $1027 = $28;
             $27 = $1027;
             $1028 = $27;
             $26 = $1028;
             $1029 = $26;
             __THREW__ = 0;
             invoke_viiiii(356,($357|0),($1024|0),($1025|0),($1026|0),($1029|0));
             $1030 = __THREW__; __THREW__ = 0;
             $1031 = $1030&1;
             if ($1031) {
              label = 40;
              break;
             }
             __THREW__ = 0;
             $1032 = (invoke_iii(366,($1023|0),($357|0))|0);
             $1033 = __THREW__; __THREW__ = 0;
             $1034 = $1033&1;
             if ($1034) {
              label = 106;
              break;
             }
             $mtllib = $1032;
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($357);
             continue;
            }
            $23 = $line;
            $24 = 0;
            $25 = 7;
            $1037 = $23;
            $1038 = $24;
            $1039 = $25;
            $22 = $1037;
            $1040 = $22;
            $21 = $1040;
            $1041 = $21;
            $20 = $1041;
            $1042 = $20;
            __THREW__ = 0;
            invoke_viiiii(356,($358|0),($1037|0),($1038|0),($1039|0),($1042|0));
            $1043 = __THREW__; __THREW__ = 0;
            $1044 = $1043&1;
            if ($1044) {
             label = 40;
             break;
            }
            $18 = $358;
            $19 = 13490;
            $1045 = $18;
            $1046 = $19;
            $1047 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($1045,$1046)|0);
            $1048 = ($1047|0)==(0);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($358);
            if (!($1048)) {
             continue;
            }
            $1049 = $mtllib;
            $15 = $line;
            $16 = 7;
            $17 = -1;
            $1050 = $15;
            $1051 = $16;
            $1052 = $17;
            $14 = $1050;
            $1053 = $14;
            $13 = $1053;
            $1054 = $13;
            $12 = $1054;
            $1055 = $12;
            __THREW__ = 0;
            invoke_viiiii(356,($359|0),($1050|0),($1051|0),($1052|0),($1055|0));
            $1056 = __THREW__; __THREW__ = 0;
            $1057 = $1056&1;
            if ($1057) {
             label = 40;
             break;
            }
            __THREW__ = 0;
            $1058 = (invoke_iii(367,($1049|0),($359|0))|0);
            $1059 = __THREW__; __THREW__ = 0;
            $1060 = $1059&1;
            if ($1060) {
             label = 112;
             break;
            }
            $1061 = ((($360)) + 72|0);
            HEAP32[$1061>>2] = $1058;
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($359);
            continue;
           }
           $804 = $attr_count;
           $805 = ($804|0)==(0);
           do {
            if ($805) {
             $110 = $line;
             $111 = 13412;
             $112 = 0;
             $806 = $110;
             $109 = $806;
             $807 = $109;
             $108 = $807;
             $808 = $108;
             $107 = $808;
             $809 = $107;
             $106 = $809;
             $810 = $106;
             $105 = $810;
             $811 = $105;
             $812 = HEAP8[$811>>0]|0;
             $813 = $812&255;
             $814 = $813 & 1;
             $815 = ($814|0)!=(0);
             if ($815) {
              $99 = $808;
              $816 = $99;
              $98 = $816;
              $817 = $98;
              $97 = $817;
              $818 = $97;
              $819 = ((($818)) + 8|0);
              $820 = HEAP32[$819>>2]|0;
              $827 = $820;
             } else {
              $104 = $808;
              $821 = $104;
              $103 = $821;
              $822 = $103;
              $102 = $822;
              $823 = $102;
              $824 = ((($823)) + 1|0);
              $101 = $824;
              $825 = $101;
              $100 = $825;
              $826 = $100;
              $827 = $826;
             }
             $96 = $827;
             $828 = $96;
             $95 = $806;
             $829 = $95;
             $94 = $829;
             $830 = $94;
             $93 = $830;
             $831 = $93;
             $92 = $831;
             $832 = $92;
             $833 = HEAP8[$832>>0]|0;
             $834 = $833&255;
             $835 = $834 & 1;
             $836 = ($835|0)!=(0);
             if ($836) {
              $88 = $829;
              $837 = $88;
              $87 = $837;
              $838 = $87;
              $86 = $838;
              $839 = $86;
              $840 = ((($839)) + 4|0);
              $841 = HEAP32[$840>>2]|0;
              $854 = $841;
             } else {
              $91 = $829;
              $842 = $91;
              $90 = $842;
              $843 = $90;
              $89 = $843;
              $844 = $89;
              $845 = HEAP8[$844>>0]|0;
              $846 = $845&255;
              $847 = $846 >> 1;
              $854 = $847;
             }
             $848 = $111;
             $849 = $112;
             $850 = $111;
             __THREW__ = 0;
             $851 = (invoke_ii(330,($850|0))|0);
             $852 = __THREW__; __THREW__ = 0;
             $853 = $852&1;
             if ($853) {
              label = 82;
              break L26;
             }
             $79 = $828;
             $80 = $854;
             $81 = $848;
             $82 = $849;
             $83 = $851;
             $855 = $82;
             $856 = $80;
             $857 = ($855>>>0)>($856>>>0);
             do {
              if ($857) {
               label = 74;
              } else {
               $858 = $80;
               $859 = $82;
               $860 = (($858) - ($859))|0;
               $861 = $83;
               $862 = ($860>>>0)<($861>>>0);
               if ($862) {
                label = 74;
                break;
               }
               $863 = $83;
               $864 = ($863|0)==(0);
               if ($864) {
                $865 = $82;
                $78 = $865;
                break;
               }
               $866 = $79;
               $867 = $82;
               $868 = (($866) + ($867)|0);
               $869 = $79;
               $870 = $80;
               $871 = (($869) + ($870)|0);
               $872 = $81;
               $873 = $81;
               $874 = $83;
               $875 = (($873) + ($874)|0);
               __THREW__ = 0;
               ;HEAP8[$$byval_copy>>0]=HEAP8[$84>>0]|0;
               ;HEAP8[$$byval_copy$36>>0]=HEAP8[$85>>0]|0;
               $876 = (invoke_iiiiiiii(362,($868|0),($871|0),($872|0),($875|0),(363|0),($$byval_copy|0),($$byval_copy$36|0))|0);
               $877 = __THREW__; __THREW__ = 0;
               $878 = $877&1;
               if ($878) {
                label = 81;
                break L26;
               }
               $__r$i$i = $876;
               $879 = $__r$i$i;
               $880 = $79;
               $881 = $80;
               $882 = (($880) + ($881)|0);
               $883 = ($879|0)==($882|0);
               if ($883) {
                $78 = -1;
                break;
               } else {
                $884 = $__r$i$i;
                $885 = $79;
                $886 = $884;
                $887 = $885;
                $888 = (($886) - ($887))|0;
                $78 = $888;
                break;
               }
              }
             } while(0);
             if ((label|0) == 74) {
              label = 0;
              $78 = -1;
             }
             $893 = $78;
             $894 = ($893|0)==(-1);
             if ($894) {
              $attr_count = 3;
              break;
             } else {
              $attr_count = 2;
              break;
             }
            }
           } while(0);
           $895 = $attr_count;
           $896 = ($895|0)==(2);
           if ($896) {
            $77 = $line;
            $897 = $77;
            $76 = $897;
            $898 = $76;
            $75 = $898;
            $899 = $75;
            $74 = $899;
            $900 = $74;
            $73 = $900;
            $901 = $73;
            $902 = HEAP8[$901>>0]|0;
            $903 = $902&255;
            $904 = $903 & 1;
            $905 = ($904|0)!=(0);
            if ($905) {
             $67 = $898;
             $906 = $67;
             $66 = $906;
             $907 = $66;
             $65 = $907;
             $908 = $65;
             $909 = ((($908)) + 8|0);
             $910 = HEAP32[$909>>2]|0;
             $917 = $910;
            } else {
             $72 = $898;
             $911 = $72;
             $71 = $911;
             $912 = $71;
             $70 = $912;
             $913 = $70;
             $914 = ((($913)) + 1|0);
             $69 = $914;
             $915 = $69;
             $68 = $915;
             $916 = $68;
             $917 = $916;
            }
            $64 = $917;
            $918 = $64;
            $919 = ((($v1)) + 2|0);
            $920 = ((($vn3)) + 2|0);
            $921 = ((($v1)) + 4|0);
            $922 = ((($vn3)) + 4|0);
            __THREW__ = 0;
            HEAP32[$vararg_buffer12>>2] = $v1;
            $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
            HEAP32[$vararg_ptr15>>2] = $vn3;
            $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
            HEAP32[$vararg_ptr16>>2] = $919;
            $vararg_ptr17 = ((($vararg_buffer12)) + 12|0);
            HEAP32[$vararg_ptr17>>2] = $920;
            $vararg_ptr18 = ((($vararg_buffer12)) + 16|0);
            HEAP32[$vararg_ptr18>>2] = $921;
            $vararg_ptr19 = ((($vararg_buffer12)) + 20|0);
            HEAP32[$vararg_ptr19>>2] = $922;
            (invoke_iiii(358,($918|0),(13415|0),($vararg_buffer12|0))|0);
            $923 = __THREW__; __THREW__ = 0;
            $924 = $923&1;
            if ($924) {
             label = 40;
             break;
            }
           } else {
            $63 = $line;
            $925 = $63;
            $62 = $925;
            $926 = $62;
            $61 = $926;
            $927 = $61;
            $60 = $927;
            $928 = $60;
            $59 = $928;
            $929 = $59;
            $930 = HEAP8[$929>>0]|0;
            $931 = $930&255;
            $932 = $931 & 1;
            $933 = ($932|0)!=(0);
            if ($933) {
             $53 = $926;
             $934 = $53;
             $52 = $934;
             $935 = $52;
             $51 = $935;
             $936 = $51;
             $937 = ((($936)) + 8|0);
             $938 = HEAP32[$937>>2]|0;
             $945 = $938;
            } else {
             $58 = $926;
             $939 = $58;
             $57 = $939;
             $940 = $57;
             $56 = $940;
             $941 = $56;
             $942 = ((($941)) + 1|0);
             $55 = $942;
             $943 = $55;
             $54 = $943;
             $944 = $54;
             $945 = $944;
            }
            $50 = $945;
            $946 = $50;
            $947 = ((($v1)) + 2|0);
            $948 = ((($vt2)) + 2|0);
            $949 = ((($vn3)) + 2|0);
            $950 = ((($v1)) + 4|0);
            $951 = ((($vt2)) + 4|0);
            $952 = ((($vn3)) + 4|0);
            __THREW__ = 0;
            HEAP32[$vararg_buffer20>>2] = $v1;
            $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
            HEAP32[$vararg_ptr23>>2] = $vt2;
            $vararg_ptr24 = ((($vararg_buffer20)) + 8|0);
            HEAP32[$vararg_ptr24>>2] = $vn3;
            $vararg_ptr25 = ((($vararg_buffer20)) + 12|0);
            HEAP32[$vararg_ptr25>>2] = $947;
            $vararg_ptr26 = ((($vararg_buffer20)) + 16|0);
            HEAP32[$vararg_ptr26>>2] = $948;
            $vararg_ptr27 = ((($vararg_buffer20)) + 20|0);
            HEAP32[$vararg_ptr27>>2] = $949;
            $vararg_ptr28 = ((($vararg_buffer20)) + 24|0);
            HEAP32[$vararg_ptr28>>2] = $950;
            $vararg_ptr29 = ((($vararg_buffer20)) + 28|0);
            HEAP32[$vararg_ptr29>>2] = $951;
            $vararg_ptr30 = ((($vararg_buffer20)) + 32|0);
            HEAP32[$vararg_ptr30>>2] = $952;
            (invoke_iiii(358,($946|0),(13444|0),($vararg_buffer20|0))|0);
            $953 = __THREW__; __THREW__ = 0;
            $954 = $953&1;
            if ($954) {
             label = 40;
             break;
            }
           }
           $i = 0;
           while(1) {
            $955 = $i;
            $956 = ($955|0)<(3);
            if (!($956)) {
             continue L26;
            }
            $957 = $attr_count;
            $958 = ($957|0)==(3);
            $959 = ((($360)) + 8|0);
            if ($958) {
             $960 = $i;
             $961 = (($v1) + ($960<<1)|0);
             $962 = HEAP16[$961>>1]|0;
             $963 = $962&65535;
             $964 = (($963) - 1)|0;
             $48 = $tmp_positions;
             $49 = $964;
             $965 = $48;
             $966 = $49;
             $967 = HEAP32[$965>>2]|0;
             $968 = (($967) + (($966*12)|0)|0);
             $969 = $i;
             $970 = (($vn3) + ($969<<1)|0);
             $971 = HEAP16[$970>>1]|0;
             $972 = $971&65535;
             $973 = (($972) - 1)|0;
             $46 = $tmp_normals;
             $47 = $973;
             $974 = $46;
             $975 = $47;
             $976 = HEAP32[$974>>2]|0;
             $977 = (($976) + (($975*12)|0)|0);
             $978 = $i;
             $979 = (($vt2) + ($978<<1)|0);
             $980 = HEAP16[$979>>1]|0;
             $981 = $980&65535;
             $982 = (($981) - 1)|0;
             $44 = $tmp_tex_coords;
             $45 = $982;
             $983 = $44;
             $984 = $45;
             $985 = HEAP32[$983>>2]|0;
             $986 = (($985) + ($984<<3)|0);
             __THREW__ = 0;
             invoke_viiii(364,($959|0),($968|0),($977|0),($986|0));
             $987 = __THREW__; __THREW__ = 0;
             $988 = $987&1;
             if ($988) {
              label = 40;
              break L26;
             }
            } else {
             $989 = $i;
             $990 = (($v1) + ($989<<1)|0);
             $991 = HEAP16[$990>>1]|0;
             $992 = $991&65535;
             $993 = (($992) - 1)|0;
             $42 = $tmp_positions;
             $43 = $993;
             $994 = $42;
             $995 = $43;
             $996 = HEAP32[$994>>2]|0;
             $997 = (($996) + (($995*12)|0)|0);
             $998 = $i;
             $999 = (($vn3) + ($998<<1)|0);
             $1000 = HEAP16[$999>>1]|0;
             $1001 = $1000&65535;
             $1002 = (($1001) - 1)|0;
             $40 = $tmp_normals;
             $41 = $1002;
             $1003 = $40;
             $1004 = $41;
             $1005 = HEAP32[$1003>>2]|0;
             $1006 = (($1005) + (($1004*12)|0)|0);
             __THREW__ = 0;
             invoke_viii(365,($959|0),($997|0),($1006|0));
             $1007 = __THREW__; __THREW__ = 0;
             $1008 = $1007&1;
             if ($1008) {
              label = 40;
              break L26;
             }
            }
            $1009 = $i;
            $1010 = (($1009) + 1)|0;
            $i = $1010;
           }
          }
          do {
           if ((label|0) == 25) {
            $546 = ___cxa_find_matching_catch()|0;
            $547 = tempRet0;
            $265 = $546;
            $266 = $547;
            __ZNSt3__16localeD2Ev($264);
            $548 = $265;
            $549 = $266;
            $eh$lpad$body7$index32Z2D = $549;$eh$lpad$body7$indexZ2D = $548;
            label = 41;
           }
           else if ((label|0) == 81) {
            $889 = ___cxa_find_matching_catch(0|0)|0;
            $890 = tempRet0;
            ___clang_call_terminate($889);
            // unreachable;
           }
           else if ((label|0) == 82) {
            $891 = ___cxa_find_matching_catch(0|0)|0;
            $892 = tempRet0;
            ___clang_call_terminate($891);
            // unreachable;
           }
           else if ((label|0) == 106) {
            $1035 = ___cxa_find_matching_catch()|0;
            $1036 = tempRet0;
            $349 = $1035;
            $350 = $1036;
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($357);
           }
           else if ((label|0) == 112) {
            $1062 = ___cxa_find_matching_catch()|0;
            $1063 = tempRet0;
            $349 = $1062;
            $350 = $1063;
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($359);
           }
           else if ((label|0) == 113) {
            $1064 = ((($360)) + 8|0);
            $11 = $1064;
            $1065 = $11;
            $1066 = ((($1065)) + 4|0);
            $1067 = HEAP32[$1066>>2]|0;
            $1068 = HEAP32[$1065>>2]|0;
            $1069 = $1067;
            $1070 = $1068;
            $1071 = (($1069) - ($1070))|0;
            $1072 = (($1071|0) / 12)&-1;
            $1073 = ($1072*3)|0;
            $1074 = $1073<<2;
            $1075 = ((($360)) + 8|0);
            $10 = $1075;
            $1076 = $10;
            $1077 = HEAP32[$1076>>2]|0;
            $9 = $1077;
            $1078 = $9;
            __THREW__ = 0;
            $1079 = (invoke_iiii(368,34962,($1074|0),($1078|0))|0);
            $1080 = __THREW__; __THREW__ = 0;
            $1081 = $1080&1;
            if ($1081) {
             label = 40;
            } else {
             $1082 = ((($360)) + 56|0);
             HEAP32[$1082>>2] = $1079;
             $1083 = ((($360)) + 8|0);
             $1084 = ((($1083)) + 12|0);
             $8 = $1084;
             $1085 = $8;
             $1086 = ((($1085)) + 4|0);
             $1087 = HEAP32[$1086>>2]|0;
             $1088 = HEAP32[$1085>>2]|0;
             $1089 = $1087;
             $1090 = $1088;
             $1091 = (($1089) - ($1090))|0;
             $1092 = (($1091|0) / 12)&-1;
             $1093 = ($1092*3)|0;
             $1094 = $1093<<2;
             $1095 = ((($360)) + 8|0);
             $1096 = ((($1095)) + 12|0);
             $7 = $1096;
             $1097 = $7;
             $1098 = HEAP32[$1097>>2]|0;
             $6 = $1098;
             $1099 = $6;
             __THREW__ = 0;
             $1100 = (invoke_iiii(368,34962,($1094|0),($1099|0))|0);
             $1101 = __THREW__; __THREW__ = 0;
             $1102 = $1101&1;
             if ($1102) {
              label = 40;
             } else {
              $1103 = ((($360)) + 60|0);
              HEAP32[$1103>>2] = $1100;
              $1104 = $attr_count;
              $1105 = ($1104|0)==(3);
              if ($1105) {
               $1106 = ((($360)) + 8|0);
               $1107 = ((($1106)) + 36|0);
               $5 = $1107;
               $1108 = $5;
               $1109 = ((($1108)) + 4|0);
               $1110 = HEAP32[$1109>>2]|0;
               $1111 = HEAP32[$1108>>2]|0;
               $1112 = $1110;
               $1113 = $1111;
               $1114 = (($1112) - ($1113))|0;
               $1115 = (($1114|0) / 8)&-1;
               $1116 = $1115<<1;
               $1117 = $1116<<2;
               $1118 = ((($360)) + 8|0);
               $1119 = ((($1118)) + 36|0);
               $4 = $1119;
               $1120 = $4;
               $1121 = HEAP32[$1120>>2]|0;
               $3 = $1121;
               $1122 = $3;
               __THREW__ = 0;
               $1123 = (invoke_iiii(368,34962,($1117|0),($1122|0))|0);
               $1124 = __THREW__; __THREW__ = 0;
               $1125 = $1124&1;
               if ($1125) {
                label = 40;
                break;
               }
               $1126 = ((($360)) + 64|0);
               HEAP32[$1126>>2] = $1123;
              } else {
               $1127 = ((($360)) + 64|0);
               HEAP32[$1127>>2] = 0;
              }
              $1128 = ((($360)) + 8|0);
              $1129 = ((($1128)) + 24|0);
              $2 = $1129;
              $1130 = $2;
              $1131 = ((($1130)) + 4|0);
              $1132 = HEAP32[$1131>>2]|0;
              $1133 = HEAP32[$1130>>2]|0;
              $1134 = $1132;
              $1135 = $1133;
              $1136 = (($1134) - ($1135))|0;
              $1137 = (($1136|0) / 2)&-1;
              $1138 = $1137<<1;
              $1139 = ((($360)) + 8|0);
              $1140 = ((($1139)) + 24|0);
              $1 = $1140;
              $1141 = $1;
              $1142 = HEAP32[$1141>>2]|0;
              $0 = $1142;
              $1143 = $0;
              __THREW__ = 0;
              $1144 = (invoke_iiii(368,34963,($1138|0),($1143|0))|0);
              $1145 = __THREW__; __THREW__ = 0;
              $1146 = $1145&1;
              if ($1146) {
               label = 40;
              } else {
               $1147 = ((($360)) + 68|0);
               HEAP32[$1147>>2] = $1144;
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($line);
               __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($tmp_normals);
               __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($tmp_tex_coords);
               __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($tmp_positions);
               __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
               STACKTOP = sp;return;
              }
             }
            }
           }
          } while(0);
          if ((label|0) == 40) {
           $643 = ___cxa_find_matching_catch()|0;
           $644 = tempRet0;
           $eh$lpad$body7$index32Z2D = $644;$eh$lpad$body7$indexZ2D = $643;
           label = 41;
          }
          if ((label|0) == 41) {
           $349 = $eh$lpad$body7$indexZ2D;
           $350 = $eh$lpad$body7$index32Z2D;
          }
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($line);
          __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($tmp_normals);
          __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($tmp_tex_coords);
          __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($tmp_positions);
          __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
          $1148 = ((($360)) + 8|0);
          __ZN12TexturedMeshD2Ev($1148);
          $1149 = $349;
          $1150 = $350;
          ___resumeException($1149|0);
          // unreachable;
         }
        } while(0);
        $474 = ___cxa_find_matching_catch()|0;
        $475 = tempRet0;
        $338 = $474;
        $339 = $475;
        __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($420);
       }
      }
      $476 = ((($384)) + 108|0);
      __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($476);
      $477 = $338;
      $478 = $339;
      $349 = $477;
      $350 = $478;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($351);
      $1148 = ((($360)) + 8|0);
      __ZN12TexturedMeshD2Ev($1148);
      $1149 = $349;
      $1150 = $350;
      ___resumeException($1149|0);
      // unreachable;
     }
    }
    $641 = ___cxa_find_matching_catch()|0;
    $642 = tempRet0;
    $349 = $641;
    $350 = $642;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($348);
    $1148 = ((($360)) + 8|0);
    __ZN12TexturedMeshD2Ev($1148);
    $1149 = $349;
    $1150 = $350;
    ___resumeException($1149|0);
    // unreachable;
   }
  }
 } while(0);
 $639 = ___cxa_find_matching_catch()|0;
 $640 = tempRet0;
 $349 = $639;
 $350 = $640;
 $1148 = ((($360)) + 8|0);
 __ZN12TexturedMeshD2Ev($1148);
 $1149 = $349;
 $1150 = $350;
 ___resumeException($1149|0);
 // unreachable;
}
function __ZNK6Models6Static4drawERK5SceneRKN3glm7tmat4x4IfLNS4_9precisionE0EEES9_($this,$scene,$mvp,$transformation) {
 $this = $this|0;
 $scene = $scene|0;
 $mvp = $mvp|0;
 $transformation = $transformation|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $local_modelview = 0, $transform = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $transform = sp + 112|0;
 $local_modelview = sp + 72|0;
 $5 = sp + 36|0;
 $6 = sp;
 $1 = $this;
 $2 = $scene;
 $3 = $mvp;
 $4 = $transformation;
 $7 = $1;
 $8 = ((($7)) + 76|0);
 $9 = HEAP32[$8>>2]|0;
 __ZNK10Executable3useEv($9);
 $10 = $3;
 $11 = $4;
 __ZN3glmmlIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_S6_($transform,$10,$11);
 $12 = ((($7)) + 76|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (__ZNK10Executable7uniformEj($13,0)|0);
 $15 = (__ZN3glm9value_ptrIfLNS_9precisionE0EEEPKT_RKNS_7tmat4x4IS2_XT0_EEE($transform)|0);
 _glUniformMatrix4fv(($14|0),1,0,($15|0));
 $16 = $4;
 __ZN3glm7tmat3x3IfLNS_9precisionE0EEC2ERKNS_7tmat4x4IfLS1_0EEE($6,$16);
 __ZN3glm7inverseIfLNS_9precisionE0ENS_7tmat3x3EEET1_IT_XT0_EERKS5_($5,$6);
 __ZN3glm9transposeIfLNS_9precisionE0ENS_7tmat3x3EEENT1_IT_XT0_EE14transpose_typeERKS5_($local_modelview,$5);
 $17 = ((($7)) + 76|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (__ZNK10Executable7uniformEj($18,1)|0);
 $20 = (__ZN3glm9value_ptrIfLNS_9precisionE0EEEPKT_RKNS_7tmat3x3IS2_XT0_EEE($local_modelview)|0);
 _glUniformMatrix3fv(($19|0),1,0,($20|0));
 $21 = ((($7)) + 76|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (__ZNK10Executable7uniformEj($22,2)|0);
 $24 = $2;
 $25 = (__ZNK5Scene3sunEv($24)|0);
 $26 = ((($25)) + 36|0);
 $27 = (__ZN3glm9value_ptrIfLNS_9precisionE0EEEPKT_RKNS_5tvec3IS2_XT0_EEE($26)|0);
 _glUniform3fv(($23|0),1,($27|0));
 $28 = ((($7)) + 72|0);
 $29 = HEAP32[$28>>2]|0;
 __ZNK8Material3useEv($29);
 _glEnableVertexAttribArray(0);
 $30 = ((($7)) + 56|0);
 $31 = HEAP32[$30>>2]|0;
 _glBindBuffer(34962,($31|0));
 _glVertexAttribPointer(0,3,5126,0,0,(0|0));
 _glEnableVertexAttribArray(1);
 $32 = ((($7)) + 60|0);
 $33 = HEAP32[$32>>2]|0;
 _glBindBuffer(34962,($33|0));
 _glVertexAttribPointer(1,3,5126,0,0,(0|0));
 $34 = ((($7)) + 64|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(0);
 if ($36) {
  _glDisableVertexAttribArray(2);
  $39 = ((($7)) + 68|0);
  $40 = HEAP32[$39>>2]|0;
  _glBindBuffer(34963,($40|0));
  $41 = ((($7)) + 8|0);
  $42 = ((($41)) + 24|0);
  $0 = $42;
  $43 = $0;
  $44 = ((($43)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = HEAP32[$43>>2]|0;
  $47 = $45;
  $48 = $46;
  $49 = (($47) - ($48))|0;
  $50 = (($49|0) / 2)&-1;
  _glDrawElements(4,($50|0),5123,(0|0));
  STACKTOP = sp;return;
 } else {
  _glEnableVertexAttribArray(2);
  $37 = ((($7)) + 64|0);
  $38 = HEAP32[$37>>2]|0;
  _glBindBuffer(34962,($38|0));
  _glVertexAttribPointer(2,2,5126,0,0,(0|0));
  $39 = ((($7)) + 68|0);
  $40 = HEAP32[$39>>2]|0;
  _glBindBuffer(34963,($40|0));
  $41 = ((($7)) + 8|0);
  $42 = ((($41)) + 24|0);
  $0 = $42;
  $43 = $0;
  $44 = ((($43)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = HEAP32[$43>>2]|0;
  $47 = $45;
  $48 = $46;
  $49 = (($47) - ($48))|0;
  $50 = (($49|0) / 2)&-1;
  _glDrawElements(4,($50|0),5123,(0|0));
  STACKTOP = sp;return;
 }
}
function __ZN5ModelC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 __ZN8ResourceC2Ev($2);
 $3 = 2536;
 HEAP32[$1>>2] = $3;
 STACKTOP = sp;return;
}
function __ZN12TexturedMeshC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 28|0;
 $6 = sp + 16|0;
 $10 = $this;
 $11 = $10;
 __ZN4MeshC2Ev($11);
 $12 = ((($11)) + 36|0);
 $9 = $12;
 $13 = $9;
 $8 = $13;
 $14 = $8;
 $7 = $14;
 HEAP32[$14>>2] = 0;
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($14)) + 8|0);
 $5 = $16;
 HEAP32[$6>>2] = 0;
 $17 = $5;
 $4 = $6;
 $18 = $4;
 $19 = HEAP32[$18>>2]|0;
 $2 = $17;
 HEAP32[$3>>2] = $19;
 $20 = $2;
 $1 = $20;
 $0 = $3;
 $21 = $0;
 $22 = HEAP32[$21>>2]|0;
 HEAP32[$20>>2] = $22;
 STACKTOP = sp;return;
}
function __ZN5Store4loadI7ProgramEEPKT_RKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $13 = sp + 120|0;
 $15 = sp + 112|0;
 $17 = sp + 104|0;
 $19 = sp;
 $20 = sp + 96|0;
 $23 = sp + 84|0;
 $26 = sp + 72|0;
 $27 = sp + 60|0;
 $30 = sp + 48|0;
 $31 = sp + 36|0;
 $32 = sp + 24|0;
 $33 = sp + 12|0;
 $24 = $this;
 $25 = $name;
 $34 = $24;
 $35 = $25;
 __ZN7Program8filenameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($27,$35);
 $21 = $34;
 $22 = $27;
 $36 = $21;
 $37 = $22;
 __THREW__ = 0;
 $38 = (invoke_iii(333,($36|0),($37|0))|0);
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 if ($40) {
  $71 = ___cxa_find_matching_catch()|0;
  $72 = tempRet0;
  $28 = $71;
  $29 = $72;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($27);
  $93 = $28;
  $94 = $29;
  ___resumeException($93|0);
  // unreachable;
 }
 HEAP32[$23>>2] = $38;
 ;HEAP8[$19>>0]=HEAP8[$23>>0]|0;HEAP8[$19+1>>0]=HEAP8[$23+1>>0]|0;HEAP8[$19+2>>0]=HEAP8[$23+2>>0]|0;HEAP8[$19+3>>0]=HEAP8[$23+3>>0]|0;
 $18 = $20;
 $41 = $18;
 ;HEAP32[$41>>2]=HEAP32[$19>>2]|0;
 $42 = HEAP32[$20>>2]|0;
 HEAP32[$26>>2] = $42;
 $16 = $34;
 $43 = $16;
 $14 = $43;
 $44 = $14;
 $12 = $44;
 $45 = $12;
 $46 = ((($45)) + 4|0);
 $11 = $46;
 $47 = $11;
 $10 = $47;
 $48 = $10;
 $9 = $48;
 $49 = $9;
 $8 = $49;
 $50 = $8;
 $6 = $13;
 $7 = $50;
 $51 = $6;
 $52 = $7;
 HEAP32[$51>>2] = $52;
 $53 = HEAP32[$13>>2]|0;
 HEAP32[$17>>2] = $53;
 ;HEAP8[$5>>0]=HEAP8[$17>>0]|0;HEAP8[$5+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[$17+3>>0]|0;
 $4 = $15;
 $54 = $4;
 ;HEAP32[$54>>2]=HEAP32[$5>>2]|0;
 $55 = HEAP32[$15>>2]|0;
 HEAP32[$30>>2] = $55;
 $2 = $26;
 $3 = $30;
 $56 = $2;
 $57 = $3;
 $0 = $56;
 $1 = $57;
 $58 = $0;
 $59 = HEAP32[$58>>2]|0;
 $60 = $1;
 $61 = HEAP32[$60>>2]|0;
 $62 = ($59|0)==($61|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($27);
 do {
  if ($62) {
   $63 = (__Znwj(12)|0);
   $64 = $25;
   __THREW__ = 0;
   invoke_viii(369,($63|0),($34|0),($64|0));
   $65 = __THREW__; __THREW__ = 0;
   $66 = $65&1;
   if ($66) {
    $73 = ___cxa_find_matching_catch()|0;
    $74 = tempRet0;
    $28 = $73;
    $29 = $74;
    __ZdlPv($63);
    $93 = $28;
    $94 = $29;
    ___resumeException($93|0);
    // unreachable;
   }
   $67 = $25;
   __ZN7Program8filenameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($31,$67);
   __THREW__ = 0;
   $68 = (invoke_iii(335,($34|0),($31|0))|0);
   $69 = __THREW__; __THREW__ = 0;
   $70 = $69&1;
   if (!($70)) {
    HEAP32[$68>>2] = $63;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($31);
    break;
   }
   $75 = ___cxa_find_matching_catch()|0;
   $76 = tempRet0;
   $28 = $75;
   $29 = $76;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($31);
   $93 = $28;
   $94 = $29;
   ___resumeException($93|0);
   // unreachable;
  }
 } while(0);
 $77 = $25;
 __ZN7Program8filenameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($32,$77);
 __THREW__ = 0;
 $78 = (invoke_iii(335,($34|0),($32|0))|0);
 $79 = __THREW__; __THREW__ = 0;
 $80 = $79&1;
 if ($80) {
  $89 = ___cxa_find_matching_catch()|0;
  $90 = tempRet0;
  $28 = $89;
  $29 = $90;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($32);
  $93 = $28;
  $94 = $29;
  ___resumeException($93|0);
  // unreachable;
 }
 $81 = HEAP32[$78>>2]|0;
 $82 = HEAP32[$81>>2]|0;
 $83 = (($82) + 1)|0;
 HEAP32[$81>>2] = $83;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($32);
 $84 = $25;
 __ZN7Program8filenameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($33,$84);
 __THREW__ = 0;
 $85 = (invoke_iii(335,($34|0),($33|0))|0);
 $86 = __THREW__; __THREW__ = 0;
 $87 = $86&1;
 if (!($87)) {
  $88 = HEAP32[$85>>2]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($33);
  STACKTOP = sp;return ($88|0);
 }
 $91 = ___cxa_find_matching_catch()|0;
 $92 = tempRet0;
 $28 = $91;
 $29 = $92;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($33);
 $93 = $28;
 $94 = $29;
 ___resumeException($93|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__111char_traitsIcE3eofEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 36|0;
 $5 = sp + 24|0;
 $8 = sp + 12|0;
 $11 = sp;
 $7 = $this;
 $12 = $7;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($12);
 $13 = 2432;
 HEAP32[$12>>2] = $13;
 $14 = ((($12)) + 32|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($12)) + 36|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($12)) + 40|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($12)) + 52|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($12)) + 56|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($12)) + 60|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($12)) + 64|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($12)) + 68|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($12)) + 72|0);
 ;HEAP32[$22>>2]=0|0;HEAP32[$22+4>>2]=0|0;
 $23 = ((($12)) + 80|0);
 ;HEAP32[$23>>2]=0|0;HEAP32[$23+4>>2]=0|0;
 $24 = ((($12)) + 88|0);
 HEAP32[$24>>2] = 0;
 $25 = ((($12)) + 92|0);
 HEAP32[$25>>2] = 0;
 $26 = ((($12)) + 96|0);
 HEAP8[$26>>0] = 0;
 $27 = ((($12)) + 97|0);
 HEAP8[$27>>0] = 0;
 $28 = ((($12)) + 98|0);
 HEAP8[$28>>0] = 0;
 $6 = $12;
 $29 = $6;
 $30 = ((($29)) + 4|0);
 __ZNSt3__16localeC2ERKS0_($5,$30);
 $31 = HEAP32[$5>>2]|0;
 HEAP32[$8>>2] = $31;
 $4 = $8;
 $32 = $4;
 __THREW__ = 0;
 $33 = (invoke_iii(370,($32|0),(8648|0))|0);
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $36 = ___cxa_find_matching_catch(0|0)|0;
  $37 = tempRet0;
  ___clang_call_terminate($36);
  // unreachable;
 }
 __ZNSt3__16localeD2Ev($8);
 do {
  if ($33) {
   $3 = $12;
   $38 = $3;
   $39 = ((($38)) + 4|0);
   __ZNSt3__16localeC2ERKS0_($2,$39);
   $40 = HEAP32[$2>>2]|0;
   HEAP32[$11>>2] = $40;
   $1 = $11;
   $41 = $1;
   __THREW__ = 0;
   $42 = (invoke_iii(354,($41|0),(8648|0))|0);
   $43 = __THREW__; __THREW__ = 0;
   $44 = $43&1;
   if (!($44)) {
    $45 = ((($12)) + 68|0);
    HEAP32[$45>>2] = $42;
    __ZNSt3__16localeD2Ev($11);
    $46 = ((($12)) + 68|0);
    $47 = HEAP32[$46>>2]|0;
    $0 = $47;
    $48 = $0;
    $49 = HEAP32[$48>>2]|0;
    $50 = ((($49)) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (FUNCTION_TABLE_ii[$51 & 1023]($48)|0);
    $53 = ((($12)) + 98|0);
    $54 = $52&1;
    HEAP8[$53>>0] = $54;
    break;
   }
   $57 = ___cxa_find_matching_catch()|0;
   $58 = tempRet0;
   $9 = $57;
   $10 = $58;
   __ZNSt3__16localeD2Ev($11);
   __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($12);
   $64 = $9;
   $65 = $10;
   ___resumeException($64|0);
   // unreachable;
  }
 } while(0);
 $59 = HEAP32[$12>>2]|0;
 $60 = ((($59)) + 12|0);
 $61 = HEAP32[$60>>2]|0;
 __THREW__ = 0;
 (invoke_iiii($61|0,($12|0),(0|0),4096)|0);
 $62 = __THREW__; __THREW__ = 0;
 $63 = $62&1;
 if (!($63)) {
  STACKTOP = sp;return;
 }
 $55 = ___cxa_find_matching_catch()|0;
 $56 = tempRet0;
 $9 = $55;
 $10 = $56;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($12);
 $64 = $9;
 $65 = $10;
 ___resumeException($64|0);
 // unreachable;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj($this,$__s,$__mode) {
 $this = $this|0;
 $__s = $__s|0;
 $__mode = $__mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__mdstr = 0, $__rt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__s;
 $2 = $__mode;
 $3 = $0;
 $__rt = 0;
 $4 = ((($3)) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $__rt = $3;
   $7 = $2;
   $8 = $7 & -3;
   do {
    switch ($8|0) {
    case 48: case 16:  {
     $__mdstr = 13699;
     break;
    }
    case 1: case 17:  {
     $__mdstr = 13701;
     break;
    }
    case 8:  {
     $__mdstr = 13816;
     break;
    }
    case 24:  {
     $__mdstr = 13703;
     break;
    }
    case 56:  {
     $__mdstr = 13706;
     break;
    }
    case 9: case 25:  {
     $__mdstr = 13709;
     break;
    }
    case 52: case 20:  {
     $__mdstr = 13712;
     break;
    }
    case 5: case 21:  {
     $__mdstr = 13715;
     break;
    }
    case 12:  {
     $__mdstr = 13718;
     break;
    }
    case 28:  {
     $__mdstr = 13721;
     break;
    }
    case 60:  {
     $__mdstr = 13725;
     break;
    }
    case 13: case 29:  {
     $__mdstr = 13729;
     break;
    }
    default: {
     $__rt = 0;
    }
    }
   } while(0);
   $9 = $__rt;
   $10 = ($9|0)!=(0|0);
   if ($10) {
    $11 = $1;
    $12 = $__mdstr;
    $13 = (_fopen($11,$12)|0);
    $14 = ((($3)) + 64|0);
    HEAP32[$14>>2] = $13;
    $15 = ((($3)) + 64|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)!=(0|0);
    if (!($17)) {
     $__rt = 0;
     break;
    }
    $18 = $2;
    $19 = ((($3)) + 88|0);
    HEAP32[$19>>2] = $18;
    $20 = $2;
    $21 = $20 & 2;
    $22 = ($21|0)!=(0);
    if ($22) {
     $23 = ((($3)) + 64|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (_fseek($24,0,2)|0);
     $26 = ($25|0)!=(0);
     if ($26) {
      $27 = ((($3)) + 64|0);
      $28 = HEAP32[$27>>2]|0;
      (_fclose($28)|0);
      $29 = ((($3)) + 64|0);
      HEAP32[$29>>2] = 0;
      $__rt = 0;
     }
    }
   }
  }
 } while(0);
 $30 = $__rt;
 STACKTOP = sp;return ($30|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 2432;
 HEAP32[$3>>2] = $4;
 __THREW__ = 0;
 (invoke_ii(371,($3|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $7 = ___cxa_find_matching_catch(0|0)|0;
  $8 = tempRet0;
  $1 = $7;
  $2 = $8;
  $9 = $1;
  (___cxa_begin_catch(($9|0))|0);
  __THREW__ = 0;
  invoke_v(372);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $18 = ___cxa_find_matching_catch(0|0)|0;
   $19 = tempRet0;
   $1 = $18;
   $2 = $19;
   __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($3);
   $20 = $1;
   ___clang_call_terminate($20);
   // unreachable;
  }
 }
 $12 = ((($3)) + 96|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&1;
 if ($14) {
  $15 = ((($3)) + 32|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if (!($17)) {
   __ZdaPv($16);
  }
 }
 $21 = ((($3)) + 97|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&1;
 if (!($23)) {
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($3);
  STACKTOP = sp;return;
 }
 $24 = ((($3)) + 56|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0|0);
 if ($26) {
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($3);
  STACKTOP = sp;return;
 }
 __ZdaPv($25);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__17getlineIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EES6_($__is,$__str,$__dlm) {
 $__is = $__is|0;
 $__str = $__str|0;
 $__dlm = $__dlm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__ch = 0, $__err = 0, $__extr = 0, $__i = 0, $__m$i = 0, $__sen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $8 = sp + 229|0;
 $48 = sp + 228|0;
 $49 = sp + 227|0;
 $__sen = sp + 225|0;
 $51 = $__is;
 $52 = $__str;
 $53 = $__dlm;
 $56 = $51;
 __THREW__ = 0;
 invoke_viii(373,($__sen|0),($56|0),1);
 $57 = __THREW__; __THREW__ = 0;
 $58 = $57&1;
 L1: do {
  if (!($58)) {
   $50 = $__sen;
   $59 = $50;
   $60 = HEAP8[$59>>0]|0;
   $61 = $60&1;
   if (!($61)) {
    $135 = $51;
    STACKTOP = sp;return ($135|0);
   }
   $62 = $52;
   $47 = $62;
   $63 = $47;
   $46 = $63;
   $45 = $63;
   $64 = $45;
   $44 = $64;
   $65 = $44;
   $43 = $65;
   $66 = $43;
   $67 = HEAP8[$66>>0]|0;
   $68 = $67&255;
   $69 = $68 & 1;
   $70 = ($69|0)!=(0);
   if ($70) {
    $38 = $63;
    $71 = $38;
    $37 = $71;
    $72 = $37;
    $36 = $72;
    $73 = $36;
    $74 = ((($73)) + 8|0);
    $75 = HEAP32[$74>>2]|0;
    HEAP8[$48>>0] = 0;
    __ZNSt3__111char_traitsIcE6assignERcRKc($75,$48);
    $29 = $63;
    $30 = 0;
    $76 = $29;
    $77 = $30;
    $28 = $76;
    $78 = $28;
    $27 = $78;
    $79 = $27;
    $80 = ((($79)) + 4|0);
    HEAP32[$80>>2] = $77;
   } else {
    $35 = $63;
    $81 = $35;
    $34 = $81;
    $82 = $34;
    $33 = $82;
    $83 = $33;
    $84 = ((($83)) + 1|0);
    $32 = $84;
    $85 = $32;
    $31 = $85;
    $86 = $31;
    HEAP8[$49>>0] = 0;
    __ZNSt3__111char_traitsIcE6assignERcRKc($86,$49);
    $41 = $63;
    $42 = 0;
    $87 = $41;
    $88 = $42;
    $89 = $88 << 1;
    $90 = $89&255;
    $40 = $87;
    $91 = $40;
    $39 = $91;
    $92 = $39;
    HEAP8[$92>>0] = $90;
   }
   $__err = 0;
   $__extr = 0;
   while(1) {
    $93 = $51;
    $94 = HEAP32[$93>>2]|0;
    $95 = ((($94)) + -12|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = (($93) + ($96)|0);
    $26 = $97;
    $98 = $26;
    $25 = $98;
    $99 = $25;
    $100 = ((($99)) + 24|0);
    $101 = HEAP32[$100>>2]|0;
    $24 = $101;
    $102 = $24;
    $103 = ((($102)) + 12|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = ((($102)) + 16|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = ($104|0)==($106|0);
    if ($107) {
     $108 = HEAP32[$102>>2]|0;
     $109 = ((($108)) + 40|0);
     $110 = HEAP32[$109>>2]|0;
     __THREW__ = 0;
     $111 = (invoke_ii($110|0,($102|0))|0);
     $112 = __THREW__; __THREW__ = 0;
     $113 = $112&1;
     if ($113) {
      break L1;
     }
     $23 = $111;
    } else {
     $114 = ((($102)) + 12|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = ((($115)) + 1|0);
     HEAP32[$114>>2] = $116;
     $117 = HEAP8[$115>>0]|0;
     $118 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($117)|0);
     $23 = $118;
    }
    $119 = $23;
    $__i = $119;
    $120 = $__i;
    $121 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
    $122 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($120,$121)|0);
    if ($122) {
     label = 12;
     break;
    }
    $136 = $__extr;
    $137 = (($136) + 1)|0;
    $__extr = $137;
    $138 = $__i;
    $139 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($138)|0);
    $__ch = $139;
    $140 = $__ch;
    $141 = $53;
    $142 = (__ZNSt3__111char_traitsIcE2eqEcc($140,$141)|0);
    if ($142) {
     break;
    }
    $143 = $52;
    $144 = $__ch;
    __THREW__ = 0;
    invoke_vii(375,($143|0),($144|0));
    $145 = __THREW__; __THREW__ = 0;
    $146 = $145&1;
    if ($146) {
     break L1;
    }
    $147 = $52;
    $22 = $147;
    $148 = $22;
    $21 = $148;
    $149 = $21;
    $20 = $149;
    $150 = $20;
    $19 = $150;
    $151 = $19;
    $152 = HEAP8[$151>>0]|0;
    $153 = $152&255;
    $154 = $153 & 1;
    $155 = ($154|0)!=(0);
    if ($155) {
     $15 = $148;
     $156 = $15;
     $14 = $156;
     $157 = $14;
     $13 = $157;
     $158 = $13;
     $159 = ((($158)) + 4|0);
     $160 = HEAP32[$159>>2]|0;
     $176 = $160;
    } else {
     $18 = $148;
     $161 = $18;
     $17 = $161;
     $162 = $17;
     $16 = $162;
     $163 = $16;
     $164 = HEAP8[$163>>0]|0;
     $165 = $164&255;
     $166 = $165 >> 1;
     $176 = $166;
    }
    $167 = $52;
    $12 = $167;
    $168 = $12;
    $11 = $168;
    $169 = $11;
    $10 = $169;
    $170 = $10;
    $9 = $170;
    $171 = $9;
    $7 = $171;
    $172 = $7;
    ;HEAP8[$6>>0]=HEAP8[$8>>0]|0;
    $5 = $172;
    $173 = $5;
    $4 = $173;
    $__m$i = -1;
    $174 = $__m$i;
    $175 = (($174) - 16)|0;
    $177 = ($176|0)==($175|0);
    if ($177) {
     label = 22;
     break;
    }
   }
   if ((label|0) == 12) {
    $123 = $__err;
    $124 = $123 | 2;
    $__err = $124;
   }
   else if ((label|0) == 22) {
    $178 = $__err;
    $179 = $178 | 4;
    $__err = $179;
   }
   $180 = $__extr;
   $181 = ($180|0)==(0);
   if ($181) {
    $182 = $__err;
    $183 = $182 | 4;
    $__err = $183;
   }
   $184 = $51;
   $185 = HEAP32[$184>>2]|0;
   $186 = ((($185)) + -12|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = (($184) + ($187)|0);
   $189 = $__err;
   $2 = $188;
   $3 = $189;
   $190 = $2;
   $191 = $3;
   $0 = $190;
   $1 = $191;
   $192 = $0;
   $193 = ((($192)) + 16|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = $1;
   $196 = $194 | $195;
   __THREW__ = 0;
   invoke_vii(352,($192|0),($196|0));
   $197 = __THREW__; __THREW__ = 0;
   $198 = $197&1;
   if (!($198)) {
    $135 = $51;
    STACKTOP = sp;return ($135|0);
   }
  }
 } while(0);
 $125 = ___cxa_find_matching_catch(0|0)|0;
 $126 = tempRet0;
 $54 = $125;
 $55 = $126;
 $127 = $54;
 (___cxa_begin_catch(($127|0))|0);
 $128 = $51;
 $129 = HEAP32[$128>>2]|0;
 $130 = ((($129)) + -12|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = (($128) + ($131)|0);
 __THREW__ = 0;
 invoke_vi(374,($132|0));
 $133 = __THREW__; __THREW__ = 0;
 $134 = $133&1;
 if (!($134)) {
  ___cxa_end_catch();
  $135 = $51;
  STACKTOP = sp;return ($135|0);
 }
 $199 = ___cxa_find_matching_catch()|0;
 $200 = tempRet0;
 $54 = $199;
 $55 = $200;
 __THREW__ = 0;
 invoke_v(372);
 $201 = __THREW__; __THREW__ = 0;
 $202 = $201&1;
 if ($202) {
  $205 = ___cxa_find_matching_catch(0|0)|0;
  $206 = tempRet0;
  ___clang_call_terminate($205);
  // unreachable;
 } else {
  $203 = $54;
  $204 = $55;
  ___resumeException($203|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN3glm5tvec3IfLNS_9precisionE0EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAPF32[$1>>2] = 0.0;
 $2 = ((($1)) + 4|0);
 HEAPF32[$2>>2] = 0.0;
 $3 = ((($1)) + 8|0);
 HEAPF32[$3>>2] = 0.0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = ((($44)) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 12)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
  // unreachable;
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = ((($64)) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 12)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22>>0]=HEAP8[$25>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  $90 = $21;
  $91 = $20;
  $92 = $89 ? $90 : $91;
  $93 = HEAP32[$92>>2]|0;
  $31 = $93;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 12)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferIN3glm5tvec3IfLNS1_9precisionE0EEERNS_9allocatorIS4_EEEC2EjjS7_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = ((($__v)) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = $3;
 $0 = $119;
 $120 = $0;
 ;HEAP32[$118>>2]=HEAP32[$120>>2]|0;HEAP32[$118+4>>2]=HEAP32[$120+4>>2]|0;HEAP32[$118+8>>2]=HEAP32[$120+8>>2]|0;
 $121 = ((($__v)) + 8|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ((($122)) + 12|0);
 HEAP32[$121>>2] = $123;
 __THREW__ = 0;
 invoke_vii(376,($43|0),($__v|0));
 $124 = __THREW__; __THREW__ = 0;
 $125 = $124&1;
 if ($125) {
  $126 = ___cxa_find_matching_catch()|0;
  $127 = tempRet0;
  $41 = $126;
  $42 = $127;
  __ZNSt3__114__split_bufferIN3glm5tvec3IfLNS1_9precisionE0EEERNS_9allocatorIS4_EEED2Ev($__v);
  $128 = $41;
  $129 = $42;
  ___resumeException($128|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferIN3glm5tvec3IfLNS1_9precisionE0EEERNS_9allocatorIS4_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZN3glm5tvec2IfLNS_9precisionE0EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAPF32[$1>>2] = 0.0;
 $2 = ((($1)) + 4|0);
 HEAPF32[$2>>2] = 0.0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = ((($44)) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 8)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
  // unreachable;
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = ((($64)) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 8)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22>>0]=HEAP8[$25>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  $90 = $21;
  $91 = $20;
  $92 = $89 ? $90 : $91;
  $93 = HEAP32[$92>>2]|0;
  $31 = $93;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 8)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferIN3glm5tvec2IfLNS1_9precisionE0EEERNS_9allocatorIS4_EEEC2EjjS7_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = ((($__v)) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = $3;
 $0 = $119;
 $120 = $0;
 ;HEAP32[$118>>2]=HEAP32[$120>>2]|0;HEAP32[$118+4>>2]=HEAP32[$120+4>>2]|0;
 $121 = ((($__v)) + 8|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ((($122)) + 8|0);
 HEAP32[$121>>2] = $123;
 __THREW__ = 0;
 invoke_vii(377,($43|0),($__v|0));
 $124 = __THREW__; __THREW__ = 0;
 $125 = $124&1;
 if ($125) {
  $126 = ___cxa_find_matching_catch()|0;
  $127 = tempRet0;
  $41 = $126;
  $42 = $127;
  __ZNSt3__114__split_bufferIN3glm5tvec2IfLNS1_9precisionE0EEERNS_9allocatorIS4_EEED2Ev($__v);
  $128 = $41;
  $129 = $42;
  ___resumeException($128|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferIN3glm5tvec2IfLNS1_9precisionE0EEERNS_9allocatorIS4_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111char_traitsIcE2eqEcc($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $0;
 $3 = $2 << 24 >> 24;
 $4 = $1;
 $5 = $4 << 24 >> 24;
 $6 = ($3|0)==($5|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__18__searchIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_($__first1,$__last1,$__first2,$__last2,$__pred,$0,$1) {
 $__first1 = $__first1|0;
 $__last1 = $__last1|0;
 $__first2 = $__first2|0;
 $__last2 = $__last2|0;
 $__pred = $__pred|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__len1 = 0, $__len2 = 0, $__m1 = 0, $__m2 = 0;
 var $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $__first1;
 $4 = $__last1;
 $5 = $__first2;
 $6 = $__last2;
 $7 = $__pred;
 $8 = $6;
 $9 = $5;
 $10 = $8;
 $11 = $9;
 $12 = (($10) - ($11))|0;
 $__len2 = $12;
 $13 = $__len2;
 $14 = ($13|0)==(0);
 if ($14) {
  $15 = $3;
  $2 = $15;
  $57 = $2;
  STACKTOP = sp;return ($57|0);
 }
 $16 = $4;
 $17 = $3;
 $18 = $16;
 $19 = $17;
 $20 = (($18) - ($19))|0;
 $__len1 = $20;
 $21 = $__len1;
 $22 = $__len2;
 $23 = ($21|0)<($22|0);
 $24 = $4;
 if ($23) {
  $2 = $24;
  $57 = $2;
  STACKTOP = sp;return ($57|0);
 }
 $25 = $__len2;
 $26 = (($25) - 1)|0;
 $27 = (0 - ($26))|0;
 $28 = (($24) + ($27)|0);
 $__s = $28;
 L9: while(1) {
  $29 = $3;
  $30 = $__s;
  $31 = ($29|0)==($30|0);
  if ($31) {
   label = 7;
   break;
  }
  $33 = $7;
  $34 = $3;
  $35 = HEAP8[$34>>0]|0;
  $36 = $5;
  $37 = HEAP8[$36>>0]|0;
  $38 = (FUNCTION_TABLE_iii[$33 & 511]($35,$37)|0);
  $39 = $3;
  if (!($38)) {
   $40 = ((($39)) + 1|0);
   $3 = $40;
   continue;
  }
  $__m1 = $39;
  $41 = $5;
  $__m2 = $41;
  while(1) {
   $42 = $__m2;
   $43 = ((($42)) + 1|0);
   $__m2 = $43;
   $44 = $6;
   $45 = ($43|0)==($44|0);
   if ($45) {
    label = 12;
    break L9;
   }
   $47 = $__m1;
   $48 = ((($47)) + 1|0);
   $__m1 = $48;
   $49 = $7;
   $50 = $__m1;
   $51 = HEAP8[$50>>0]|0;
   $52 = $__m2;
   $53 = HEAP8[$52>>0]|0;
   $54 = (FUNCTION_TABLE_iii[$49 & 511]($51,$53)|0);
   if (!($54)) {
    break;
   }
  }
  $55 = $3;
  $56 = ((($55)) + 1|0);
  $3 = $56;
 }
 if ((label|0) == 7) {
  $32 = $4;
  $2 = $32;
  $57 = $2;
  STACKTOP = sp;return ($57|0);
 }
 else if ((label|0) == 12) {
  $46 = $3;
  $2 = $46;
  $57 = $2;
  STACKTOP = sp;return ($57|0);
 }
 return (0)|0;
}
function __ZN5Store4loadI6MtllibEEPKT_RKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $13 = sp + 120|0;
 $15 = sp + 112|0;
 $17 = sp + 104|0;
 $19 = sp;
 $20 = sp + 96|0;
 $23 = sp + 84|0;
 $26 = sp + 72|0;
 $27 = sp + 60|0;
 $30 = sp + 48|0;
 $31 = sp + 36|0;
 $32 = sp + 24|0;
 $33 = sp + 12|0;
 $24 = $this;
 $25 = $name;
 $34 = $24;
 $35 = $25;
 __ZN6Mtllib8filenameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($27,$35);
 $21 = $34;
 $22 = $27;
 $36 = $21;
 $37 = $22;
 __THREW__ = 0;
 $38 = (invoke_iii(333,($36|0),($37|0))|0);
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 if ($40) {
  $71 = ___cxa_find_matching_catch()|0;
  $72 = tempRet0;
  $28 = $71;
  $29 = $72;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($27);
  $93 = $28;
  $94 = $29;
  ___resumeException($93|0);
  // unreachable;
 }
 HEAP32[$23>>2] = $38;
 ;HEAP8[$19>>0]=HEAP8[$23>>0]|0;HEAP8[$19+1>>0]=HEAP8[$23+1>>0]|0;HEAP8[$19+2>>0]=HEAP8[$23+2>>0]|0;HEAP8[$19+3>>0]=HEAP8[$23+3>>0]|0;
 $18 = $20;
 $41 = $18;
 ;HEAP32[$41>>2]=HEAP32[$19>>2]|0;
 $42 = HEAP32[$20>>2]|0;
 HEAP32[$26>>2] = $42;
 $16 = $34;
 $43 = $16;
 $14 = $43;
 $44 = $14;
 $12 = $44;
 $45 = $12;
 $46 = ((($45)) + 4|0);
 $11 = $46;
 $47 = $11;
 $10 = $47;
 $48 = $10;
 $9 = $48;
 $49 = $9;
 $8 = $49;
 $50 = $8;
 $6 = $13;
 $7 = $50;
 $51 = $6;
 $52 = $7;
 HEAP32[$51>>2] = $52;
 $53 = HEAP32[$13>>2]|0;
 HEAP32[$17>>2] = $53;
 ;HEAP8[$5>>0]=HEAP8[$17>>0]|0;HEAP8[$5+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[$17+3>>0]|0;
 $4 = $15;
 $54 = $4;
 ;HEAP32[$54>>2]=HEAP32[$5>>2]|0;
 $55 = HEAP32[$15>>2]|0;
 HEAP32[$30>>2] = $55;
 $2 = $26;
 $3 = $30;
 $56 = $2;
 $57 = $3;
 $0 = $56;
 $1 = $57;
 $58 = $0;
 $59 = HEAP32[$58>>2]|0;
 $60 = $1;
 $61 = HEAP32[$60>>2]|0;
 $62 = ($59|0)==($61|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($27);
 do {
  if ($62) {
   $63 = (__Znwj(16)|0);
   $64 = $25;
   __THREW__ = 0;
   invoke_viii(378,($63|0),($34|0),($64|0));
   $65 = __THREW__; __THREW__ = 0;
   $66 = $65&1;
   if ($66) {
    $73 = ___cxa_find_matching_catch()|0;
    $74 = tempRet0;
    $28 = $73;
    $29 = $74;
    __ZdlPv($63);
    $93 = $28;
    $94 = $29;
    ___resumeException($93|0);
    // unreachable;
   }
   $67 = $25;
   __ZN6Mtllib8filenameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($31,$67);
   __THREW__ = 0;
   $68 = (invoke_iii(335,($34|0),($31|0))|0);
   $69 = __THREW__; __THREW__ = 0;
   $70 = $69&1;
   if (!($70)) {
    HEAP32[$68>>2] = $63;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($31);
    break;
   }
   $75 = ___cxa_find_matching_catch()|0;
   $76 = tempRet0;
   $28 = $75;
   $29 = $76;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($31);
   $93 = $28;
   $94 = $29;
   ___resumeException($93|0);
   // unreachable;
  }
 } while(0);
 $77 = $25;
 __ZN6Mtllib8filenameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($32,$77);
 __THREW__ = 0;
 $78 = (invoke_iii(335,($34|0),($32|0))|0);
 $79 = __THREW__; __THREW__ = 0;
 $80 = $79&1;
 if ($80) {
  $89 = ___cxa_find_matching_catch()|0;
  $90 = tempRet0;
  $28 = $89;
  $29 = $90;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($32);
  $93 = $28;
  $94 = $29;
  ___resumeException($93|0);
  // unreachable;
 }
 $81 = HEAP32[$78>>2]|0;
 $82 = HEAP32[$81>>2]|0;
 $83 = (($82) + 1)|0;
 HEAP32[$81>>2] = $83;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($32);
 $84 = $25;
 __ZN6Mtllib8filenameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($33,$84);
 __THREW__ = 0;
 $85 = (invoke_iii(335,($34|0),($33|0))|0);
 $86 = __THREW__; __THREW__ = 0;
 $87 = $86&1;
 if (!($87)) {
  $88 = HEAP32[$85>>2]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($33);
  STACKTOP = sp;return ($88|0);
 }
 $91 = ___cxa_find_matching_catch()|0;
 $92 = tempRet0;
 $28 = $91;
 $29 = $92;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($33);
 $93 = $28;
 $94 = $29;
 ___resumeException($93|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED2Ev($1,2408);
 $2 = ((($1)) + 108|0);
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZN12TexturedMeshD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 36|0);
 __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($2);
 __ZN4MeshD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNK10Executable7uniformEj($this,$index) {
 $this = $this|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $index;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = $1;
 $5 = (__ZNKSt3__16vectorIjNS_9allocatorIjEEE2atEj($3,$4)|0);
 $6 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN3glm9value_ptrIfLNS_9precisionE0EEEPKT_RKNS_7tmat4x4IS2_XT0_EEE($mat) {
 $mat = $mat|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mat;
 $1 = $0;
 $2 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($1,0)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3glm7tmat3x3IfLNS_9precisionE0EEC2ERKNS_7tmat4x4IfLS1_0EEE($this,$m) {
 $this = $this|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 24|0;
 $3 = sp + 12|0;
 $4 = sp;
 $0 = $this;
 $1 = $m;
 $5 = $0;
 $6 = ((($5)) + 36|0);
 $7 = $5;
 while(1) {
  __ZN3glm5tvec3IfLNS_9precisionE0EEC2Ev($7);
  $8 = ((($7)) + 12|0);
  $9 = ($8|0)==($6|0);
  if ($9) {
   break;
  } else {
   $7 = $8;
  }
 }
 $10 = $1;
 $11 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($10,0)|0);
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2IfLS1_0EEERKNS_5tvec4IT_XT0_EEE($2,$11);
 ;HEAP32[$5>>2]=HEAP32[$2>>2]|0;HEAP32[$5+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$2+8>>2]|0;
 $12 = ((($5)) + 12|0);
 $13 = $1;
 $14 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($13,1)|0);
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2IfLS1_0EEERKNS_5tvec4IT_XT0_EEE($3,$14);
 ;HEAP32[$12>>2]=HEAP32[$3>>2]|0;HEAP32[$12+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$3+8>>2]|0;
 $15 = ((($5)) + 24|0);
 $16 = $1;
 $17 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($16,2)|0);
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2IfLS1_0EEERKNS_5tvec4IT_XT0_EEE($4,$17);
 ;HEAP32[$15>>2]=HEAP32[$4>>2]|0;HEAP32[$15+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$15+8>>2]=HEAP32[$4+8>>2]|0;
 STACKTOP = sp;return;
}
function __ZN3glm7inverseIfLNS_9precisionE0ENS_7tmat3x3EEET1_IT_XT0_EERKS5_($agg$result,$m) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 __ZN3glm6detail15compute_inverseIfLNS_9precisionE0EEENS_7tmat3x3IT_XT0_EEERKS5_($agg$result,$1);
 STACKTOP = sp;return;
}
function __ZN3glm9transposeIfLNS_9precisionE0ENS_7tmat3x3EEENT1_IT_XT0_EE14transpose_typeERKS5_($agg$result,$m) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 __ZN3glm6detail17compute_transposeINS_7tmat3x3EfLNS_9precisionE0EE4callERKNS2_IfLS3_0EEE($agg$result,$1);
 STACKTOP = sp;return;
}
function __ZN3glm9value_ptrIfLNS_9precisionE0EEEPKT_RKNS_7tmat3x3IS2_XT0_EEE($mat) {
 $mat = $mat|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mat;
 $1 = $0;
 $2 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($1,0)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK5Scene3sunEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN3glm9value_ptrIfLNS_9precisionE0EEEPKT_RKNS_5tvec3IS2_XT0_EEE($vec) {
 $vec = $vec|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vec;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK8Material3useEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 __ZNK7Texture3useEv($2);
 STACKTOP = sp;return;
}
function __ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EE6lengthEv($2)|0);
 $5 = ($3|0)<($4|0);
 if ($5) {
  $6 = $1;
  $7 = (($2) + (($6*12)|0)|0);
  STACKTOP = sp;return ($7|0);
 } else {
  ___assert_fail((13560|0),(13579|0),285,(13641|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZNK3glm7tmat3x3IfLNS_9precisionE0EE6lengthEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZN3glm6detail17compute_transposeINS_7tmat3x3EfLNS_9precisionE0EE4callERKNS2_IfLS3_0EEE($agg$result,$m) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 __ZN3glm7tmat3x3IfLNS_9precisionE0EEC2ENS_4ctorE($agg$result,0);
 $1 = $0;
 $2 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($1,0)|0);
 $3 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($2,0)|0);
 $4 = +HEAPF32[$3>>2];
 $5 = (__ZN3glm7tmat3x3IfLNS_9precisionE0EEixEi($agg$result,0)|0);
 $6 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($5,0)|0);
 HEAPF32[$6>>2] = $4;
 $7 = $0;
 $8 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($7,1)|0);
 $9 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($8,0)|0);
 $10 = +HEAPF32[$9>>2];
 $11 = (__ZN3glm7tmat3x3IfLNS_9precisionE0EEixEi($agg$result,0)|0);
 $12 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($11,1)|0);
 HEAPF32[$12>>2] = $10;
 $13 = $0;
 $14 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($13,2)|0);
 $15 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($14,0)|0);
 $16 = +HEAPF32[$15>>2];
 $17 = (__ZN3glm7tmat3x3IfLNS_9precisionE0EEixEi($agg$result,0)|0);
 $18 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($17,2)|0);
 HEAPF32[$18>>2] = $16;
 $19 = $0;
 $20 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($19,0)|0);
 $21 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($20,1)|0);
 $22 = +HEAPF32[$21>>2];
 $23 = (__ZN3glm7tmat3x3IfLNS_9precisionE0EEixEi($agg$result,1)|0);
 $24 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($23,0)|0);
 HEAPF32[$24>>2] = $22;
 $25 = $0;
 $26 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($25,1)|0);
 $27 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($26,1)|0);
 $28 = +HEAPF32[$27>>2];
 $29 = (__ZN3glm7tmat3x3IfLNS_9precisionE0EEixEi($agg$result,1)|0);
 $30 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($29,1)|0);
 HEAPF32[$30>>2] = $28;
 $31 = $0;
 $32 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($31,2)|0);
 $33 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($32,1)|0);
 $34 = +HEAPF32[$33>>2];
 $35 = (__ZN3glm7tmat3x3IfLNS_9precisionE0EEixEi($agg$result,1)|0);
 $36 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($35,2)|0);
 HEAPF32[$36>>2] = $34;
 $37 = $0;
 $38 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($37,0)|0);
 $39 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($38,2)|0);
 $40 = +HEAPF32[$39>>2];
 $41 = (__ZN3glm7tmat3x3IfLNS_9precisionE0EEixEi($agg$result,2)|0);
 $42 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($41,0)|0);
 HEAPF32[$42>>2] = $40;
 $43 = $0;
 $44 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($43,1)|0);
 $45 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($44,2)|0);
 $46 = +HEAPF32[$45>>2];
 $47 = (__ZN3glm7tmat3x3IfLNS_9precisionE0EEixEi($agg$result,2)|0);
 $48 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($47,1)|0);
 HEAPF32[$48>>2] = $46;
 $49 = $0;
 $50 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($49,2)|0);
 $51 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($50,2)|0);
 $52 = +HEAPF32[$51>>2];
 $53 = (__ZN3glm7tmat3x3IfLNS_9precisionE0EEixEi($agg$result,2)|0);
 $54 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($53,2)|0);
 HEAPF32[$54>>2] = $52;
 STACKTOP = sp;return;
}
function __ZN3glm7tmat3x3IfLNS_9precisionE0EEC2ENS_4ctorE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + 36|0);
 $5 = $3;
 while(1) {
  __ZN3glm5tvec3IfLNS_9precisionE0EEC2Ev($5);
  $6 = ((($5)) + 12|0);
  $7 = ($6|0)==($4|0);
  if ($7) {
   break;
  } else {
   $5 = $6;
  }
 }
 STACKTOP = sp;return;
}
function __ZN3glm7tmat3x3IfLNS_9precisionE0EEixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EE6lengthEv($2)|0);
 $5 = ($3|0)<($4|0);
 if ($5) {
  $6 = $1;
  $7 = (($2) + (($6*12)|0)|0);
  STACKTOP = sp;return ($7|0);
 } else {
  ___assert_fail((13560|0),(13579|0),278,(13641|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZN3glm6detail15compute_inverseIfLNS_9precisionE0EEENS_7tmat3x3IT_XT0_EEERKS5_($agg$result,$m) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0.0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0.0;
 var $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0.0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0.0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0, $229 = 0.0, $23 = 0.0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0, $239 = 0, $24 = 0.0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0, $254 = 0, $255 = 0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0;
 var $260 = 0.0, $261 = 0.0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0.0, $272 = 0.0, $273 = 0, $274 = 0, $275 = 0, $276 = 0.0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0.0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0;
 var $39 = 0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0;
 var $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0;
 var $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $OneOverDeterminant = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($1,0)|0);
 $3 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($2,0)|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $0;
 $6 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($5,1)|0);
 $7 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($6,1)|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $0;
 $10 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($9,2)|0);
 $11 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($10,2)|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $8 * $12;
 $14 = $0;
 $15 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($14,2)|0);
 $16 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($15,1)|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $0;
 $19 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($18,1)|0);
 $20 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($19,2)|0);
 $21 = +HEAPF32[$20>>2];
 $22 = $17 * $21;
 $23 = $13 - $22;
 $24 = $4 * $23;
 $25 = $0;
 $26 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($25,1)|0);
 $27 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($26,0)|0);
 $28 = +HEAPF32[$27>>2];
 $29 = $0;
 $30 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($29,0)|0);
 $31 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($30,1)|0);
 $32 = +HEAPF32[$31>>2];
 $33 = $0;
 $34 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($33,2)|0);
 $35 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($34,2)|0);
 $36 = +HEAPF32[$35>>2];
 $37 = $32 * $36;
 $38 = $0;
 $39 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($38,2)|0);
 $40 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($39,1)|0);
 $41 = +HEAPF32[$40>>2];
 $42 = $0;
 $43 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($42,0)|0);
 $44 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($43,2)|0);
 $45 = +HEAPF32[$44>>2];
 $46 = $41 * $45;
 $47 = $37 - $46;
 $48 = $28 * $47;
 $49 = $24 - $48;
 $50 = $0;
 $51 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($50,2)|0);
 $52 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($51,0)|0);
 $53 = +HEAPF32[$52>>2];
 $54 = $0;
 $55 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($54,0)|0);
 $56 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($55,1)|0);
 $57 = +HEAPF32[$56>>2];
 $58 = $0;
 $59 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($58,1)|0);
 $60 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($59,2)|0);
 $61 = +HEAPF32[$60>>2];
 $62 = $57 * $61;
 $63 = $0;
 $64 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($63,1)|0);
 $65 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($64,1)|0);
 $66 = +HEAPF32[$65>>2];
 $67 = $0;
 $68 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($67,0)|0);
 $69 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($68,2)|0);
 $70 = +HEAPF32[$69>>2];
 $71 = $66 * $70;
 $72 = $62 - $71;
 $73 = $53 * $72;
 $74 = $49 + $73;
 $75 = 1.0 / $74;
 $OneOverDeterminant = $75;
 __ZN3glm7tmat3x3IfLNS_9precisionE0EEC2ENS_4ctorE($agg$result,0);
 $76 = $0;
 $77 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($76,1)|0);
 $78 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($77,1)|0);
 $79 = +HEAPF32[$78>>2];
 $80 = $0;
 $81 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($80,2)|0);
 $82 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($81,2)|0);
 $83 = +HEAPF32[$82>>2];
 $84 = $79 * $83;
 $85 = $0;
 $86 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($85,2)|0);
 $87 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($86,1)|0);
 $88 = +HEAPF32[$87>>2];
 $89 = $0;
 $90 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($89,1)|0);
 $91 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($90,2)|0);
 $92 = +HEAPF32[$91>>2];
 $93 = $88 * $92;
 $94 = $84 - $93;
 $95 = $OneOverDeterminant;
 $96 = $94 * $95;
 $97 = (__ZN3glm7tmat3x3IfLNS_9precisionE0EEixEi($agg$result,0)|0);
 $98 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($97,0)|0);
 HEAPF32[$98>>2] = $96;
 $99 = $0;
 $100 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($99,1)|0);
 $101 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($100,0)|0);
 $102 = +HEAPF32[$101>>2];
 $103 = $0;
 $104 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($103,2)|0);
 $105 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($104,2)|0);
 $106 = +HEAPF32[$105>>2];
 $107 = $102 * $106;
 $108 = $0;
 $109 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($108,2)|0);
 $110 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($109,0)|0);
 $111 = +HEAPF32[$110>>2];
 $112 = $0;
 $113 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($112,1)|0);
 $114 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($113,2)|0);
 $115 = +HEAPF32[$114>>2];
 $116 = $111 * $115;
 $117 = $107 - $116;
 $118 = -$117;
 $119 = $OneOverDeterminant;
 $120 = $118 * $119;
 $121 = (__ZN3glm7tmat3x3IfLNS_9precisionE0EEixEi($agg$result,1)|0);
 $122 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($121,0)|0);
 HEAPF32[$122>>2] = $120;
 $123 = $0;
 $124 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($123,1)|0);
 $125 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($124,0)|0);
 $126 = +HEAPF32[$125>>2];
 $127 = $0;
 $128 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($127,2)|0);
 $129 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($128,1)|0);
 $130 = +HEAPF32[$129>>2];
 $131 = $126 * $130;
 $132 = $0;
 $133 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($132,2)|0);
 $134 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($133,0)|0);
 $135 = +HEAPF32[$134>>2];
 $136 = $0;
 $137 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($136,1)|0);
 $138 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($137,1)|0);
 $139 = +HEAPF32[$138>>2];
 $140 = $135 * $139;
 $141 = $131 - $140;
 $142 = $OneOverDeterminant;
 $143 = $141 * $142;
 $144 = (__ZN3glm7tmat3x3IfLNS_9precisionE0EEixEi($agg$result,2)|0);
 $145 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($144,0)|0);
 HEAPF32[$145>>2] = $143;
 $146 = $0;
 $147 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($146,0)|0);
 $148 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($147,1)|0);
 $149 = +HEAPF32[$148>>2];
 $150 = $0;
 $151 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($150,2)|0);
 $152 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($151,2)|0);
 $153 = +HEAPF32[$152>>2];
 $154 = $149 * $153;
 $155 = $0;
 $156 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($155,2)|0);
 $157 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($156,1)|0);
 $158 = +HEAPF32[$157>>2];
 $159 = $0;
 $160 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($159,0)|0);
 $161 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($160,2)|0);
 $162 = +HEAPF32[$161>>2];
 $163 = $158 * $162;
 $164 = $154 - $163;
 $165 = -$164;
 $166 = $OneOverDeterminant;
 $167 = $165 * $166;
 $168 = (__ZN3glm7tmat3x3IfLNS_9precisionE0EEixEi($agg$result,0)|0);
 $169 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($168,1)|0);
 HEAPF32[$169>>2] = $167;
 $170 = $0;
 $171 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($170,0)|0);
 $172 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($171,0)|0);
 $173 = +HEAPF32[$172>>2];
 $174 = $0;
 $175 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($174,2)|0);
 $176 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($175,2)|0);
 $177 = +HEAPF32[$176>>2];
 $178 = $173 * $177;
 $179 = $0;
 $180 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($179,2)|0);
 $181 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($180,0)|0);
 $182 = +HEAPF32[$181>>2];
 $183 = $0;
 $184 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($183,0)|0);
 $185 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($184,2)|0);
 $186 = +HEAPF32[$185>>2];
 $187 = $182 * $186;
 $188 = $178 - $187;
 $189 = $OneOverDeterminant;
 $190 = $188 * $189;
 $191 = (__ZN3glm7tmat3x3IfLNS_9precisionE0EEixEi($agg$result,1)|0);
 $192 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($191,1)|0);
 HEAPF32[$192>>2] = $190;
 $193 = $0;
 $194 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($193,0)|0);
 $195 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($194,0)|0);
 $196 = +HEAPF32[$195>>2];
 $197 = $0;
 $198 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($197,2)|0);
 $199 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($198,1)|0);
 $200 = +HEAPF32[$199>>2];
 $201 = $196 * $200;
 $202 = $0;
 $203 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($202,2)|0);
 $204 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($203,0)|0);
 $205 = +HEAPF32[$204>>2];
 $206 = $0;
 $207 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($206,0)|0);
 $208 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($207,1)|0);
 $209 = +HEAPF32[$208>>2];
 $210 = $205 * $209;
 $211 = $201 - $210;
 $212 = -$211;
 $213 = $OneOverDeterminant;
 $214 = $212 * $213;
 $215 = (__ZN3glm7tmat3x3IfLNS_9precisionE0EEixEi($agg$result,2)|0);
 $216 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($215,1)|0);
 HEAPF32[$216>>2] = $214;
 $217 = $0;
 $218 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($217,0)|0);
 $219 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($218,1)|0);
 $220 = +HEAPF32[$219>>2];
 $221 = $0;
 $222 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($221,1)|0);
 $223 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($222,2)|0);
 $224 = +HEAPF32[$223>>2];
 $225 = $220 * $224;
 $226 = $0;
 $227 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($226,1)|0);
 $228 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($227,1)|0);
 $229 = +HEAPF32[$228>>2];
 $230 = $0;
 $231 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($230,0)|0);
 $232 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($231,2)|0);
 $233 = +HEAPF32[$232>>2];
 $234 = $229 * $233;
 $235 = $225 - $234;
 $236 = $OneOverDeterminant;
 $237 = $235 * $236;
 $238 = (__ZN3glm7tmat3x3IfLNS_9precisionE0EEixEi($agg$result,0)|0);
 $239 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($238,2)|0);
 HEAPF32[$239>>2] = $237;
 $240 = $0;
 $241 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($240,0)|0);
 $242 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($241,0)|0);
 $243 = +HEAPF32[$242>>2];
 $244 = $0;
 $245 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($244,1)|0);
 $246 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($245,2)|0);
 $247 = +HEAPF32[$246>>2];
 $248 = $243 * $247;
 $249 = $0;
 $250 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($249,1)|0);
 $251 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($250,0)|0);
 $252 = +HEAPF32[$251>>2];
 $253 = $0;
 $254 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($253,0)|0);
 $255 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($254,2)|0);
 $256 = +HEAPF32[$255>>2];
 $257 = $252 * $256;
 $258 = $248 - $257;
 $259 = -$258;
 $260 = $OneOverDeterminant;
 $261 = $259 * $260;
 $262 = (__ZN3glm7tmat3x3IfLNS_9precisionE0EEixEi($agg$result,1)|0);
 $263 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($262,2)|0);
 HEAPF32[$263>>2] = $261;
 $264 = $0;
 $265 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($264,0)|0);
 $266 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($265,0)|0);
 $267 = +HEAPF32[$266>>2];
 $268 = $0;
 $269 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($268,1)|0);
 $270 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($269,1)|0);
 $271 = +HEAPF32[$270>>2];
 $272 = $267 * $271;
 $273 = $0;
 $274 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($273,1)|0);
 $275 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($274,0)|0);
 $276 = +HEAPF32[$275>>2];
 $277 = $0;
 $278 = (__ZNK3glm7tmat3x3IfLNS_9precisionE0EEixEi($277,0)|0);
 $279 = (__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($278,1)|0);
 $280 = +HEAPF32[$279>>2];
 $281 = $276 * $280;
 $282 = $272 - $281;
 $283 = $OneOverDeterminant;
 $284 = $282 * $283;
 $285 = (__ZN3glm7tmat3x3IfLNS_9precisionE0EEixEi($agg$result,2)|0);
 $286 = (__ZN3glm5tvec3IfLNS_9precisionE0EEixEi($285,2)|0);
 HEAPF32[$286>>2] = $284;
 STACKTOP = sp;return;
}
function __ZN3glm5tvec3IfLNS_9precisionE0EEC2IfLS1_0EEERKNS_5tvec4IT_XT0_EEE($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 HEAPF32[$2>>2] = $4;
 $5 = ((($2)) + 4|0);
 $6 = $1;
 $7 = ((($6)) + 4|0);
 $8 = +HEAPF32[$7>>2];
 HEAPF32[$5>>2] = $8;
 $9 = ((($2)) + 8|0);
 $10 = $1;
 $11 = ((($10)) + 8|0);
 $12 = +HEAPF32[$11>>2];
 HEAPF32[$9>>2] = $12;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIjNS_9allocatorIjEEE2atEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $__n;
 $3 = $1;
 $4 = $2;
 $0 = $3;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$5>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11|0) / 4)&-1;
 $13 = ($4>>>0)>=($12>>>0);
 if ($13) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv($3);
  // unreachable;
 } else {
  $14 = $2;
  $15 = HEAP32[$3>>2]|0;
  $16 = (($15) + ($14<<2)|0);
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function __ZN4MeshD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 24|0);
 __ZNSt3__16vectorItNS_9allocatorItEEED2Ev($2);
 $3 = ((($1)) + 12|0);
 __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($3);
 __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorItNS_9allocatorItEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseItNS_9allocatorItEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseItNS_9allocatorItEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -2|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 2)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $vtt;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$2>>2] = $4;
 $5 = ((($3)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$2>>2]|0;
 $8 = ((($7)) + -12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($2) + ($9)|0);
 HEAP32[$10>>2] = $6;
 $11 = ((($2)) + 8|0);
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($11);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -8|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 8)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -12|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 12)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 536870911;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferIN3glm5tvec2IfLNS1_9precisionE0EEERNS_9allocatorIS4_EEEC2EjjS7_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<3;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<3)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<3)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i$1 = 0, $__t$i$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i$2 = sp + 120|0;
 $__t$i$1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 8)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<3)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<3;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i$2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i$2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i$1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i$1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 8)&-1;
 __ZNKSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN3glm5tvec2IfLNS1_9precisionE0EEERNS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -8|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 8)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 8)&-1;
 $39 = (($26) + ($38<<3)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 8)&-1;
 $51 = (($42) + ($50<<3)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 8)&-1;
 $67 = (($54) + ($66<<3)|0);
 __ZNKSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 8)&-1;
 $39 = (($26) + ($38<<3)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 8)&-1;
 $55 = (($42) + ($54<<3)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<3)|0);
 __ZNKSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 357913941;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferIN3glm5tvec3IfLNS1_9precisionE0EEERNS_9allocatorIS4_EEEC2EjjS7_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = ($51*12)|0;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + (($57*12)|0)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + (($62*12)|0)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i$1 = 0, $__t$i$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i$2 = sp + 120|0;
 $__t$i$1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 12)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + (($51*12)|0)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = ($56*12)|0;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i$2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i$2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i$1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i$1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 12)&-1;
 __ZNKSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN3glm5tvec3IfLNS1_9precisionE0EEERNS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -12|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 12)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 12)&-1;
 $39 = (($26) + (($38*12)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 12)&-1;
 $51 = (($42) + (($50*12)|0)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 12)&-1;
 $67 = (($54) + (($66*12)|0)|0);
 __ZNKSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 12)&-1;
 $39 = (($26) + (($38*12)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 12)&-1;
 $55 = (($42) + (($54*12)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*12)|0)|0);
 __ZNKSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__111char_traitsIcE6assignERcRKc($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $0;
 HEAP8[$4>>0] = $3;
 STACKTOP = sp;return;
}
function __ZNSt3__111char_traitsIcE11to_int_typeEc($__c) {
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c;
 $1 = $0;
 $2 = $1&255;
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__111char_traitsIcE11eq_int_typeEii($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $0;
 $3 = $1;
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNSt3__111char_traitsIcE12to_char_typeEi($__c) {
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c;
 $1 = $0;
 $2 = $1&255;
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__rt = 0, $__t$i = 0, $__tmp$i$i = 0, $__tmp$i$i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $27 = sp + 68|0;
 $28 = sp + 64|0;
 $31 = sp + 52|0;
 $32 = sp + 48|0;
 $__h = sp + 16|0;
 $38 = sp + 8|0;
 $37 = $this;
 $41 = $37;
 $__rt = 0;
 $42 = ((($41)) + 64|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)!=(0|0);
 if (!($44)) {
  $122 = $__rt;
  STACKTOP = sp;return ($122|0);
 }
 $__rt = $41;
 $45 = ((($41)) + 64|0);
 $46 = HEAP32[$45>>2]|0;
 HEAP32[$38>>2] = 379;
 $34 = $__h;
 $35 = $46;
 $36 = $38;
 $47 = $34;
 $48 = $35;
 $49 = $36;
 $33 = $49;
 $50 = $33;
 $51 = HEAP32[$50>>2]|0;
 $30 = $47;
 HEAP32[$31>>2] = $48;
 HEAP32[$32>>2] = $51;
 $52 = $30;
 $29 = $31;
 $53 = $29;
 $54 = HEAP32[$53>>2]|0;
 $23 = $32;
 $55 = $23;
 $56 = HEAP32[$55>>2]|0;
 $26 = $52;
 HEAP32[$27>>2] = $54;
 HEAP32[$28>>2] = $56;
 $57 = $26;
 $25 = $27;
 $58 = $25;
 $59 = HEAP32[$58>>2]|0;
 HEAP32[$57>>2] = $59;
 $60 = ((($57)) + 4|0);
 $24 = $28;
 $61 = $24;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$60>>2] = $62;
 $63 = HEAP32[$41>>2]|0;
 $64 = ((($63)) + 24|0);
 $65 = HEAP32[$64>>2]|0;
 __THREW__ = 0;
 $66 = (invoke_ii($65|0,($41|0))|0);
 $67 = __THREW__; __THREW__ = 0;
 $68 = $67&1;
 if (!($68)) {
  $69 = ($66|0)!=(0);
  if ($69) {
   $__rt = 0;
  }
  $4 = $__h;
  $91 = $4;
  $3 = $91;
  $92 = $3;
  $2 = $92;
  $93 = $2;
  $94 = HEAP32[$93>>2]|0;
  $__t$i = $94;
  $1 = $91;
  $95 = $1;
  $0 = $95;
  $96 = $0;
  HEAP32[$96>>2] = 0;
  $97 = $__t$i;
  __THREW__ = 0;
  $98 = (invoke_ii(379,($97|0))|0);
  $99 = __THREW__; __THREW__ = 0;
  $100 = $99&1;
  if (!($100)) {
   $101 = ($98|0)==(0);
   if ($101) {
    $102 = ((($41)) + 64|0);
    HEAP32[$102>>2] = 0;
   } else {
    $__rt = 0;
   }
   $22 = $__h;
   $103 = $22;
   $20 = $103;
   $21 = 0;
   $104 = $20;
   $19 = $104;
   $105 = $19;
   $18 = $105;
   $106 = $18;
   $107 = HEAP32[$106>>2]|0;
   $__tmp$i$i = $107;
   $108 = $21;
   $17 = $104;
   $109 = $17;
   $16 = $109;
   $110 = $16;
   HEAP32[$110>>2] = $108;
   $111 = $__tmp$i$i;
   $112 = ($111|0)!=(0|0);
   if (!($112)) {
    $122 = $__rt;
    STACKTOP = sp;return ($122|0);
   }
   $15 = $104;
   $113 = $15;
   $14 = $113;
   $114 = $14;
   $115 = ((($114)) + 4|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = $__tmp$i$i;
   __THREW__ = 0;
   (invoke_ii($116|0,($117|0))|0);
   $118 = __THREW__; __THREW__ = 0;
   $119 = $118&1;
   if ($119) {
    $120 = ___cxa_find_matching_catch(0|0)|0;
    $121 = tempRet0;
    ___clang_call_terminate($120);
    // unreachable;
   } else {
    $122 = $__rt;
    STACKTOP = sp;return ($122|0);
   }
  }
 }
 $70 = ___cxa_find_matching_catch()|0;
 $71 = tempRet0;
 $39 = $70;
 $40 = $71;
 $13 = $__h;
 $72 = $13;
 $11 = $72;
 $12 = 0;
 $73 = $11;
 $10 = $73;
 $74 = $10;
 $9 = $74;
 $75 = $9;
 $76 = HEAP32[$75>>2]|0;
 $__tmp$i$i$1 = $76;
 $77 = $12;
 $8 = $73;
 $78 = $8;
 $7 = $78;
 $79 = $7;
 HEAP32[$79>>2] = $77;
 $80 = $__tmp$i$i$1;
 $81 = ($80|0)!=(0|0);
 if (!($81)) {
  $123 = $39;
  $124 = $40;
  ___resumeException($123|0);
  // unreachable;
 }
 $6 = $73;
 $82 = $6;
 $5 = $82;
 $83 = $5;
 $84 = ((($83)) + 4|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = $__tmp$i$i$1;
 __THREW__ = 0;
 (invoke_ii($85|0,($86|0))|0);
 $87 = __THREW__; __THREW__ = 0;
 $88 = $87&1;
 if ($88) {
  $89 = ___cxa_find_matching_catch(0|0)|0;
  $90 = tempRet0;
  ___clang_call_terminate($89);
  // unreachable;
 } else {
  $123 = $39;
  $124 = $40;
  ___resumeException($123|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__old_anc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = $this;
 $10 = $__loc;
 $11 = $9;
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 (FUNCTION_TABLE_ii[$14 & 1023]($11)|0);
 $15 = $10;
 $8 = $15;
 $16 = $8;
 $17 = (__ZNKSt3__16locale9use_facetERNS0_2idE($16,8648)|0);
 $18 = ((($11)) + 68|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($11)) + 98|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&1;
 $22 = $21&1;
 $__old_anc = $22;
 $23 = ((($11)) + 68|0);
 $24 = HEAP32[$23>>2]|0;
 $7 = $24;
 $25 = $7;
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 28|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (FUNCTION_TABLE_ii[$28 & 1023]($25)|0);
 $30 = ((($11)) + 98|0);
 $31 = $29&1;
 HEAP8[$30>>0] = $31;
 $32 = $__old_anc;
 $33 = $32&1;
 $34 = $33&1;
 $35 = ((($11)) + 98|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&1;
 $38 = $37&1;
 $39 = ($34|0)!=($38|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $3 = $11;
 $4 = 0;
 $5 = 0;
 $6 = 0;
 $40 = $3;
 $41 = $4;
 $42 = ((($40)) + 8|0);
 HEAP32[$42>>2] = $41;
 $43 = $5;
 $44 = ((($40)) + 12|0);
 HEAP32[$44>>2] = $43;
 $45 = $6;
 $46 = ((($40)) + 16|0);
 HEAP32[$46>>2] = $45;
 $0 = $11;
 $1 = 0;
 $2 = 0;
 $47 = $0;
 $48 = $1;
 $49 = ((($47)) + 24|0);
 HEAP32[$49>>2] = $48;
 $50 = ((($47)) + 20|0);
 HEAP32[$50>>2] = $48;
 $51 = $2;
 $52 = ((($47)) + 28|0);
 HEAP32[$52>>2] = $51;
 $53 = ((($11)) + 98|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&1;
 $56 = ((($11)) + 96|0);
 $57 = HEAP8[$56>>0]|0;
 $58 = $57&1;
 if ($55) {
  if ($58) {
   $59 = ((($11)) + 32|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ($60|0)==(0|0);
   if (!($61)) {
    __ZdaPv($60);
   }
  }
  $62 = ((($11)) + 97|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&1;
  $65 = ((($11)) + 96|0);
  $66 = $64&1;
  HEAP8[$65>>0] = $66;
  $67 = ((($11)) + 60|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ((($11)) + 52|0);
  HEAP32[$69>>2] = $68;
  $70 = ((($11)) + 56|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ((($11)) + 32|0);
  HEAP32[$72>>2] = $71;
  $73 = ((($11)) + 60|0);
  HEAP32[$73>>2] = 0;
  $74 = ((($11)) + 56|0);
  HEAP32[$74>>2] = 0;
  $75 = ((($11)) + 97|0);
  HEAP8[$75>>0] = 0;
  STACKTOP = sp;return;
 }
 if (!($58)) {
  $76 = ((($11)) + 32|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ((($11)) + 44|0);
  $79 = ($77|0)!=($78|0);
  if ($79) {
   $80 = ((($11)) + 52|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = ((($11)) + 60|0);
   HEAP32[$82>>2] = $81;
   $83 = ((($11)) + 32|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ((($11)) + 56|0);
   HEAP32[$85>>2] = $84;
   $86 = ((($11)) + 97|0);
   HEAP8[$86>>0] = 0;
   $87 = ((($11)) + 52|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = (__Znaj($88)|0);
   $90 = ((($11)) + 32|0);
   HEAP32[$90>>2] = $89;
   $91 = ((($11)) + 96|0);
   HEAP8[$91>>0] = 1;
   STACKTOP = sp;return;
  }
 }
 $92 = ((($11)) + 52|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ((($11)) + 60|0);
 HEAP32[$94>>2] = $93;
 $95 = ((($11)) + 60|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = (__Znaj($96)|0);
 $98 = ((($11)) + 56|0);
 HEAP32[$98>>2] = $97;
 $99 = ((($11)) + 97|0);
 HEAP8[$99>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE6setbufEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $11 = sp + 76|0;
 $18 = sp + 8|0;
 $19 = sp + 4|0;
 $16 = $this;
 $17 = $__s;
 HEAP32[$18>>2] = $__n;
 $20 = $16;
 $12 = $20;
 $13 = 0;
 $14 = 0;
 $15 = 0;
 $21 = $12;
 $22 = $13;
 $23 = ((($21)) + 8|0);
 HEAP32[$23>>2] = $22;
 $24 = $14;
 $25 = ((($21)) + 12|0);
 HEAP32[$25>>2] = $24;
 $26 = $15;
 $27 = ((($21)) + 16|0);
 HEAP32[$27>>2] = $26;
 $0 = $20;
 $1 = 0;
 $2 = 0;
 $28 = $0;
 $29 = $1;
 $30 = ((($28)) + 24|0);
 HEAP32[$30>>2] = $29;
 $31 = ((($28)) + 20|0);
 HEAP32[$31>>2] = $29;
 $32 = $2;
 $33 = ((($28)) + 28|0);
 HEAP32[$33>>2] = $32;
 $34 = ((($20)) + 96|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&1;
 if ($36) {
  $37 = ((($20)) + 32|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(0|0);
  if (!($39)) {
   __ZdaPv($38);
  }
 }
 $40 = ((($20)) + 97|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&1;
 if ($42) {
  $43 = ((($20)) + 56|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)==(0|0);
  if (!($45)) {
   __ZdaPv($44);
  }
 }
 $46 = HEAP32[$18>>2]|0;
 $47 = ((($20)) + 52|0);
 HEAP32[$47>>2] = $46;
 $48 = ((($20)) + 52|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49>>>0)>(8);
 do {
  if ($50) {
   $51 = ((($20)) + 98|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&1;
   $54 = $17;
   $55 = ($54|0)!=(0|0);
   $or$cond = $53 & $55;
   if ($or$cond) {
    $56 = $17;
    $57 = ((($20)) + 32|0);
    HEAP32[$57>>2] = $56;
    $58 = ((($20)) + 96|0);
    HEAP8[$58>>0] = 0;
    break;
   } else {
    $59 = ((($20)) + 52|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (__Znaj($60)|0);
    $62 = ((($20)) + 32|0);
    HEAP32[$62>>2] = $61;
    $63 = ((($20)) + 96|0);
    HEAP8[$63>>0] = 1;
    break;
   }
  } else {
   $64 = ((($20)) + 44|0);
   $65 = ((($20)) + 32|0);
   HEAP32[$65>>2] = $64;
   $66 = ((($20)) + 52|0);
   HEAP32[$66>>2] = 8;
   $67 = ((($20)) + 96|0);
   HEAP8[$67>>0] = 0;
  }
 } while(0);
 $68 = ((($20)) + 98|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = $69&1;
 if ($70) {
  $98 = ((($20)) + 60|0);
  HEAP32[$98>>2] = 0;
  $99 = ((($20)) + 56|0);
  HEAP32[$99>>2] = 0;
  $100 = ((($20)) + 97|0);
  HEAP8[$100>>0] = 0;
  STACKTOP = sp;return ($20|0);
 }
 HEAP32[$19>>2] = 8;
 $9 = $18;
 $10 = $19;
 $71 = $9;
 $72 = $10;
 ;HEAP8[$8>>0]=HEAP8[$11>>0]|0;
 $6 = $71;
 $7 = $72;
 $73 = $6;
 $74 = $7;
 $3 = $8;
 $4 = $73;
 $5 = $74;
 $75 = $4;
 $76 = HEAP32[$75>>2]|0;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = ($76|0)<($78|0);
 $80 = $7;
 $81 = $6;
 $82 = $79 ? $80 : $81;
 $83 = HEAP32[$82>>2]|0;
 $84 = ((($20)) + 60|0);
 HEAP32[$84>>2] = $83;
 $85 = $17;
 $86 = ($85|0)!=(0|0);
 if ($86) {
  $87 = ((($20)) + 60|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ($88>>>0)>=(8);
  if ($89) {
   $90 = $17;
   $91 = ((($20)) + 56|0);
   HEAP32[$91>>2] = $90;
   $92 = ((($20)) + 97|0);
   HEAP8[$92>>0] = 0;
   STACKTOP = sp;return ($20|0);
  }
 }
 $93 = ((($20)) + 60|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (__Znaj($94)|0);
 $96 = ((($20)) + 56|0);
 HEAP32[$96>>2] = $95;
 $97 = ((($20)) + 97|0);
 HEAP8[$97>>0] = 1;
 STACKTOP = sp;return ($20|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$__way,$2) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $__way = $__way|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__r = 0, $__whence = 0, $__width = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 56|0;
 $6 = sp + 48|0;
 $8 = sp + 40|0;
 $10 = sp + 32|0;
 $12 = sp + 24|0;
 $15 = sp + 16|0;
 $__r = sp;
 $18 = sp + 64|0;
 $14 = $this;
 $19 = $15;
 $20 = $19;
 HEAP32[$20>>2] = $0;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $1;
 $16 = $__way;
 $17 = $2;
 $23 = $14;
 $24 = ((($23)) + 68|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  $27 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($27);
  ___cxa_throw(($27|0),(288|0),(38|0));
  // unreachable;
 }
 $28 = ((($23)) + 68|0);
 $29 = HEAP32[$28>>2]|0;
 $13 = $29;
 $30 = $13;
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($31)) + 24|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (FUNCTION_TABLE_ii[$33 & 1023]($30)|0);
 $__width = $34;
 $35 = ((($23)) + 64|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0|0);
 if (!($37)) {
  $38 = $__width;
  $39 = ($38|0)<=(0);
  $40 = $15;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  $43 = (($40) + 4)|0;
  $44 = $43;
  $45 = HEAP32[$44>>2]|0;
  $46 = ($42|0)!=(0);
  $47 = ($45|0)!=(0);
  $48 = $46 | $47;
  $or$cond = $39 & $48;
  if (!($or$cond)) {
   $49 = HEAP32[$23>>2]|0;
   $50 = ((($49)) + 24|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (FUNCTION_TABLE_ii[$51 & 1023]($23)|0);
   $53 = ($52|0)!=(0);
   if (!($53)) {
    $70 = $16;
    switch ($70|0) {
    case 0:  {
     $__whence = 0;
     break;
    }
    case 1:  {
     $__whence = 1;
     break;
    }
    case 2:  {
     $__whence = 2;
     break;
    }
    default: {
     $3 = $agg$result;
     $71 = $4;
     $72 = $71;
     HEAP32[$72>>2] = -1;
     $73 = (($71) + 4)|0;
     $74 = $73;
     HEAP32[$74>>2] = -1;
     $75 = $3;
     ;HEAP32[$75>>2]=0|0;HEAP32[$75+4>>2]=0|0;
     $76 = ((($75)) + 8|0);
     $77 = $4;
     $78 = $77;
     $79 = HEAP32[$78>>2]|0;
     $80 = (($77) + 4)|0;
     $81 = $80;
     $82 = HEAP32[$81>>2]|0;
     $83 = $76;
     $84 = $83;
     HEAP32[$84>>2] = $79;
     $85 = (($83) + 4)|0;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     STACKTOP = sp;return;
    }
    }
    $87 = ((($23)) + 64|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = $__width;
    $90 = ($89|0)>(0);
    if ($90) {
     $91 = $__width;
     $92 = ($91|0)<(0);
     $93 = $92 << 31 >> 31;
     $94 = $15;
     $95 = $94;
     $96 = HEAP32[$95>>2]|0;
     $97 = (($94) + 4)|0;
     $98 = $97;
     $99 = HEAP32[$98>>2]|0;
     $100 = (___muldi3(($91|0),($93|0),($96|0),($99|0))|0);
     $101 = tempRet0;
     $103 = $100;$145 = $101;
    } else {
     $103 = 0;$145 = 0;
    }
    $102 = $__whence;
    $104 = (___fseeko($88,$103,$102)|0);
    $105 = ($104|0)!=(0);
    if ($105) {
     $5 = $agg$result;
     $106 = $6;
     $107 = $106;
     HEAP32[$107>>2] = -1;
     $108 = (($106) + 4)|0;
     $109 = $108;
     HEAP32[$109>>2] = -1;
     $110 = $5;
     ;HEAP32[$110>>2]=0|0;HEAP32[$110+4>>2]=0|0;
     $111 = ((($110)) + 8|0);
     $112 = $6;
     $113 = $112;
     $114 = HEAP32[$113>>2]|0;
     $115 = (($112) + 4)|0;
     $116 = $115;
     $117 = HEAP32[$116>>2]|0;
     $118 = $111;
     $119 = $118;
     HEAP32[$119>>2] = $114;
     $120 = (($118) + 4)|0;
     $121 = $120;
     HEAP32[$121>>2] = $117;
     STACKTOP = sp;return;
    } else {
     $122 = ((($23)) + 64|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = (___ftello($123)|0);
     $125 = ($124|0)<(0);
     $126 = $125 << 31 >> 31;
     $7 = $__r;
     $127 = $8;
     $128 = $127;
     HEAP32[$128>>2] = $124;
     $129 = (($127) + 4)|0;
     $130 = $129;
     HEAP32[$130>>2] = $126;
     $131 = $7;
     ;HEAP32[$131>>2]=0|0;HEAP32[$131+4>>2]=0|0;
     $132 = ((($131)) + 8|0);
     $133 = $8;
     $134 = $133;
     $135 = HEAP32[$134>>2]|0;
     $136 = (($133) + 4)|0;
     $137 = $136;
     $138 = HEAP32[$137>>2]|0;
     $139 = $132;
     $140 = $139;
     HEAP32[$140>>2] = $135;
     $141 = (($139) + 4)|0;
     $142 = $141;
     HEAP32[$142>>2] = $138;
     $143 = ((($23)) + 72|0);
     ;HEAP32[$18>>2]=HEAP32[$143>>2]|0;HEAP32[$18+4>>2]=HEAP32[$143+4>>2]|0;
     ;HEAP8[$10>>0]=HEAP8[$18>>0]|0;HEAP8[$10+1>>0]=HEAP8[$18+1>>0]|0;HEAP8[$10+2>>0]=HEAP8[$18+2>>0]|0;HEAP8[$10+3>>0]=HEAP8[$18+3>>0]|0;HEAP8[$10+4>>0]=HEAP8[$18+4>>0]|0;HEAP8[$10+5>>0]=HEAP8[$18+5>>0]|0;HEAP8[$10+6>>0]=HEAP8[$18+6>>0]|0;HEAP8[$10+7>>0]=HEAP8[$18+7>>0]|0;
     $9 = $__r;
     $144 = $9;
     ;HEAP32[$144>>2]=HEAP32[$10>>2]|0;HEAP32[$144+4>>2]=HEAP32[$10+4>>2]|0;
     ;HEAP32[$agg$result>>2]=HEAP32[$__r>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$__r+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$__r+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$__r+12>>2]|0;
     STACKTOP = sp;return;
    }
   }
  }
 }
 $11 = $agg$result;
 $54 = $12;
 $55 = $54;
 HEAP32[$55>>2] = -1;
 $56 = (($54) + 4)|0;
 $57 = $56;
 HEAP32[$57>>2] = -1;
 $58 = $11;
 ;HEAP32[$58>>2]=0|0;HEAP32[$58+4>>2]=0|0;
 $59 = ((($58)) + 8|0);
 $60 = $12;
 $61 = $60;
 $62 = HEAP32[$61>>2]|0;
 $63 = (($60) + 4)|0;
 $64 = $63;
 $65 = HEAP32[$64>>2]|0;
 $66 = $59;
 $67 = $66;
 HEAP32[$67>>2] = $62;
 $68 = (($66) + 4)|0;
 $69 = $68;
 HEAP32[$69>>2] = $65;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$__sp,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__sp = $__sp|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $6 = sp;
 $9 = sp + 16|0;
 $7 = $this;
 $8 = $0;
 $10 = $7;
 $11 = ((($10)) + 64|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  $14 = HEAP32[$10>>2]|0;
  $15 = ((($14)) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (FUNCTION_TABLE_ii[$16 & 1023]($10)|0);
  $18 = ($17|0)!=(0);
  if (!($18)) {
   $35 = ((($10)) + 64|0);
   $36 = HEAP32[$35>>2]|0;
   $1 = $__sp;
   $37 = $1;
   $38 = ((($37)) + 8|0);
   $39 = $38;
   $40 = $39;
   $41 = HEAP32[$40>>2]|0;
   $42 = (($39) + 4)|0;
   $43 = $42;
   $44 = HEAP32[$43>>2]|0;
   $45 = (___fseeko($36,$41,0)|0);
   $46 = ($45|0)!=(0);
   if ($46) {
    $2 = $agg$result;
    $47 = $3;
    $48 = $47;
    HEAP32[$48>>2] = -1;
    $49 = (($47) + 4)|0;
    $50 = $49;
    HEAP32[$50>>2] = -1;
    $51 = $2;
    ;HEAP32[$51>>2]=0|0;HEAP32[$51+4>>2]=0|0;
    $52 = ((($51)) + 8|0);
    $53 = $3;
    $54 = $53;
    $55 = HEAP32[$54>>2]|0;
    $56 = (($53) + 4)|0;
    $57 = $56;
    $58 = HEAP32[$57>>2]|0;
    $59 = $52;
    $60 = $59;
    HEAP32[$60>>2] = $55;
    $61 = (($59) + 4)|0;
    $62 = $61;
    HEAP32[$62>>2] = $58;
    STACKTOP = sp;return;
   } else {
    $63 = ((($10)) + 72|0);
    $4 = $__sp;
    $64 = $4;
    ;HEAP32[$9>>2]=HEAP32[$64>>2]|0;HEAP32[$9+4>>2]=HEAP32[$64+4>>2]|0;
    ;HEAP32[$63>>2]=HEAP32[$9>>2]|0;HEAP32[$63+4>>2]=HEAP32[$9+4>>2]|0;
    ;HEAP32[$agg$result>>2]=HEAP32[$__sp>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$__sp+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$__sp+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$__sp+12>>2]|0;
    STACKTOP = sp;return;
   }
  }
 }
 $5 = $agg$result;
 $19 = $6;
 $20 = $19;
 HEAP32[$20>>2] = -1;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = -1;
 $23 = $5;
 ;HEAP32[$23>>2]=0|0;HEAP32[$23+4>>2]=0|0;
 $24 = ((($23)) + 8|0);
 $25 = $6;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4)|0;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = $24;
 $32 = $31;
 HEAP32[$32>>2] = $27;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = $30;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c = 0, $__extbe = 0, $__nmemb = 0, $__off = 0, $__r = 0, $__state = 0, $__update_st = 0, $__width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbe = sp + 28|0;
 $__c = sp;
 $__state = sp + 16|0;
 $26 = $this;
 $27 = $26;
 $28 = ((($27)) + 64|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 if ($30) {
  $25 = 0;
  $245 = $25;
  STACKTOP = sp;return ($245|0);
 }
 $31 = ((($27)) + 68|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  $34 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($34);
  ___cxa_throw(($34|0),(288|0),(38|0));
  // unreachable;
 }
 $35 = ((($27)) + 92|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 & 16;
 $38 = ($37|0)!=(0);
 if ($38) {
  $24 = $27;
  $39 = $24;
  $40 = ((($39)) + 24|0);
  $41 = HEAP32[$40>>2]|0;
  $14 = $27;
  $42 = $14;
  $43 = ((($42)) + 20|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($41|0)!=($44|0);
  if ($45) {
   $46 = HEAP32[$27>>2]|0;
   $47 = ((($46)) + 52|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
   $50 = (FUNCTION_TABLE_iii[$48 & 511]($27,$49)|0);
   $51 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
   $52 = ($50|0)==($51|0);
   if ($52) {
    $25 = -1;
    $245 = $25;
    STACKTOP = sp;return ($245|0);
   }
  }
  while(1) {
   $53 = ((($27)) + 68|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($27)) + 72|0);
   $56 = ((($27)) + 32|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ((($27)) + 32|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ((($27)) + 52|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($59) + ($61)|0);
   $2 = $54;
   $3 = $55;
   $4 = $57;
   $5 = $62;
   $6 = $__extbe;
   $63 = $2;
   $64 = HEAP32[$63>>2]|0;
   $65 = ((($64)) + 20|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $3;
   $68 = $4;
   $69 = $5;
   $70 = $6;
   $71 = (FUNCTION_TABLE_iiiiii[$66 & 511]($63,$67,$68,$69,$70)|0);
   $__r = $71;
   $72 = HEAP32[$__extbe>>2]|0;
   $73 = ((($27)) + 32|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $72;
   $76 = $74;
   $77 = (($75) - ($76))|0;
   $__nmemb = $77;
   $78 = ((($27)) + 32|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $__nmemb;
   $81 = ((($27)) + 64|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (_fwrite($79,1,$80,$82)|0);
   $84 = $__nmemb;
   $85 = ($83|0)!=($84|0);
   if ($85) {
    label = 10;
    break;
   }
   $86 = $__r;
   $87 = ($86|0)==(1);
   if (!($87)) {
    break;
   }
  }
  if ((label|0) == 10) {
   $25 = -1;
   $245 = $25;
   STACKTOP = sp;return ($245|0);
  }
  $88 = $__r;
  $89 = ($88|0)==(2);
  if ($89) {
   $25 = -1;
   $245 = $25;
   STACKTOP = sp;return ($245|0);
  }
  $90 = ((($27)) + 64|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (_fflush($91)|0);
  $93 = ($92|0)!=(0);
  if ($93) {
   $25 = -1;
   $245 = $25;
   STACKTOP = sp;return ($245|0);
  }
 } else {
  $94 = ((($27)) + 92|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $95 & 8;
  $97 = ($96|0)!=(0);
  if ($97) {
   $98 = ((($27)) + 80|0);
   ;HEAP32[$__state>>2]=HEAP32[$98>>2]|0;HEAP32[$__state+4>>2]=HEAP32[$98+4>>2]|0;
   $__update_st = 0;
   $99 = ((($27)) + 98|0);
   $100 = HEAP8[$99>>0]|0;
   $101 = $100&1;
   do {
    if ($101) {
     $1 = $27;
     $102 = $1;
     $103 = ((($102)) + 16|0);
     $104 = HEAP32[$103>>2]|0;
     $0 = $27;
     $105 = $0;
     $106 = ((($105)) + 12|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = $104;
     $109 = $107;
     $110 = (($108) - ($109))|0;
     $111 = ($110|0)<(0);
     $112 = $111 << 31 >> 31;
     $113 = $__c;
     $114 = $113;
     HEAP32[$114>>2] = $110;
     $115 = (($113) + 4)|0;
     $116 = $115;
     HEAP32[$116>>2] = $112;
    } else {
     $117 = ((($27)) + 68|0);
     $118 = HEAP32[$117>>2]|0;
     $7 = $118;
     $119 = $7;
     $120 = HEAP32[$119>>2]|0;
     $121 = ((($120)) + 24|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = (FUNCTION_TABLE_ii[$122 & 1023]($119)|0);
     $__width = $123;
     $124 = ((($27)) + 40|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = ((($27)) + 36|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = $125;
     $129 = $127;
     $130 = (($128) - ($129))|0;
     $131 = ($130|0)<(0);
     $132 = $131 << 31 >> 31;
     $133 = $__c;
     $134 = $133;
     HEAP32[$134>>2] = $130;
     $135 = (($133) + 4)|0;
     $136 = $135;
     HEAP32[$136>>2] = $132;
     $137 = $__width;
     $138 = ($137|0)>(0);
     if ($138) {
      $139 = $__width;
      $8 = $27;
      $140 = $8;
      $141 = ((($140)) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $9 = $27;
      $143 = $9;
      $144 = ((($143)) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = $142;
      $147 = $145;
      $148 = (($146) - ($147))|0;
      $149 = Math_imul($139, $148)|0;
      $150 = ($149|0)<(0);
      $151 = $150 << 31 >> 31;
      $152 = $__c;
      $153 = $152;
      $154 = HEAP32[$153>>2]|0;
      $155 = (($152) + 4)|0;
      $156 = $155;
      $157 = HEAP32[$156>>2]|0;
      $158 = (_i64Add(($154|0),($157|0),($149|0),($151|0))|0);
      $159 = tempRet0;
      $160 = $__c;
      $161 = $160;
      HEAP32[$161>>2] = $158;
      $162 = (($160) + 4)|0;
      $163 = $162;
      HEAP32[$163>>2] = $159;
      break;
     }
     $10 = $27;
     $164 = $10;
     $165 = ((($164)) + 12|0);
     $166 = HEAP32[$165>>2]|0;
     $11 = $27;
     $167 = $11;
     $168 = ((($167)) + 16|0);
     $169 = HEAP32[$168>>2]|0;
     $170 = ($166|0)!=($169|0);
     if ($170) {
      $171 = ((($27)) + 68|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ((($27)) + 32|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = ((($27)) + 36|0);
      $176 = HEAP32[$175>>2]|0;
      $12 = $27;
      $177 = $12;
      $178 = ((($177)) + 12|0);
      $179 = HEAP32[$178>>2]|0;
      $13 = $27;
      $180 = $13;
      $181 = ((($180)) + 8|0);
      $182 = HEAP32[$181>>2]|0;
      $183 = $179;
      $184 = $182;
      $185 = (($183) - ($184))|0;
      $15 = $172;
      $16 = $__state;
      $17 = $174;
      $18 = $176;
      $19 = $185;
      $186 = $15;
      $187 = HEAP32[$186>>2]|0;
      $188 = ((($187)) + 32|0);
      $189 = HEAP32[$188>>2]|0;
      $190 = $16;
      $191 = $17;
      $192 = $18;
      $193 = $19;
      $194 = (FUNCTION_TABLE_iiiiii[$189 & 511]($186,$190,$191,$192,$193)|0);
      $__off = $194;
      $195 = ((($27)) + 36|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = ((($27)) + 32|0);
      $198 = HEAP32[$197>>2]|0;
      $199 = $196;
      $200 = $198;
      $201 = (($199) - ($200))|0;
      $202 = $__off;
      $203 = (($201) - ($202))|0;
      $204 = ($203|0)<(0);
      $205 = $204 << 31 >> 31;
      $206 = $__c;
      $207 = $206;
      $208 = HEAP32[$207>>2]|0;
      $209 = (($206) + 4)|0;
      $210 = $209;
      $211 = HEAP32[$210>>2]|0;
      $212 = (_i64Add(($208|0),($211|0),($203|0),($205|0))|0);
      $213 = tempRet0;
      $214 = $__c;
      $215 = $214;
      HEAP32[$215>>2] = $212;
      $216 = (($214) + 4)|0;
      $217 = $216;
      HEAP32[$217>>2] = $213;
      $__update_st = 1;
     }
    }
   } while(0);
   $218 = ((($27)) + 64|0);
   $219 = HEAP32[$218>>2]|0;
   $220 = $__c;
   $221 = $220;
   $222 = HEAP32[$221>>2]|0;
   $223 = (($220) + 4)|0;
   $224 = $223;
   $225 = HEAP32[$224>>2]|0;
   $226 = (_i64Subtract(0,0,($222|0),($225|0))|0);
   $227 = tempRet0;
   $228 = (___fseeko($219,$226,1)|0);
   $229 = ($228|0)!=(0);
   if ($229) {
    $25 = -1;
    $245 = $25;
    STACKTOP = sp;return ($245|0);
   }
   $230 = $__update_st;
   $231 = $230&1;
   if ($231) {
    $232 = ((($27)) + 72|0);
    ;HEAP32[$232>>2]=HEAP32[$__state>>2]|0;HEAP32[$232+4>>2]=HEAP32[$__state+4>>2]|0;
   }
   $233 = ((($27)) + 32|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = ((($27)) + 40|0);
   HEAP32[$235>>2] = $234;
   $236 = ((($27)) + 36|0);
   HEAP32[$236>>2] = $234;
   $20 = $27;
   $21 = 0;
   $22 = 0;
   $23 = 0;
   $237 = $20;
   $238 = $21;
   $239 = ((($237)) + 8|0);
   HEAP32[$239>>2] = $238;
   $240 = $22;
   $241 = ((($237)) + 12|0);
   HEAP32[$241>>2] = $240;
   $242 = $23;
   $243 = ((($237)) + 16|0);
   HEAP32[$243>>2] = $242;
   $244 = ((($27)) + 92|0);
   HEAP32[$244>>2] = 0;
  }
 }
 $25 = 0;
 $245 = $25;
 STACKTOP = sp;return ($245|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__1buf = 0, $__c = 0, $__inext = 0, $__initial = 0, $__nmemb = 0, $__nmemb1 = 0, $__nr = 0, $__r = 0, $__unget_sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $20 = sp + 8|0;
 $23 = sp + 327|0;
 $31 = sp;
 $34 = sp + 326|0;
 $__1buf = sp + 324|0;
 $71 = sp + 48|0;
 $72 = sp + 44|0;
 $73 = sp + 28|0;
 $74 = sp + 24|0;
 $__inext = sp + 12|0;
 $70 = $this;
 $75 = $70;
 $76 = ((($75)) + 64|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ($77|0)==(0|0);
 if ($78) {
  $79 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $69 = $79;
  $364 = $69;
  STACKTOP = sp;return ($364|0);
 }
 $80 = (__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($75)|0);
 $81 = $80&1;
 $__initial = $81;
 $68 = $75;
 $82 = $68;
 $83 = ((($82)) + 12|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ($84|0)==(0|0);
 if ($85) {
  $86 = ((($__1buf)) + 1|0);
  $87 = ((($__1buf)) + 1|0);
  $59 = $75;
  $60 = $__1buf;
  $61 = $86;
  $62 = $87;
  $88 = $59;
  $89 = $60;
  $90 = ((($88)) + 8|0);
  HEAP32[$90>>2] = $89;
  $91 = $61;
  $92 = ((($88)) + 12|0);
  HEAP32[$92>>2] = $91;
  $93 = $62;
  $94 = ((($88)) + 16|0);
  HEAP32[$94>>2] = $93;
 }
 $95 = $__initial;
 $96 = $95&1;
 if ($96) {
  $120 = 0;
 } else {
  $57 = $75;
  $97 = $57;
  $98 = ((($97)) + 16|0);
  $99 = HEAP32[$98>>2]|0;
  $48 = $75;
  $100 = $48;
  $101 = ((($100)) + 8|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = $99;
  $104 = $102;
  $105 = (($103) - ($104))|0;
  $106 = (($105|0) / 2)&-1;
  HEAP32[$71>>2] = $106;
  HEAP32[$72>>2] = 4;
  $32 = $71;
  $33 = $72;
  $107 = $32;
  $108 = $33;
  ;HEAP8[$31>>0]=HEAP8[$34>>0]|0;
  $29 = $107;
  $30 = $108;
  $109 = $30;
  $110 = $29;
  $26 = $31;
  $27 = $109;
  $28 = $110;
  $111 = $27;
  $112 = HEAP32[$111>>2]|0;
  $113 = $28;
  $114 = HEAP32[$113>>2]|0;
  $115 = ($112>>>0)<($114>>>0);
  $116 = $30;
  $117 = $29;
  $118 = $115 ? $116 : $117;
  $119 = HEAP32[$118>>2]|0;
  $120 = $119;
 }
 $__unget_sz = $120;
 $121 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $__c = $121;
 $14 = $75;
 $122 = $14;
 $123 = ((($122)) + 12|0);
 $124 = HEAP32[$123>>2]|0;
 $0 = $75;
 $125 = $0;
 $126 = ((($125)) + 16|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = ($124|0)==($127|0);
 do {
  if ($128) {
   $1 = $75;
   $129 = $1;
   $130 = ((($129)) + 8|0);
   $131 = HEAP32[$130>>2]|0;
   $2 = $75;
   $132 = $2;
   $133 = ((($132)) + 16|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = $__unget_sz;
   $136 = (0 - ($135))|0;
   $137 = (($134) + ($136)|0);
   $138 = $__unget_sz;
   $139 = $138;
   _memmove(($131|0),($137|0),($139|0))|0;
   $140 = ((($75)) + 98|0);
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&1;
   if ($142) {
    $3 = $75;
    $143 = $3;
    $144 = ((($143)) + 16|0);
    $145 = HEAP32[$144>>2]|0;
    $4 = $75;
    $146 = $4;
    $147 = ((($146)) + 8|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = $145;
    $150 = $148;
    $151 = (($149) - ($150))|0;
    $152 = $__unget_sz;
    $153 = (($151) - ($152))|0;
    $__nmemb = $153;
    $5 = $75;
    $154 = $5;
    $155 = ((($154)) + 8|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = $__unget_sz;
    $158 = (($156) + ($157)|0);
    $159 = $__nmemb;
    $160 = ((($75)) + 64|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = (_fread($158,1,$159,$161)|0);
    $__nmemb = $162;
    $163 = $__nmemb;
    $164 = ($163|0)!=(0);
    if (!($164)) {
     break;
    }
    $6 = $75;
    $165 = $6;
    $166 = ((($165)) + 8|0);
    $167 = HEAP32[$166>>2]|0;
    $7 = $75;
    $168 = $7;
    $169 = ((($168)) + 8|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = $__unget_sz;
    $172 = (($170) + ($171)|0);
    $8 = $75;
    $173 = $8;
    $174 = ((($173)) + 8|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = $__unget_sz;
    $177 = (($175) + ($176)|0);
    $178 = $__nmemb;
    $179 = (($177) + ($178)|0);
    $9 = $75;
    $10 = $167;
    $11 = $172;
    $12 = $179;
    $180 = $9;
    $181 = $10;
    $182 = ((($180)) + 8|0);
    HEAP32[$182>>2] = $181;
    $183 = $11;
    $184 = ((($180)) + 12|0);
    HEAP32[$184>>2] = $183;
    $185 = $12;
    $186 = ((($180)) + 16|0);
    HEAP32[$186>>2] = $185;
    $13 = $75;
    $187 = $13;
    $188 = ((($187)) + 12|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = HEAP8[$189>>0]|0;
    $191 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($190)|0);
    $__c = $191;
    break;
   }
   $192 = ((($75)) + 32|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = ((($75)) + 36|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = ((($75)) + 40|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = ((($75)) + 36|0);
   $199 = HEAP32[$198>>2]|0;
   $200 = $197;
   $201 = $199;
   $202 = (($200) - ($201))|0;
   _memmove(($193|0),($195|0),($202|0))|0;
   $203 = ((($75)) + 32|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = ((($75)) + 40|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = ((($75)) + 36|0);
   $208 = HEAP32[$207>>2]|0;
   $209 = $206;
   $210 = $208;
   $211 = (($209) - ($210))|0;
   $212 = (($204) + ($211)|0);
   $213 = ((($75)) + 36|0);
   HEAP32[$213>>2] = $212;
   $214 = ((($75)) + 32|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = ((($75)) + 32|0);
   $217 = HEAP32[$216>>2]|0;
   $218 = ((($75)) + 44|0);
   $219 = ($217|0)==($218|0);
   if ($219) {
    $223 = 8;
   } else {
    $220 = ((($75)) + 52|0);
    $221 = HEAP32[$220>>2]|0;
    $223 = $221;
   }
   $222 = (($215) + ($223)|0);
   $224 = ((($75)) + 40|0);
   HEAP32[$224>>2] = $222;
   $225 = ((($75)) + 60|0);
   $226 = HEAP32[$225>>2]|0;
   $227 = $__unget_sz;
   $228 = (($226) - ($227))|0;
   HEAP32[$73>>2] = $228;
   $229 = ((($75)) + 40|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = ((($75)) + 36|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = $230;
   $234 = $232;
   $235 = (($233) - ($234))|0;
   HEAP32[$74>>2] = $235;
   $21 = $73;
   $22 = $74;
   $236 = $21;
   $237 = $22;
   ;HEAP8[$20>>0]=HEAP8[$23>>0]|0;
   $18 = $236;
   $19 = $237;
   $238 = $19;
   $239 = $18;
   $15 = $20;
   $16 = $238;
   $17 = $239;
   $240 = $16;
   $241 = HEAP32[$240>>2]|0;
   $242 = $17;
   $243 = HEAP32[$242>>2]|0;
   $244 = ($241>>>0)<($243>>>0);
   $245 = $19;
   $246 = $18;
   $247 = $244 ? $245 : $246;
   $248 = HEAP32[$247>>2]|0;
   $__nmemb1 = $248;
   $249 = ((($75)) + 80|0);
   $250 = ((($75)) + 72|0);
   ;HEAP32[$249>>2]=HEAP32[$250>>2]|0;HEAP32[$249+4>>2]=HEAP32[$250+4>>2]|0;
   $251 = ((($75)) + 36|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = $__nmemb1;
   $254 = ((($75)) + 64|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = (_fread($252,1,$253,$255)|0);
   $__nr = $256;
   $257 = $__nr;
   $258 = ($257|0)!=(0);
   if ($258) {
    $259 = ((($75)) + 68|0);
    $260 = HEAP32[$259>>2]|0;
    $261 = ($260|0)!=(0|0);
    if (!($261)) {
     $262 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($262);
     ___cxa_throw(($262|0),(288|0),(38|0));
     // unreachable;
    }
    $263 = ((($75)) + 36|0);
    $264 = HEAP32[$263>>2]|0;
    $265 = $__nr;
    $266 = (($264) + ($265)|0);
    $267 = ((($75)) + 40|0);
    HEAP32[$267>>2] = $266;
    $268 = ((($75)) + 68|0);
    $269 = HEAP32[$268>>2]|0;
    $270 = ((($75)) + 72|0);
    $271 = ((($75)) + 32|0);
    $272 = HEAP32[$271>>2]|0;
    $273 = ((($75)) + 40|0);
    $274 = HEAP32[$273>>2]|0;
    $275 = ((($75)) + 36|0);
    $24 = $75;
    $276 = $24;
    $277 = ((($276)) + 8|0);
    $278 = HEAP32[$277>>2]|0;
    $279 = $__unget_sz;
    $280 = (($278) + ($279)|0);
    $25 = $75;
    $281 = $25;
    $282 = ((($281)) + 8|0);
    $283 = HEAP32[$282>>2]|0;
    $284 = ((($75)) + 60|0);
    $285 = HEAP32[$284>>2]|0;
    $286 = (($283) + ($285)|0);
    $35 = $269;
    $36 = $270;
    $37 = $272;
    $38 = $274;
    $39 = $275;
    $40 = $280;
    $41 = $286;
    $42 = $__inext;
    $287 = $35;
    $288 = HEAP32[$287>>2]|0;
    $289 = ((($288)) + 16|0);
    $290 = HEAP32[$289>>2]|0;
    $291 = $36;
    $292 = $37;
    $293 = $38;
    $294 = $39;
    $295 = $40;
    $296 = $41;
    $297 = $42;
    $298 = (FUNCTION_TABLE_iiiiiiiii[$290 & 511]($287,$291,$292,$293,$294,$295,$296,$297)|0);
    $__r = $298;
    $299 = $__r;
    $300 = ($299|0)==(3);
    if ($300) {
     $301 = ((($75)) + 32|0);
     $302 = HEAP32[$301>>2]|0;
     $303 = ((($75)) + 32|0);
     $304 = HEAP32[$303>>2]|0;
     $305 = ((($75)) + 40|0);
     $306 = HEAP32[$305>>2]|0;
     $43 = $75;
     $44 = $302;
     $45 = $304;
     $46 = $306;
     $307 = $43;
     $308 = $44;
     $309 = ((($307)) + 8|0);
     HEAP32[$309>>2] = $308;
     $310 = $45;
     $311 = ((($307)) + 12|0);
     HEAP32[$311>>2] = $310;
     $312 = $46;
     $313 = ((($307)) + 16|0);
     HEAP32[$313>>2] = $312;
     $47 = $75;
     $314 = $47;
     $315 = ((($314)) + 12|0);
     $316 = HEAP32[$315>>2]|0;
     $317 = HEAP8[$316>>0]|0;
     $318 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($317)|0);
     $__c = $318;
     break;
    }
    $319 = HEAP32[$__inext>>2]|0;
    $49 = $75;
    $320 = $49;
    $321 = ((($320)) + 8|0);
    $322 = HEAP32[$321>>2]|0;
    $323 = $__unget_sz;
    $324 = (($322) + ($323)|0);
    $325 = ($319|0)!=($324|0);
    if ($325) {
     $50 = $75;
     $326 = $50;
     $327 = ((($326)) + 8|0);
     $328 = HEAP32[$327>>2]|0;
     $51 = $75;
     $329 = $51;
     $330 = ((($329)) + 8|0);
     $331 = HEAP32[$330>>2]|0;
     $332 = $__unget_sz;
     $333 = (($331) + ($332)|0);
     $334 = HEAP32[$__inext>>2]|0;
     $52 = $75;
     $53 = $328;
     $54 = $333;
     $55 = $334;
     $335 = $52;
     $336 = $53;
     $337 = ((($335)) + 8|0);
     HEAP32[$337>>2] = $336;
     $338 = $54;
     $339 = ((($335)) + 12|0);
     HEAP32[$339>>2] = $338;
     $340 = $55;
     $341 = ((($335)) + 16|0);
     HEAP32[$341>>2] = $340;
     $56 = $75;
     $342 = $56;
     $343 = ((($342)) + 12|0);
     $344 = HEAP32[$343>>2]|0;
     $345 = HEAP8[$344>>0]|0;
     $346 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($345)|0);
     $__c = $346;
    }
   }
  } else {
   $58 = $75;
   $347 = $58;
   $348 = ((($347)) + 12|0);
   $349 = HEAP32[$348>>2]|0;
   $350 = HEAP8[$349>>0]|0;
   $351 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($350)|0);
   $__c = $351;
  }
 } while(0);
 $63 = $75;
 $352 = $63;
 $353 = ((($352)) + 8|0);
 $354 = HEAP32[$353>>2]|0;
 $355 = ($354|0)==($__1buf|0);
 if ($355) {
  $64 = $75;
  $65 = 0;
  $66 = 0;
  $67 = 0;
  $356 = $64;
  $357 = $65;
  $358 = ((($356)) + 8|0);
  HEAP32[$358>>2] = $357;
  $359 = $66;
  $360 = ((($356)) + 12|0);
  HEAP32[$360>>2] = $359;
  $361 = $67;
  $362 = ((($356)) + 16|0);
  HEAP32[$362>>2] = $361;
 }
 $363 = $__c;
 $69 = $363;
 $364 = $69;
 STACKTOP = sp;return ($364|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = $this;
 $10 = $__c;
 $11 = $9;
 $12 = ((($11)) + 64|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 do {
  if ($14) {
   $7 = $11;
   $15 = $7;
   $16 = ((($15)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $6 = $11;
   $18 = $6;
   $19 = ((($18)) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($17>>>0)<($20>>>0);
   if ($21) {
    $22 = $10;
    $23 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
    $24 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($22,$23)|0);
    if ($24) {
     $3 = $11;
     $4 = -1;
     $25 = $3;
     $26 = $4;
     $27 = ((($25)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (($28) + ($26)|0);
     HEAP32[$27>>2] = $29;
     $30 = $10;
     $31 = (__ZNSt3__111char_traitsIcE7not_eofEi($30)|0);
     $8 = $31;
     $56 = $8;
     STACKTOP = sp;return ($56|0);
    }
    $32 = ((($11)) + 88|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $33 & 16;
    $35 = ($34|0)!=(0);
    if (!($35)) {
     $36 = $10;
     $37 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($36)|0);
     $0 = $11;
     $38 = $0;
     $39 = ((($38)) + 12|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ((($40)) + -1|0);
     $42 = HEAP8[$41>>0]|0;
     $43 = (__ZNSt3__111char_traitsIcE2eqEcc($37,$42)|0);
     if (!($43)) {
      break;
     }
    }
    $1 = $11;
    $2 = -1;
    $44 = $1;
    $45 = $2;
    $46 = ((($44)) + 12|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (($47) + ($45)|0);
    HEAP32[$46>>2] = $48;
    $49 = $10;
    $50 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($49)|0);
    $5 = $11;
    $51 = $5;
    $52 = ((($51)) + 12|0);
    $53 = HEAP32[$52>>2]|0;
    HEAP8[$53>>0] = $50;
    $54 = $10;
    $8 = $54;
    $56 = $8;
    STACKTOP = sp;return ($56|0);
   }
  }
 } while(0);
 $55 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $8 = $55;
 $56 = $8;
 STACKTOP = sp;return ($56|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__1buf = 0, $__e = 0, $__epb_save = 0, $__extbe = 0, $__nmemb = 0, $__nmemb1 = 0, $__nmemb2 = 0, $__pb_save = 0, $__r = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__1buf = sp + 200|0;
 $__extbe = sp + 16|0;
 $__e = sp + 8|0;
 $40 = $this;
 $41 = $__c;
 $42 = $40;
 $43 = ((($42)) + 64|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)==(0|0);
 if ($45) {
  $46 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $39 = $46;
  $225 = $39;
  STACKTOP = sp;return ($225|0);
 }
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($42);
 $38 = $42;
 $47 = $38;
 $48 = ((($47)) + 20|0);
 $49 = HEAP32[$48>>2]|0;
 $__pb_save = $49;
 $37 = $42;
 $50 = $37;
 $51 = ((($50)) + 28|0);
 $52 = HEAP32[$51>>2]|0;
 $__epb_save = $52;
 $53 = $41;
 $54 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $55 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($53,$54)|0);
 if (!($55)) {
  $33 = $42;
  $56 = $33;
  $57 = ((($56)) + 24|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ($58|0)==(0|0);
  if ($59) {
   $60 = ((($__1buf)) + 1|0);
   $22 = $42;
   $23 = $__1buf;
   $24 = $60;
   $61 = $22;
   $62 = $23;
   $63 = ((($61)) + 24|0);
   HEAP32[$63>>2] = $62;
   $64 = ((($61)) + 20|0);
   HEAP32[$64>>2] = $62;
   $65 = $24;
   $66 = ((($61)) + 28|0);
   HEAP32[$66>>2] = $65;
  }
  $67 = $41;
  $68 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($67)|0);
  $21 = $42;
  $69 = $21;
  $70 = ((($69)) + 24|0);
  $71 = HEAP32[$70>>2]|0;
  HEAP8[$71>>0] = $68;
  $16 = $42;
  $17 = 1;
  $72 = $16;
  $73 = $17;
  $74 = ((($72)) + 24|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($75) + ($73)|0);
  HEAP32[$74>>2] = $76;
 }
 $6 = $42;
 $77 = $6;
 $78 = ((($77)) + 24|0);
 $79 = HEAP32[$78>>2]|0;
 $3 = $42;
 $80 = $3;
 $81 = ((($80)) + 20|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = ($79|0)!=($82|0);
 if ($83) {
  $84 = ((($42)) + 98|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = $85&1;
  L13: do {
   if ($86) {
    $0 = $42;
    $87 = $0;
    $88 = ((($87)) + 24|0);
    $89 = HEAP32[$88>>2]|0;
    $1 = $42;
    $90 = $1;
    $91 = ((($90)) + 20|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = $89;
    $94 = $92;
    $95 = (($93) - ($94))|0;
    $__nmemb = $95;
    $2 = $42;
    $96 = $2;
    $97 = ((($96)) + 20|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = $__nmemb;
    $100 = ((($42)) + 64|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = (_fwrite($98,1,$99,$101)|0);
    $103 = $__nmemb;
    $104 = ($102|0)!=($103|0);
    if ($104) {
     $105 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $39 = $105;
     $225 = $39;
     STACKTOP = sp;return ($225|0);
    }
   } else {
    $106 = ((($42)) + 32|0);
    $107 = HEAP32[$106>>2]|0;
    HEAP32[$__extbe>>2] = $107;
    while(1) {
     $108 = ((($42)) + 68|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)!=(0|0);
     if (!($110)) {
      label = 13;
      break;
     }
     $112 = ((($42)) + 68|0);
     $113 = HEAP32[$112>>2]|0;
     $114 = ((($42)) + 72|0);
     $4 = $42;
     $115 = $4;
     $116 = ((($115)) + 20|0);
     $117 = HEAP32[$116>>2]|0;
     $5 = $42;
     $118 = $5;
     $119 = ((($118)) + 24|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = ((($42)) + 32|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = ((($42)) + 32|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($42)) + 52|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($124) + ($126)|0);
     $7 = $113;
     $8 = $114;
     $9 = $117;
     $10 = $120;
     $11 = $__e;
     $12 = $122;
     $13 = $127;
     $14 = $__extbe;
     $128 = $7;
     $129 = HEAP32[$128>>2]|0;
     $130 = ((($129)) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = $8;
     $133 = $9;
     $134 = $10;
     $135 = $11;
     $136 = $12;
     $137 = $13;
     $138 = $14;
     $139 = (FUNCTION_TABLE_iiiiiiiii[$131 & 511]($128,$132,$133,$134,$135,$136,$137,$138)|0);
     $__r = $139;
     $140 = HEAP32[$__e>>2]|0;
     $15 = $42;
     $141 = $15;
     $142 = ((($141)) + 20|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($140|0)==($143|0);
     if ($144) {
      label = 15;
      break;
     }
     $146 = $__r;
     $147 = ($146|0)==(3);
     if ($147) {
      $18 = $42;
      $148 = $18;
      $149 = ((($148)) + 24|0);
      $150 = HEAP32[$149>>2]|0;
      $19 = $42;
      $151 = $19;
      $152 = ((($151)) + 20|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = $150;
      $155 = $153;
      $156 = (($154) - ($155))|0;
      $__nmemb1 = $156;
      $20 = $42;
      $157 = $20;
      $158 = ((($157)) + 20|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = $__nmemb1;
      $161 = ((($42)) + 64|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = (_fwrite($159,1,$160,$162)|0);
      $164 = $__nmemb1;
      $165 = ($163|0)!=($164|0);
      if ($165) {
       label = 18;
       break;
      }
     } else {
      $167 = $__r;
      $168 = ($167|0)==(0);
      $169 = $__r;
      $170 = ($169|0)==(1);
      $or$cond = $168 | $170;
      if (!($or$cond)) {
       label = 24;
       break;
      }
      $171 = HEAP32[$__extbe>>2]|0;
      $172 = ((($42)) + 32|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = $171;
      $175 = $173;
      $176 = (($174) - ($175))|0;
      $__nmemb2 = $176;
      $177 = ((($42)) + 32|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = $__nmemb2;
      $180 = ((($42)) + 64|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = (_fwrite($178,1,$179,$181)|0);
      $183 = $__nmemb2;
      $184 = ($182|0)!=($183|0);
      if ($184) {
       label = 21;
       break;
      }
      $186 = $__r;
      $187 = ($186|0)==(1);
      if ($187) {
       $188 = HEAP32[$__e>>2]|0;
       $25 = $42;
       $189 = $25;
       $190 = ((($189)) + 24|0);
       $191 = HEAP32[$190>>2]|0;
       $26 = $42;
       $27 = $188;
       $28 = $191;
       $192 = $26;
       $193 = $27;
       $194 = ((($192)) + 24|0);
       HEAP32[$194>>2] = $193;
       $195 = ((($192)) + 20|0);
       HEAP32[$195>>2] = $193;
       $196 = $28;
       $197 = ((($192)) + 28|0);
       HEAP32[$197>>2] = $196;
       $29 = $42;
       $198 = $29;
       $199 = ((($198)) + 28|0);
       $200 = HEAP32[$199>>2]|0;
       $30 = $42;
       $201 = $30;
       $202 = ((($201)) + 20|0);
       $203 = HEAP32[$202>>2]|0;
       $204 = $200;
       $205 = $203;
       $206 = (($204) - ($205))|0;
       $31 = $42;
       $32 = $206;
       $207 = $31;
       $208 = $32;
       $209 = ((($207)) + 24|0);
       $210 = HEAP32[$209>>2]|0;
       $211 = (($210) + ($208)|0);
       HEAP32[$209>>2] = $211;
      }
     }
     $213 = $__r;
     $214 = ($213|0)==(1);
     if (!($214)) {
      break L13;
     }
    }
    if ((label|0) == 13) {
     $111 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($111);
     ___cxa_throw(($111|0),(288|0),(38|0));
     // unreachable;
    }
    else if ((label|0) == 15) {
     $145 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $39 = $145;
     $225 = $39;
     STACKTOP = sp;return ($225|0);
    }
    else if ((label|0) == 18) {
     $166 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $39 = $166;
     $225 = $39;
     STACKTOP = sp;return ($225|0);
    }
    else if ((label|0) == 21) {
     $185 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $39 = $185;
     $225 = $39;
     STACKTOP = sp;return ($225|0);
    }
    else if ((label|0) == 24) {
     $212 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $39 = $212;
     $225 = $39;
     STACKTOP = sp;return ($225|0);
    }
   }
  } while(0);
  $215 = $__pb_save;
  $216 = $__epb_save;
  $34 = $42;
  $35 = $215;
  $36 = $216;
  $217 = $34;
  $218 = $35;
  $219 = ((($217)) + 24|0);
  HEAP32[$219>>2] = $218;
  $220 = ((($217)) + 20|0);
  HEAP32[$220>>2] = $218;
  $221 = $36;
  $222 = ((($217)) + 28|0);
  HEAP32[$222>>2] = $221;
 }
 $223 = $41;
 $224 = (__ZNSt3__111char_traitsIcE7not_eofEi($223)|0);
 $39 = $224;
 $225 = $39;
 STACKTOP = sp;return ($225|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $13 = $this;
 $14 = $13;
 $15 = ((($14)) + 92|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 & 16;
 $18 = ($17|0)!=(0);
 if ($18) {
  STACKTOP = sp;return;
 }
 $9 = $14;
 $10 = 0;
 $11 = 0;
 $12 = 0;
 $19 = $9;
 $20 = $10;
 $21 = ((($19)) + 8|0);
 HEAP32[$21>>2] = $20;
 $22 = $11;
 $23 = ((($19)) + 12|0);
 HEAP32[$23>>2] = $22;
 $24 = $12;
 $25 = ((($19)) + 16|0);
 HEAP32[$25>>2] = $24;
 $26 = ((($14)) + 52|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27>>>0)>(8);
 do {
  if ($28) {
   $29 = ((($14)) + 98|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&1;
   if ($31) {
    $32 = ((($14)) + 32|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ((($14)) + 32|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ((($14)) + 52|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($37) - 1)|0;
    $39 = (($35) + ($38)|0);
    $0 = $14;
    $1 = $33;
    $2 = $39;
    $40 = $0;
    $41 = $1;
    $42 = ((($40)) + 24|0);
    HEAP32[$42>>2] = $41;
    $43 = ((($40)) + 20|0);
    HEAP32[$43>>2] = $41;
    $44 = $2;
    $45 = ((($40)) + 28|0);
    HEAP32[$45>>2] = $44;
    break;
   } else {
    $46 = ((($14)) + 56|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ((($14)) + 56|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ((($14)) + 60|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (($51) - 1)|0;
    $53 = (($49) + ($52)|0);
    $3 = $14;
    $4 = $47;
    $5 = $53;
    $54 = $3;
    $55 = $4;
    $56 = ((($54)) + 24|0);
    HEAP32[$56>>2] = $55;
    $57 = ((($54)) + 20|0);
    HEAP32[$57>>2] = $55;
    $58 = $5;
    $59 = ((($54)) + 28|0);
    HEAP32[$59>>2] = $58;
    break;
   }
  } else {
   $6 = $14;
   $7 = 0;
   $8 = 0;
   $60 = $6;
   $61 = $7;
   $62 = ((($60)) + 24|0);
   HEAP32[$62>>2] = $61;
   $63 = ((($60)) + 20|0);
   HEAP32[$63>>2] = $61;
   $64 = $8;
   $65 = ((($60)) + 28|0);
   HEAP32[$65>>2] = $64;
  }
 } while(0);
 $66 = ((($14)) + 92|0);
 HEAP32[$66>>2] = 16;
 STACKTOP = sp;return;
}
function __ZNSt3__111char_traitsIcE7not_eofEi($__c) {
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c;
 $1 = $0;
 $2 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $3 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($1,$2)|0);
 if ($3) {
  $4 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $5 = $4 ^ -1;
  $7 = $5;
  STACKTOP = sp;return ($7|0);
 } else {
  $6 = $0;
  $7 = $6;
  STACKTOP = sp;return ($7|0);
 }
 return (0)|0;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($this) {
 $this = $this|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp + 48|0;
 $12 = $this;
 $13 = $12;
 $14 = ((($13)) + 92|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 8;
 $17 = ($16|0)!=(0);
 if ($17) {
  $$expand_i1_val2 = 0;
  HEAP8[$11>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$11>>0]|0;
  $66 = $$pre_trunc&1;
  STACKTOP = sp;return ($66|0);
 }
 $8 = $13;
 $9 = 0;
 $10 = 0;
 $18 = $8;
 $19 = $9;
 $20 = ((($18)) + 24|0);
 HEAP32[$20>>2] = $19;
 $21 = ((($18)) + 20|0);
 HEAP32[$21>>2] = $19;
 $22 = $10;
 $23 = ((($18)) + 28|0);
 HEAP32[$23>>2] = $22;
 $24 = ((($13)) + 98|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&1;
 if ($26) {
  $27 = ((($13)) + 32|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($13)) + 32|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($13)) + 52|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($30) + ($32)|0);
  $34 = ((($13)) + 32|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($13)) + 52|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($35) + ($37)|0);
  $0 = $13;
  $1 = $28;
  $2 = $33;
  $3 = $38;
  $39 = $0;
  $40 = $1;
  $41 = ((($39)) + 8|0);
  HEAP32[$41>>2] = $40;
  $42 = $2;
  $43 = ((($39)) + 12|0);
  HEAP32[$43>>2] = $42;
  $44 = $3;
  $45 = ((($39)) + 16|0);
  HEAP32[$45>>2] = $44;
 } else {
  $46 = ((($13)) + 56|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($13)) + 56|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($13)) + 60|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + ($51)|0);
  $53 = ((($13)) + 56|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ((($13)) + 60|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($54) + ($56)|0);
  $4 = $13;
  $5 = $47;
  $6 = $52;
  $7 = $57;
  $58 = $4;
  $59 = $5;
  $60 = ((($58)) + 8|0);
  HEAP32[$60>>2] = $59;
  $61 = $6;
  $62 = ((($58)) + 12|0);
  HEAP32[$62>>2] = $61;
  $63 = $7;
  $64 = ((($58)) + 16|0);
  HEAP32[$64>>2] = $63;
 }
 $65 = ((($13)) + 92|0);
 HEAP32[$65>>2] = 8;
 $$expand_i1_val = 1;
 HEAP8[$11>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$11>>0]|0;
 $66 = $$pre_trunc&1;
 STACKTOP = sp;return ($66|0);
}
function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($5);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($5);
 STACKTOP = sp;return;
}
function __ZN4MeshC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 108|0;
 $6 = sp + 96|0;
 $13 = sp + 68|0;
 $16 = sp + 56|0;
 $23 = sp + 28|0;
 $26 = sp + 16|0;
 $30 = $this;
 $31 = $30;
 $29 = $31;
 $32 = $29;
 $28 = $32;
 $33 = $28;
 $27 = $33;
 HEAP32[$33>>2] = 0;
 $34 = ((($33)) + 4|0);
 HEAP32[$34>>2] = 0;
 $35 = ((($33)) + 8|0);
 $25 = $35;
 HEAP32[$26>>2] = 0;
 $36 = $25;
 $24 = $26;
 $37 = $24;
 $38 = HEAP32[$37>>2]|0;
 $22 = $36;
 HEAP32[$23>>2] = $38;
 $39 = $22;
 $21 = $39;
 $20 = $23;
 $40 = $20;
 $41 = HEAP32[$40>>2]|0;
 HEAP32[$39>>2] = $41;
 $42 = ((($31)) + 12|0);
 $9 = $42;
 $43 = $9;
 $8 = $43;
 $44 = $8;
 $7 = $44;
 HEAP32[$44>>2] = 0;
 $45 = ((($44)) + 4|0);
 HEAP32[$45>>2] = 0;
 $46 = ((($44)) + 8|0);
 $5 = $46;
 HEAP32[$6>>2] = 0;
 $47 = $5;
 $4 = $6;
 $48 = $4;
 $49 = HEAP32[$48>>2]|0;
 $2 = $47;
 HEAP32[$3>>2] = $49;
 $50 = $2;
 $1 = $50;
 $0 = $3;
 $51 = $0;
 $52 = HEAP32[$51>>2]|0;
 HEAP32[$50>>2] = $52;
 $53 = ((($31)) + 24|0);
 $19 = $53;
 $54 = $19;
 $18 = $54;
 $55 = $18;
 $17 = $55;
 HEAP32[$55>>2] = 0;
 $56 = ((($55)) + 4|0);
 HEAP32[$56>>2] = 0;
 $57 = ((($55)) + 8|0);
 $15 = $57;
 HEAP32[$16>>2] = 0;
 $58 = $15;
 $14 = $16;
 $59 = $14;
 $60 = HEAP32[$59>>2]|0;
 $12 = $58;
 HEAP32[$13>>2] = $60;
 $61 = $12;
 $11 = $61;
 $10 = $13;
 $62 = $10;
 $63 = HEAP32[$62>>2]|0;
 HEAP32[$61>>2] = $63;
 STACKTOP = sp;return;
}
function __ZN6Models3Raw8filenameERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$name) {
 $agg$result = $agg$result|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = $0;
 __ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_($agg$result,13795,$1);
 STACKTOP = sp;return;
}
function __ZN6Models3RawC2ER5StoreRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE($this,$store,$name) {
 $this = $this|0;
 $store = $store|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $file = 0, $i = 0, $i1 = 0, $normal = 0, $v = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $32 = sp + 116|0;
 $35 = sp + 92|0;
 $v = sp + 56|0;
 $normal = sp + 40|0;
 $36 = sp + 28|0;
 $37 = sp + 16|0;
 $29 = $this;
 $30 = $store;
 $31 = $name;
 $38 = $29;
 __ZN5ModelC2Ev($38);
 $39 = ((($38)) + 8|0);
 __ZN4MeshC2Ev($39);
 $40 = 2564;
 HEAP32[$38>>2] = $40;
 $41 = $30;
 $27 = $32;
 $28 = 13809;
 $42 = $27;
 $26 = $42;
 $43 = $26;
 $25 = $43;
 $44 = $25;
 $24 = $44;
 $45 = $28;
 $46 = $28;
 __THREW__ = 0;
 $47 = (invoke_ii(330,($46|0))|0);
 $48 = __THREW__; __THREW__ = 0;
 $49 = $48&1;
 L1: do {
  if (!($49)) {
   __THREW__ = 0;
   invoke_viii(345,($42|0),($45|0),($47|0));
   $50 = __THREW__; __THREW__ = 0;
   $51 = $50&1;
   if (!($51)) {
    __THREW__ = 0;
    $52 = (invoke_iii(346,($41|0),($32|0))|0);
    $53 = __THREW__; __THREW__ = 0;
    $54 = $53&1;
    if (!($54)) {
     __THREW__ = 0;
     $55 = (invoke_iiiiii(347,($52|0),2,(2540|0),2,(2548|0))|0);
     $56 = __THREW__; __THREW__ = 0;
     $57 = $56&1;
     if (!($57)) {
      $58 = ((($38)) + 56|0);
      HEAP32[$58>>2] = $55;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($32);
      $59 = $31;
      __THREW__ = 0;
      invoke_vii(380,($35|0),($59|0));
      $60 = __THREW__; __THREW__ = 0;
      $61 = $60&1;
      if ($61) {
       break;
      }
      $23 = $35;
      $62 = $23;
      $22 = $62;
      $63 = $22;
      $21 = $63;
      $64 = $21;
      $20 = $64;
      $65 = $20;
      $19 = $65;
      $66 = $19;
      $18 = $66;
      $67 = $18;
      $68 = HEAP8[$67>>0]|0;
      $69 = $68&255;
      $70 = $69 & 1;
      $71 = ($70|0)!=(0);
      if ($71) {
       $12 = $64;
       $72 = $12;
       $11 = $72;
       $73 = $11;
       $10 = $73;
       $74 = $10;
       $75 = ((($74)) + 8|0);
       $76 = HEAP32[$75>>2]|0;
       $83 = $76;
      } else {
       $17 = $64;
       $77 = $17;
       $16 = $77;
       $78 = $16;
       $15 = $78;
       $79 = $15;
       $80 = ((($79)) + 1|0);
       $14 = $80;
       $81 = $14;
       $13 = $81;
       $82 = $13;
       $83 = $82;
      }
      $9 = $83;
      $84 = $9;
      __THREW__ = 0;
      $85 = (invoke_iii(344,($84|0),(13816|0))|0);
      $86 = __THREW__; __THREW__ = 0;
      $87 = $86&1;
      if ($87) {
       $119 = ___cxa_find_matching_catch()|0;
       $120 = tempRet0;
       $33 = $119;
       $34 = $120;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($35);
       $202 = ((($38)) + 8|0);
       __ZN4MeshD2Ev($202);
       $203 = $33;
       $204 = $34;
       ___resumeException($203|0);
       // unreachable;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($35);
      $file = $85;
      L16: while(1) {
       $88 = $file;
       __THREW__ = 0;
       $89 = (invoke_ii(381,($88|0))|0);
       $90 = __THREW__; __THREW__ = 0;
       $91 = $90&1;
       if ($91) {
        break L1;
       }
       $92 = ($89|0)!=(0);
       $93 = $92 ^ 1;
       if (!($93)) {
        break;
       }
       $94 = ((($v)) + 36|0);
       $95 = $v;
       while(1) {
        __THREW__ = 0;
        invoke_vi(357,($95|0));
        $96 = __THREW__; __THREW__ = 0;
        $97 = $96&1;
        if ($97) {
         break L1;
        }
        $98 = ((($95)) + 12|0);
        $99 = ($98|0)==($94|0);
        if ($99) {
         break;
        } else {
         $95 = $98;
        }
       }
       $i = 0;
       while(1) {
        $100 = $i;
        $101 = ($100|0)<(3);
        if (!($101)) {
         break;
        }
        $102 = $file;
        $103 = $i;
        $104 = (($v) + (($103*12)|0)|0);
        $105 = $i;
        $106 = (($v) + (($105*12)|0)|0);
        $107 = ((($106)) + 4|0);
        $108 = $i;
        $109 = (($v) + (($108*12)|0)|0);
        $110 = ((($109)) + 8|0);
        __THREW__ = 0;
        HEAP32[$vararg_buffer>>2] = $104;
        $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
        HEAP32[$vararg_ptr1>>2] = $107;
        $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
        HEAP32[$vararg_ptr2>>2] = $110;
        (invoke_iiii(382,($102|0),(13818|0),($vararg_buffer|0))|0);
        $111 = __THREW__; __THREW__ = 0;
        $112 = $111&1;
        if ($112) {
         break L1;
        }
        $113 = $i;
        $114 = (($113) + 1)|0;
        $i = $114;
       }
       $121 = ((($v)) + 12|0);
       __THREW__ = 0;
       invoke_viii(383,($36|0),($v|0),($121|0));
       $122 = __THREW__; __THREW__ = 0;
       $123 = $122&1;
       if ($123) {
        break L1;
       }
       $124 = ((($v)) + 24|0);
       $125 = ((($v)) + 12|0);
       __THREW__ = 0;
       invoke_viii(383,($37|0),($124|0),($125|0));
       $126 = __THREW__; __THREW__ = 0;
       $127 = $126&1;
       if ($127) {
        break L1;
       }
       __THREW__ = 0;
       invoke_viii(384,($normal|0),($36|0),($37|0));
       $128 = __THREW__; __THREW__ = 0;
       $129 = $128&1;
       if ($129) {
        break L1;
       }
       $i1 = 0;
       while(1) {
        $130 = $i1;
        $131 = ($130|0)<(3);
        if (!($131)) {
         continue L16;
        }
        $132 = ((($38)) + 8|0);
        $133 = $i1;
        $134 = (($v) + (($133*12)|0)|0);
        __THREW__ = 0;
        invoke_viii(365,($132|0),($134|0),($normal|0));
        $135 = __THREW__; __THREW__ = 0;
        $136 = $135&1;
        if ($136) {
         break L1;
        }
        $137 = $i1;
        $138 = (($137) + 1)|0;
        $i1 = $138;
       }
      }
      $139 = $file;
      __THREW__ = 0;
      (invoke_ii(379,($139|0))|0);
      $140 = __THREW__; __THREW__ = 0;
      $141 = $140&1;
      if ($141) {
       break;
      }
      $142 = ((($38)) + 8|0);
      $8 = $142;
      $143 = $8;
      $144 = ((($143)) + 4|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = HEAP32[$143>>2]|0;
      $147 = $145;
      $148 = $146;
      $149 = (($147) - ($148))|0;
      $150 = (($149|0) / 12)&-1;
      $151 = ($150*3)|0;
      $152 = $151<<2;
      $153 = ((($38)) + 8|0);
      $7 = $153;
      $154 = $7;
      $155 = HEAP32[$154>>2]|0;
      $6 = $155;
      $156 = $6;
      __THREW__ = 0;
      $157 = (invoke_iiii(368,34962,($152|0),($156|0))|0);
      $158 = __THREW__; __THREW__ = 0;
      $159 = $158&1;
      if ($159) {
       break;
      }
      $160 = ((($38)) + 44|0);
      HEAP32[$160>>2] = $157;
      $161 = ((($38)) + 8|0);
      $162 = ((($161)) + 12|0);
      $0 = $162;
      $163 = $0;
      $164 = ((($163)) + 4|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = HEAP32[$163>>2]|0;
      $167 = $165;
      $168 = $166;
      $169 = (($167) - ($168))|0;
      $170 = (($169|0) / 12)&-1;
      $171 = ($170*3)|0;
      $172 = $171<<2;
      $173 = ((($38)) + 8|0);
      $174 = ((($173)) + 12|0);
      $2 = $174;
      $175 = $2;
      $176 = HEAP32[$175>>2]|0;
      $1 = $176;
      $177 = $1;
      __THREW__ = 0;
      $178 = (invoke_iiii(368,34962,($172|0),($177|0))|0);
      $179 = __THREW__; __THREW__ = 0;
      $180 = $179&1;
      if ($180) {
       break;
      }
      $181 = ((($38)) + 48|0);
      HEAP32[$181>>2] = $178;
      $182 = ((($38)) + 8|0);
      $183 = ((($182)) + 24|0);
      $3 = $183;
      $184 = $3;
      $185 = ((($184)) + 4|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = HEAP32[$184>>2]|0;
      $188 = $186;
      $189 = $187;
      $190 = (($188) - ($189))|0;
      $191 = (($190|0) / 2)&-1;
      $192 = $191<<1;
      $193 = ((($38)) + 8|0);
      $194 = ((($193)) + 24|0);
      $5 = $194;
      $195 = $5;
      $196 = HEAP32[$195>>2]|0;
      $4 = $196;
      $197 = $4;
      __THREW__ = 0;
      $198 = (invoke_iiii(368,34963,($192|0),($197|0))|0);
      $199 = __THREW__; __THREW__ = 0;
      $200 = $199&1;
      if ($200) {
       break;
      }
      $201 = ((($38)) + 52|0);
      HEAP32[$201>>2] = $198;
      STACKTOP = sp;return;
     }
    }
    $117 = ___cxa_find_matching_catch()|0;
    $118 = tempRet0;
    $33 = $117;
    $34 = $118;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($32);
    $202 = ((($38)) + 8|0);
    __ZN4MeshD2Ev($202);
    $203 = $33;
    $204 = $34;
    ___resumeException($203|0);
    // unreachable;
   }
  }
 } while(0);
 $115 = ___cxa_find_matching_catch()|0;
 $116 = tempRet0;
 $33 = $115;
 $34 = $116;
 $202 = ((($38)) + 8|0);
 __ZN4MeshD2Ev($202);
 $203 = $33;
 $204 = $34;
 ___resumeException($203|0);
 // unreachable;
}
function __ZNK6Models3Raw4drawERK5SceneRKN3glm7tmat4x4IfLNS4_9precisionE0EEES9_($this,$scene,$mvp,$transformation) {
 $this = $this|0;
 $scene = $scene|0;
 $mvp = $mvp|0;
 $transformation = $transformation|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $local_modelview = 0, $transform = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $transform = sp + 112|0;
 $local_modelview = sp + 72|0;
 $5 = sp + 36|0;
 $6 = sp;
 $1 = $this;
 $2 = $scene;
 $3 = $mvp;
 $4 = $transformation;
 $7 = $1;
 $8 = ((($7)) + 56|0);
 $9 = HEAP32[$8>>2]|0;
 __ZNK10Executable3useEv($9);
 $10 = $3;
 $11 = $4;
 __ZN3glmmlIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_S6_($transform,$10,$11);
 $12 = ((($7)) + 56|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (__ZNK10Executable7uniformEj($13,0)|0);
 $15 = (__ZN3glm9value_ptrIfLNS_9precisionE0EEEPKT_RKNS_7tmat4x4IS2_XT0_EEE($transform)|0);
 _glUniformMatrix4fv(($14|0),1,0,($15|0));
 $16 = $4;
 __ZN3glm7tmat3x3IfLNS_9precisionE0EEC2ERKNS_7tmat4x4IfLS1_0EEE($6,$16);
 __ZN3glm7inverseIfLNS_9precisionE0ENS_7tmat3x3EEET1_IT_XT0_EERKS5_($5,$6);
 __ZN3glm9transposeIfLNS_9precisionE0ENS_7tmat3x3EEENT1_IT_XT0_EE14transpose_typeERKS5_($local_modelview,$5);
 $17 = ((($7)) + 56|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (__ZNK10Executable7uniformEj($18,1)|0);
 $20 = (__ZN3glm9value_ptrIfLNS_9precisionE0EEEPKT_RKNS_7tmat3x3IS2_XT0_EEE($local_modelview)|0);
 _glUniformMatrix3fv(($19|0),1,0,($20|0));
 _glEnableVertexAttribArray(0);
 $21 = ((($7)) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 _glBindBuffer(34962,($22|0));
 _glVertexAttribPointer(0,3,5126,0,0,(0|0));
 _glEnableVertexAttribArray(1);
 $23 = ((($7)) + 48|0);
 $24 = HEAP32[$23>>2]|0;
 _glBindBuffer(34962,($24|0));
 _glVertexAttribPointer(1,3,5126,0,0,(0|0));
 $25 = ((($7)) + 52|0);
 $26 = HEAP32[$25>>2]|0;
 _glBindBuffer(34963,($26|0));
 $27 = ((($7)) + 8|0);
 $28 = ((($27)) + 24|0);
 $0 = $28;
 $29 = $0;
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[$29>>2]|0;
 $33 = $31;
 $34 = $32;
 $35 = (($33) - ($34))|0;
 $36 = (($35|0) / 2)&-1;
 _glDrawElements(4,($36|0),5123,(0|0));
 STACKTOP = sp;return;
}
function __ZN3glmmiIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_S6_($agg$result,$v1,$v2) {
 $agg$result = $agg$result|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $0 = $v1;
 $1 = $v2;
 $5 = $0;
 $6 = +HEAPF32[$5>>2];
 $7 = $1;
 $8 = +HEAPF32[$7>>2];
 $9 = $6 - $8;
 HEAPF32[$2>>2] = $9;
 $10 = $0;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $1;
 $14 = ((($13)) + 4|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $12 - $15;
 HEAPF32[$3>>2] = $16;
 $17 = $0;
 $18 = ((($17)) + 8|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $1;
 $21 = ((($20)) + 8|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $19 - $22;
 HEAPF32[$4>>2] = $23;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($agg$result,$2,$3,$4);
 STACKTOP = sp;return;
}
function __ZN5Model19create_array_bufferEjiPKv($type,$size,$data) {
 $type = $type|0;
 $size = $size|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $id = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $id = sp;
 $0 = $type;
 $1 = $size;
 $2 = $data;
 _glGenBuffers(1,($id|0));
 $3 = $0;
 $4 = HEAP32[$id>>2]|0;
 _glBindBuffer(($3|0),($4|0));
 $5 = $0;
 $6 = $1;
 $7 = $2;
 _glBufferData(($5|0),($6|0),($7|0),35044);
 $8 = HEAP32[$id>>2]|0;
 STACKTOP = sp;return ($8|0);
}
function __ZN4Mesh3addERKN3glm5tvec3IfLNS0_9precisionE0EEES5_($this,$position,$normal) {
 $this = $this|0;
 $position = $position|0;
 $normal = $normal|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__annotator$i = 0, $__annotator$i$1 = 0, $__annotator$i$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 16|0;
 $13 = sp + 303|0;
 $__annotator$i$2 = sp + 302|0;
 $32 = sp + 8|0;
 $37 = sp + 301|0;
 $__annotator$i$1 = sp + 300|0;
 $56 = sp;
 $61 = sp + 299|0;
 $__annotator$i = sp + 298|0;
 $75 = sp + 296|0;
 $72 = $this;
 $73 = $position;
 $74 = $normal;
 $76 = $72;
 $77 = ((($76)) + 24|0);
 $71 = $76;
 $78 = $71;
 $79 = ((($78)) + 4|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = HEAP32[$78>>2]|0;
 $82 = $80;
 $83 = $81;
 $84 = (($82) - ($83))|0;
 $85 = (($84|0) / 12)&-1;
 $86 = $85&65535;
 HEAP16[$75>>1] = $86;
 $46 = $77;
 $47 = $75;
 $87 = $46;
 $88 = ((($87)) + 4|0);
 $89 = HEAP32[$88>>2]|0;
 $45 = $87;
 $90 = $45;
 $91 = ((($90)) + 8|0);
 $44 = $91;
 $92 = $44;
 $43 = $92;
 $93 = $43;
 $94 = HEAP32[$93>>2]|0;
 $95 = ($89>>>0)<($94>>>0);
 if ($95) {
  __ZNSt3__16vectorItNS_9allocatorItEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator$i$1,$87,1);
  $42 = $87;
  $96 = $42;
  $97 = ((($96)) + 8|0);
  $41 = $97;
  $98 = $41;
  $40 = $98;
  $99 = $40;
  $100 = ((($87)) + 4|0);
  $101 = HEAP32[$100>>2]|0;
  $38 = $101;
  $102 = $38;
  $103 = $47;
  $23 = $103;
  $104 = $23;
  $34 = $99;
  $35 = $102;
  $36 = $104;
  $105 = $34;
  $106 = $35;
  $107 = $36;
  $33 = $107;
  $108 = $33;
  ;HEAP8[$32>>0]=HEAP8[$37>>0]|0;
  $29 = $105;
  $30 = $106;
  $31 = $108;
  $109 = $29;
  $110 = $30;
  $111 = $31;
  $28 = $111;
  $112 = $28;
  $25 = $109;
  $26 = $110;
  $27 = $112;
  $113 = $26;
  $114 = $27;
  $24 = $114;
  $115 = $24;
  $116 = HEAP16[$115>>1]|0;
  HEAP16[$113>>1] = $116;
  __ZNSt3__16vectorItNS_9allocatorItEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i$1);
  $117 = ((($87)) + 4|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ((($118)) + 2|0);
  HEAP32[$117>>2] = $119;
 } else {
  $120 = $47;
  $39 = $120;
  $121 = $39;
  __ZNSt3__16vectorItNS_9allocatorItEEE21__push_back_slow_pathItEEvOT_($87,$121);
 }
 $122 = $73;
 $21 = $76;
 $22 = $122;
 $123 = $21;
 $124 = ((($123)) + 4|0);
 $125 = HEAP32[$124>>2]|0;
 $20 = $123;
 $126 = $20;
 $127 = ((($126)) + 8|0);
 $19 = $127;
 $128 = $19;
 $18 = $128;
 $129 = $18;
 $130 = HEAP32[$129>>2]|0;
 $131 = ($125|0)!=($130|0);
 if ($131) {
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i$2,$123,1);
  $17 = $123;
  $132 = $17;
  $133 = ((($132)) + 8|0);
  $16 = $133;
  $134 = $16;
  $15 = $134;
  $135 = $15;
  $136 = ((($123)) + 4|0);
  $137 = HEAP32[$136>>2]|0;
  $14 = $137;
  $138 = $14;
  $139 = $22;
  $10 = $135;
  $11 = $138;
  $12 = $139;
  $140 = $10;
  $141 = $11;
  $142 = $12;
  $9 = $142;
  $143 = $9;
  ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
  $5 = $140;
  $6 = $141;
  $7 = $143;
  $144 = $5;
  $145 = $6;
  $146 = $7;
  $4 = $146;
  $147 = $4;
  $1 = $144;
  $2 = $145;
  $3 = $147;
  $148 = $2;
  $149 = $3;
  $0 = $149;
  $150 = $0;
  ;HEAP32[$148>>2]=HEAP32[$150>>2]|0;HEAP32[$148+4>>2]=HEAP32[$150+4>>2]|0;HEAP32[$148+8>>2]=HEAP32[$150+8>>2]|0;
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i$2);
  $151 = ((($123)) + 4|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = ((($152)) + 12|0);
  HEAP32[$151>>2] = $153;
 } else {
  $154 = $22;
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_($123,$154);
 }
 $155 = ((($76)) + 12|0);
 $156 = $74;
 $69 = $155;
 $70 = $156;
 $157 = $69;
 $158 = ((($157)) + 4|0);
 $159 = HEAP32[$158>>2]|0;
 $68 = $157;
 $160 = $68;
 $161 = ((($160)) + 8|0);
 $67 = $161;
 $162 = $67;
 $66 = $162;
 $163 = $66;
 $164 = HEAP32[$163>>2]|0;
 $165 = ($159|0)!=($164|0);
 if ($165) {
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i,$157,1);
  $65 = $157;
  $166 = $65;
  $167 = ((($166)) + 8|0);
  $64 = $167;
  $168 = $64;
  $63 = $168;
  $169 = $63;
  $170 = ((($157)) + 4|0);
  $171 = HEAP32[$170>>2]|0;
  $62 = $171;
  $172 = $62;
  $173 = $70;
  $58 = $169;
  $59 = $172;
  $60 = $173;
  $174 = $58;
  $175 = $59;
  $176 = $60;
  $57 = $176;
  $177 = $57;
  ;HEAP8[$56>>0]=HEAP8[$61>>0]|0;
  $53 = $174;
  $54 = $175;
  $55 = $177;
  $178 = $53;
  $179 = $54;
  $180 = $55;
  $52 = $180;
  $181 = $52;
  $49 = $178;
  $50 = $179;
  $51 = $181;
  $182 = $50;
  $183 = $51;
  $48 = $183;
  $184 = $48;
  ;HEAP32[$182>>2]=HEAP32[$184>>2]|0;HEAP32[$182+4>>2]=HEAP32[$184+4>>2]|0;HEAP32[$182+8>>2]=HEAP32[$184+8>>2]|0;
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
  $185 = ((($157)) + 4|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = ((($186)) + 12|0);
  HEAP32[$185>>2] = $187;
  STACKTOP = sp;return;
 } else {
  $188 = $70;
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_($157,$188);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorItNS_9allocatorItEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorItNS_9allocatorItEEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorItNS_9allocatorItEEE21__push_back_slow_pathItEEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = ((($44)) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 2)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorItNS_9allocatorItEEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
  // unreachable;
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = ((($64)) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 2)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22>>0]=HEAP8[$25>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  $90 = $21;
  $91 = $20;
  $92 = $89 ? $90 : $91;
  $93 = HEAP32[$92>>2]|0;
  $31 = $93;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 2)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferItRNS_9allocatorItEEEC2EjjS3_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = ((($__v)) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = $3;
 $0 = $119;
 $120 = $0;
 $121 = HEAP16[$120>>1]|0;
 HEAP16[$118>>1] = $121;
 $122 = ((($__v)) + 8|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = ((($123)) + 2|0);
 HEAP32[$122>>2] = $124;
 __THREW__ = 0;
 invoke_vii(385,($43|0),($__v|0));
 $125 = __THREW__; __THREW__ = 0;
 $126 = $125&1;
 if ($126) {
  $127 = ___cxa_find_matching_catch()|0;
  $128 = tempRet0;
  $41 = $127;
  $42 = $128;
  __ZNSt3__114__split_bufferItRNS_9allocatorItEEED2Ev($__v);
  $129 = $41;
  $130 = $42;
  ___resumeException($129|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferItRNS_9allocatorItEEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__16vectorItNS_9allocatorItEEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 2147483647;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferItRNS_9allocatorItEEEC2EjjS3_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<1;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<1)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<1)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorItNS_9allocatorItEEE26__swap_out_circular_bufferERNS_14__split_bufferItRS2_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i$1 = 0, $__t$i$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i$2 = sp + 120|0;
 $__t$i$1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorItNS_9allocatorItEEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 2)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<1)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<1;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i$2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i$2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i$1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i$1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 2)&-1;
 __ZNKSt3__16vectorItNS_9allocatorItEEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferItRNS_9allocatorItEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -2|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 2)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorItNS_9allocatorItEEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 2)&-1;
 $39 = (($26) + ($38<<1)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 2)&-1;
 $51 = (($42) + ($50<<1)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 2)&-1;
 $67 = (($54) + ($66<<1)|0);
 __ZNKSt3__16vectorItNS_9allocatorItEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorItNS_9allocatorItEEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 2)&-1;
 $39 = (($26) + ($38<<1)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 2)&-1;
 $55 = (($42) + ($54<<1)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<1)|0);
 __ZNKSt3__16vectorItNS_9allocatorItEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorItNS_9allocatorItEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZN12TexturedMesh3addERKN3glm5tvec3IfLNS0_9precisionE0EEES5_RKNS0_5tvec2IfLS2_0EEE($this,$position,$normal,$tex_coord) {
 $this = $this|0;
 $position = $position|0;
 $normal = $normal|0;
 $tex_coord = $tex_coord|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $__annotator$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $13 = sp + 105|0;
 $__annotator$i = sp + 104|0;
 $23 = $this;
 $24 = $position;
 $25 = $normal;
 $26 = $tex_coord;
 $27 = $23;
 $28 = $24;
 $29 = $25;
 __ZN4Mesh3addERKN3glm5tvec3IfLNS0_9precisionE0EEES5_($27,$28,$29);
 $30 = ((($27)) + 36|0);
 $31 = $26;
 $21 = $30;
 $22 = $31;
 $32 = $21;
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $20 = $32;
 $35 = $20;
 $36 = ((($35)) + 8|0);
 $19 = $36;
 $37 = $19;
 $18 = $37;
 $38 = $18;
 $39 = HEAP32[$38>>2]|0;
 $40 = ($34|0)!=($39|0);
 if ($40) {
  __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i,$32,1);
  $17 = $32;
  $41 = $17;
  $42 = ((($41)) + 8|0);
  $16 = $42;
  $43 = $16;
  $15 = $43;
  $44 = $15;
  $45 = ((($32)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $14 = $46;
  $47 = $14;
  $48 = $22;
  $10 = $44;
  $11 = $47;
  $12 = $48;
  $49 = $10;
  $50 = $11;
  $51 = $12;
  $9 = $51;
  $52 = $9;
  ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
  $5 = $49;
  $6 = $50;
  $7 = $52;
  $53 = $5;
  $54 = $6;
  $55 = $7;
  $4 = $55;
  $56 = $4;
  $1 = $53;
  $2 = $54;
  $3 = $56;
  $57 = $2;
  $58 = $3;
  $0 = $58;
  $59 = $0;
  ;HEAP32[$57>>2]=HEAP32[$59>>2]|0;HEAP32[$57+4>>2]=HEAP32[$59+4>>2]|0;
  __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
  $60 = ((($32)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + 8|0);
  HEAP32[$60>>2] = $62;
  STACKTOP = sp;return;
 } else {
  $63 = $22;
  __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_($32,$63);
  STACKTOP = sp;return;
 }
}
function __ZN6Mtllib8filenameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($agg$result,$name) {
 $agg$result = $agg$result|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = $0;
 __ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_($agg$result,13856,$1);
 STACKTOP = sp;return;
}
function __ZN6MtllibC2ER5StoreRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($this,$store,$name) {
 $this = $this|0;
 $store = $store|0;
 $name = $name|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i = 0, $__i$i$i = 0, $eh$lpad$body2$index2Z2D = 0, $eh$lpad$body2$indexZ2D = 0, $file = 0, $line = 0, $material = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 688|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $46 = sp + 496|0;
 $93 = sp;
 $95 = sp + 678|0;
 $96 = sp + 677|0;
 $file = sp + 100|0;
 $100 = sp + 88|0;
 $line = sp + 64|0;
 $103 = sp + 52|0;
 $104 = sp + 676|0;
 $105 = sp + 40|0;
 $106 = sp + 28|0;
 $107 = sp + 16|0;
 $108 = sp + 4|0;
 $97 = $this;
 $98 = $store;
 $99 = $name;
 $109 = $97;
 __ZN8ResourceC2Ev($109);
 $110 = ((($109)) + 4|0);
 $94 = $110;
 $111 = $94;
 ;HEAP8[$93>>0]=HEAP8[$96>>0]|0;
 $92 = $95;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPK8MaterialEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEEC2ERKSF_($111,$95);
 $112 = $99;
 __THREW__ = 0;
 invoke_vii(386,($100|0),($112|0));
 $113 = __THREW__; __THREW__ = 0;
 $114 = $113&1;
 if ($114) {
  $284 = ___cxa_find_matching_catch()|0;
  $285 = tempRet0;
  $101 = $284;
  $102 = $285;
  __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPK8MaterialNS_4lessIS6_EENS4_INS_4pairIKS6_S9_EEEEED2Ev($110);
  $345 = $101;
  $346 = $102;
  ___resumeException($345|0);
  // unreachable;
 }
 $87 = $file;
 $88 = $100;
 $89 = 8;
 $115 = $87;
 $116 = ((($115)) + 108|0);
 $86 = $116;
 $117 = $86;
 $85 = $117;
 $118 = $85;
 $119 = 7436;
 HEAP32[$118>>2] = $119;
 $120 = 7336;
 HEAP32[$117>>2] = $120;
 $121 = 2380;
 HEAP32[$115>>2] = $121;
 $122 = ((($115)) + 108|0);
 $123 = 2400;
 HEAP32[$122>>2] = $123;
 $124 = ((($115)) + 8|0);
 $82 = $115;
 $125 = 2412;
 $83 = $125;
 $84 = $124;
 $126 = $82;
 $127 = $83;
 $128 = HEAP32[$127>>2]|0;
 HEAP32[$126>>2] = $128;
 $129 = ((($127)) + 4|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = HEAP32[$126>>2]|0;
 $132 = ((($131)) + -12|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = (($126) + ($133)|0);
 HEAP32[$134>>2] = $130;
 $135 = ((($126)) + 4|0);
 HEAP32[$135>>2] = 0;
 $136 = HEAP32[$126>>2]|0;
 $137 = ((($136)) + -12|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = (($126) + ($138)|0);
 $140 = $84;
 $80 = $139;
 $81 = $140;
 $141 = $80;
 $142 = $81;
 __THREW__ = 0;
 invoke_vii(349,($141|0),($142|0));
 $143 = __THREW__; __THREW__ = 0;
 $144 = $143&1;
 if ($144) {
  $201 = ___cxa_find_matching_catch()|0;
  $202 = tempRet0;
  $90 = $201;
  $91 = $202;
 } else {
  $145 = ((($141)) + 72|0);
  HEAP32[$145>>2] = 0;
  $146 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $147 = ((($141)) + 76|0);
  HEAP32[$147>>2] = $146;
  $148 = 2380;
  HEAP32[$115>>2] = $148;
  $149 = ((($115)) + 108|0);
  $150 = 2400;
  HEAP32[$149>>2] = $150;
  $151 = ((($115)) + 8|0);
  __THREW__ = 0;
  invoke_vi(350,($151|0));
  $152 = __THREW__; __THREW__ = 0;
  $153 = $152&1;
  if ($153) {
   $203 = ___cxa_find_matching_catch()|0;
   $204 = tempRet0;
   $90 = $203;
   $91 = $204;
  } else {
   $154 = ((($115)) + 8|0);
   $155 = $88;
   $156 = $89;
   $157 = $156 | 8;
   $77 = $154;
   $78 = $155;
   $79 = $157;
   $158 = $77;
   $159 = $78;
   $76 = $159;
   $160 = $76;
   $75 = $160;
   $161 = $75;
   $74 = $161;
   $162 = $74;
   $73 = $162;
   $163 = $73;
   $72 = $163;
   $164 = $72;
   $71 = $164;
   $165 = $71;
   $166 = HEAP8[$165>>0]|0;
   $167 = $166&255;
   $168 = $167 & 1;
   $169 = ($168|0)!=(0);
   if ($169) {
    $65 = $162;
    $170 = $65;
    $64 = $170;
    $171 = $64;
    $63 = $171;
    $172 = $63;
    $173 = ((($172)) + 8|0);
    $174 = HEAP32[$173>>2]|0;
    $181 = $174;
   } else {
    $70 = $162;
    $175 = $70;
    $69 = $175;
    $176 = $69;
    $68 = $176;
    $177 = $68;
    $178 = ((($177)) + 1|0);
    $67 = $178;
    $179 = $67;
    $66 = $179;
    $180 = $66;
    $181 = $180;
   }
   $62 = $181;
   $182 = $62;
   $183 = $79;
   __THREW__ = 0;
   $184 = (invoke_iiii(351,($158|0),($182|0),($183|0))|0);
   $185 = __THREW__; __THREW__ = 0;
   $186 = $185&1;
   do {
    if (!($186)) {
     $187 = ($184|0)==(0|0);
     if ($187) {
      $188 = HEAP32[$115>>2]|0;
      $189 = ((($188)) + -12|0);
      $190 = HEAP32[$189>>2]|0;
      $191 = (($115) + ($190)|0);
      $60 = $191;
      $61 = 4;
      $192 = $60;
      $193 = $61;
      $58 = $192;
      $59 = $193;
      $194 = $58;
      $195 = ((($194)) + 16|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = $59;
      $198 = $196 | $197;
      __THREW__ = 0;
      invoke_vii(352,($194|0),($198|0));
      $199 = __THREW__; __THREW__ = 0;
      $200 = $199&1;
      if ($200) {
       break;
      }
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($100);
     $material = 0;
     $57 = $line;
     $210 = $57;
     $56 = $210;
     $211 = $56;
     $55 = $211;
     $212 = $55;
     $54 = $212;
     $53 = $210;
     $213 = $53;
     $52 = $213;
     $214 = $52;
     $51 = $214;
     $215 = $51;
     $__a$i$i = $215;
     $__i$i$i = 0;
     while(1) {
      $216 = $__i$i$i;
      $217 = ($216>>>0)<(3);
      if (!($217)) {
       break;
      }
      $218 = $__i$i$i;
      $219 = $__a$i$i;
      $220 = (($219) + ($218<<2)|0);
      HEAP32[$220>>2] = 0;
      $221 = $__i$i$i;
      $222 = (($221) + 1)|0;
      $__i$i$i = $222;
     }
     while(1) {
      $49 = $file;
      $50 = $line;
      $223 = $49;
      $224 = $50;
      $225 = $49;
      $226 = HEAP32[$225>>2]|0;
      $227 = ((($226)) + -12|0);
      $228 = HEAP32[$227>>2]|0;
      $229 = (($225) + ($228)|0);
      $44 = $229;
      $45 = 10;
      $230 = $44;
      __THREW__ = 0;
      $231 = (invoke_ii(353,($230|0))|0);
      $232 = __THREW__; __THREW__ = 0;
      $233 = $232&1;
      if ($233) {
       label = 31;
       break;
      }
      HEAP32[$46>>2] = $231;
      $43 = $46;
      $234 = $43;
      __THREW__ = 0;
      $235 = (invoke_iii(354,($234|0),(8588|0))|0);
      $236 = __THREW__; __THREW__ = 0;
      $237 = $236&1;
      if ($237) {
       label = 21;
       break;
      }
      $238 = $45;
      $41 = $235;
      $42 = $238;
      $239 = $41;
      $240 = HEAP32[$239>>2]|0;
      $241 = ((($240)) + 28|0);
      $242 = HEAP32[$241>>2]|0;
      $243 = $42;
      __THREW__ = 0;
      $244 = (invoke_iii($242|0,($239|0),($243|0))|0);
      $245 = __THREW__; __THREW__ = 0;
      $246 = $245&1;
      if ($246) {
       label = 21;
       break;
      }
      __ZNSt3__16localeD2Ev($46);
      __THREW__ = 0;
      $251 = (invoke_iiii(355,($223|0),($224|0),($244|0))|0);
      $252 = __THREW__; __THREW__ = 0;
      $253 = $252&1;
      if ($253) {
       label = 31;
       break;
      }
      $254 = HEAP32[$251>>2]|0;
      $255 = ((($254)) + -12|0);
      $256 = HEAP32[$255>>2]|0;
      $257 = (($251) + ($256)|0);
      $40 = $257;
      $258 = $40;
      $39 = $258;
      $259 = $39;
      $38 = $259;
      $260 = $38;
      $261 = ((($260)) + 16|0);
      $262 = HEAP32[$261>>2]|0;
      $263 = $262 & 5;
      $264 = ($263|0)!=(0);
      $265 = $264 ^ 1;
      if (!($265)) {
       label = 46;
       break;
      }
      $266 = $material;
      $267 = ($266|0)!=(0|0);
      $$expand_i1_val = 0;
      HEAP8[$104>>0] = $$expand_i1_val;
      if ($267) {
       $347 = 0;
      } else {
       $35 = $line;
       $36 = 0;
       $37 = 7;
       $268 = $35;
       $269 = $36;
       $270 = $37;
       $34 = $268;
       $271 = $34;
       $33 = $271;
       $272 = $33;
       $32 = $272;
       $273 = $32;
       __THREW__ = 0;
       invoke_viiiii(356,($103|0),($268|0),($269|0),($270|0),($273|0));
       $274 = __THREW__; __THREW__ = 0;
       $275 = $274&1;
       if ($275) {
        label = 31;
        break;
       }
       $$expand_i1_val7 = 1;
       HEAP8[$104>>0] = $$expand_i1_val7;
       $30 = $103;
       $31 = 13873;
       $276 = $30;
       $277 = $31;
       $28 = $276;
       $29 = $277;
       $278 = $28;
       $279 = $29;
       $280 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($278,$279)|0);
       $281 = ($280|0)==(0);
       $282 = $281 ^ 1;
       $347 = $282;
      }
      $$pre_trunc = HEAP8[$104>>0]|0;
      $283 = $$pre_trunc&1;
      if ($283) {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($103);
      }
      if ($347) {
       continue;
      }
      $25 = $line;
      $26 = 0;
      $27 = 7;
      $288 = $25;
      $289 = $26;
      $290 = $27;
      $24 = $288;
      $291 = $24;
      $23 = $291;
      $292 = $23;
      $22 = $292;
      $293 = $22;
      __THREW__ = 0;
      invoke_viiiii(356,($105|0),($288|0),($289|0),($290|0),($293|0));
      $294 = __THREW__; __THREW__ = 0;
      $295 = $294&1;
      if ($295) {
       label = 31;
       break;
      }
      $20 = $105;
      $21 = 13873;
      $296 = $20;
      $297 = $21;
      $298 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($296,$297)|0);
      $299 = ($298|0)==(0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($105);
      if ($299) {
       __THREW__ = 0;
       $300 = (invoke_ii(387,4)|0);
       $301 = __THREW__; __THREW__ = 0;
       $302 = $301&1;
       if ($302) {
        label = 31;
        break;
       }
       ;HEAP32[$300>>2]=0|0;
       $material = $300;
       $303 = $material;
       $304 = ((($109)) + 4|0);
       $17 = $line;
       $18 = 7;
       $19 = -1;
       $305 = $17;
       $306 = $18;
       $307 = $19;
       $16 = $305;
       $308 = $16;
       $15 = $308;
       $309 = $15;
       $14 = $309;
       $310 = $14;
       __THREW__ = 0;
       invoke_viiiii(356,($106|0),($305|0),($306|0),($307|0),($310|0));
       $311 = __THREW__; __THREW__ = 0;
       $312 = $311&1;
       if ($312) {
        label = 31;
        break;
       }
       __THREW__ = 0;
       $313 = (invoke_iii(388,($304|0),($106|0))|0);
       $314 = __THREW__; __THREW__ = 0;
       $315 = $314&1;
       if ($315) {
        label = 39;
        break;
       }
       HEAP32[$313>>2] = $303;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($106);
       continue;
      }
      $11 = $line;
      $12 = 0;
      $13 = 7;
      $318 = $11;
      $319 = $12;
      $320 = $13;
      $10 = $318;
      $321 = $10;
      $9 = $321;
      $322 = $9;
      $8 = $322;
      $323 = $8;
      __THREW__ = 0;
      invoke_viiiii(356,($107|0),($318|0),($319|0),($320|0),($323|0));
      $324 = __THREW__; __THREW__ = 0;
      $325 = $324&1;
      if ($325) {
       label = 31;
       break;
      }
      $6 = $107;
      $7 = 13881;
      $326 = $6;
      $327 = $7;
      $328 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($326,$327)|0);
      $329 = ($328|0)==(0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($107);
      if (!($329)) {
       continue;
      }
      $330 = $98;
      $3 = $line;
      $4 = 7;
      $5 = -1;
      $331 = $3;
      $332 = $4;
      $333 = $5;
      $2 = $331;
      $334 = $2;
      $1 = $334;
      $335 = $1;
      $0 = $335;
      $336 = $0;
      __THREW__ = 0;
      invoke_viiiii(356,($108|0),($331|0),($332|0),($333|0),($336|0));
      $337 = __THREW__; __THREW__ = 0;
      $338 = $337&1;
      if ($338) {
       label = 31;
       break;
      }
      __THREW__ = 0;
      $339 = (invoke_iii(389,($330|0),($108|0))|0);
      $340 = __THREW__; __THREW__ = 0;
      $341 = $340&1;
      if ($341) {
       label = 45;
       break;
      }
      $342 = $material;
      HEAP32[$342>>2] = $339;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($108);
     }
     if ((label|0) == 21) {
      $247 = ___cxa_find_matching_catch()|0;
      $248 = tempRet0;
      $47 = $247;
      $48 = $248;
      __ZNSt3__16localeD2Ev($46);
      $249 = $47;
      $250 = $48;
      $eh$lpad$body2$index2Z2D = $250;$eh$lpad$body2$indexZ2D = $249;
      label = 32;
     }
     else if ((label|0) == 31) {
      $286 = ___cxa_find_matching_catch()|0;
      $287 = tempRet0;
      $eh$lpad$body2$index2Z2D = $287;$eh$lpad$body2$indexZ2D = $286;
      label = 32;
     }
     else if ((label|0) == 39) {
      $316 = ___cxa_find_matching_catch()|0;
      $317 = tempRet0;
      $101 = $316;
      $102 = $317;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($106);
     }
     else if ((label|0) == 45) {
      $343 = ___cxa_find_matching_catch()|0;
      $344 = tempRet0;
      $101 = $343;
      $102 = $344;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($108);
     }
     else if ((label|0) == 46) {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($line);
      __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
      STACKTOP = sp;return;
     }
     if ((label|0) == 32) {
      $101 = $eh$lpad$body2$indexZ2D;
      $102 = $eh$lpad$body2$index2Z2D;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($line);
     __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
     __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPK8MaterialNS_4lessIS6_EENS4_INS_4pairIKS6_S9_EEEEED2Ev($110);
     $345 = $101;
     $346 = $102;
     ___resumeException($345|0);
     // unreachable;
    }
   } while(0);
   $205 = ___cxa_find_matching_catch()|0;
   $206 = tempRet0;
   $90 = $205;
   $91 = $206;
   __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($151);
  }
 }
 $207 = ((($115)) + 108|0);
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($207);
 $208 = $90;
 $209 = $91;
 $101 = $208;
 $102 = $209;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($100);
 __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPK8MaterialNS_4lessIS6_EENS4_INS_4pairIKS6_S9_EEEEED2Ev($110);
 $345 = $101;
 $346 = $102;
 ___resumeException($345|0);
 // unreachable;
}
function __ZNK6MtllibixERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = $1;
 $5 = (__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPK8MaterialNS_4lessIS6_EENS4_INS_4pairIKS6_S9_EEEEEixERSD_($3,$4)|0);
 $6 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPK8MaterialEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEEC2ERKSF_($this,$__comp) {
 $this = $this|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = sp + 48|0;
 $11 = sp + 8|0;
 $14 = sp + 36|0;
 $15 = sp + 93|0;
 $16 = sp;
 $23 = sp + 92|0;
 $21 = $this;
 $22 = $__comp;
 $24 = $21;
 $25 = ((($24)) + 4|0);
 $20 = $25;
 $26 = $20;
 $19 = $26;
 $27 = $19;
 $18 = $27;
 $17 = $27;
 $28 = $17;
 HEAP32[$28>>2] = 0;
 $29 = ((($24)) + 8|0);
 ;HEAP8[$16>>0]=HEAP8[$23>>0]|0;
 $13 = $29;
 HEAP32[$14>>2] = 0;
 $30 = $13;
 $12 = $14;
 $31 = $12;
 $32 = HEAP32[$31>>2]|0;
 $6 = $16;
 ;HEAP8[$11>>0]=HEAP8[$15>>0]|0;
 $9 = $30;
 HEAP32[$10>>2] = $32;
 $33 = $9;
 $8 = $11;
 $7 = $10;
 $34 = $7;
 $35 = HEAP32[$34>>2]|0;
 HEAP32[$33>>2] = $35;
 $4 = $24;
 $36 = $4;
 $37 = ((($36)) + 4|0);
 $3 = $37;
 $38 = $3;
 $2 = $38;
 $39 = $2;
 $1 = $39;
 $40 = $1;
 $0 = $40;
 $41 = $0;
 $5 = $24;
 $42 = $5;
 HEAP32[$42>>2] = $41;
 STACKTOP = sp;return;
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPK8MaterialNS_4lessIS6_EENS4_INS_4pairIKS6_S9_EEEEEixEOS6_($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__child = 0, $__h = 0, $__parent = 0;
 var $__r = 0, $__t$i = 0, $__tmp$i$i = 0, $__tmp$i$i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 24|0;
 $9 = sp + 343|0;
 $20 = sp + 16|0;
 $23 = sp + 342|0;
 $46 = sp + 8|0;
 $49 = sp + 341|0;
 $60 = sp;
 $63 = sp + 340|0;
 $__parent = sp + 56|0;
 $__h = sp + 36|0;
 $73 = $this;
 $74 = $__k;
 $77 = $73;
 $78 = $74;
 $79 = (__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPK8MaterialNS_4lessIS6_EENS4_INS_4pairIKS6_S9_EEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERSD_($77,$__parent,$78)|0);
 $__child = $79;
 $80 = $__child;
 $81 = HEAP32[$80>>2]|0;
 $__r = $81;
 $82 = $__child;
 $83 = HEAP32[$82>>2]|0;
 $84 = ($83|0)==(0|0);
 if (!($84)) {
  $192 = $__r;
  $193 = ((($192)) + 16|0);
  $194 = ((($193)) + 12|0);
  STACKTOP = sp;return ($194|0);
 }
 $85 = $74;
 $72 = $85;
 $86 = $72;
 __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPK8MaterialNS_4lessIS6_EENS4_INS_4pairIKS6_S9_EEEEE25__construct_node_with_keyEOS6_($__h,$77,$86);
 $87 = HEAP32[$__parent>>2]|0;
 $88 = $__child;
 $39 = $__h;
 $89 = $39;
 $38 = $89;
 $90 = $38;
 $37 = $90;
 $91 = $37;
 $92 = HEAP32[$91>>2]|0;
 __THREW__ = 0;
 invoke_viiii(390,($77|0),($87|0),($88|0),($92|0));
 $93 = __THREW__; __THREW__ = 0;
 $94 = $93&1;
 if ($94) {
  $146 = ___cxa_find_matching_catch()|0;
  $147 = tempRet0;
  $75 = $146;
  $76 = $147;
  $71 = $__h;
  $148 = $71;
  $69 = $148;
  $70 = 0;
  $149 = $69;
  $68 = $149;
  $150 = $68;
  $67 = $150;
  $151 = $67;
  $152 = HEAP32[$151>>2]|0;
  $__tmp$i$i = $152;
  $153 = $70;
  $43 = $149;
  $154 = $43;
  $42 = $154;
  $155 = $42;
  HEAP32[$155>>2] = $153;
  $156 = $__tmp$i$i;
  $157 = ($156|0)!=(0|0);
  if (!($157)) {
   $195 = $75;
   $196 = $76;
   ___resumeException($195|0);
   // unreachable;
  }
  $41 = $149;
  $158 = $41;
  $40 = $158;
  $159 = $40;
  $160 = ((($159)) + 4|0);
  $161 = $__tmp$i$i;
  $65 = $160;
  $66 = $161;
  $162 = $65;
  $163 = ((($162)) + 5|0);
  $164 = HEAP8[$163>>0]|0;
  $165 = $164&1;
  if ($165) {
   $166 = HEAP32[$162>>2]|0;
   $167 = $66;
   $168 = ((($167)) + 16|0);
   $169 = ((($168)) + 12|0);
   $64 = $169;
   $170 = $64;
   $61 = $166;
   $62 = $170;
   $171 = $61;
   $172 = $62;
   ;HEAP8[$60>>0]=HEAP8[$63>>0]|0;
   $58 = $171;
   $59 = $172;
  }
  $173 = ((($162)) + 4|0);
  $174 = HEAP8[$173>>0]|0;
  $175 = $174&1;
  if ($175) {
   $176 = HEAP32[$162>>2]|0;
   $177 = $66;
   $178 = ((($177)) + 16|0);
   $50 = $178;
   $179 = $50;
   $47 = $176;
   $48 = $179;
   $180 = $47;
   $181 = $48;
   ;HEAP8[$46>>0]=HEAP8[$49>>0]|0;
   $44 = $180;
   $45 = $181;
   $182 = $45;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($182);
  }
  $183 = $66;
  $184 = ($183|0)!=(0|0);
  if (!($184)) {
   $195 = $75;
   $196 = $76;
   ___resumeException($195|0);
   // unreachable;
  }
  $185 = HEAP32[$162>>2]|0;
  $186 = $66;
  $55 = $185;
  $56 = $186;
  $57 = 1;
  $187 = $55;
  $188 = $56;
  $189 = $57;
  $52 = $187;
  $53 = $188;
  $54 = $189;
  $190 = $53;
  $51 = $190;
  $191 = $51;
  __ZdlPv($191);
  $195 = $75;
  $196 = $76;
  ___resumeException($195|0);
  // unreachable;
 } else {
  $36 = $__h;
  $95 = $36;
  $35 = $95;
  $96 = $35;
  $34 = $96;
  $97 = $34;
  $98 = HEAP32[$97>>2]|0;
  $__t$i = $98;
  $33 = $95;
  $99 = $33;
  $32 = $99;
  $100 = $32;
  HEAP32[$100>>2] = 0;
  $101 = $__t$i;
  $__r = $101;
  $31 = $__h;
  $102 = $31;
  $29 = $102;
  $30 = 0;
  $103 = $29;
  $28 = $103;
  $104 = $28;
  $27 = $104;
  $105 = $27;
  $106 = HEAP32[$105>>2]|0;
  $__tmp$i$i$1 = $106;
  $107 = $30;
  $3 = $103;
  $108 = $3;
  $2 = $108;
  $109 = $2;
  HEAP32[$109>>2] = $107;
  $110 = $__tmp$i$i$1;
  $111 = ($110|0)!=(0|0);
  if (!($111)) {
   $192 = $__r;
   $193 = ((($192)) + 16|0);
   $194 = ((($193)) + 12|0);
   STACKTOP = sp;return ($194|0);
  }
  $1 = $103;
  $112 = $1;
  $0 = $112;
  $113 = $0;
  $114 = ((($113)) + 4|0);
  $115 = $__tmp$i$i$1;
  $25 = $114;
  $26 = $115;
  $116 = $25;
  $117 = ((($116)) + 5|0);
  $118 = HEAP8[$117>>0]|0;
  $119 = $118&1;
  if ($119) {
   $120 = HEAP32[$116>>2]|0;
   $121 = $26;
   $122 = ((($121)) + 16|0);
   $123 = ((($122)) + 12|0);
   $24 = $123;
   $124 = $24;
   $21 = $120;
   $22 = $124;
   $125 = $21;
   $126 = $22;
   ;HEAP8[$20>>0]=HEAP8[$23>>0]|0;
   $18 = $125;
   $19 = $126;
  }
  $127 = ((($116)) + 4|0);
  $128 = HEAP8[$127>>0]|0;
  $129 = $128&1;
  if ($129) {
   $130 = HEAP32[$116>>2]|0;
   $131 = $26;
   $132 = ((($131)) + 16|0);
   $10 = $132;
   $133 = $10;
   $7 = $130;
   $8 = $133;
   $134 = $7;
   $135 = $8;
   ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
   $4 = $134;
   $5 = $135;
   $136 = $5;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($136);
  }
  $137 = $26;
  $138 = ($137|0)!=(0|0);
  if (!($138)) {
   $192 = $__r;
   $193 = ((($192)) + 16|0);
   $194 = ((($193)) + 12|0);
   STACKTOP = sp;return ($194|0);
  }
  $139 = HEAP32[$116>>2]|0;
  $140 = $26;
  $15 = $139;
  $16 = $140;
  $17 = 1;
  $141 = $15;
  $142 = $16;
  $143 = $17;
  $12 = $141;
  $13 = $142;
  $14 = $143;
  $144 = $13;
  $11 = $144;
  $145 = $11;
  __ZdlPv($145);
  $192 = $__r;
  $193 = ((($192)) + 16|0);
  $194 = ((($193)) + 12|0);
  STACKTOP = sp;return ($194|0);
 }
 return (0)|0;
}
function __ZN5Store4loadI7TextureEEPKT_RKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $13 = sp + 120|0;
 $15 = sp + 112|0;
 $17 = sp + 104|0;
 $19 = sp;
 $20 = sp + 96|0;
 $23 = sp + 84|0;
 $26 = sp + 72|0;
 $27 = sp + 60|0;
 $30 = sp + 48|0;
 $31 = sp + 36|0;
 $32 = sp + 24|0;
 $33 = sp + 12|0;
 $24 = $this;
 $25 = $name;
 $34 = $24;
 $35 = $25;
 __ZN7Texture8filenameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($27,$35);
 $21 = $34;
 $22 = $27;
 $36 = $21;
 $37 = $22;
 __THREW__ = 0;
 $38 = (invoke_iii(333,($36|0),($37|0))|0);
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 if ($40) {
  $71 = ___cxa_find_matching_catch()|0;
  $72 = tempRet0;
  $28 = $71;
  $29 = $72;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($27);
  $93 = $28;
  $94 = $29;
  ___resumeException($93|0);
  // unreachable;
 }
 HEAP32[$23>>2] = $38;
 ;HEAP8[$19>>0]=HEAP8[$23>>0]|0;HEAP8[$19+1>>0]=HEAP8[$23+1>>0]|0;HEAP8[$19+2>>0]=HEAP8[$23+2>>0]|0;HEAP8[$19+3>>0]=HEAP8[$23+3>>0]|0;
 $18 = $20;
 $41 = $18;
 ;HEAP32[$41>>2]=HEAP32[$19>>2]|0;
 $42 = HEAP32[$20>>2]|0;
 HEAP32[$26>>2] = $42;
 $16 = $34;
 $43 = $16;
 $14 = $43;
 $44 = $14;
 $12 = $44;
 $45 = $12;
 $46 = ((($45)) + 4|0);
 $11 = $46;
 $47 = $11;
 $10 = $47;
 $48 = $10;
 $9 = $48;
 $49 = $9;
 $8 = $49;
 $50 = $8;
 $6 = $13;
 $7 = $50;
 $51 = $6;
 $52 = $7;
 HEAP32[$51>>2] = $52;
 $53 = HEAP32[$13>>2]|0;
 HEAP32[$17>>2] = $53;
 ;HEAP8[$5>>0]=HEAP8[$17>>0]|0;HEAP8[$5+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[$17+3>>0]|0;
 $4 = $15;
 $54 = $4;
 ;HEAP32[$54>>2]=HEAP32[$5>>2]|0;
 $55 = HEAP32[$15>>2]|0;
 HEAP32[$30>>2] = $55;
 $2 = $26;
 $3 = $30;
 $56 = $2;
 $57 = $3;
 $0 = $56;
 $1 = $57;
 $58 = $0;
 $59 = HEAP32[$58>>2]|0;
 $60 = $1;
 $61 = HEAP32[$60>>2]|0;
 $62 = ($59|0)==($61|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($27);
 do {
  if ($62) {
   $63 = (__Znwj(8)|0);
   $64 = $25;
   __THREW__ = 0;
   invoke_viii(391,($63|0),($34|0),($64|0));
   $65 = __THREW__; __THREW__ = 0;
   $66 = $65&1;
   if ($66) {
    $73 = ___cxa_find_matching_catch()|0;
    $74 = tempRet0;
    $28 = $73;
    $29 = $74;
    __ZdlPv($63);
    $93 = $28;
    $94 = $29;
    ___resumeException($93|0);
    // unreachable;
   }
   $67 = $25;
   __ZN7Texture8filenameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($31,$67);
   __THREW__ = 0;
   $68 = (invoke_iii(335,($34|0),($31|0))|0);
   $69 = __THREW__; __THREW__ = 0;
   $70 = $69&1;
   if (!($70)) {
    HEAP32[$68>>2] = $63;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($31);
    break;
   }
   $75 = ___cxa_find_matching_catch()|0;
   $76 = tempRet0;
   $28 = $75;
   $29 = $76;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($31);
   $93 = $28;
   $94 = $29;
   ___resumeException($93|0);
   // unreachable;
  }
 } while(0);
 $77 = $25;
 __ZN7Texture8filenameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($32,$77);
 __THREW__ = 0;
 $78 = (invoke_iii(335,($34|0),($32|0))|0);
 $79 = __THREW__; __THREW__ = 0;
 $80 = $79&1;
 if ($80) {
  $89 = ___cxa_find_matching_catch()|0;
  $90 = tempRet0;
  $28 = $89;
  $29 = $90;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($32);
  $93 = $28;
  $94 = $29;
  ___resumeException($93|0);
  // unreachable;
 }
 $81 = HEAP32[$78>>2]|0;
 $82 = HEAP32[$81>>2]|0;
 $83 = (($82) + 1)|0;
 HEAP32[$81>>2] = $83;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($32);
 $84 = $25;
 __ZN7Texture8filenameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($33,$84);
 __THREW__ = 0;
 $85 = (invoke_iii(335,($34|0),($33|0))|0);
 $86 = __THREW__; __THREW__ = 0;
 $87 = $86&1;
 if (!($87)) {
  $88 = HEAP32[$85>>2]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($33);
  STACKTOP = sp;return ($88|0);
 }
 $91 = ___cxa_find_matching_catch()|0;
 $92 = tempRet0;
 $28 = $91;
 $29 = $92;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($33);
 $93 = $28;
 $94 = $29;
 ___resumeException($93|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPK8MaterialNS_4lessIS6_EENS4_INS_4pairIKS6_S9_EEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPK8MaterialEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPK8MaterialNS_4lessIS6_EENS4_INS_4pairIKS6_S9_EEEEEixERSD_($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__child = 0, $__h = 0, $__parent = 0, $__r = 0, $__t$i = 0;
 var $__tmp$i$i = 0, $__tmp$i$i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 24|0;
 $9 = sp + 339|0;
 $20 = sp + 16|0;
 $23 = sp + 338|0;
 $43 = sp + 8|0;
 $46 = sp + 337|0;
 $57 = sp;
 $60 = sp + 336|0;
 $__parent = sp + 56|0;
 $__h = sp + 36|0;
 $72 = $this;
 $73 = $__k;
 $76 = $72;
 $77 = $73;
 $78 = (__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPK8MaterialNS_4lessIS6_EENS4_INS_4pairIKS6_S9_EEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERSD_($76,$__parent,$77)|0);
 $__child = $78;
 $79 = $__child;
 $80 = HEAP32[$79>>2]|0;
 $__r = $80;
 $81 = $__child;
 $82 = HEAP32[$81>>2]|0;
 $83 = ($82|0)==(0|0);
 if (!($83)) {
  $190 = $__r;
  $191 = ((($190)) + 16|0);
  $192 = ((($191)) + 12|0);
  STACKTOP = sp;return ($192|0);
 }
 $84 = $73;
 __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPK8MaterialNS_4lessIS6_EENS4_INS_4pairIKS6_S9_EEEEE25__construct_node_with_keyERSD_($__h,$76,$84);
 $85 = HEAP32[$__parent>>2]|0;
 $86 = $__child;
 $71 = $__h;
 $87 = $71;
 $70 = $87;
 $88 = $70;
 $69 = $88;
 $89 = $69;
 $90 = HEAP32[$89>>2]|0;
 __THREW__ = 0;
 invoke_viiii(390,($76|0),($85|0),($86|0),($90|0));
 $91 = __THREW__; __THREW__ = 0;
 $92 = $91&1;
 if ($92) {
  $144 = ___cxa_find_matching_catch()|0;
  $145 = tempRet0;
  $74 = $144;
  $75 = $145;
  $68 = $__h;
  $146 = $68;
  $66 = $146;
  $67 = 0;
  $147 = $66;
  $65 = $147;
  $148 = $65;
  $64 = $148;
  $149 = $64;
  $150 = HEAP32[$149>>2]|0;
  $__tmp$i$i = $150;
  $151 = $67;
  $40 = $147;
  $152 = $40;
  $39 = $152;
  $153 = $39;
  HEAP32[$153>>2] = $151;
  $154 = $__tmp$i$i;
  $155 = ($154|0)!=(0|0);
  if (!($155)) {
   $193 = $74;
   $194 = $75;
   ___resumeException($193|0);
   // unreachable;
  }
  $38 = $147;
  $156 = $38;
  $37 = $156;
  $157 = $37;
  $158 = ((($157)) + 4|0);
  $159 = $__tmp$i$i;
  $62 = $158;
  $63 = $159;
  $160 = $62;
  $161 = ((($160)) + 5|0);
  $162 = HEAP8[$161>>0]|0;
  $163 = $162&1;
  if ($163) {
   $164 = HEAP32[$160>>2]|0;
   $165 = $63;
   $166 = ((($165)) + 16|0);
   $167 = ((($166)) + 12|0);
   $61 = $167;
   $168 = $61;
   $58 = $164;
   $59 = $168;
   $169 = $58;
   $170 = $59;
   ;HEAP8[$57>>0]=HEAP8[$60>>0]|0;
   $55 = $169;
   $56 = $170;
  }
  $171 = ((($160)) + 4|0);
  $172 = HEAP8[$171>>0]|0;
  $173 = $172&1;
  if ($173) {
   $174 = HEAP32[$160>>2]|0;
   $175 = $63;
   $176 = ((($175)) + 16|0);
   $47 = $176;
   $177 = $47;
   $44 = $174;
   $45 = $177;
   $178 = $44;
   $179 = $45;
   ;HEAP8[$43>>0]=HEAP8[$46>>0]|0;
   $41 = $178;
   $42 = $179;
   $180 = $42;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($180);
  }
  $181 = $63;
  $182 = ($181|0)!=(0|0);
  if (!($182)) {
   $193 = $74;
   $194 = $75;
   ___resumeException($193|0);
   // unreachable;
  }
  $183 = HEAP32[$160>>2]|0;
  $184 = $63;
  $52 = $183;
  $53 = $184;
  $54 = 1;
  $185 = $52;
  $186 = $53;
  $187 = $54;
  $49 = $185;
  $50 = $186;
  $51 = $187;
  $188 = $50;
  $48 = $188;
  $189 = $48;
  __ZdlPv($189);
  $193 = $74;
  $194 = $75;
  ___resumeException($193|0);
  // unreachable;
 } else {
  $36 = $__h;
  $93 = $36;
  $35 = $93;
  $94 = $35;
  $34 = $94;
  $95 = $34;
  $96 = HEAP32[$95>>2]|0;
  $__t$i = $96;
  $33 = $93;
  $97 = $33;
  $32 = $97;
  $98 = $32;
  HEAP32[$98>>2] = 0;
  $99 = $__t$i;
  $__r = $99;
  $31 = $__h;
  $100 = $31;
  $29 = $100;
  $30 = 0;
  $101 = $29;
  $28 = $101;
  $102 = $28;
  $27 = $102;
  $103 = $27;
  $104 = HEAP32[$103>>2]|0;
  $__tmp$i$i$1 = $104;
  $105 = $30;
  $3 = $101;
  $106 = $3;
  $2 = $106;
  $107 = $2;
  HEAP32[$107>>2] = $105;
  $108 = $__tmp$i$i$1;
  $109 = ($108|0)!=(0|0);
  if (!($109)) {
   $190 = $__r;
   $191 = ((($190)) + 16|0);
   $192 = ((($191)) + 12|0);
   STACKTOP = sp;return ($192|0);
  }
  $1 = $101;
  $110 = $1;
  $0 = $110;
  $111 = $0;
  $112 = ((($111)) + 4|0);
  $113 = $__tmp$i$i$1;
  $25 = $112;
  $26 = $113;
  $114 = $25;
  $115 = ((($114)) + 5|0);
  $116 = HEAP8[$115>>0]|0;
  $117 = $116&1;
  if ($117) {
   $118 = HEAP32[$114>>2]|0;
   $119 = $26;
   $120 = ((($119)) + 16|0);
   $121 = ((($120)) + 12|0);
   $24 = $121;
   $122 = $24;
   $21 = $118;
   $22 = $122;
   $123 = $21;
   $124 = $22;
   ;HEAP8[$20>>0]=HEAP8[$23>>0]|0;
   $18 = $123;
   $19 = $124;
  }
  $125 = ((($114)) + 4|0);
  $126 = HEAP8[$125>>0]|0;
  $127 = $126&1;
  if ($127) {
   $128 = HEAP32[$114>>2]|0;
   $129 = $26;
   $130 = ((($129)) + 16|0);
   $10 = $130;
   $131 = $10;
   $7 = $128;
   $8 = $131;
   $132 = $7;
   $133 = $8;
   ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
   $4 = $132;
   $5 = $133;
   $134 = $5;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($134);
  }
  $135 = $26;
  $136 = ($135|0)!=(0|0);
  if (!($136)) {
   $190 = $__r;
   $191 = ((($190)) + 16|0);
   $192 = ((($191)) + 12|0);
   STACKTOP = sp;return ($192|0);
  }
  $137 = HEAP32[$114>>2]|0;
  $138 = $26;
  $15 = $137;
  $16 = $138;
  $17 = 1;
  $139 = $15;
  $140 = $16;
  $141 = $17;
  $12 = $139;
  $13 = $140;
  $14 = $141;
  $142 = $13;
  $11 = $142;
  $143 = $11;
  __ZdlPv($143);
  $190 = $__r;
  $191 = ((($190)) + 16|0);
  $192 = ((($191)) + 12|0);
  STACKTOP = sp;return ($192|0);
 }
 return (0)|0;
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPK8MaterialNS_4lessIS6_EENS4_INS_4pairIKS6_S9_EEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERSD_($this,$__parent,$__k) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lhs_sz$i$i$i = 0, $__lhs_sz$i$i$i$1 = 0, $__nd = 0, $__result$i$i$i = 0, $__result$i$i$i$3 = 0, $__rhs_sz$i$i$i = 0, $__rhs_sz$i$i$i$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = sp + 8|0;
 $22 = sp + 637|0;
 $__lhs_sz$i$i$i$1 = sp + 400|0;
 $__rhs_sz$i$i$i$2 = sp + 396|0;
 $92 = sp;
 $95 = sp + 636|0;
 $__lhs_sz$i$i$i = sp + 104|0;
 $__rhs_sz$i$i$i = sp + 100|0;
 $150 = $this;
 $151 = $__parent;
 $152 = $__k;
 $153 = $150;
 $148 = $153;
 $154 = $148;
 $147 = $154;
 $155 = $147;
 $156 = ((($155)) + 4|0);
 $146 = $156;
 $157 = $146;
 $145 = $157;
 $158 = $145;
 $144 = $158;
 $159 = $144;
 $143 = $159;
 $160 = $143;
 $161 = HEAP32[$160>>2]|0;
 $__nd = $161;
 $162 = $__nd;
 $163 = ($162|0)!=(0|0);
 if (!($163)) {
  $142 = $153;
  $441 = $142;
  $442 = ((($441)) + 4|0);
  $141 = $442;
  $443 = $141;
  $140 = $443;
  $444 = $140;
  $139 = $444;
  $445 = $139;
  $138 = $445;
  $446 = $138;
  $447 = $151;
  HEAP32[$447>>2] = $446;
  $448 = $151;
  $449 = HEAP32[$448>>2]|0;
  $149 = $449;
  $450 = $149;
  STACKTOP = sp;return ($450|0);
 }
 while(1) {
  $72 = $153;
  $164 = $72;
  $165 = ((($164)) + 8|0);
  $71 = $165;
  $166 = $71;
  $70 = $166;
  $167 = $70;
  $69 = $167;
  $168 = $69;
  $169 = $152;
  $170 = $__nd;
  $171 = ((($170)) + 16|0);
  $62 = $168;
  $63 = $169;
  $64 = $171;
  $172 = $63;
  $173 = $64;
  $60 = $172;
  $61 = $173;
  $174 = $60;
  $175 = $61;
  $58 = $174;
  $59 = $175;
  $176 = $58;
  $56 = $176;
  $177 = $56;
  $55 = $177;
  $178 = $55;
  $54 = $178;
  $179 = $54;
  $53 = $179;
  $180 = $53;
  $181 = HEAP8[$180>>0]|0;
  $182 = $181&255;
  $183 = $182 & 1;
  $184 = ($183|0)!=(0);
  if ($184) {
   $49 = $177;
   $185 = $49;
   $48 = $185;
   $186 = $48;
   $47 = $186;
   $187 = $47;
   $188 = ((($187)) + 4|0);
   $189 = HEAP32[$188>>2]|0;
   $196 = $189;
  } else {
   $52 = $177;
   $190 = $52;
   $51 = $190;
   $191 = $51;
   $50 = $191;
   $192 = $50;
   $193 = HEAP8[$192>>0]|0;
   $194 = $193&255;
   $195 = $194 >> 1;
   $196 = $195;
  }
  HEAP32[$__lhs_sz$i$i$i$1>>2] = $196;
  $197 = $59;
  $46 = $197;
  $198 = $46;
  $45 = $198;
  $199 = $45;
  $44 = $199;
  $200 = $44;
  $43 = $200;
  $201 = $43;
  $202 = HEAP8[$201>>0]|0;
  $203 = $202&255;
  $204 = $203 & 1;
  $205 = ($204|0)!=(0);
  if ($205) {
   $39 = $198;
   $206 = $39;
   $38 = $206;
   $207 = $38;
   $37 = $207;
   $208 = $37;
   $209 = ((($208)) + 4|0);
   $210 = HEAP32[$209>>2]|0;
   $217 = $210;
  } else {
   $42 = $198;
   $211 = $42;
   $41 = $211;
   $212 = $41;
   $40 = $212;
   $213 = $40;
   $214 = HEAP8[$213>>0]|0;
   $215 = $214&255;
   $216 = $215 >> 1;
   $217 = $216;
  }
  HEAP32[$__rhs_sz$i$i$i$2>>2] = $217;
  $36 = $176;
  $218 = $36;
  $35 = $218;
  $219 = $35;
  $34 = $219;
  $220 = $34;
  $33 = $220;
  $221 = $33;
  $32 = $221;
  $222 = $32;
  $223 = HEAP8[$222>>0]|0;
  $224 = $223&255;
  $225 = $224 & 1;
  $226 = ($225|0)!=(0);
  if ($226) {
   $26 = $219;
   $227 = $26;
   $25 = $227;
   $228 = $25;
   $24 = $228;
   $229 = $24;
   $230 = ((($229)) + 8|0);
   $231 = HEAP32[$230>>2]|0;
   $238 = $231;
  } else {
   $31 = $219;
   $232 = $31;
   $30 = $232;
   $233 = $30;
   $29 = $233;
   $234 = $29;
   $235 = ((($234)) + 1|0);
   $28 = $235;
   $236 = $28;
   $27 = $236;
   $237 = $27;
   $238 = $237;
  }
  $23 = $238;
  $239 = $23;
  $240 = $59;
  $13 = $240;
  $241 = $13;
  $12 = $241;
  $242 = $12;
  $11 = $242;
  $243 = $11;
  $10 = $243;
  $244 = $10;
  $9 = $244;
  $245 = $9;
  $246 = HEAP8[$245>>0]|0;
  $247 = $246&255;
  $248 = $247 & 1;
  $249 = ($248|0)!=(0);
  if ($249) {
   $3 = $242;
   $250 = $3;
   $2 = $250;
   $251 = $2;
   $1 = $251;
   $252 = $1;
   $253 = ((($252)) + 8|0);
   $254 = HEAP32[$253>>2]|0;
   $261 = $254;
  } else {
   $8 = $242;
   $255 = $8;
   $7 = $255;
   $256 = $7;
   $6 = $256;
   $257 = $6;
   $258 = ((($257)) + 1|0);
   $5 = $258;
   $259 = $5;
   $4 = $259;
   $260 = $4;
   $261 = $260;
  }
  $0 = $261;
  $262 = $0;
  $20 = $__lhs_sz$i$i$i$1;
  $21 = $__rhs_sz$i$i$i$2;
  $263 = $20;
  $264 = $21;
  ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
  $17 = $263;
  $18 = $264;
  $265 = $18;
  $266 = $17;
  $14 = $19;
  $15 = $265;
  $16 = $266;
  $267 = $15;
  $268 = HEAP32[$267>>2]|0;
  $269 = $16;
  $270 = HEAP32[$269>>2]|0;
  $271 = ($268>>>0)<($270>>>0);
  $272 = $18;
  $273 = $17;
  $274 = $271 ? $272 : $273;
  $275 = HEAP32[$274>>2]|0;
  __THREW__ = 0;
  $276 = (invoke_iiii(336,($239|0),($262|0),($275|0))|0);
  $277 = __THREW__; __THREW__ = 0;
  $278 = $277&1;
  if ($278) {
   label = 22;
   break;
  }
  $__result$i$i$i$3 = $276;
  $279 = $__result$i$i$i$3;
  $280 = ($279|0)!=(0);
  do {
   if ($280) {
    $281 = $__result$i$i$i$3;
    $57 = $281;
   } else {
    $282 = HEAP32[$__lhs_sz$i$i$i$1>>2]|0;
    $283 = HEAP32[$__rhs_sz$i$i$i$2>>2]|0;
    $284 = ($282>>>0)<($283>>>0);
    if ($284) {
     $57 = -1;
     break;
    }
    $285 = HEAP32[$__lhs_sz$i$i$i$1>>2]|0;
    $286 = HEAP32[$__rhs_sz$i$i$i$2>>2]|0;
    $287 = ($285>>>0)>($286>>>0);
    if ($287) {
     $57 = 1;
     break;
    } else {
     $57 = 0;
     break;
    }
   }
  } while(0);
  $290 = $57;
  $291 = ($290|0)<(0);
  if ($291) {
   $292 = $__nd;
   $293 = HEAP32[$292>>2]|0;
   $294 = ($293|0)!=(0|0);
   $295 = $__nd;
   if (!($294)) {
    label = 26;
    break;
   }
   $296 = HEAP32[$295>>2]|0;
   $__nd = $296;
   continue;
  }
  $67 = $153;
  $300 = $67;
  $301 = ((($300)) + 8|0);
  $66 = $301;
  $302 = $66;
  $65 = $302;
  $303 = $65;
  $68 = $303;
  $304 = $68;
  $305 = $__nd;
  $306 = ((($305)) + 16|0);
  $307 = $152;
  $135 = $304;
  $136 = $306;
  $137 = $307;
  $308 = $136;
  $309 = $137;
  $133 = $308;
  $134 = $309;
  $310 = $133;
  $311 = $134;
  $131 = $310;
  $132 = $311;
  $312 = $131;
  $129 = $312;
  $313 = $129;
  $128 = $313;
  $314 = $128;
  $127 = $314;
  $315 = $127;
  $126 = $315;
  $316 = $126;
  $317 = HEAP8[$316>>0]|0;
  $318 = $317&255;
  $319 = $318 & 1;
  $320 = ($319|0)!=(0);
  if ($320) {
   $122 = $313;
   $321 = $122;
   $121 = $321;
   $322 = $121;
   $120 = $322;
   $323 = $120;
   $324 = ((($323)) + 4|0);
   $325 = HEAP32[$324>>2]|0;
   $332 = $325;
  } else {
   $125 = $313;
   $326 = $125;
   $124 = $326;
   $327 = $124;
   $123 = $327;
   $328 = $123;
   $329 = HEAP8[$328>>0]|0;
   $330 = $329&255;
   $331 = $330 >> 1;
   $332 = $331;
  }
  HEAP32[$__lhs_sz$i$i$i>>2] = $332;
  $333 = $132;
  $119 = $333;
  $334 = $119;
  $118 = $334;
  $335 = $118;
  $117 = $335;
  $336 = $117;
  $116 = $336;
  $337 = $116;
  $338 = HEAP8[$337>>0]|0;
  $339 = $338&255;
  $340 = $339 & 1;
  $341 = ($340|0)!=(0);
  if ($341) {
   $112 = $334;
   $342 = $112;
   $111 = $342;
   $343 = $111;
   $110 = $343;
   $344 = $110;
   $345 = ((($344)) + 4|0);
   $346 = HEAP32[$345>>2]|0;
   $353 = $346;
  } else {
   $115 = $334;
   $347 = $115;
   $114 = $347;
   $348 = $114;
   $113 = $348;
   $349 = $113;
   $350 = HEAP8[$349>>0]|0;
   $351 = $350&255;
   $352 = $351 >> 1;
   $353 = $352;
  }
  HEAP32[$__rhs_sz$i$i$i>>2] = $353;
  $109 = $312;
  $354 = $109;
  $108 = $354;
  $355 = $108;
  $107 = $355;
  $356 = $107;
  $106 = $356;
  $357 = $106;
  $105 = $357;
  $358 = $105;
  $359 = HEAP8[$358>>0]|0;
  $360 = $359&255;
  $361 = $360 & 1;
  $362 = ($361|0)!=(0);
  if ($362) {
   $99 = $355;
   $363 = $99;
   $98 = $363;
   $364 = $98;
   $97 = $364;
   $365 = $97;
   $366 = ((($365)) + 8|0);
   $367 = HEAP32[$366>>2]|0;
   $374 = $367;
  } else {
   $104 = $355;
   $368 = $104;
   $103 = $368;
   $369 = $103;
   $102 = $369;
   $370 = $102;
   $371 = ((($370)) + 1|0);
   $101 = $371;
   $372 = $101;
   $100 = $372;
   $373 = $100;
   $374 = $373;
  }
  $96 = $374;
  $375 = $96;
  $376 = $132;
  $86 = $376;
  $377 = $86;
  $85 = $377;
  $378 = $85;
  $84 = $378;
  $379 = $84;
  $83 = $379;
  $380 = $83;
  $82 = $380;
  $381 = $82;
  $382 = HEAP8[$381>>0]|0;
  $383 = $382&255;
  $384 = $383 & 1;
  $385 = ($384|0)!=(0);
  if ($385) {
   $76 = $378;
   $386 = $76;
   $75 = $386;
   $387 = $75;
   $74 = $387;
   $388 = $74;
   $389 = ((($388)) + 8|0);
   $390 = HEAP32[$389>>2]|0;
   $397 = $390;
  } else {
   $81 = $378;
   $391 = $81;
   $80 = $391;
   $392 = $80;
   $79 = $392;
   $393 = $79;
   $394 = ((($393)) + 1|0);
   $78 = $394;
   $395 = $78;
   $77 = $395;
   $396 = $77;
   $397 = $396;
  }
  $73 = $397;
  $398 = $73;
  $93 = $__lhs_sz$i$i$i;
  $94 = $__rhs_sz$i$i$i;
  $399 = $93;
  $400 = $94;
  ;HEAP8[$92>>0]=HEAP8[$95>>0]|0;
  $90 = $399;
  $91 = $400;
  $401 = $91;
  $402 = $90;
  $87 = $92;
  $88 = $401;
  $89 = $402;
  $403 = $88;
  $404 = HEAP32[$403>>2]|0;
  $405 = $89;
  $406 = HEAP32[$405>>2]|0;
  $407 = ($404>>>0)<($406>>>0);
  $408 = $91;
  $409 = $90;
  $410 = $407 ? $408 : $409;
  $411 = HEAP32[$410>>2]|0;
  __THREW__ = 0;
  $412 = (invoke_iiii(336,($375|0),($398|0),($411|0))|0);
  $413 = __THREW__; __THREW__ = 0;
  $414 = $413&1;
  if ($414) {
   label = 47;
   break;
  }
  $__result$i$i$i = $412;
  $415 = $__result$i$i$i;
  $416 = ($415|0)!=(0);
  do {
   if ($416) {
    $417 = $__result$i$i$i;
    $130 = $417;
   } else {
    $418 = HEAP32[$__lhs_sz$i$i$i>>2]|0;
    $419 = HEAP32[$__rhs_sz$i$i$i>>2]|0;
    $420 = ($418>>>0)<($419>>>0);
    if ($420) {
     $130 = -1;
     break;
    }
    $421 = HEAP32[$__lhs_sz$i$i$i>>2]|0;
    $422 = HEAP32[$__rhs_sz$i$i$i>>2]|0;
    $423 = ($421>>>0)>($422>>>0);
    if ($423) {
     $130 = 1;
     break;
    } else {
     $130 = 0;
     break;
    }
   }
  } while(0);
  $426 = $130;
  $427 = ($426|0)<(0);
  $428 = $__nd;
  if (!($427)) {
   label = 52;
   break;
  }
  $429 = ((($428)) + 4|0);
  $430 = HEAP32[$429>>2]|0;
  $431 = ($430|0)!=(0|0);
  $432 = $__nd;
  if (!($431)) {
   label = 51;
   break;
  }
  $433 = ((($432)) + 4|0);
  $434 = HEAP32[$433>>2]|0;
  $__nd = $434;
 }
 if ((label|0) == 22) {
  $288 = ___cxa_find_matching_catch(0|0)|0;
  $289 = tempRet0;
  ___clang_call_terminate($288);
  // unreachable;
 }
 else if ((label|0) == 26) {
  $297 = $151;
  HEAP32[$297>>2] = $295;
  $298 = $151;
  $299 = HEAP32[$298>>2]|0;
  $149 = $299;
  $450 = $149;
  STACKTOP = sp;return ($450|0);
 }
 else if ((label|0) == 47) {
  $424 = ___cxa_find_matching_catch(0|0)|0;
  $425 = tempRet0;
  ___clang_call_terminate($424);
  // unreachable;
 }
 else if ((label|0) == 51) {
  $435 = $151;
  HEAP32[$435>>2] = $432;
  $436 = $151;
  $437 = HEAP32[$436>>2]|0;
  $438 = ((($437)) + 4|0);
  $149 = $438;
  $450 = $149;
  STACKTOP = sp;return ($450|0);
 }
 else if ((label|0) == 52) {
  $439 = $151;
  HEAP32[$439>>2] = $428;
  $440 = $151;
  $149 = $440;
  $450 = $149;
  STACKTOP = sp;return ($450|0);
 }
 return (0)|0;
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPK8MaterialNS_4lessIS6_EENS4_INS_4pairIKS6_S9_EEEEE25__construct_node_with_keyERSD_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__na = 0, $__t$i$i = 0, $__tmp$i$i = 0, $__tmp$i$i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 704|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 72|0;
 $13 = sp + 701|0;
 $25 = sp + 64|0;
 $28 = sp + 700|0;
 $38 = sp + 556|0;
 $39 = sp + 56|0;
 $42 = sp + 544|0;
 $43 = sp + 536|0;
 $44 = sp + 48|0;
 $55 = sp + 480|0;
 $66 = sp + 40|0;
 $69 = sp + 699|0;
 $80 = sp + 32|0;
 $83 = sp + 698|0;
 $96 = sp + 324|0;
 $97 = sp + 24|0;
 $100 = sp + 312|0;
 $101 = sp + 304|0;
 $102 = sp + 16|0;
 $107 = sp + 280|0;
 $122 = sp + 8|0;
 $125 = sp + 697|0;
 $136 = sp;
 $139 = sp + 696|0;
 $__h = sp + 96|0;
 $153 = sp + 88|0;
 $151 = $this;
 $152 = $__k;
 $156 = $151;
 $150 = $156;
 $157 = $150;
 $158 = ((($157)) + 4|0);
 $149 = $158;
 $159 = $149;
 $148 = $159;
 $160 = $148;
 $__na = $160;
 $161 = $__na;
 $114 = $161;
 $115 = 1;
 $162 = $114;
 $163 = $115;
 $111 = $162;
 $112 = $163;
 $113 = 0;
 $164 = $112;
 $165 = $164<<5;
 $110 = $165;
 $166 = $110;
 $167 = (__Znwj($166)|0);
 $168 = $__na;
 $108 = $153;
 $109 = $168;
 $169 = $108;
 $170 = $109;
 HEAP32[$169>>2] = $170;
 $171 = ((($169)) + 4|0);
 HEAP8[$171>>0] = 0;
 $172 = ((($169)) + 5|0);
 HEAP8[$172>>0] = 0;
 $104 = $__h;
 $105 = $167;
 $106 = $153;
 $173 = $104;
 $174 = $105;
 $175 = $106;
 $103 = $175;
 $176 = $103;
 ;HEAP32[$107>>2]=HEAP32[$176>>2]|0;HEAP32[$107+4>>2]=HEAP32[$176+4>>2]|0;
 ;HEAP8[$102>>0]=HEAP8[$107>>0]|0;HEAP8[$102+1>>0]=HEAP8[$107+1>>0]|0;HEAP8[$102+2>>0]=HEAP8[$107+2>>0]|0;HEAP8[$102+3>>0]=HEAP8[$107+3>>0]|0;HEAP8[$102+4>>0]=HEAP8[$107+4>>0]|0;HEAP8[$102+5>>0]=HEAP8[$107+5>>0]|0;HEAP8[$102+6>>0]=HEAP8[$107+6>>0]|0;HEAP8[$102+7>>0]=HEAP8[$107+7>>0]|0;
 $99 = $173;
 HEAP32[$100>>2] = $174;
 $177 = $99;
 $98 = $100;
 $178 = $98;
 $179 = HEAP32[$178>>2]|0;
 $92 = $102;
 $180 = $92;
 ;HEAP32[$101>>2]=HEAP32[$180>>2]|0;HEAP32[$101+4>>2]=HEAP32[$180+4>>2]|0;
 ;HEAP8[$97>>0]=HEAP8[$101>>0]|0;HEAP8[$97+1>>0]=HEAP8[$101+1>>0]|0;HEAP8[$97+2>>0]=HEAP8[$101+2>>0]|0;HEAP8[$97+3>>0]=HEAP8[$101+3>>0]|0;HEAP8[$97+4>>0]=HEAP8[$101+4>>0]|0;HEAP8[$97+5>>0]=HEAP8[$101+5>>0]|0;HEAP8[$97+6>>0]=HEAP8[$101+6>>0]|0;HEAP8[$97+7>>0]=HEAP8[$101+7>>0]|0;
 $95 = $177;
 HEAP32[$96>>2] = $179;
 $181 = $95;
 $94 = $96;
 $182 = $94;
 $183 = HEAP32[$182>>2]|0;
 HEAP32[$181>>2] = $183;
 $184 = ((($181)) + 4|0);
 $93 = $97;
 $185 = $93;
 ;HEAP32[$184>>2]=HEAP32[$185>>2]|0;HEAP32[$184+4>>2]=HEAP32[$185+4>>2]|0;
 $186 = $__na;
 $59 = $__h;
 $187 = $59;
 $58 = $187;
 $188 = $58;
 $57 = $188;
 $189 = $57;
 $190 = HEAP32[$189>>2]|0;
 $191 = ((($190)) + 16|0);
 $56 = $191;
 $192 = $56;
 $193 = $152;
 $10 = $186;
 $11 = $192;
 $12 = $193;
 $194 = $10;
 $195 = $11;
 $196 = $12;
 $9 = $196;
 $197 = $9;
 ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
 $5 = $194;
 $6 = $195;
 $7 = $197;
 $198 = $5;
 $199 = $6;
 $200 = $7;
 $4 = $200;
 $201 = $4;
 $1 = $198;
 $2 = $199;
 $3 = $201;
 $202 = $2;
 $203 = $3;
 $0 = $203;
 $204 = $0;
 __THREW__ = 0;
 invoke_vii(338,($202|0),($204|0));
 $205 = __THREW__; __THREW__ = 0;
 $206 = $205&1;
 if ($206) {
  $299 = ___cxa_find_matching_catch()|0;
  $300 = tempRet0;
  $154 = $299;
  $155 = $300;
  $147 = $__h;
  $301 = $147;
  $145 = $301;
  $146 = 0;
  $302 = $145;
  $144 = $302;
  $303 = $144;
  $143 = $303;
  $304 = $143;
  $305 = HEAP32[$304>>2]|0;
  $__tmp$i$i = $305;
  $306 = $146;
  $119 = $302;
  $307 = $119;
  $118 = $307;
  $308 = $118;
  HEAP32[$308>>2] = $306;
  $309 = $__tmp$i$i;
  $310 = ($309|0)!=(0|0);
  if (!($310)) {
   $345 = $154;
   $346 = $155;
   ___resumeException($345|0);
   // unreachable;
  }
  $117 = $302;
  $311 = $117;
  $116 = $311;
  $312 = $116;
  $313 = ((($312)) + 4|0);
  $314 = $__tmp$i$i;
  $141 = $313;
  $142 = $314;
  $315 = $141;
  $316 = ((($315)) + 5|0);
  $317 = HEAP8[$316>>0]|0;
  $318 = $317&1;
  if ($318) {
   $319 = HEAP32[$315>>2]|0;
   $320 = $142;
   $321 = ((($320)) + 16|0);
   $322 = ((($321)) + 12|0);
   $140 = $322;
   $323 = $140;
   $137 = $319;
   $138 = $323;
   $324 = $137;
   $325 = $138;
   ;HEAP8[$136>>0]=HEAP8[$139>>0]|0;
   $134 = $324;
   $135 = $325;
  }
  $326 = ((($315)) + 4|0);
  $327 = HEAP8[$326>>0]|0;
  $328 = $327&1;
  if ($328) {
   $329 = HEAP32[$315>>2]|0;
   $330 = $142;
   $331 = ((($330)) + 16|0);
   $126 = $331;
   $332 = $126;
   $123 = $329;
   $124 = $332;
   $333 = $123;
   $334 = $124;
   ;HEAP8[$122>>0]=HEAP8[$125>>0]|0;
   $120 = $333;
   $121 = $334;
   $335 = $121;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($335);
  }
  $336 = $142;
  $337 = ($336|0)!=(0|0);
  if (!($337)) {
   $345 = $154;
   $346 = $155;
   ___resumeException($345|0);
   // unreachable;
  }
  $338 = HEAP32[$315>>2]|0;
  $339 = $142;
  $131 = $338;
  $132 = $339;
  $133 = 1;
  $340 = $131;
  $341 = $132;
  $342 = $133;
  $128 = $340;
  $129 = $341;
  $130 = $342;
  $343 = $129;
  $127 = $343;
  $344 = $127;
  __ZdlPv($344);
  $345 = $154;
  $346 = $155;
  ___resumeException($345|0);
  // unreachable;
 } else {
  $16 = $__h;
  $207 = $16;
  $15 = $207;
  $208 = $15;
  $14 = $208;
  $209 = $14;
  $210 = ((($209)) + 4|0);
  $211 = ((($210)) + 4|0);
  HEAP8[$211>>0] = 1;
  $212 = $__na;
  $19 = $__h;
  $213 = $19;
  $18 = $213;
  $214 = $18;
  $17 = $214;
  $215 = $17;
  $216 = HEAP32[$215>>2]|0;
  $217 = ((($216)) + 16|0);
  $218 = ((($217)) + 12|0);
  $20 = $218;
  $219 = $20;
  $26 = $212;
  $27 = $219;
  $220 = $26;
  $221 = $27;
  ;HEAP8[$25>>0]=HEAP8[$28>>0]|0;
  $23 = $220;
  $24 = $221;
  $222 = $23;
  $223 = $24;
  $21 = $222;
  $22 = $223;
  $224 = $22;
  HEAP32[$224>>2] = 0;
  $31 = $__h;
  $225 = $31;
  $30 = $225;
  $226 = $30;
  $29 = $226;
  $227 = $29;
  $228 = ((($227)) + 4|0);
  $229 = ((($228)) + 5|0);
  HEAP8[$229>>0] = 1;
  $32 = $__h;
  $230 = $32;
  $53 = $agg$result;
  $54 = $230;
  $231 = $53;
  $232 = $54;
  $52 = $232;
  $233 = $52;
  $51 = $233;
  $234 = $51;
  $50 = $234;
  $235 = $50;
  $236 = HEAP32[$235>>2]|0;
  $__t$i$i = $236;
  $49 = $233;
  $237 = $49;
  $48 = $237;
  $238 = $48;
  HEAP32[$238>>2] = 0;
  $239 = $__t$i$i;
  $240 = $54;
  $47 = $240;
  $241 = $47;
  $46 = $241;
  $242 = $46;
  $45 = $242;
  $243 = $45;
  $244 = ((($243)) + 4|0);
  $33 = $244;
  $245 = $33;
  ;HEAP32[$55>>2]=HEAP32[$245>>2]|0;HEAP32[$55+4>>2]=HEAP32[$245+4>>2]|0;
  ;HEAP8[$44>>0]=HEAP8[$55>>0]|0;HEAP8[$44+1>>0]=HEAP8[$55+1>>0]|0;HEAP8[$44+2>>0]=HEAP8[$55+2>>0]|0;HEAP8[$44+3>>0]=HEAP8[$55+3>>0]|0;HEAP8[$44+4>>0]=HEAP8[$55+4>>0]|0;HEAP8[$44+5>>0]=HEAP8[$55+5>>0]|0;HEAP8[$44+6>>0]=HEAP8[$55+6>>0]|0;HEAP8[$44+7>>0]=HEAP8[$55+7>>0]|0;
  $41 = $231;
  HEAP32[$42>>2] = $239;
  $246 = $41;
  $40 = $42;
  $247 = $40;
  $248 = HEAP32[$247>>2]|0;
  $34 = $44;
  $249 = $34;
  ;HEAP32[$43>>2]=HEAP32[$249>>2]|0;HEAP32[$43+4>>2]=HEAP32[$249+4>>2]|0;
  ;HEAP8[$39>>0]=HEAP8[$43>>0]|0;HEAP8[$39+1>>0]=HEAP8[$43+1>>0]|0;HEAP8[$39+2>>0]=HEAP8[$43+2>>0]|0;HEAP8[$39+3>>0]=HEAP8[$43+3>>0]|0;HEAP8[$39+4>>0]=HEAP8[$43+4>>0]|0;HEAP8[$39+5>>0]=HEAP8[$43+5>>0]|0;HEAP8[$39+6>>0]=HEAP8[$43+6>>0]|0;HEAP8[$39+7>>0]=HEAP8[$43+7>>0]|0;
  $37 = $246;
  HEAP32[$38>>2] = $248;
  $250 = $37;
  $36 = $38;
  $251 = $36;
  $252 = HEAP32[$251>>2]|0;
  HEAP32[$250>>2] = $252;
  $253 = ((($250)) + 4|0);
  $35 = $39;
  $254 = $35;
  ;HEAP32[$253>>2]=HEAP32[$254>>2]|0;HEAP32[$253+4>>2]=HEAP32[$254+4>>2]|0;
  $91 = $__h;
  $255 = $91;
  $89 = $255;
  $90 = 0;
  $256 = $89;
  $88 = $256;
  $257 = $88;
  $87 = $257;
  $258 = $87;
  $259 = HEAP32[$258>>2]|0;
  $__tmp$i$i$1 = $259;
  $260 = $90;
  $63 = $256;
  $261 = $63;
  $62 = $261;
  $262 = $62;
  HEAP32[$262>>2] = $260;
  $263 = $__tmp$i$i$1;
  $264 = ($263|0)!=(0|0);
  if (!($264)) {
   STACKTOP = sp;return;
  }
  $61 = $256;
  $265 = $61;
  $60 = $265;
  $266 = $60;
  $267 = ((($266)) + 4|0);
  $268 = $__tmp$i$i$1;
  $85 = $267;
  $86 = $268;
  $269 = $85;
  $270 = ((($269)) + 5|0);
  $271 = HEAP8[$270>>0]|0;
  $272 = $271&1;
  if ($272) {
   $273 = HEAP32[$269>>2]|0;
   $274 = $86;
   $275 = ((($274)) + 16|0);
   $276 = ((($275)) + 12|0);
   $84 = $276;
   $277 = $84;
   $81 = $273;
   $82 = $277;
   $278 = $81;
   $279 = $82;
   ;HEAP8[$80>>0]=HEAP8[$83>>0]|0;
   $78 = $278;
   $79 = $279;
  }
  $280 = ((($269)) + 4|0);
  $281 = HEAP8[$280>>0]|0;
  $282 = $281&1;
  if ($282) {
   $283 = HEAP32[$269>>2]|0;
   $284 = $86;
   $285 = ((($284)) + 16|0);
   $70 = $285;
   $286 = $70;
   $67 = $283;
   $68 = $286;
   $287 = $67;
   $288 = $68;
   ;HEAP8[$66>>0]=HEAP8[$69>>0]|0;
   $64 = $287;
   $65 = $288;
   $289 = $65;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($289);
  }
  $290 = $86;
  $291 = ($290|0)!=(0|0);
  if (!($291)) {
   STACKTOP = sp;return;
  }
  $292 = HEAP32[$269>>2]|0;
  $293 = $86;
  $75 = $292;
  $76 = $293;
  $77 = 1;
  $294 = $75;
  $295 = $76;
  $296 = $77;
  $72 = $294;
  $73 = $295;
  $74 = $296;
  $297 = $73;
  $71 = $297;
  $298 = $71;
  __ZdlPv($298);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPK8MaterialEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSL_SL_($this,$__parent,$__child,$__new_node) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__child = $__child|0;
 $__new_node = $__new_node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = $this;
 $12 = $__parent;
 $13 = $__child;
 $14 = $__new_node;
 $15 = $11;
 $16 = $14;
 HEAP32[$16>>2] = 0;
 $17 = $14;
 $18 = ((($17)) + 4|0);
 HEAP32[$18>>2] = 0;
 $19 = $12;
 $20 = $14;
 $21 = ((($20)) + 8|0);
 HEAP32[$21>>2] = $19;
 $22 = $14;
 $23 = $13;
 HEAP32[$23>>2] = $22;
 $10 = $15;
 $24 = $10;
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if ($27) {
  $6 = $15;
  $28 = $6;
  $29 = HEAP32[$28>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $0 = $15;
  $31 = $0;
  HEAP32[$31>>2] = $30;
 }
 $5 = $15;
 $32 = $5;
 $33 = ((($32)) + 4|0);
 $4 = $33;
 $34 = $4;
 $3 = $34;
 $35 = $3;
 $2 = $35;
 $36 = $2;
 $1 = $36;
 $37 = $1;
 $38 = HEAP32[$37>>2]|0;
 $39 = $13;
 $40 = HEAP32[$39>>2]|0;
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($38,$40);
 $9 = $15;
 $41 = $9;
 $42 = ((($41)) + 8|0);
 $8 = $42;
 $43 = $8;
 $7 = $43;
 $44 = $7;
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + 1)|0;
 HEAP32[$44>>2] = $46;
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPK8MaterialEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $this;
 $7 = $6;
 $5 = $7;
 $8 = $5;
 $4 = $8;
 $9 = $4;
 $10 = ((($9)) + 4|0);
 $3 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $1 = $12;
 $13 = $1;
 $0 = $13;
 $14 = $0;
 $15 = HEAP32[$14>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPK8MaterialEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE7destroyEPNS_11__tree_nodeISB_PvEE($7,$15);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPK8MaterialEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE7destroyEPNS_11__tree_nodeISB_PvEE($this,$__nd) {
 $this = $this|0;
 $__nd = $__nd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__na = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 80|0;
 $18 = $this;
 $19 = $__nd;
 $20 = $18;
 $21 = $19;
 $22 = ($21|0)!=(0|0);
 if (!($22)) {
  STACKTOP = sp;return;
 }
 $23 = $19;
 $24 = HEAP32[$23>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPK8MaterialEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE7destroyEPNS_11__tree_nodeISB_PvEE($20,$24);
 $25 = $19;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPK8MaterialEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE7destroyEPNS_11__tree_nodeISB_PvEE($20,$27);
 $10 = $20;
 $28 = $10;
 $29 = ((($28)) + 4|0);
 $9 = $29;
 $30 = $9;
 $8 = $30;
 $31 = $8;
 $__na = $31;
 $32 = $__na;
 $33 = $19;
 $34 = ((($33)) + 16|0);
 $7 = $34;
 $35 = $7;
 $4 = $32;
 $5 = $35;
 $36 = $4;
 $37 = $5;
 ;HEAP8[$3>>0]=HEAP8[$6>>0]|0;
 $1 = $36;
 $2 = $37;
 $38 = $2;
 $0 = $38;
 $39 = $0;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPK8MaterialED2Ev($39);
 $40 = $__na;
 $41 = $19;
 $15 = $40;
 $16 = $41;
 $17 = 1;
 $42 = $15;
 $43 = $16;
 $44 = $17;
 $12 = $42;
 $13 = $43;
 $14 = $44;
 $45 = $13;
 $11 = $45;
 $46 = $11;
 __ZdlPv($46);
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPK8MaterialED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPK8MaterialNS_4lessIS6_EENS4_INS_4pairIKS6_S9_EEEEE25__construct_node_with_keyEOS6_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__a$i$i$i$i$i = 0, $__i$i$i$i$i$i = 0, $__na = 0, $__tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = sp + 40|0;
 $20 = sp + 464|0;
 $32 = sp + 32|0;
 $35 = sp + 463|0;
 $47 = sp + 276|0;
 $48 = sp + 24|0;
 $51 = sp + 264|0;
 $52 = sp + 256|0;
 $53 = sp + 16|0;
 $58 = sp + 232|0;
 $73 = sp + 8|0;
 $76 = sp + 462|0;
 $87 = sp;
 $90 = sp + 461|0;
 $104 = sp + 460|0;
 $105 = sp + 48|0;
 $102 = $this;
 $103 = $__k;
 $106 = $102;
 $101 = $106;
 $107 = $101;
 $108 = ((($107)) + 4|0);
 $100 = $108;
 $109 = $100;
 $99 = $109;
 $110 = $99;
 $__na = $110;
 $$expand_i1_val = 0;
 HEAP8[$104>>0] = $$expand_i1_val;
 $111 = $__na;
 $65 = $111;
 $66 = 1;
 $112 = $65;
 $113 = $66;
 $62 = $112;
 $63 = $113;
 $64 = 0;
 $114 = $63;
 $115 = $114<<5;
 $61 = $115;
 $116 = $61;
 $117 = (__Znwj($116)|0);
 $118 = $__na;
 $59 = $105;
 $60 = $118;
 $119 = $59;
 $120 = $60;
 HEAP32[$119>>2] = $120;
 $121 = ((($119)) + 4|0);
 HEAP8[$121>>0] = 0;
 $122 = ((($119)) + 5|0);
 HEAP8[$122>>0] = 0;
 $55 = $agg$result;
 $56 = $117;
 $57 = $105;
 $123 = $55;
 $124 = $56;
 $125 = $57;
 $54 = $125;
 $126 = $54;
 ;HEAP32[$58>>2]=HEAP32[$126>>2]|0;HEAP32[$58+4>>2]=HEAP32[$126+4>>2]|0;
 ;HEAP8[$53>>0]=HEAP8[$58>>0]|0;HEAP8[$53+1>>0]=HEAP8[$58+1>>0]|0;HEAP8[$53+2>>0]=HEAP8[$58+2>>0]|0;HEAP8[$53+3>>0]=HEAP8[$58+3>>0]|0;HEAP8[$53+4>>0]=HEAP8[$58+4>>0]|0;HEAP8[$53+5>>0]=HEAP8[$58+5>>0]|0;HEAP8[$53+6>>0]=HEAP8[$58+6>>0]|0;HEAP8[$53+7>>0]=HEAP8[$58+7>>0]|0;
 $50 = $123;
 HEAP32[$51>>2] = $124;
 $127 = $50;
 $49 = $51;
 $128 = $49;
 $129 = HEAP32[$128>>2]|0;
 $43 = $53;
 $130 = $43;
 ;HEAP32[$52>>2]=HEAP32[$130>>2]|0;HEAP32[$52+4>>2]=HEAP32[$130+4>>2]|0;
 ;HEAP8[$48>>0]=HEAP8[$52>>0]|0;HEAP8[$48+1>>0]=HEAP8[$52+1>>0]|0;HEAP8[$48+2>>0]=HEAP8[$52+2>>0]|0;HEAP8[$48+3>>0]=HEAP8[$52+3>>0]|0;HEAP8[$48+4>>0]=HEAP8[$52+4>>0]|0;HEAP8[$48+5>>0]=HEAP8[$52+5>>0]|0;HEAP8[$48+6>>0]=HEAP8[$52+6>>0]|0;HEAP8[$48+7>>0]=HEAP8[$52+7>>0]|0;
 $46 = $127;
 HEAP32[$47>>2] = $129;
 $131 = $46;
 $45 = $47;
 $132 = $45;
 $133 = HEAP32[$132>>2]|0;
 HEAP32[$131>>2] = $133;
 $134 = ((($131)) + 4|0);
 $44 = $48;
 $135 = $44;
 ;HEAP32[$134>>2]=HEAP32[$135>>2]|0;HEAP32[$134+4>>2]=HEAP32[$135+4>>2]|0;
 $136 = $__na;
 $42 = $agg$result;
 $137 = $42;
 $41 = $137;
 $138 = $41;
 $40 = $138;
 $139 = $40;
 $140 = HEAP32[$139>>2]|0;
 $141 = ((($140)) + 16|0);
 $39 = $141;
 $142 = $39;
 $143 = $103;
 $0 = $143;
 $144 = $0;
 $17 = $136;
 $18 = $142;
 $19 = $144;
 $145 = $17;
 $146 = $18;
 $147 = $19;
 $16 = $147;
 $148 = $16;
 ;HEAP8[$15>>0]=HEAP8[$20>>0]|0;
 $12 = $145;
 $13 = $146;
 $14 = $148;
 $149 = $12;
 $150 = $13;
 $151 = $14;
 $11 = $151;
 $152 = $11;
 $8 = $149;
 $9 = $150;
 $10 = $152;
 $153 = $9;
 $154 = $10;
 $7 = $154;
 $155 = $7;
 $5 = $153;
 $6 = $155;
 $156 = $5;
 $157 = $6;
 $4 = $157;
 $158 = $4;
 ;HEAP32[$156>>2]=HEAP32[$158>>2]|0;HEAP32[$156+4>>2]=HEAP32[$158+4>>2]|0;HEAP32[$156+8>>2]=HEAP32[$158+8>>2]|0;
 $159 = $6;
 $3 = $159;
 $160 = $3;
 $2 = $160;
 $161 = $2;
 $1 = $161;
 $162 = $1;
 $__a$i$i$i$i$i = $162;
 $__i$i$i$i$i$i = 0;
 while(1) {
  $163 = $__i$i$i$i$i$i;
  $164 = ($163>>>0)<(3);
  if (!($164)) {
   break;
  }
  $165 = $__i$i$i$i$i$i;
  $166 = $__a$i$i$i$i$i;
  $167 = (($166) + ($165<<2)|0);
  HEAP32[$167>>2] = 0;
  $168 = $__i$i$i$i$i$i;
  $169 = (($168) + 1)|0;
  $__i$i$i$i$i$i = $169;
 }
 $23 = $agg$result;
 $170 = $23;
 $22 = $170;
 $171 = $22;
 $21 = $171;
 $172 = $21;
 $173 = ((($172)) + 4|0);
 $174 = ((($173)) + 4|0);
 HEAP8[$174>>0] = 1;
 $175 = $__na;
 $26 = $agg$result;
 $176 = $26;
 $25 = $176;
 $177 = $25;
 $24 = $177;
 $178 = $24;
 $179 = HEAP32[$178>>2]|0;
 $180 = ((($179)) + 16|0);
 $181 = ((($180)) + 12|0);
 $27 = $181;
 $182 = $27;
 $33 = $175;
 $34 = $182;
 $183 = $33;
 $184 = $34;
 ;HEAP8[$32>>0]=HEAP8[$35>>0]|0;
 $30 = $183;
 $31 = $184;
 $185 = $30;
 $186 = $31;
 $28 = $185;
 $29 = $186;
 $187 = $29;
 HEAP32[$187>>2] = 0;
 $38 = $agg$result;
 $188 = $38;
 $37 = $188;
 $189 = $37;
 $36 = $189;
 $190 = $36;
 $191 = ((($190)) + 4|0);
 $192 = ((($191)) + 5|0);
 HEAP8[$192>>0] = 1;
 $$expand_i1_val2 = 1;
 HEAP8[$104>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$104>>0]|0;
 $193 = $$pre_trunc&1;
 if ($193) {
  STACKTOP = sp;return;
 }
 $98 = $agg$result;
 $194 = $98;
 $96 = $194;
 $97 = 0;
 $195 = $96;
 $95 = $195;
 $196 = $95;
 $94 = $196;
 $197 = $94;
 $198 = HEAP32[$197>>2]|0;
 $__tmp$i$i = $198;
 $199 = $97;
 $70 = $195;
 $200 = $70;
 $69 = $200;
 $201 = $69;
 HEAP32[$201>>2] = $199;
 $202 = $__tmp$i$i;
 $203 = ($202|0)!=(0|0);
 if (!($203)) {
  STACKTOP = sp;return;
 }
 $68 = $195;
 $204 = $68;
 $67 = $204;
 $205 = $67;
 $206 = ((($205)) + 4|0);
 $207 = $__tmp$i$i;
 $92 = $206;
 $93 = $207;
 $208 = $92;
 $209 = ((($208)) + 5|0);
 $210 = HEAP8[$209>>0]|0;
 $211 = $210&1;
 if ($211) {
  $212 = HEAP32[$208>>2]|0;
  $213 = $93;
  $214 = ((($213)) + 16|0);
  $215 = ((($214)) + 12|0);
  $91 = $215;
  $216 = $91;
  $88 = $212;
  $89 = $216;
  $217 = $88;
  $218 = $89;
  ;HEAP8[$87>>0]=HEAP8[$90>>0]|0;
  $85 = $217;
  $86 = $218;
 }
 $219 = ((($208)) + 4|0);
 $220 = HEAP8[$219>>0]|0;
 $221 = $220&1;
 if ($221) {
  $222 = HEAP32[$208>>2]|0;
  $223 = $93;
  $224 = ((($223)) + 16|0);
  $77 = $224;
  $225 = $77;
  $74 = $222;
  $75 = $225;
  $226 = $74;
  $227 = $75;
  ;HEAP8[$73>>0]=HEAP8[$76>>0]|0;
  $71 = $226;
  $72 = $227;
  $228 = $72;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($228);
 }
 $229 = $93;
 $230 = ($229|0)!=(0|0);
 if (!($230)) {
  STACKTOP = sp;return;
 }
 $231 = HEAP32[$208>>2]|0;
 $232 = $93;
 $82 = $231;
 $83 = $232;
 $84 = 1;
 $233 = $82;
 $234 = $83;
 $235 = $84;
 $79 = $233;
 $80 = $234;
 $81 = $235;
 $236 = $80;
 $78 = $236;
 $237 = $78;
 __ZdlPv($237);
 STACKTOP = sp;return;
}
function _main() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $30 = sp + 276|0;
 $31 = sp + 88|0;
 $32 = sp + 80|0;
 $33 = sp + 72|0;
 $34 = sp + 264|0;
 $35 = sp + 64|0;
 $36 = sp + 56|0;
 $37 = sp + 48|0;
 $38 = sp + 252|0;
 $39 = sp + 40|0;
 $40 = sp + 32|0;
 $41 = sp + 24|0;
 $42 = sp + 240|0;
 $43 = sp + 16|0;
 $44 = sp + 8|0;
 $45 = sp;
 $46 = sp + 176|0;
 $47 = sp + 164|0;
 $50 = sp + 144|0;
 $51 = sp + 132|0;
 $52 = sp + 120|0;
 $53 = sp + 108|0;
 $54 = sp + 96|0;
 $55 = (_glfwInit()|0);
 $56 = ($55|0)!=(0);
 if (!($56)) {
  _exit(1);
  // unreachable;
 }
 $57 = (_glfwOpenWindow(640,480,8,8,8,8,16,0,65537)|0);
 $58 = ($57|0)!=(0);
 if (!($58)) {
  _glfwTerminate();
  _exit(1);
  // unreachable;
 }
 $59 = (_glewInit()|0);
 $60 = ($59|0)!=(0);
 if ($60) {
  _glfwCloseWindow();
  _glfwTerminate();
  _exit(1);
  // unreachable;
 }
 _glfwSetKeyCallback((392|0));
 (_emscripten_set_mousemove_callback((0|0),(0|0),0,(393|0))|0);
 HEAPF64[$31>>3] = 0.20000000000000001;
 HEAPF64[$32>>3] = 0.20000000000000001;
 HEAPF64[$33>>3] = 0.20000000000000001;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2IdddEERKT_RKT0_RKT1_($30,$31,$32,$33);
 ;HEAP32[2568>>2]=HEAP32[$30>>2]|0;HEAP32[2568+4>>2]=HEAP32[$30+4>>2]|0;HEAP32[2568+8>>2]=HEAP32[$30+8>>2]|0;
 HEAPF64[$35>>3] = 1.0;
 HEAPF64[$36>>3] = 1.0;
 HEAPF64[$37>>3] = 1.0;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2IdddEERKT_RKT0_RKT1_($34,$35,$36,$37);
 ;HEAP32[(2580)>>2]=HEAP32[$34>>2]|0;HEAP32[(2580)+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[(2580)+8>>2]=HEAP32[$34+8>>2]|0;
 HEAPF64[$39>>3] = 1.0;
 HEAPF64[$40>>3] = 1.0;
 HEAPF64[$41>>3] = 1.0;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2IdddEERKT_RKT0_RKT1_($38,$39,$40,$41);
 ;HEAP32[(2592)>>2]=HEAP32[$38>>2]|0;HEAP32[(2592)+4>>2]=HEAP32[$38+4>>2]|0;HEAP32[(2592)+8>>2]=HEAP32[$38+8>>2]|0;
 HEAPF64[$43>>3] = 0.0;
 HEAPF64[$44>>3] = 0.0;
 HEAPF64[$45>>3] = -1.0;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2IdddEERKT_RKT0_RKT1_($42,$43,$44,$45);
 ;HEAP32[(2604)>>2]=HEAP32[$42>>2]|0;HEAP32[(2604)+4>>2]=HEAP32[$42+4>>2]|0;HEAP32[(2604)+8>>2]=HEAP32[$42+8>>2]|0;
 __ZN3glm11perspectiveIfEENS_7tmat4x4IT_LNS_9precisionE0EEES2_S2_S2_S2_($46,45.0,1.3333333730697632,0.10000000149011612,100.0);
 dest=(2704); src=$46; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $28 = $47;
 $29 = 13889;
 $61 = $28;
 $27 = $61;
 $62 = $27;
 $26 = $62;
 $63 = $26;
 $25 = $63;
 $64 = $29;
 $65 = $29;
 $66 = (__ZNSt3__111char_traitsIcE6lengthEPKc($65)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($61,$64,$66);
 __THREW__ = 0;
 $67 = (invoke_iii(394,(2772|0),($47|0))|0);
 $68 = __THREW__; __THREW__ = 0;
 $69 = $68&1;
 if ($69) {
  $184 = ___cxa_find_matching_catch()|0;
  $185 = tempRet0;
  $48 = $184;
  $49 = $185;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($47);
  $208 = $48;
  $209 = $49;
  ___resumeException($208|0);
  // unreachable;
 }
 HEAP32[696] = $67;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($47);
 $23 = $50;
 $24 = 13905;
 $70 = $23;
 $22 = $70;
 $71 = $22;
 $21 = $71;
 $72 = $21;
 $20 = $72;
 $73 = $24;
 $74 = $24;
 $75 = (__ZNSt3__111char_traitsIcE6lengthEPKc($74)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($70,$73,$75);
 __THREW__ = 0;
 $76 = (invoke_iii(394,(2772|0),($50|0))|0);
 $77 = __THREW__; __THREW__ = 0;
 $78 = $77&1;
 if ($78) {
  $186 = ___cxa_find_matching_catch()|0;
  $187 = tempRet0;
  $48 = $186;
  $49 = $187;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($50);
  $208 = $48;
  $209 = $49;
  ___resumeException($208|0);
  // unreachable;
 }
 HEAP32[697] = $76;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($50);
 $18 = $51;
 $19 = 13913;
 $79 = $18;
 $17 = $79;
 $80 = $17;
 $16 = $80;
 $81 = $16;
 $15 = $81;
 $82 = $19;
 $83 = $19;
 $84 = (__ZNSt3__111char_traitsIcE6lengthEPKc($83)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($79,$82,$84);
 __THREW__ = 0;
 $85 = (invoke_iii(394,(2772|0),($51|0))|0);
 $86 = __THREW__; __THREW__ = 0;
 $87 = $86&1;
 if ($87) {
  $188 = ___cxa_find_matching_catch()|0;
  $189 = tempRet0;
  $48 = $188;
  $49 = $189;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($51);
  $208 = $48;
  $209 = $49;
  ___resumeException($208|0);
  // unreachable;
 }
 HEAP32[698] = $85;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($51);
 $13 = $52;
 $14 = 13925;
 $88 = $13;
 $12 = $88;
 $89 = $12;
 $11 = $89;
 $90 = $11;
 $10 = $90;
 $91 = $14;
 $92 = $14;
 $93 = (__ZNSt3__111char_traitsIcE6lengthEPKc($92)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($88,$91,$93);
 __THREW__ = 0;
 $94 = (invoke_iii(394,(2772|0),($52|0))|0);
 $95 = __THREW__; __THREW__ = 0;
 $96 = $95&1;
 if ($96) {
  $190 = ___cxa_find_matching_catch()|0;
  $191 = tempRet0;
  $48 = $190;
  $49 = $191;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($52);
  $208 = $48;
  $209 = $49;
  ___resumeException($208|0);
  // unreachable;
 }
 HEAP32[699] = $94;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($52);
 $8 = $53;
 $9 = 13936;
 $97 = $8;
 $7 = $97;
 $98 = $7;
 $6 = $98;
 $99 = $6;
 $5 = $99;
 $100 = $9;
 $101 = $9;
 $102 = (__ZNSt3__111char_traitsIcE6lengthEPKc($101)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($97,$100,$102);
 __THREW__ = 0;
 $103 = (invoke_iii(394,(2772|0),($53|0))|0);
 $104 = __THREW__; __THREW__ = 0;
 $105 = $104&1;
 if ($105) {
  $192 = ___cxa_find_matching_catch()|0;
  $193 = tempRet0;
  $48 = $192;
  $49 = $193;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($53);
  $208 = $48;
  $209 = $49;
  ___resumeException($208|0);
  // unreachable;
 }
 HEAP32[700] = $103;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($53);
 $3 = $54;
 $4 = 13946;
 $106 = $3;
 $2 = $106;
 $107 = $2;
 $1 = $107;
 $108 = $1;
 $0 = $108;
 $109 = $4;
 $110 = $4;
 $111 = (__ZNSt3__111char_traitsIcE6lengthEPKc($110)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($106,$109,$111);
 __THREW__ = 0;
 $112 = (invoke_iii(395,(2772|0),($54|0))|0);
 $113 = __THREW__; __THREW__ = 0;
 $114 = $113&1;
 if ($114) {
  $194 = ___cxa_find_matching_catch()|0;
  $195 = tempRet0;
  $48 = $194;
  $49 = $195;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($54);
  $208 = $48;
  $209 = $49;
  ___resumeException($208|0);
  // unreachable;
 }
 HEAP32[701] = $112;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($54);
 $115 = (__Znwj(100)|0);
 $116 = HEAP32[696]|0;
 __THREW__ = 0;
 invoke_vii(396,($115|0),($116|0));
 $117 = __THREW__; __THREW__ = 0;
 $118 = $117&1;
 if ($118) {
  $196 = ___cxa_find_matching_catch()|0;
  $197 = tempRet0;
  $48 = $196;
  $49 = $197;
  __ZdlPv($115);
  $208 = $48;
  $209 = $49;
  ___resumeException($208|0);
  // unreachable;
 }
 HEAP32[702] = $115;
 $119 = HEAP32[702]|0;
 $120 = ((($119)) + 4|0);
 $121 = ((($120)) + 64|0);
 $122 = ((($121)) + 8|0);
 HEAPF32[$122>>2] = 4.0;
 $123 = (__Znwj(100)|0);
 $124 = HEAP32[697]|0;
 __THREW__ = 0;
 invoke_vii(396,($123|0),($124|0));
 $125 = __THREW__; __THREW__ = 0;
 $126 = $125&1;
 if ($126) {
  $198 = ___cxa_find_matching_catch()|0;
  $199 = tempRet0;
  $48 = $198;
  $49 = $199;
  __ZdlPv($123);
  $208 = $48;
  $209 = $49;
  ___resumeException($208|0);
  // unreachable;
 }
 HEAP32[703] = $123;
 $127 = HEAP32[703]|0;
 $128 = ((($127)) + 4|0);
 $129 = ((($128)) + 64|0);
 $130 = ((($129)) + 8|0);
 HEAPF32[$130>>2] = -10.0;
 $131 = (__Znwj(100)|0);
 $132 = HEAP32[698]|0;
 __THREW__ = 0;
 invoke_vii(396,($131|0),($132|0));
 $133 = __THREW__; __THREW__ = 0;
 $134 = $133&1;
 if ($134) {
  $200 = ___cxa_find_matching_catch()|0;
  $201 = tempRet0;
  $48 = $200;
  $49 = $201;
  __ZdlPv($131);
  $208 = $48;
  $209 = $49;
  ___resumeException($208|0);
  // unreachable;
 }
 HEAP32[704] = $131;
 $135 = HEAP32[704]|0;
 $136 = ((($135)) + 4|0);
 $137 = ((($136)) + 64|0);
 $138 = ((($137)) + 8|0);
 HEAPF32[$138>>2] = -2.0;
 $139 = HEAP32[704]|0;
 $140 = ((($139)) + 4|0);
 $141 = ((($140)) + 64|0);
 $142 = ((($141)) + 4|0);
 HEAPF32[$142>>2] = 2.0;
 $143 = (__Znwj(100)|0);
 $144 = HEAP32[699]|0;
 __THREW__ = 0;
 invoke_vii(396,($143|0),($144|0));
 $145 = __THREW__; __THREW__ = 0;
 $146 = $145&1;
 if ($146) {
  $202 = ___cxa_find_matching_catch()|0;
  $203 = tempRet0;
  $48 = $202;
  $49 = $203;
  __ZdlPv($143);
  $208 = $48;
  $209 = $49;
  ___resumeException($208|0);
  // unreachable;
 }
 HEAP32[705] = $143;
 $147 = HEAP32[705]|0;
 $148 = ((($147)) + 4|0);
 $149 = ((($148)) + 64|0);
 HEAPF32[$149>>2] = -2.0;
 $150 = HEAP32[705]|0;
 $151 = ((($150)) + 4|0);
 $152 = ((($151)) + 64|0);
 $153 = ((($152)) + 4|0);
 HEAPF32[$153>>2] = 1.0;
 $154 = HEAP32[705]|0;
 $155 = ((($154)) + 4|0);
 $156 = ((($155)) + 76|0);
 $157 = ((($156)) + 4|0);
 HEAPF32[$157>>2] = 45.0;
 $158 = (__Znwj(100)|0);
 $159 = HEAP32[700]|0;
 __THREW__ = 0;
 invoke_vii(396,($158|0),($159|0));
 $160 = __THREW__; __THREW__ = 0;
 $161 = $160&1;
 if ($161) {
  $204 = ___cxa_find_matching_catch()|0;
  $205 = tempRet0;
  $48 = $204;
  $49 = $205;
  __ZdlPv($158);
  $208 = $48;
  $209 = $49;
  ___resumeException($208|0);
  // unreachable;
 }
 HEAP32[706] = $158;
 $162 = HEAP32[706]|0;
 $163 = ((($162)) + 4|0);
 $164 = ((($163)) + 64|0);
 HEAPF32[$164>>2] = 2.0;
 $165 = (__Znwj(100)|0);
 $166 = HEAP32[701]|0;
 __THREW__ = 0;
 invoke_vii(396,($165|0),($166|0));
 $167 = __THREW__; __THREW__ = 0;
 $168 = $167&1;
 if (!($168)) {
  HEAP32[707] = $165;
  $169 = HEAP32[707]|0;
  $170 = ((($169)) + 4|0);
  $171 = ((($170)) + 64|0);
  HEAPF32[$171>>2] = -6.0;
  $172 = (__ZN5ScenelsEPKN6Lights3SunE(2832,2568)|0);
  $173 = HEAP32[702]|0;
  $174 = (__ZN5ScenelsEPK6Object($172,$173)|0);
  $175 = HEAP32[703]|0;
  $176 = (__ZN5ScenelsEPK6Object($174,$175)|0);
  $177 = HEAP32[704]|0;
  $178 = (__ZN5ScenelsEPK6Object($176,$177)|0);
  $179 = HEAP32[705]|0;
  $180 = (__ZN5ScenelsEPK6Object($178,$179)|0);
  $181 = HEAP32[706]|0;
  $182 = (__ZN5ScenelsEPK6Object($180,$181)|0);
  $183 = HEAP32[707]|0;
  (__ZN5ScenelsEPK6Object($182,$183)|0);
  _glViewport(0,0,640,480);
  _glEnable(2929);
  _glClearColor(1.0,1.0,1.0,0.0);
  _emscripten_set_main_loop((397|0),0,1);
  STACKTOP = sp;return 0;
 }
 $206 = ___cxa_find_matching_catch()|0;
 $207 = tempRet0;
 $48 = $206;
 $49 = $207;
 __ZdlPv($165);
 $208 = $48;
 $209 = $49;
 ___resumeException($208|0);
 // unreachable;
 return (0)|0;
}
function __ZL6on_keyii($key,$action) {
 $key = $key|0;
 $action = $action|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $key;
 $1 = $action;
 $2 = $1;
 $3 = ($2|0)!=(0);
 $4 = $0;
 $5 = (13960 + ($4)|0);
 $6 = $3&1;
 HEAP8[$5>>0] = $6;
 $7 = $0;
 $8 = ($7|0)==(69);
 $9 = $1;
 $10 = ($9|0)==(1);
 $or$cond = $8 & $10;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $11 = HEAP8[13959]|0;
 $12 = $11&1;
 if ($12) {
  HEAP8[13959] = 0;
  $13 = HEAP32[702]|0;
  $14 = ((($13)) + 92|0);
  HEAP8[$14>>0] = 1;
  STACKTOP = sp;return;
 }
 $15 = HEAP32[702]|0;
 $16 = ((($15)) + 4|0);
 $17 = ((($16)) + 64|0);
 $18 = HEAP32[703]|0;
 $19 = ((($18)) + 4|0);
 $20 = ((($19)) + 64|0);
 $21 = (+__ZN3glm8distanceIfLNS_9precisionE0ENS_5tvec3EEET_RKT1_IS3_XT0_EES7_($17,$20));
 $22 = $21;
 $23 = $22 <= 1.0;
 if (!($23)) {
  STACKTOP = sp;return;
 }
 HEAP8[13959] = 1;
 $24 = HEAP32[702]|0;
 $25 = ((($24)) + 92|0);
 HEAP8[$25>>0] = 0;
 STACKTOP = sp;return;
}
function __ZL15on_em_mousemoveiPK20EmscriptenMouseEventPv($event_type,$mouse_event,$user_data) {
 $event_type = $event_type|0;
 $mouse_event = $mouse_event|0;
 $user_data = $user_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0;
 var $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $event_type;
 $1 = $mouse_event;
 $2 = $user_data;
 $3 = $1;
 $4 = ((($3)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (+($5|0));
 $7 = +HEAPF32[713];
 $8 = $7 - $6;
 HEAPF32[713] = $8;
 $9 = $1;
 $10 = ((($9)) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (+($11|0));
 $13 = +HEAPF32[714];
 $14 = $13 - $12;
 HEAPF32[714] = $14;
 $15 = +HEAPF32[713];
 $16 = $15 < 0.0;
 if ($16) {
  HEAPF32[713] = 359.0;
 } else {
  $17 = +HEAPF32[713];
  $18 = $17 >= 360.0;
  if ($18) {
   HEAPF32[713] = 0.0;
  }
 }
 $19 = +HEAPF32[714];
 $20 = $19 < -90.0;
 if ($20) {
  HEAPF32[714] = -90.0;
  STACKTOP = sp;return 1;
 }
 $21 = +HEAPF32[714];
 $22 = $21 > 90.0;
 if (!($22)) {
  STACKTOP = sp;return 1;
 }
 HEAPF32[714] = 90.0;
 STACKTOP = sp;return 1;
}
function __ZN3glm5tvec3IfLNS_9precisionE0EEC2IdddEERKT_RKT0_RKT1_($this,$a,$b,$c) {
 $this = $this|0;
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $a;
 $2 = $b;
 $3 = $c;
 $4 = $0;
 $5 = $1;
 $6 = +HEAPF64[$5>>3];
 $7 = $6;
 HEAPF32[$4>>2] = $7;
 $8 = ((($4)) + 4|0);
 $9 = $2;
 $10 = +HEAPF64[$9>>3];
 $11 = $10;
 HEAPF32[$8>>2] = $11;
 $12 = ((($4)) + 8|0);
 $13 = $3;
 $14 = +HEAPF64[$13>>3];
 $15 = $14;
 HEAPF32[$12>>2] = $15;
 STACKTOP = sp;return;
}
function __ZN3glm11perspectiveIfEENS_7tmat4x4IT_LNS_9precisionE0EEES2_S2_S2_S2_($agg$result,$fovy,$aspect,$zNear,$zFar) {
 $agg$result = $agg$result|0;
 $fovy = +$fovy;
 $aspect = +$aspect;
 $zNear = +$zNear;
 $zFar = +$zFar;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fovy;
 $1 = $aspect;
 $2 = $zNear;
 $3 = $zFar;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 __ZN3glm13perspectiveRHIfEENS_7tmat4x4IT_LNS_9precisionE0EEES2_S2_S2_S2_($agg$result,$4,$5,$6,$7);
 STACKTOP = sp;return;
}
function __ZN5Store4loadIN6Models6StaticEEEPKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEE($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $13 = sp + 120|0;
 $15 = sp + 112|0;
 $17 = sp + 104|0;
 $19 = sp;
 $20 = sp + 96|0;
 $23 = sp + 84|0;
 $26 = sp + 72|0;
 $27 = sp + 60|0;
 $30 = sp + 48|0;
 $31 = sp + 36|0;
 $32 = sp + 24|0;
 $33 = sp + 12|0;
 $24 = $this;
 $25 = $name;
 $34 = $24;
 $35 = $25;
 __ZN6Models6Static8filenameERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($27,$35);
 $21 = $34;
 $22 = $27;
 $36 = $21;
 $37 = $22;
 __THREW__ = 0;
 $38 = (invoke_iii(333,($36|0),($37|0))|0);
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 if ($40) {
  $74 = ___cxa_find_matching_catch()|0;
  $75 = tempRet0;
  $28 = $74;
  $29 = $75;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($27);
  $99 = $28;
  $100 = $29;
  ___resumeException($99|0);
  // unreachable;
 }
 HEAP32[$23>>2] = $38;
 ;HEAP8[$19>>0]=HEAP8[$23>>0]|0;HEAP8[$19+1>>0]=HEAP8[$23+1>>0]|0;HEAP8[$19+2>>0]=HEAP8[$23+2>>0]|0;HEAP8[$19+3>>0]=HEAP8[$23+3>>0]|0;
 $18 = $20;
 $41 = $18;
 ;HEAP32[$41>>2]=HEAP32[$19>>2]|0;
 $42 = HEAP32[$20>>2]|0;
 HEAP32[$26>>2] = $42;
 $16 = $34;
 $43 = $16;
 $14 = $43;
 $44 = $14;
 $12 = $44;
 $45 = $12;
 $46 = ((($45)) + 4|0);
 $11 = $46;
 $47 = $11;
 $10 = $47;
 $48 = $10;
 $9 = $48;
 $49 = $9;
 $8 = $49;
 $50 = $8;
 $6 = $13;
 $7 = $50;
 $51 = $6;
 $52 = $7;
 HEAP32[$51>>2] = $52;
 $53 = HEAP32[$13>>2]|0;
 HEAP32[$17>>2] = $53;
 ;HEAP8[$5>>0]=HEAP8[$17>>0]|0;HEAP8[$5+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[$17+3>>0]|0;
 $4 = $15;
 $54 = $4;
 ;HEAP32[$54>>2]=HEAP32[$5>>2]|0;
 $55 = HEAP32[$15>>2]|0;
 HEAP32[$30>>2] = $55;
 $2 = $26;
 $3 = $30;
 $56 = $2;
 $57 = $3;
 $0 = $56;
 $1 = $57;
 $58 = $0;
 $59 = HEAP32[$58>>2]|0;
 $60 = $1;
 $61 = HEAP32[$60>>2]|0;
 $62 = ($59|0)==($61|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($27);
 do {
  if ($62) {
   $63 = (__Znwj(80)|0);
   $64 = $25;
   __THREW__ = 0;
   invoke_viii(398,($63|0),($34|0),($64|0));
   $65 = __THREW__; __THREW__ = 0;
   $66 = $65&1;
   if ($66) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $28 = $76;
    $29 = $77;
    __ZdlPv($63);
    $99 = $28;
    $100 = $29;
    ___resumeException($99|0);
    // unreachable;
   }
   $67 = ($63|0)==(0|0);
   $68 = ((($63)) + 4|0);
   $69 = $67 ? 0 : $68;
   $70 = $25;
   __ZN6Models6Static8filenameERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($31,$70);
   __THREW__ = 0;
   $71 = (invoke_iii(335,($34|0),($31|0))|0);
   $72 = __THREW__; __THREW__ = 0;
   $73 = $72&1;
   if (!($73)) {
    HEAP32[$71>>2] = $69;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($31);
    break;
   }
   $78 = ___cxa_find_matching_catch()|0;
   $79 = tempRet0;
   $28 = $78;
   $29 = $79;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($31);
   $99 = $28;
   $100 = $29;
   ___resumeException($99|0);
   // unreachable;
  }
 } while(0);
 $80 = $25;
 __ZN6Models6Static8filenameERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($32,$80);
 __THREW__ = 0;
 $81 = (invoke_iii(335,($34|0),($32|0))|0);
 $82 = __THREW__; __THREW__ = 0;
 $83 = $82&1;
 if ($83) {
  $95 = ___cxa_find_matching_catch()|0;
  $96 = tempRet0;
  $28 = $95;
  $29 = $96;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($32);
  $99 = $28;
  $100 = $29;
  ___resumeException($99|0);
  // unreachable;
 }
 $84 = HEAP32[$81>>2]|0;
 $85 = HEAP32[$84>>2]|0;
 $86 = (($85) + 1)|0;
 HEAP32[$84>>2] = $86;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($32);
 $87 = $25;
 __ZN6Models6Static8filenameERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($33,$87);
 __THREW__ = 0;
 $88 = (invoke_iii(335,($34|0),($33|0))|0);
 $89 = __THREW__; __THREW__ = 0;
 $90 = $89&1;
 if (!($90)) {
  $91 = HEAP32[$88>>2]|0;
  $92 = ($91|0)==(0|0);
  $93 = ((($91)) + -4|0);
  $94 = $92 ? 0 : $93;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($33);
  STACKTOP = sp;return ($94|0);
 }
 $97 = ___cxa_find_matching_catch()|0;
 $98 = tempRet0;
 $28 = $97;
 $29 = $98;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($33);
 $99 = $28;
 $100 = $29;
 ___resumeException($99|0);
 // unreachable;
 return (0)|0;
}
function __ZN5Store4loadIN6Models3RawEEEPKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEE($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $13 = sp + 120|0;
 $15 = sp + 112|0;
 $17 = sp + 104|0;
 $19 = sp;
 $20 = sp + 96|0;
 $23 = sp + 84|0;
 $26 = sp + 72|0;
 $27 = sp + 60|0;
 $30 = sp + 48|0;
 $31 = sp + 36|0;
 $32 = sp + 24|0;
 $33 = sp + 12|0;
 $24 = $this;
 $25 = $name;
 $34 = $24;
 $35 = $25;
 __ZN6Models3Raw8filenameERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($27,$35);
 $21 = $34;
 $22 = $27;
 $36 = $21;
 $37 = $22;
 __THREW__ = 0;
 $38 = (invoke_iii(333,($36|0),($37|0))|0);
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 if ($40) {
  $74 = ___cxa_find_matching_catch()|0;
  $75 = tempRet0;
  $28 = $74;
  $29 = $75;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($27);
  $99 = $28;
  $100 = $29;
  ___resumeException($99|0);
  // unreachable;
 }
 HEAP32[$23>>2] = $38;
 ;HEAP8[$19>>0]=HEAP8[$23>>0]|0;HEAP8[$19+1>>0]=HEAP8[$23+1>>0]|0;HEAP8[$19+2>>0]=HEAP8[$23+2>>0]|0;HEAP8[$19+3>>0]=HEAP8[$23+3>>0]|0;
 $18 = $20;
 $41 = $18;
 ;HEAP32[$41>>2]=HEAP32[$19>>2]|0;
 $42 = HEAP32[$20>>2]|0;
 HEAP32[$26>>2] = $42;
 $16 = $34;
 $43 = $16;
 $14 = $43;
 $44 = $14;
 $12 = $44;
 $45 = $12;
 $46 = ((($45)) + 4|0);
 $11 = $46;
 $47 = $11;
 $10 = $47;
 $48 = $10;
 $9 = $48;
 $49 = $9;
 $8 = $49;
 $50 = $8;
 $6 = $13;
 $7 = $50;
 $51 = $6;
 $52 = $7;
 HEAP32[$51>>2] = $52;
 $53 = HEAP32[$13>>2]|0;
 HEAP32[$17>>2] = $53;
 ;HEAP8[$5>>0]=HEAP8[$17>>0]|0;HEAP8[$5+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[$17+3>>0]|0;
 $4 = $15;
 $54 = $4;
 ;HEAP32[$54>>2]=HEAP32[$5>>2]|0;
 $55 = HEAP32[$15>>2]|0;
 HEAP32[$30>>2] = $55;
 $2 = $26;
 $3 = $30;
 $56 = $2;
 $57 = $3;
 $0 = $56;
 $1 = $57;
 $58 = $0;
 $59 = HEAP32[$58>>2]|0;
 $60 = $1;
 $61 = HEAP32[$60>>2]|0;
 $62 = ($59|0)==($61|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($27);
 do {
  if ($62) {
   $63 = (__Znwj(60)|0);
   $64 = $25;
   __THREW__ = 0;
   invoke_viii(399,($63|0),($34|0),($64|0));
   $65 = __THREW__; __THREW__ = 0;
   $66 = $65&1;
   if ($66) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $28 = $76;
    $29 = $77;
    __ZdlPv($63);
    $99 = $28;
    $100 = $29;
    ___resumeException($99|0);
    // unreachable;
   }
   $67 = ($63|0)==(0|0);
   $68 = ((($63)) + 4|0);
   $69 = $67 ? 0 : $68;
   $70 = $25;
   __ZN6Models3Raw8filenameERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($31,$70);
   __THREW__ = 0;
   $71 = (invoke_iii(335,($34|0),($31|0))|0);
   $72 = __THREW__; __THREW__ = 0;
   $73 = $72&1;
   if (!($73)) {
    HEAP32[$71>>2] = $69;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($31);
    break;
   }
   $78 = ___cxa_find_matching_catch()|0;
   $79 = tempRet0;
   $28 = $78;
   $29 = $79;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($31);
   $99 = $28;
   $100 = $29;
   ___resumeException($99|0);
   // unreachable;
  }
 } while(0);
 $80 = $25;
 __ZN6Models3Raw8filenameERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($32,$80);
 __THREW__ = 0;
 $81 = (invoke_iii(335,($34|0),($32|0))|0);
 $82 = __THREW__; __THREW__ = 0;
 $83 = $82&1;
 if ($83) {
  $95 = ___cxa_find_matching_catch()|0;
  $96 = tempRet0;
  $28 = $95;
  $29 = $96;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($32);
  $99 = $28;
  $100 = $29;
  ___resumeException($99|0);
  // unreachable;
 }
 $84 = HEAP32[$81>>2]|0;
 $85 = HEAP32[$84>>2]|0;
 $86 = (($85) + 1)|0;
 HEAP32[$84>>2] = $86;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($32);
 $87 = $25;
 __ZN6Models3Raw8filenameERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($33,$87);
 __THREW__ = 0;
 $88 = (invoke_iii(335,($34|0),($33|0))|0);
 $89 = __THREW__; __THREW__ = 0;
 $90 = $89&1;
 if (!($90)) {
  $91 = HEAP32[$88>>2]|0;
  $92 = ($91|0)==(0|0);
  $93 = ((($91)) + -4|0);
  $94 = $92 ? 0 : $93;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($33);
  STACKTOP = sp;return ($94|0);
 }
 $97 = ___cxa_find_matching_catch()|0;
 $98 = tempRet0;
 $28 = $97;
 $29 = $98;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($33);
 $99 = $28;
 $100 = $29;
 ___resumeException($99|0);
 // unreachable;
 return (0)|0;
}
function __ZN7Objects9WithModelC2ERK5Model($this,$model) {
 $this = $this|0;
 $model = $model|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $model;
 $2 = $0;
 __ZN6ObjectC2Ev($2);
 $3 = 2328;
 HEAP32[$2>>2] = $3;
 $4 = ((($2)) + 96|0);
 $5 = $1;
 HEAP32[$4>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN5ScenelsEPKN6Lights3SunE($this,$sun) {
 $this = $this|0;
 $sun = $sun|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $sun;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 12|0);
 HEAP32[$4>>2] = $3;
 STACKTOP = sp;return ($2|0);
}
function __ZN5ScenelsEPK6Object($this,$object) {
 $this = $this|0;
 $object = $object|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__annotator$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $13 = sp + 97|0;
 $__annotator$i = sp + 96|0;
 $24 = sp + 4|0;
 $23 = $this;
 HEAP32[$24>>2] = $object;
 $25 = $23;
 $21 = $25;
 $22 = $24;
 $26 = $21;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $20 = $26;
 $29 = $20;
 $30 = ((($29)) + 8|0);
 $19 = $30;
 $31 = $19;
 $18 = $31;
 $32 = $18;
 $33 = HEAP32[$32>>2]|0;
 $34 = ($28|0)!=($33|0);
 if ($34) {
  __ZNSt3__16vectorIPK6ObjectNS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i,$26,1);
  $17 = $26;
  $35 = $17;
  $36 = ((($35)) + 8|0);
  $16 = $36;
  $37 = $16;
  $15 = $37;
  $38 = $15;
  $39 = ((($26)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $14 = $40;
  $41 = $14;
  $42 = $22;
  $10 = $38;
  $11 = $41;
  $12 = $42;
  $43 = $10;
  $44 = $11;
  $45 = $12;
  $9 = $45;
  $46 = $9;
  ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
  $5 = $43;
  $6 = $44;
  $7 = $46;
  $47 = $5;
  $48 = $6;
  $49 = $7;
  $4 = $49;
  $50 = $4;
  $1 = $47;
  $2 = $48;
  $3 = $50;
  $51 = $2;
  $52 = $3;
  $0 = $52;
  $53 = $0;
  $54 = HEAP32[$53>>2]|0;
  HEAP32[$51>>2] = $54;
  __ZNSt3__16vectorIPK6ObjectNS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
  $55 = ((($26)) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ((($56)) + 4|0);
  HEAP32[$55>>2] = $57;
  STACKTOP = sp;return ($25|0);
 } else {
  $58 = $22;
  __ZNSt3__16vectorIPK6ObjectNS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_($26,$58);
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __ZL7iteratev() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0.0, $26 = 0;
 var $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0, $276 = 0, $277 = 0, $278 = 0.0;
 var $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0.0;
 var $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0.0;
 var $332 = 0.0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0;
 var $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0;
 var $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1248|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 1184|0;
 $1 = sp + 1120|0;
 $2 = sp + 1056|0;
 $3 = sp + 992|0;
 $4 = sp + 928|0;
 $5 = sp + 864|0;
 $6 = sp + 856|0;
 $7 = sp + 844|0;
 $8 = sp + 840|0;
 $9 = sp + 836|0;
 $10 = sp + 832|0;
 $11 = sp + 768|0;
 $12 = sp + 704|0;
 $13 = sp + 696|0;
 $14 = sp + 684|0;
 $15 = sp + 680|0;
 $16 = sp + 676|0;
 $17 = sp + 672|0;
 $18 = sp + 608|0;
 $19 = sp + 544|0;
 $20 = sp + 536|0;
 $21 = sp + 524|0;
 $22 = sp + 520|0;
 $23 = sp + 516|0;
 $24 = sp + 512|0;
 $25 = sp + 448|0;
 $26 = sp + 384|0;
 $27 = sp + 320|0;
 $28 = sp + 256|0;
 $29 = sp + 192|0;
 $30 = sp + 184|0;
 $31 = sp + 172|0;
 $32 = sp + 168|0;
 $33 = sp + 164|0;
 $34 = sp + 160|0;
 $35 = sp + 96|0;
 $36 = sp + 32|0;
 $37 = sp + 24|0;
 $38 = sp + 12|0;
 $39 = sp + 8|0;
 $40 = sp + 4|0;
 $41 = sp;
 $42 = HEAP8[13959]|0;
 $43 = $42&1;
 if ($43) {
  $44 = HEAP32[702]|0;
  $45 = ((($44)) + 4|0);
  $46 = ((($45)) + 64|0);
  $47 = HEAP32[703]|0;
  $48 = ((($47)) + 4|0);
  $49 = ((($48)) + 64|0);
  ;HEAP32[$46>>2]=HEAP32[$49>>2]|0;HEAP32[$46+4>>2]=HEAP32[$49+4>>2]|0;HEAP32[$46+8>>2]=HEAP32[$49+8>>2]|0;
  $50 = HEAP8[(14047)>>0]|0;
  $51 = $50&1;
  if ($51) {
   $52 = +HEAPF32[712];
   $53 = $52;
   $54 = $53 + 0.10000000000000001;
   $55 = $54;
   HEAPF32[712] = $55;
  }
  $56 = HEAP8[(14043)>>0]|0;
  $57 = $56&1;
  if ($57) {
   $58 = +HEAPF32[712];
   $59 = $58;
   $60 = $59 - 0.10000000000000001;
   $61 = $60;
   HEAPF32[712] = $61;
  }
  $62 = +HEAPF32[712];
  $63 = $62;
  $64 = $63 > 2.0;
  if ($64) {
   HEAPF32[712] = 2.0;
  } else {
   $65 = +HEAPF32[712];
   $66 = $65;
   $67 = $66 < -1.0;
   if ($67) {
    HEAPF32[712] = -1.0;
   }
  }
  $68 = HEAP8[(14025)>>0]|0;
  $69 = $68&1;
  if ($69) {
   $70 = +HEAPF32[712];
   $71 = $70;
   $72 = 0.5 * $71;
   $73 = HEAP32[703]|0;
   $74 = ((($73)) + 4|0);
   $75 = ((($74)) + 76|0);
   $76 = ((($75)) + 4|0);
   $77 = +HEAPF32[$76>>2];
   $78 = $77;
   $79 = $78 + $72;
   $80 = $79;
   HEAPF32[$76>>2] = $80;
  }
  $81 = HEAP8[(14028)>>0]|0;
  $82 = $81&1;
  if ($82) {
   $83 = +HEAPF32[712];
   $84 = $83;
   $85 = 0.5 * $84;
   $86 = HEAP32[703]|0;
   $87 = ((($86)) + 4|0);
   $88 = ((($87)) + 76|0);
   $89 = ((($88)) + 4|0);
   $90 = +HEAPF32[$89>>2];
   $91 = $90;
   $92 = $91 - $85;
   $93 = $92;
   HEAPF32[$89>>2] = $93;
  }
  $94 = HEAP32[703]|0;
  $95 = ((($94)) + 4|0);
  $96 = ((($95)) + 76|0);
  $97 = ((($96)) + 4|0);
  $98 = +HEAPF32[$97>>2];
  $99 = $98 < 0.0;
  if ($99) {
   $100 = HEAP32[703]|0;
   $101 = ((($100)) + 4|0);
   $102 = ((($101)) + 76|0);
   $103 = ((($102)) + 4|0);
   HEAPF32[$103>>2] = 359.0;
  }
  $104 = HEAP32[703]|0;
  $105 = ((($104)) + 4|0);
  $106 = ((($105)) + 76|0);
  $107 = ((($106)) + 4|0);
  $108 = +HEAPF32[$107>>2];
  $109 = $108 >= 360.0;
  if ($109) {
   $110 = HEAP32[703]|0;
   $111 = ((($110)) + 4|0);
   $112 = ((($111)) + 76|0);
   $113 = ((($112)) + 4|0);
   HEAPF32[$113>>2] = 0.0;
  }
 } else {
  $114 = +HEAPF32[712];
  $115 = $114;
  $116 = $115 * 0.98999999999999999;
  $117 = $116;
  HEAPF32[712] = $117;
  $118 = +HEAPF32[713];
  $119 = HEAP32[702]|0;
  $120 = ((($119)) + 4|0);
  $121 = ((($120)) + 76|0);
  $122 = ((($121)) + 4|0);
  HEAPF32[$122>>2] = $118;
  $123 = HEAP8[(14047)>>0]|0;
  $124 = $123&1;
  if ($124) {
   $125 = HEAP32[702]|0;
   $126 = ((($125)) + 4|0);
   $127 = ((($126)) + 76|0);
   $128 = ((($127)) + 4|0);
   $129 = +HEAPF32[$128>>2];
   $130 = (+__ZN3glm7radiansIfEET_S1_($129));
   $131 = $130;
   $132 = (+Math_sin((+$131)));
   $133 = 0.10000000000000001 * $132;
   $134 = HEAP32[702]|0;
   $135 = ((($134)) + 4|0);
   $136 = ((($135)) + 64|0);
   $137 = +HEAPF32[$136>>2];
   $138 = $137;
   $139 = $138 - $133;
   $140 = $139;
   HEAPF32[$136>>2] = $140;
   $141 = HEAP32[702]|0;
   $142 = ((($141)) + 4|0);
   $143 = ((($142)) + 76|0);
   $144 = ((($143)) + 4|0);
   $145 = +HEAPF32[$144>>2];
   $146 = (+__ZN3glm7radiansIfEET_S1_($145));
   $147 = $146;
   $148 = (+Math_cos((+$147)));
   $149 = 0.10000000000000001 * $148;
   $150 = HEAP32[702]|0;
   $151 = ((($150)) + 4|0);
   $152 = ((($151)) + 64|0);
   $153 = ((($152)) + 8|0);
   $154 = +HEAPF32[$153>>2];
   $155 = $154;
   $156 = $155 - $149;
   $157 = $156;
   HEAPF32[$153>>2] = $157;
  }
  $158 = HEAP8[(14043)>>0]|0;
  $159 = $158&1;
  if ($159) {
   $160 = HEAP32[702]|0;
   $161 = ((($160)) + 4|0);
   $162 = ((($161)) + 76|0);
   $163 = ((($162)) + 4|0);
   $164 = +HEAPF32[$163>>2];
   $165 = (+__ZN3glm7radiansIfEET_S1_($164));
   $166 = $165;
   $167 = (+Math_sin((+$166)));
   $168 = 0.10000000000000001 * $167;
   $169 = HEAP32[702]|0;
   $170 = ((($169)) + 4|0);
   $171 = ((($170)) + 64|0);
   $172 = +HEAPF32[$171>>2];
   $173 = $172;
   $174 = $173 + $168;
   $175 = $174;
   HEAPF32[$171>>2] = $175;
   $176 = HEAP32[702]|0;
   $177 = ((($176)) + 4|0);
   $178 = ((($177)) + 76|0);
   $179 = ((($178)) + 4|0);
   $180 = +HEAPF32[$179>>2];
   $181 = (+__ZN3glm7radiansIfEET_S1_($180));
   $182 = $181;
   $183 = (+Math_cos((+$182)));
   $184 = 0.10000000000000001 * $183;
   $185 = HEAP32[702]|0;
   $186 = ((($185)) + 4|0);
   $187 = ((($186)) + 64|0);
   $188 = ((($187)) + 8|0);
   $189 = +HEAPF32[$188>>2];
   $190 = $189;
   $191 = $190 + $184;
   $192 = $191;
   HEAPF32[$188>>2] = $192;
  }
  $193 = HEAP8[(14028)>>0]|0;
  $194 = $193&1;
  if ($194) {
   $195 = HEAP32[702]|0;
   $196 = ((($195)) + 4|0);
   $197 = ((($196)) + 76|0);
   $198 = ((($197)) + 4|0);
   $199 = +HEAPF32[$198>>2];
   $200 = (+__ZN3glm7radiansIfEET_S1_($199));
   $201 = $200;
   $202 = (+Math_cos((+$201)));
   $203 = 0.10000000000000001 * $202;
   $204 = HEAP32[702]|0;
   $205 = ((($204)) + 4|0);
   $206 = ((($205)) + 64|0);
   $207 = +HEAPF32[$206>>2];
   $208 = $207;
   $209 = $208 + $203;
   $210 = $209;
   HEAPF32[$206>>2] = $210;
   $211 = HEAP32[702]|0;
   $212 = ((($211)) + 4|0);
   $213 = ((($212)) + 76|0);
   $214 = ((($213)) + 4|0);
   $215 = +HEAPF32[$214>>2];
   $216 = (+__ZN3glm7radiansIfEET_S1_($215));
   $217 = $216;
   $218 = (+Math_sin((+$217)));
   $219 = 0.10000000000000001 * $218;
   $220 = HEAP32[702]|0;
   $221 = ((($220)) + 4|0);
   $222 = ((($221)) + 64|0);
   $223 = ((($222)) + 8|0);
   $224 = +HEAPF32[$223>>2];
   $225 = $224;
   $226 = $225 - $219;
   $227 = $226;
   HEAPF32[$223>>2] = $227;
  }
  $228 = HEAP8[(14025)>>0]|0;
  $229 = $228&1;
  if ($229) {
   $230 = HEAP32[702]|0;
   $231 = ((($230)) + 4|0);
   $232 = ((($231)) + 76|0);
   $233 = ((($232)) + 4|0);
   $234 = +HEAPF32[$233>>2];
   $235 = (+__ZN3glm7radiansIfEET_S1_($234));
   $236 = $235;
   $237 = (+Math_cos((+$236)));
   $238 = 0.10000000000000001 * $237;
   $239 = HEAP32[702]|0;
   $240 = ((($239)) + 4|0);
   $241 = ((($240)) + 64|0);
   $242 = +HEAPF32[$241>>2];
   $243 = $242;
   $244 = $243 - $238;
   $245 = $244;
   HEAPF32[$241>>2] = $245;
   $246 = HEAP32[702]|0;
   $247 = ((($246)) + 4|0);
   $248 = ((($247)) + 76|0);
   $249 = ((($248)) + 4|0);
   $250 = +HEAPF32[$249>>2];
   $251 = (+__ZN3glm7radiansIfEET_S1_($250));
   $252 = $251;
   $253 = (+Math_sin((+$252)));
   $254 = 0.10000000000000001 * $253;
   $255 = HEAP32[702]|0;
   $256 = ((($255)) + 4|0);
   $257 = ((($256)) + 64|0);
   $258 = ((($257)) + 8|0);
   $259 = +HEAPF32[$258>>2];
   $260 = $259;
   $261 = $260 + $254;
   $262 = $261;
   HEAPF32[$258>>2] = $262;
  }
 }
 $263 = +HEAPF32[712];
 $264 = $263;
 $265 = $264 * 0.10000000000000001;
 $266 = HEAP32[703]|0;
 $267 = ((($266)) + 4|0);
 $268 = ((($267)) + 76|0);
 $269 = ((($268)) + 4|0);
 $270 = +HEAPF32[$269>>2];
 $271 = (+__ZN3glm7radiansIfEET_S1_($270));
 $272 = $271;
 $273 = (+Math_sin((+$272)));
 $274 = $265 * $273;
 $275 = HEAP32[703]|0;
 $276 = ((($275)) + 4|0);
 $277 = ((($276)) + 64|0);
 $278 = +HEAPF32[$277>>2];
 $279 = $278;
 $280 = $279 + $274;
 $281 = $280;
 HEAPF32[$277>>2] = $281;
 $282 = +HEAPF32[712];
 $283 = $282;
 $284 = $283 * 0.10000000000000001;
 $285 = HEAP32[703]|0;
 $286 = ((($285)) + 4|0);
 $287 = ((($286)) + 76|0);
 $288 = ((($287)) + 4|0);
 $289 = +HEAPF32[$288>>2];
 $290 = (+__ZN3glm7radiansIfEET_S1_($289));
 $291 = $290;
 $292 = (+Math_cos((+$291)));
 $293 = $284 * $292;
 $294 = HEAP32[703]|0;
 $295 = ((($294)) + 4|0);
 $296 = ((($295)) + 64|0);
 $297 = ((($296)) + 8|0);
 $298 = +HEAPF32[$297>>2];
 $299 = $298;
 $300 = $299 + $293;
 $301 = $300;
 HEAPF32[$297>>2] = $301;
 $302 = HEAP8[13959]|0;
 $303 = $302&1;
 if ($303) {
  $304 = HEAP32[703]|0;
  $305 = ((($304)) + 4|0);
  __ZNK14Transformation14transformationEv($3,$305);
  HEAPF32[$6>>2] = 1.0;
  __ZN3glm7tmat4x4IfLNS_9precisionE0EEC2ERKf($5,$6);
  HEAPF32[$8>>2] = 0.0;
  HEAPF32[$9>>2] = 1.0;
  HEAPF32[$10>>2] = 0.0;
  __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($7,$8,$9,$10);
  __ZN3glm9translateIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_RKNS_5tvec3IS3_XT0_EEE($4,$5,$7);
  __ZN3glmmlIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_S6_($2,$3,$4);
  HEAPF32[$13>>2] = 1.0;
  __ZN3glm7tmat4x4IfLNS_9precisionE0EEC2ERKf($12,$13);
  $306 = +HEAPF32[713];
  $307 = (+__ZN3glm7radiansIfEET_S1_($306));
  HEAPF32[$15>>2] = 0.0;
  HEAPF32[$16>>2] = 1.0;
  HEAPF32[$17>>2] = 0.0;
  __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($14,$15,$16,$17);
  __ZN3glm6rotateIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_S3_RKNS_5tvec3IS3_XT0_EEE($11,$12,$307,$14);
  __ZN3glmmlIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_S6_($1,$2,$11);
  HEAPF32[$20>>2] = 1.0;
  __ZN3glm7tmat4x4IfLNS_9precisionE0EEC2ERKf($19,$20);
  $308 = +HEAPF32[714];
  $309 = (+__ZN3glm7radiansIfEET_S1_($308));
  HEAPF32[$22>>2] = 1.0;
  HEAPF32[$23>>2] = 0.0;
  HEAPF32[$24>>2] = 0.0;
  __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($21,$22,$23,$24);
  __ZN3glm6rotateIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_S3_RKNS_5tvec3IS3_XT0_EEE($18,$19,$309,$21);
  __ZN3glmmlIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_S6_($0,$1,$18);
  dest=2616; src=$0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  HEAPF32[(2688)>>2] = 8.0;
  $314 = (+_glfwGetTime());
  $315 = $314 * 360.0;
  $316 = $315 / 4.0;
  $317 = $316;
  $318 = HEAP32[704]|0;
  $319 = ((($318)) + 4|0);
  $320 = ((($319)) + 76|0);
  $321 = ((($320)) + 8|0);
  HEAPF32[$321>>2] = $317;
  $322 = (+_glfwGetTime());
  $323 = $322 * 360.0;
  $324 = $323 / 6.0;
  $325 = $324;
  $326 = HEAP32[705]|0;
  $327 = ((($326)) + 4|0);
  $328 = ((($327)) + 76|0);
  HEAPF32[$328>>2] = $325;
  $329 = (+_glfwGetTime());
  $330 = $329 * 360.0;
  $331 = $330 / 2.0;
  $332 = $331;
  $333 = HEAP32[706]|0;
  $334 = ((($333)) + 4|0);
  $335 = ((($334)) + 76|0);
  $336 = ((($335)) + 4|0);
  HEAPF32[$336>>2] = $332;
  _glClear(16640);
  __ZNK6Camera4drawEv(2616);
  STACKTOP = sp;return;
 } else {
  $310 = HEAP32[702]|0;
  $311 = ((($310)) + 4|0);
  __ZNK14Transformation14transformationEv($27,$311);
  HEAPF32[$30>>2] = 1.0;
  __ZN3glm7tmat4x4IfLNS_9precisionE0EEC2ERKf($29,$30);
  HEAPF32[$32>>2] = 0.0;
  HEAPF32[$33>>2] = 2.0;
  HEAPF32[$34>>2] = 0.0;
  __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($31,$32,$33,$34);
  __ZN3glm9translateIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_RKNS_5tvec3IS3_XT0_EEE($28,$29,$31);
  __ZN3glmmlIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_S6_($26,$27,$28);
  HEAPF32[$37>>2] = 1.0;
  __ZN3glm7tmat4x4IfLNS_9precisionE0EEC2ERKf($36,$37);
  $312 = +HEAPF32[714];
  $313 = (+__ZN3glm7radiansIfEET_S1_($312));
  HEAPF32[$39>>2] = 1.0;
  HEAPF32[$40>>2] = 0.0;
  HEAPF32[$41>>2] = 0.0;
  __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($38,$39,$40,$41);
  __ZN3glm6rotateIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_S3_RKNS_5tvec3IS3_XT0_EEE($35,$36,$313,$38);
  __ZN3glmmlIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_S6_($25,$26,$35);
  dest=2616; src=$25; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  HEAPF32[(2688)>>2] = 2.0;
  $314 = (+_glfwGetTime());
  $315 = $314 * 360.0;
  $316 = $315 / 4.0;
  $317 = $316;
  $318 = HEAP32[704]|0;
  $319 = ((($318)) + 4|0);
  $320 = ((($319)) + 76|0);
  $321 = ((($320)) + 8|0);
  HEAPF32[$321>>2] = $317;
  $322 = (+_glfwGetTime());
  $323 = $322 * 360.0;
  $324 = $323 / 6.0;
  $325 = $324;
  $326 = HEAP32[705]|0;
  $327 = ((($326)) + 4|0);
  $328 = ((($327)) + 76|0);
  HEAPF32[$328>>2] = $325;
  $329 = (+_glfwGetTime());
  $330 = $329 * 360.0;
  $331 = $330 / 2.0;
  $332 = $331;
  $333 = HEAP32[706]|0;
  $334 = ((($333)) + 4|0);
  $335 = ((($334)) + 76|0);
  $336 = ((($335)) + 4|0);
  HEAPF32[$336>>2] = $332;
  _glClear(16640);
  __ZNK6Camera4drawEv(2616);
  STACKTOP = sp;return;
 }
}
function __GLOBAL__sub_I_main_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 ___cxx_global_var_init_1();
 ___cxx_global_var_init_2();
 ___cxx_global_var_init_3();
 return;
}
function ___cxx_global_var_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5StoreC2Ev(2772);
 (___cxa_atexit((400|0),(2772|0),(___dso_handle|0))|0);
 return;
}
function ___cxx_global_var_init_1() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5SceneC2Ev(2832);
 (___cxa_atexit((401|0),(2832|0),(___dso_handle|0))|0);
 return;
}
function ___cxx_global_var_init_2() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6Lights3SunC2Ev(2568);
 return;
}
function ___cxx_global_var_init_3() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6CameraC2ERK5Scene(2616,2832);
 return;
}
function __ZN6CameraC2ERK5Scene($this,$scene) {
 $this = $this|0;
 $scene = $scene|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $scene;
 $2 = $0;
 __ZN14TransformationC2Ev($2);
 $3 = ((($2)) + 88|0);
 __ZN3glm7tmat4x4IfLNS_9precisionE0EEC2Ev($3);
 $4 = ((($2)) + 152|0);
 $5 = $1;
 HEAP32[$4>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN14TransformationC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3glm7tmat4x4IfLNS_9precisionE0EEC2Ev($1);
 $2 = ((($1)) + 64|0);
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2Ev($2);
 $3 = ((($1)) + 76|0);
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2Ev($3);
 STACKTOP = sp;return;
}
function __ZN3glm7tmat4x4IfLNS_9precisionE0EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 48|0;
 $2 = sp + 32|0;
 $3 = sp + 16|0;
 $4 = sp;
 $0 = $this;
 $5 = $0;
 $6 = ((($5)) + 64|0);
 $7 = $5;
 while(1) {
  __ZN3glm5tvec4IfLNS_9precisionE0EEC2Ev($7);
  $8 = ((($7)) + 16|0);
  $9 = ($8|0)==($6|0);
  if ($9) {
   break;
  } else {
   $7 = $8;
  }
 }
 __ZN3glm5tvec4IfLNS_9precisionE0EEC2IiiiiEET_T0_T1_T2_($1,1,0,0,0);
 ;HEAP32[$5>>2]=HEAP32[$1>>2]|0;HEAP32[$5+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$1+12>>2]|0;
 $10 = ((($5)) + 16|0);
 __ZN3glm5tvec4IfLNS_9precisionE0EEC2IiiiiEET_T0_T1_T2_($2,0,1,0,0);
 ;HEAP32[$10>>2]=HEAP32[$2>>2]|0;HEAP32[$10+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$10+12>>2]=HEAP32[$2+12>>2]|0;
 $11 = ((($5)) + 32|0);
 __ZN3glm5tvec4IfLNS_9precisionE0EEC2IiiiiEET_T0_T1_T2_($3,0,0,1,0);
 ;HEAP32[$11>>2]=HEAP32[$3>>2]|0;HEAP32[$11+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$11+12>>2]=HEAP32[$3+12>>2]|0;
 $12 = ((($5)) + 48|0);
 __ZN3glm5tvec4IfLNS_9precisionE0EEC2IiiiiEET_T0_T1_T2_($4,0,0,0,1);
 ;HEAP32[$12>>2]=HEAP32[$4>>2]|0;HEAP32[$12+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$12+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZN6Lights3SunC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN5LightC2Ev($1);
 $2 = ((($1)) + 36|0);
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2Ev($2);
 STACKTOP = sp;return;
}
function __ZN5LightC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2Ev($1);
 $2 = ((($1)) + 12|0);
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2Ev($2);
 $3 = ((($1)) + 24|0);
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2Ev($3);
 STACKTOP = sp;return;
}
function __ZN5SceneC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 28|0;
 $6 = sp + 16|0;
 $10 = $this;
 $11 = $10;
 $9 = $11;
 $12 = $9;
 $8 = $12;
 $13 = $8;
 $7 = $13;
 HEAP32[$13>>2] = 0;
 $14 = ((($13)) + 4|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($13)) + 8|0);
 $5 = $15;
 HEAP32[$6>>2] = 0;
 $16 = $5;
 $4 = $6;
 $17 = $4;
 $18 = HEAP32[$17>>2]|0;
 $2 = $16;
 HEAP32[$3>>2] = $18;
 $19 = $2;
 $1 = $19;
 $0 = $3;
 $20 = $0;
 $21 = HEAP32[$20>>2]|0;
 HEAP32[$19>>2] = $21;
 $22 = ((($11)) + 12|0);
 HEAP32[$22>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN5SceneD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16vectorIPK6ObjectNS_9allocatorIS3_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPK6ObjectNS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIPK6ObjectNS_9allocatorIS3_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIPK6ObjectNS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -4|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 4)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZN5StoreC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $3 = sp + 17|0;
 $4 = sp + 16|0;
 $5 = $this;
 $6 = $5;
 $2 = $6;
 $7 = $2;
 ;HEAP8[$1>>0]=HEAP8[$4>>0]|0;
 $0 = $3;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP8ResourceEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEEC2ERKSE_($7,$3);
 STACKTOP = sp;return;
}
function __ZN5StoreD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP8ResourceNS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP8ResourceNS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP8ResourceEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP8ResourceEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $this;
 $7 = $6;
 $5 = $7;
 $8 = $5;
 $4 = $8;
 $9 = $4;
 $10 = ((($9)) + 4|0);
 $3 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $1 = $12;
 $13 = $1;
 $0 = $13;
 $14 = $0;
 $15 = HEAP32[$14>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP8ResourceEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($7,$15);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP8ResourceEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($this,$__nd) {
 $this = $this|0;
 $__nd = $__nd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__na = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 80|0;
 $18 = $this;
 $19 = $__nd;
 $20 = $18;
 $21 = $19;
 $22 = ($21|0)!=(0|0);
 if (!($22)) {
  STACKTOP = sp;return;
 }
 $23 = $19;
 $24 = HEAP32[$23>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP8ResourceEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($20,$24);
 $25 = $19;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP8ResourceEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($20,$27);
 $10 = $20;
 $28 = $10;
 $29 = ((($28)) + 4|0);
 $9 = $29;
 $30 = $9;
 $8 = $30;
 $31 = $8;
 $__na = $31;
 $32 = $__na;
 $33 = $19;
 $34 = ((($33)) + 16|0);
 $7 = $34;
 $35 = $7;
 $4 = $32;
 $5 = $35;
 $36 = $4;
 $37 = $5;
 ;HEAP8[$3>>0]=HEAP8[$6>>0]|0;
 $1 = $36;
 $2 = $37;
 $38 = $2;
 $0 = $38;
 $39 = $0;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP8ResourceED2Ev($39);
 $40 = $__na;
 $41 = $19;
 $15 = $40;
 $16 = $41;
 $17 = 1;
 $42 = $15;
 $43 = $16;
 $44 = $17;
 $12 = $42;
 $13 = $43;
 $14 = $44;
 $45 = $13;
 $11 = $45;
 $46 = $11;
 __ZdlPv($46);
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP8ResourceED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP8ResourceEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEEC2ERKSE_($this,$__comp) {
 $this = $this|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = sp + 48|0;
 $11 = sp + 8|0;
 $14 = sp + 36|0;
 $15 = sp + 93|0;
 $16 = sp;
 $23 = sp + 92|0;
 $21 = $this;
 $22 = $__comp;
 $24 = $21;
 $25 = ((($24)) + 4|0);
 $20 = $25;
 $26 = $20;
 $19 = $26;
 $27 = $19;
 $18 = $27;
 $17 = $27;
 $28 = $17;
 HEAP32[$28>>2] = 0;
 $29 = ((($24)) + 8|0);
 ;HEAP8[$16>>0]=HEAP8[$23>>0]|0;
 $13 = $29;
 HEAP32[$14>>2] = 0;
 $30 = $13;
 $12 = $14;
 $31 = $12;
 $32 = HEAP32[$31>>2]|0;
 $6 = $16;
 ;HEAP8[$11>>0]=HEAP8[$15>>0]|0;
 $9 = $30;
 HEAP32[$10>>2] = $32;
 $33 = $9;
 $8 = $11;
 $7 = $10;
 $34 = $7;
 $35 = HEAP32[$34>>2]|0;
 HEAP32[$33>>2] = $35;
 $4 = $24;
 $36 = $4;
 $37 = ((($36)) + 4|0);
 $3 = $37;
 $38 = $3;
 $2 = $38;
 $39 = $2;
 $1 = $39;
 $40 = $1;
 $0 = $40;
 $41 = $0;
 $5 = $24;
 $42 = $5;
 HEAP32[$42>>2] = $41;
 STACKTOP = sp;return;
}
function __ZNK6Camera4drawEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $0 = $this;
 $2 = $0;
 $3 = ((($2)) + 152|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNK6Camera14transformationEv($1,$2);
 __ZNK5Scene4drawERKN3glm7tmat4x4IfLNS0_9precisionE0EEE($4,$1);
 STACKTOP = sp;return;
}
function __ZNK5Scene4drawERKN3glm7tmat4x4IfLNS0_9precisionE0EEE($this,$mvp) {
 $this = $this|0;
 $mvp = $mvp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__begin = 0, $__end = 0, $__range = 0, $object = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = sp + 72|0;
 $12 = sp + 60|0;
 $17 = sp + 40|0;
 $20 = sp + 28|0;
 $__begin = sp + 8|0;
 $__end = sp + 4|0;
 $22 = $this;
 $23 = $mvp;
 $24 = $22;
 $__range = $24;
 $25 = $__range;
 $21 = $25;
 $26 = $21;
 $27 = HEAP32[$26>>2]|0;
 $18 = $26;
 $19 = $27;
 $28 = $19;
 $15 = $17;
 $16 = $28;
 $29 = $15;
 $30 = $16;
 HEAP32[$29>>2] = $30;
 $31 = HEAP32[$17>>2]|0;
 HEAP32[$20>>2] = $31;
 $32 = HEAP32[$20>>2]|0;
 HEAP32[$__begin>>2] = $32;
 $33 = $__range;
 $13 = $33;
 $34 = $13;
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $10 = $34;
 $11 = $36;
 $37 = $11;
 $7 = $9;
 $8 = $37;
 $38 = $7;
 $39 = $8;
 HEAP32[$38>>2] = $39;
 $40 = HEAP32[$9>>2]|0;
 HEAP32[$12>>2] = $40;
 $41 = HEAP32[$12>>2]|0;
 HEAP32[$__end>>2] = $41;
 while(1) {
  $4 = $__begin;
  $5 = $__end;
  $42 = $4;
  $43 = $5;
  $2 = $42;
  $3 = $43;
  $44 = $2;
  $1 = $44;
  $45 = $1;
  $46 = HEAP32[$45>>2]|0;
  $47 = $3;
  $0 = $47;
  $48 = $0;
  $49 = HEAP32[$48>>2]|0;
  $50 = ($46|0)==($49|0);
  $51 = $50 ^ 1;
  if (!($51)) {
   break;
  }
  $6 = $__begin;
  $52 = $6;
  $53 = HEAP32[$52>>2]|0;
  $54 = HEAP32[$53>>2]|0;
  $object = $54;
  $55 = $object;
  $56 = $23;
  __ZNK6Object4drawERK5SceneRKN3glm7tmat4x4IfLNS3_9precisionE0EEE($55,$24,$56);
  $14 = $__begin;
  $57 = $14;
  $58 = HEAP32[$57>>2]|0;
  $59 = ((($58)) + 4|0);
  HEAP32[$57>>2] = $59;
 }
 STACKTOP = sp;return;
}
function __ZNK6Object4drawERK5SceneRKN3glm7tmat4x4IfLNS3_9precisionE0EEE($this,$scene,$mvp) {
 $this = $this|0;
 $scene = $scene|0;
 $mvp = $mvp|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $scene;
 $2 = $mvp;
 $3 = $0;
 $4 = ((($3)) + 92|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&1;
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = HEAP32[$3>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = $2;
 FUNCTION_TABLE_viii[$8 & 1023]($3,$9,$10);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPK6ObjectNS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPK6ObjectNS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPK6ObjectNS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = ((($44)) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 4)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorIPK6ObjectNS_9allocatorIS3_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
  // unreachable;
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = ((($64)) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 4)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22>>0]=HEAP8[$25>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  $90 = $21;
  $91 = $20;
  $92 = $89 ? $90 : $91;
  $93 = HEAP32[$92>>2]|0;
  $31 = $93;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 4)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferIPK6ObjectRNS_9allocatorIS3_EEEC2EjjS6_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = ((($__v)) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = $3;
 $0 = $119;
 $120 = $0;
 $121 = HEAP32[$120>>2]|0;
 HEAP32[$118>>2] = $121;
 $122 = ((($__v)) + 8|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = ((($123)) + 4|0);
 HEAP32[$122>>2] = $124;
 __THREW__ = 0;
 invoke_vii(402,($43|0),($__v|0));
 $125 = __THREW__; __THREW__ = 0;
 $126 = $125&1;
 if ($126) {
  $127 = ___cxa_find_matching_catch()|0;
  $128 = tempRet0;
  $41 = $127;
  $42 = $128;
  __ZNSt3__114__split_bufferIPK6ObjectRNS_9allocatorIS3_EEED2Ev($__v);
  $129 = $41;
  $130 = $42;
  ___resumeException($129|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferIPK6ObjectRNS_9allocatorIS3_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__16vectorIPK6ObjectNS_9allocatorIS3_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 1073741823;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferIPK6ObjectRNS_9allocatorIS3_EEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<2;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<2)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<2)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPK6ObjectNS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i$1 = 0, $__t$i$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i$2 = sp + 120|0;
 $__t$i$1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIPK6ObjectNS_9allocatorIS3_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 4)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<2)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<2;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i$2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i$2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i$1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i$1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 4)&-1;
 __ZNKSt3__16vectorIPK6ObjectNS_9allocatorIS3_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPK6ObjectRNS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -4|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 4)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPK6ObjectNS_9allocatorIS3_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 4)&-1;
 $51 = (($42) + ($50<<2)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 4)&-1;
 $67 = (($54) + ($66<<2)|0);
 __ZNKSt3__16vectorIPK6ObjectNS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPK6ObjectNS_9allocatorIS3_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 4)&-1;
 $55 = (($42) + ($54<<2)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<2)|0);
 __ZNKSt3__16vectorIPK6ObjectNS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPK6ObjectNS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZN6ObjectC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 __ZN14TransformationC2Ev($2);
 $3 = 2868;
 HEAP32[$1>>2] = $3;
 $4 = ((($1)) + 92|0);
 HEAP8[$4>>0] = 1;
 STACKTOP = sp;return;
}
function __ZN3glm13perspectiveRHIfEENS_7tmat4x4IT_LNS_9precisionE0EEES2_S2_S2_S2_($agg$result,$fovy,$aspect,$zNear,$zFar) {
 $agg$result = $agg$result|0;
 $fovy = +$fovy;
 $aspect = +$aspect;
 $zNear = +$zNear;
 $zFar = +$zFar;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $tanHalfFovy = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $1 = $fovy;
 $2 = $aspect;
 $3 = $zNear;
 $4 = $zFar;
 $6 = $2;
 $7 = $6 - 1.1920928955078125E-7;
 $8 = (+__ZN3glm3absIfEET_S1_($7));
 $9 = $8 > 0.0;
 if ($9) {
  $10 = $1;
  $11 = $10 / 2.0;
  $0 = $11;
  $12 = $0;
  $13 = (+Math_tan((+$12)));
  $tanHalfFovy = $13;
  HEAPF32[$5>>2] = 0.0;
  __ZN3glm7tmat4x4IfLNS_9precisionE0EEC2ERKf($agg$result,$5);
  $14 = $2;
  $15 = $tanHalfFovy;
  $16 = $14 * $15;
  $17 = 1.0 / $16;
  $18 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($agg$result,0)|0);
  $19 = (__ZN3glm5tvec4IfLNS_9precisionE0EEixEi($18,0)|0);
  HEAPF32[$19>>2] = $17;
  $20 = $tanHalfFovy;
  $21 = 1.0 / $20;
  $22 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($agg$result,1)|0);
  $23 = (__ZN3glm5tvec4IfLNS_9precisionE0EEixEi($22,1)|0);
  HEAPF32[$23>>2] = $21;
  $24 = $4;
  $25 = $3;
  $26 = $24 + $25;
  $27 = -$26;
  $28 = $4;
  $29 = $3;
  $30 = $28 - $29;
  $31 = $27 / $30;
  $32 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($agg$result,2)|0);
  $33 = (__ZN3glm5tvec4IfLNS_9precisionE0EEixEi($32,2)|0);
  HEAPF32[$33>>2] = $31;
  $34 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($agg$result,2)|0);
  $35 = (__ZN3glm5tvec4IfLNS_9precisionE0EEixEi($34,3)|0);
  HEAPF32[$35>>2] = -1.0;
  $36 = $4;
  $37 = 2.0 * $36;
  $38 = $3;
  $39 = $37 * $38;
  $40 = -$39;
  $41 = $4;
  $42 = $3;
  $43 = $41 - $42;
  $44 = $40 / $43;
  $45 = (__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($agg$result,3)|0);
  $46 = (__ZN3glm5tvec4IfLNS_9precisionE0EEixEi($45,2)|0);
  HEAPF32[$46>>2] = $44;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((14285|0),(14353|0),236,(14417|0));
  // unreachable;
 }
}
function __ZN3glm3absIfEET_S1_($x) {
 $x = +$x;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $1 = $0;
 $2 = (+__ZN3glm6detail11compute_absIfLb1EE4callEf($1));
 STACKTOP = sp;return (+$2);
}
function __ZN3glm6detail11compute_absIfLb1EE4callEf($x) {
 $x = +$x;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $1 = $0;
 $2 = $1 >= 0.0;
 $3 = $0;
 $4 = -$3;
 $5 = $2 ? $3 : $4;
 STACKTOP = sp;return (+$5);
}
function __ZN3glm8distanceIfLNS_9precisionE0ENS_5tvec3EEET_RKT1_IS3_XT0_EES7_($p0,$p1) {
 $p0 = $p0|0;
 $p1 = $p1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $0 = $p0;
 $1 = $p1;
 $3 = $1;
 $4 = $0;
 __ZN3glmmiIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_S6_($2,$3,$4);
 $5 = (+__ZN3glm6lengthIfLNS_9precisionE0ENS_5tvec3EEET_RKT1_IS3_XT0_EE($2));
 STACKTOP = sp;return (+$5);
}
function __ZN3glm6lengthIfLNS_9precisionE0ENS_5tvec3EEET_RKT1_IS3_XT0_EE($v) {
 $v = $v|0;
 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $v;
 $2 = $1;
 $3 = $1;
 $4 = (+__ZN3glm3dotIfLNS_9precisionE0ENS_5tvec3EEET_RKT1_IS3_XT0_EES7_($2,$3));
 $0 = $4;
 $5 = $0;
 $6 = (+Math_sqrt((+$5)));
 STACKTOP = sp;return (+$6);
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[778]|0;
 (_vfprintf($0,$format,$list)|0);
 (_fputc(10,$0)|0);
 _abort();
 // unreachable;
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((14745|0),(14768|0),303,(14847|0));
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_once((3104|0),(403|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[775]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(14868,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function __Znwj($size) {
 $size = $size|0;
 var $$lcssa = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 while(1) {
  $1 = (_malloc($$size)|0);
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   $$lcssa = $1;
   label = 6;
   break;
  }
  $3 = (__ZSt15get_new_handlerv()|0);
  $4 = ($3|0)==(0|0);
  if ($4) {
   label = 5;
   break;
  }
  FUNCTION_TABLE_v[$3 & 1023]();
 }
 if ((label|0) == 5) {
  $5 = (___cxa_allocate_exception(4)|0);
  HEAP32[$5>>2] = (2884);
  ___cxa_throw(($5|0),(208|0),(28|0));
  // unreachable;
 }
 else if ((label|0) == 6) {
  return ($$lcssa|0);
 }
 return (0)|0;
}
function __Znaj($size) {
 $size = $size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj($size)|0);
 return ($0|0);
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function __ZdaPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($ptr);
 return;
}
function __ZNSt9bad_allocC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (2884);
 return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (14917|0);
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($func|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  invoke_vii(404,(14932|0),($vararg_buffer|0));
  $2 = __THREW__; __THREW__ = 0;
 }
 $3 = ___cxa_find_matching_catch(0|0)|0;
 $4 = tempRet0;
 (___cxa_begin_catch(($3|0))|0);
 __THREW__ = 0;
 invoke_vii(404,(14972|0),($vararg_buffer1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = ___cxa_find_matching_catch(0|0)|0;
 $7 = tempRet0;
 __THREW__ = 0;
 invoke_v(372);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch(0|0)|0;
  $11 = tempRet0;
  ___clang_call_terminate($10);
  // unreachable;
 } else {
  ___clang_call_terminate($6);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(405)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($4)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if ($16) {
    $17 = ((($4)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    __ZSt11__terminatePFvvE($18);
    // unreachable;
   }
  }
 }
 $19 = HEAP32[718]|0;HEAP32[718] = (($19+0)|0);
 $20 = $19;
 __ZSt11__terminatePFvvE($20);
 // unreachable;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[724]|0;HEAP32[724] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt11logic_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (2908);
 $0 = ((($this)) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0);
 return;
}
function __ZNSt11logic_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt11logic_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (2928);
 $0 = ((($this)) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0);
 return;
}
function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt12out_of_rangeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt8bad_castC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (2968);
 return;
}
function __ZNSt8bad_castD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt8bad_castD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt8bad_cast4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (15022|0);
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$0 = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$2 = 1;
 } else {
  $1 = ($thrown_type|0)==(0|0);
  if ($1) {
   $$2 = 0;
  } else {
   $2 = (___dynamic_cast($thrown_type,304,320,0)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    $$2 = 0;
   } else {
    dest=$info; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$info>>2] = $2;
    $4 = ((($info)) + 8|0);
    HEAP32[$4>>2] = $this;
    $5 = ((($info)) + 12|0);
    HEAP32[$5>>2] = -1;
    $6 = ((($info)) + 48|0);
    HEAP32[$6>>2] = 1;
    $7 = HEAP32[$2>>2]|0;
    $8 = ((($7)) + 28|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$9 & 511]($2,$info,$10,1);
    $11 = ((($info)) + 24|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if ($13) {
     $14 = ((($info)) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     HEAP32[$adjustedPtr>>2] = $15;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$2 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   HEAP32[$0>>2] = $adjustedPtr;
   $3 = ((($info)) + 24|0);
   HEAP32[$3>>2] = $path_below;
   $4 = ((($info)) + 36|0);
   HEAP32[$4>>2] = 1;
  } else {
   $5 = ($1|0)==($adjustedPtr|0);
   if (!($5)) {
    $9 = ((($info)) + 36|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + 1)|0;
    HEAP32[$9>>2] = $11;
    $12 = ((($info)) + 24|0);
    HEAP32[$12>>2] = 2;
    $13 = ((($info)) + 54|0);
    HEAP8[$13>>0] = 1;
    break;
   }
   $6 = ((($info)) + 24|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(2);
   if ($8) {
    HEAP32[$6>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 511]($4,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$adjustedPtr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($adjustedPtr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$11 & 511]($8,$info,$12,$15);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
  } else {
   $3 = ((($this)) + 16|0);
   $4 = ((($this)) + 12|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (((($this)) + 16|0) + ($5<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($3,$info,$adjustedPtr,$path_below);
   $7 = ($5|0)>(1);
   if ($7) {
    $8 = ((($this)) + 24|0);
    $9 = ((($info)) + 54|0);
    $p$0 = $8;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0,$info,$adjustedPtr,$path_below);
     $10 = HEAP8[$9>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if (!($11)) {
      break L1;
     }
     $12 = ((($p$0)) + 8|0);
     $13 = ($12>>>0)<($6>>>0);
     if ($13) {
      $p$0 = $12;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = ((($0)) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($static_ptr) + ($2)|0);
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $6 = ((($info)) + 4|0);
 HEAP32[$6>>2] = $static_ptr;
 $7 = ((($info)) + 8|0);
 HEAP32[$7>>2] = $static_type;
 $8 = ((($info)) + 12|0);
 HEAP32[$8>>2] = $src2dst_offset;
 $9 = ((($info)) + 16|0);
 $10 = ((($info)) + 20|0);
 $11 = ((($info)) + 24|0);
 $12 = ((($info)) + 28|0);
 $13 = ((($info)) + 32|0);
 $14 = ((($info)) + 40|0);
 $15 = ($5|0)==($dst_type|0);
 dest=$9; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$9+36>>1]=0|0;HEAP8[$9+38>>0]=0|0;
 L1: do {
  if ($15) {
   $16 = ((($info)) + 48|0);
   HEAP32[$16>>2] = 1;
   $17 = HEAP32[$dst_type>>2]|0;
   $18 = ((($17)) + 20|0);
   $19 = HEAP32[$18>>2]|0;
   FUNCTION_TABLE_viiiiii[$19 & 255]($dst_type,$info,$3,$3,1,0);
   $20 = HEAP32[$11>>2]|0;
   $21 = ($20|0)==(1);
   $$ = $21 ? $3 : 0;
   $dst_ptr$0 = $$;
  } else {
   $22 = ((($info)) + 36|0);
   $23 = HEAP32[$5>>2]|0;
   $24 = ((($23)) + 24|0);
   $25 = HEAP32[$24>>2]|0;
   FUNCTION_TABLE_viiiii[$25 & 511]($5,$info,$3,1,0);
   $26 = HEAP32[$22>>2]|0;
   switch ($26|0) {
   case 0:  {
    $27 = HEAP32[$14>>2]|0;
    $28 = ($27|0)==(1);
    $29 = HEAP32[$12>>2]|0;
    $30 = ($29|0)==(1);
    $or$cond = $28 & $30;
    $31 = HEAP32[$13>>2]|0;
    $32 = ($31|0)==(1);
    $or$cond3 = $or$cond & $32;
    $33 = HEAP32[$10>>2]|0;
    $$8 = $or$cond3 ? $33 : 0;
    $dst_ptr$0 = $$8;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $dst_ptr$0 = 0;
    break L1;
   }
   }
   $34 = HEAP32[$11>>2]|0;
   $35 = ($34|0)==(1);
   if (!($35)) {
    $36 = HEAP32[$14>>2]|0;
    $37 = ($36|0)==(0);
    $38 = HEAP32[$12>>2]|0;
    $39 = ($38|0)==(1);
    $or$cond5 = $37 & $39;
    $40 = HEAP32[$13>>2]|0;
    $41 = ($40|0)==(1);
    $or$cond7 = $or$cond5 & $41;
    if (!($or$cond7)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $42 = HEAP32[$9>>2]|0;
   $dst_ptr$0 = $42;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = ((($info)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 do {
  if ($3) {
   $4 = ((($info)) + 52|0);
   HEAP8[$4>>0] = 1;
   $5 = ((($info)) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    HEAP32[$5>>2] = $dst_ptr;
    $8 = ((($info)) + 24|0);
    HEAP32[$8>>2] = $path_below;
    $9 = ((($info)) + 36|0);
    HEAP32[$9>>2] = 1;
    $10 = ((($info)) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(1);
    $13 = ($path_below|0)==(1);
    $or$cond = $12 & $13;
    if (!($or$cond)) {
     break;
    }
    $14 = ((($info)) + 54|0);
    HEAP8[$14>>0] = 1;
    break;
   }
   $15 = ($6|0)==($dst_ptr|0);
   if (!($15)) {
    $25 = ((($info)) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 1)|0;
    HEAP32[$25>>2] = $27;
    $28 = ((($info)) + 54|0);
    HEAP8[$28>>0] = 1;
    break;
   }
   $16 = ((($info)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(2);
   if ($18) {
    HEAP32[$16>>2] = $path_below;
    $22 = $path_below;
   } else {
    $22 = $17;
   }
   $19 = ((($info)) + 48|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(1);
   $23 = ($22|0)==(1);
   $or$cond1 = $21 & $23;
   if ($or$cond1) {
    $24 = ((($info)) + 54|0);
    HEAP8[$24>>0] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $does_dst_type_point_to_our_static_type$0$off0 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off0 = 0, $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0;
 var $is_dst_type_derived_from_static_type$2$off09 = 0, $p$0 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $56 = ((($this)) + 16|0);
    $57 = ((($this)) + 12|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (((($this)) + 16|0) + ($58<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($56,$info,$current_ptr,$path_below,$use_strcmp);
    $60 = ((($this)) + 24|0);
    $61 = ($58|0)>(1);
    if (!($61)) {
     break;
    }
    $62 = ((($this)) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = $63 & 2;
    $65 = ($64|0)==(0);
    if ($65) {
     $66 = ((($info)) + 36|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ($67|0)==(1);
     if (!($68)) {
      $74 = $63 & 1;
      $75 = ($74|0)==(0);
      if ($75) {
       $78 = ((($info)) + 54|0);
       $p2$2 = $60;
       while(1) {
        $87 = HEAP8[$78>>0]|0;
        $88 = ($87<<24>>24)==(0);
        if (!($88)) {
         break L1;
        }
        $89 = HEAP32[$66>>2]|0;
        $90 = ($89|0)==(1);
        if ($90) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$2,$info,$current_ptr,$path_below,$use_strcmp);
        $91 = ((($p2$2)) + 8|0);
        $92 = ($91>>>0)<($59>>>0);
        if ($92) {
         $p2$2 = $91;
        } else {
         break L1;
        }
       }
      }
      $76 = ((($info)) + 24|0);
      $77 = ((($info)) + 54|0);
      $p2$1 = $60;
      while(1) {
       $79 = HEAP8[$77>>0]|0;
       $80 = ($79<<24>>24)==(0);
       if (!($80)) {
        break L1;
       }
       $81 = HEAP32[$66>>2]|0;
       $82 = ($81|0)==(1);
       if ($82) {
        $83 = HEAP32[$76>>2]|0;
        $84 = ($83|0)==(1);
        if ($84) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$1,$info,$current_ptr,$path_below,$use_strcmp);
       $85 = ((($p2$1)) + 8|0);
       $86 = ($85>>>0)<($59>>>0);
       if ($86) {
        $p2$1 = $85;
       } else {
        break L1;
       }
      }
     }
    }
    $69 = ((($info)) + 54|0);
    $p2$0 = $60;
    while(1) {
     $70 = HEAP8[$69>>0]|0;
     $71 = ($70<<24>>24)==(0);
     if (!($71)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$0,$info,$current_ptr,$path_below,$use_strcmp);
     $72 = ((($p2$0)) + 8|0);
     $73 = ($72>>>0)<($59>>>0);
     if ($73) {
      $p2$0 = $72;
     } else {
      break L1;
     }
    }
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($this)) + 16|0);
     $24 = ((($this)) + 12|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = (((($this)) + 16|0) + ($25<<3)|0);
     $27 = ((($info)) + 52|0);
     $28 = ((($info)) + 53|0);
     $29 = ((($info)) + 54|0);
     $30 = ((($this)) + 8|0);
     $31 = ((($info)) + 24|0);
     $does_dst_type_point_to_our_static_type$0$off0 = 0;$is_dst_type_derived_from_static_type$0$off0 = 0;$p$0 = $23;
     L34: while(1) {
      $32 = ($p$0>>>0)<($26>>>0);
      if (!($32)) {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off0;
       label = 20;
       break;
      }
      HEAP8[$27>>0] = 0;
      HEAP8[$28>>0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$current_ptr,$current_ptr,1,$use_strcmp);
      $33 = HEAP8[$29>>0]|0;
      $34 = ($33<<24>>24)==(0);
      if (!($34)) {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off0;
       label = 20;
       break;
      }
      $35 = HEAP8[$28>>0]|0;
      $36 = ($35<<24>>24)==(0);
      do {
       if ($36) {
        $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off0;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off0;
       } else {
        $37 = HEAP8[$27>>0]|0;
        $38 = ($37<<24>>24)==(0);
        if ($38) {
         $44 = HEAP32[$30>>2]|0;
         $45 = $44 & 1;
         $46 = ($45|0)==(0);
         if ($46) {
          $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off0;$is_dst_type_derived_from_static_type$2$off0 = 1;
          label = 20;
          break L34;
         } else {
          $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off0;$is_dst_type_derived_from_static_type$1$off0 = 1;
          break;
         }
        }
        $39 = HEAP32[$31>>2]|0;
        $40 = ($39|0)==(1);
        if ($40) {
         $is_dst_type_derived_from_static_type$2$off09 = 1;
         break L34;
        }
        $41 = HEAP32[$30>>2]|0;
        $42 = $41 & 2;
        $43 = ($42|0)==(0);
        if ($43) {
         $is_dst_type_derived_from_static_type$2$off09 = 1;
         break L34;
        } else {
         $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
        }
       }
      } while(0);
      $47 = ((($p$0)) + 8|0);
      $does_dst_type_point_to_our_static_type$0$off0 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off0 = $is_dst_type_derived_from_static_type$1$off0;$p$0 = $47;
     }
     if ((label|0) == 20) {
      if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
       $is_dst_type_derived_from_static_type$2$off09 = $is_dst_type_derived_from_static_type$2$off0;
      } else {
       HEAP32[$14>>2] = $current_ptr;
       $48 = ((($info)) + 40|0);
       $49 = HEAP32[$48>>2]|0;
       $50 = (($49) + 1)|0;
       HEAP32[$48>>2] = $50;
       $51 = ((($info)) + 36|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = ($52|0)==(1);
       if ($53) {
        $54 = HEAP32[$31>>2]|0;
        $55 = ($54|0)==(2);
        if ($55) {
         HEAP8[$29>>0] = 1;
         $is_dst_type_derived_from_static_type$2$off09 = $is_dst_type_derived_from_static_type$2$off0;
        } else {
         $is_dst_type_derived_from_static_type$2$off09 = $is_dst_type_derived_from_static_type$2$off0;
        }
       } else {
        $is_dst_type_derived_from_static_type$2$off09 = $is_dst_type_derived_from_static_type$2$off0;
       }
      }
     }
     $$ = $is_dst_type_derived_from_static_type$2$off09 ? 3 : 4;
     HEAP32[$20>>2] = $$;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiiii[$11 & 255]($8,$info,$dst_ptr,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$11 & 511]($8,$info,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off02 = 0, $is_dst_type_derived_from_static_type$0$off03 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $43 = ((($this)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($45)) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    FUNCTION_TABLE_viiiii[$47 & 511]($44,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($info)) + 52|0);
     HEAP8[$23>>0] = 0;
     $24 = ((($info)) + 53|0);
     HEAP8[$24>>0] = 0;
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$26>>2]|0;
     $28 = ((($27)) + 20|0);
     $29 = HEAP32[$28>>2]|0;
     FUNCTION_TABLE_viiiiii[$29 & 255]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
     $30 = HEAP8[$24>>0]|0;
     $31 = ($30<<24>>24)==(0);
     if ($31) {
      $is_dst_type_derived_from_static_type$0$off02 = 0;
      label = 13;
     } else {
      $32 = HEAP8[$23>>0]|0;
      $not$ = ($32<<24>>24)==(0);
      if ($not$) {
       $is_dst_type_derived_from_static_type$0$off02 = 1;
       label = 13;
      } else {
       $is_dst_type_derived_from_static_type$0$off03 = 1;
      }
     }
     if ((label|0) == 13) {
      HEAP32[$14>>2] = $current_ptr;
      $33 = ((($info)) + 40|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (($34) + 1)|0;
      HEAP32[$33>>2] = $35;
      $36 = ((($info)) + 36|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($37|0)==(1);
      if ($38) {
       $39 = ((($info)) + 24|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = ($40|0)==(2);
       if ($41) {
        $42 = ((($info)) + 54|0);
        HEAP8[$42>>0] = 1;
        $is_dst_type_derived_from_static_type$0$off03 = $is_dst_type_derived_from_static_type$0$off02;
       } else {
        $is_dst_type_derived_from_static_type$0$off03 = $is_dst_type_derived_from_static_type$0$off02;
       }
      } else {
       $is_dst_type_derived_from_static_type$0$off03 = $is_dst_type_derived_from_static_type$0$off02;
      }
     }
     $$1 = $is_dst_type_derived_from_static_type$0$off03 ? 3 : 4;
     HEAP32[$20>>2] = $$1;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if ($10) {
    $11 = ((($info)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==($current_ptr|0);
    if (!($13)) {
     $14 = ((($info)) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($current_ptr|0);
     if (!($16)) {
      $19 = ((($info)) + 32|0);
      HEAP32[$19>>2] = $path_below;
      HEAP32[$14>>2] = $current_ptr;
      $20 = ((($info)) + 40|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($21) + 1)|0;
      HEAP32[$20>>2] = $22;
      $23 = ((($info)) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(1);
      if ($25) {
       $26 = ((($info)) + 24|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = ($27|0)==(2);
       if ($28) {
        $29 = ((($info)) + 54|0);
        HEAP8[$29>>0] = 1;
       }
      }
      $30 = ((($info)) + 44|0);
      HEAP32[$30>>2] = 4;
      break;
     }
    }
    $17 = ($path_below|0)==(1);
    if ($17) {
     $18 = ((($info)) + 32|0);
     HEAP32[$18>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($info)) + 52|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ((($info)) + 53|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ((($this)) + 16|0);
  $8 = ((($this)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (((($this)) + 16|0) + ($9<<3)|0);
  HEAP8[$3>>0] = 0;
  HEAP8[$5>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($7,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  $11 = ($9|0)>(1);
  L4: do {
   if ($11) {
    $12 = ((($this)) + 24|0);
    $13 = ((($info)) + 24|0);
    $14 = ((($this)) + 8|0);
    $15 = ((($info)) + 54|0);
    $p$0 = $12;
    while(1) {
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)==(0);
     if (!($17)) {
      break L4;
     }
     $18 = HEAP8[$3>>0]|0;
     $19 = ($18<<24>>24)==(0);
     if ($19) {
      $25 = HEAP8[$5>>0]|0;
      $26 = ($25<<24>>24)==(0);
      if (!($26)) {
       $27 = HEAP32[$14>>2]|0;
       $28 = $27 & 1;
       $29 = ($28|0)==(0);
       if ($29) {
        break L4;
       }
      }
     } else {
      $20 = HEAP32[$13>>2]|0;
      $21 = ($20|0)==(1);
      if ($21) {
       break L4;
      }
      $22 = HEAP32[$14>>2]|0;
      $23 = $22 & 2;
      $24 = ($23|0)==(0);
      if ($24) {
       break L4;
      }
     }
     HEAP8[$3>>0] = 0;
     HEAP8[$5>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
     $30 = ((($p$0)) + 8|0);
     $31 = ($30>>>0)<($10>>>0);
     if ($31) {
      $p$0 = $30;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$3>>0] = $4;
  HEAP8[$5>>0] = $6;
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 255]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $1 = HEAP32[$catchType>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 1023]($catchType,$excpType,$temp)|0);
 $5 = $4&1;
 if ($4) {
  $6 = HEAP32[$temp>>2]|0;
  HEAP32[$thrown>>2] = $6;
 }
 STACKTOP = sp;return ($5|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = (___dynamic_cast($type,304,352,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $3 = $phitmp;
 }
 $2 = $3&1;
 return ($2|0);
}
function __ZSt17__throw_bad_allocv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(4)|0);
 __ZNSt9bad_allocC2Ev($0);
 ___cxa_throw(($0|0),(208|0),(28|0));
 // unreachable;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36|0;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($2)) + 80|0);
   $5 = ((($2)) + 48|0);
   $6 = $5;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = (($6) + 4)|0;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = $8 & -256;
   $13 = ($12|0)==(1126902528);
   $14 = ($11|0)==(1129074247);
   $15 = $13 & $14;
   if (!($15)) {
    $36 = HEAP32[777]|0;
    HEAP32[$vararg_buffer7>>2] = $36;
    _abort_message(15383,$vararg_buffer7);
    // unreachable;
   }
   $16 = ($8|0)==(1126902529);
   $17 = ($11|0)==(1129074247);
   $18 = $16 & $17;
   if ($18) {
    $19 = ((($2)) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $20;
   } else {
    $21 = $4;
   }
   HEAP32[$thrown_object>>2] = $21;
   $22 = HEAP32[$2>>2]|0;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[56]|0;
   $26 = ((($25)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (FUNCTION_TABLE_iiii[$27 & 1023](224,$22,$thrown_object)|0);
   if ($28) {
    $29 = HEAP32[$thrown_object>>2]|0;
    $30 = HEAP32[777]|0;
    $31 = HEAP32[$29>>2]|0;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (FUNCTION_TABLE_ii[$33 & 1023]($29)|0);
    HEAP32[$vararg_buffer>>2] = $30;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $24;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $34;
    _abort_message(15297,$vararg_buffer);
    // unreachable;
   } else {
    $35 = HEAP32[777]|0;
    HEAP32[$vararg_buffer3>>2] = $35;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $24;
    _abort_message(15342,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(15421,$vararg_buffer10);
 // unreachable;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((3100|0),(406|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(15036,$vararg_buffer);
  // unreachable;
 }
}
function __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$this>>2]|0;
  $6 = ((($5)) + -12|0);
  __ZdlPv($6);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[775]|0;
 $1 = (_pthread_setspecific(($0|0),(0|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  _abort_message(15086,$vararg_buffer);
  // unreachable;
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((15139|0),(15168|0),1164,(14847|0));
 // unreachable;
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((15247|0),(15168|0),1175,(15276|0));
 // unreachable;
}
function _isxdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isxdigit($c)|0);
 return ($0|0);
}
function _freelocale($l) {
 $l = $l|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($l);
 return;
}
function _catclose($catd) {
 $catd = $catd|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _newlocale($mask,$name,$base) {
 $mask = $mask|0;
 $name = $name|0;
 $base = $base|0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$name>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  label = 4;
 } else {
  $2 = (_strcmp($name,20853)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   label = 4;
  } else {
   $4 = (_strcmp($name,15442)|0);
   $5 = ($4|0)==(0);
   if ($5) {
    label = 4;
   } else {
    $$01 = 0;
   }
  }
 }
 if ((label|0) == 4) {
  $6 = ($base|0)==(0|0);
  if ($6) {
   $7 = (_calloc(1,4)|0);
   $$01 = $7;
  } else {
   $$01 = $base;
  }
 }
 return ($$01|0);
}
function _catgets($catd,$set_id,$msg_id,$s) {
 $catd = $catd|0;
 $set_id = $set_id|0;
 $msg_id = $msg_id|0;
 $s = $s|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($s|0);
}
function _uselocale($l) {
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 $1 = ((($0)) + 176|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($l|0)==(0|0);
 if (!($3)) {
  HEAP32[$1>>2] = $l;
 }
 return ($2|0);
}
function _isdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $0 = $isdigit&1;
 return ($0|0);
}
function _catopen($name,$oflag) {
 $name = $name|0;
 $oflag = $oflag|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ((-1)|0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 return (+$7);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $$x = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0;
 var $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 L1: do {
  if ($15) {
   label = 3;
  } else {
   $16 = $3 & 2147483647;
   $17 = ($16>>>0)>(2146435072);
   $18 = ($2>>>0)>(0);
   $19 = ($16|0)==(2146435072);
   $20 = $19 & $18;
   $21 = $17 | $20;
   $22 = ($6|0)==(2047);
   $or$cond = $21 | $22;
   if ($or$cond) {
    label = 3;
   } else {
    $25 = (_bitshift64Shl(($0|0),($1|0),1)|0);
    $26 = tempRet0;
    $27 = ($26>>>0)>($12>>>0);
    $28 = ($25>>>0)>($11>>>0);
    $29 = ($26|0)==($12|0);
    $30 = $29 & $28;
    $31 = $27 | $30;
    if (!($31)) {
     $32 = ($25|0)==($11|0);
     $33 = ($26|0)==($12|0);
     $34 = $32 & $33;
     $35 = $x * 0.0;
     $$x = $34 ? $35 : $x;
     return (+$$x);
    }
    $36 = ($6|0)==(0);
    if ($36) {
     $37 = (_bitshift64Shl(($0|0),($1|0),12)|0);
     $38 = tempRet0;
     $39 = ($38|0)>(-1);
     $40 = ($37>>>0)>(4294967295);
     $41 = ($38|0)==(-1);
     $42 = $41 & $40;
     $43 = $39 | $42;
     if ($43) {
      $45 = $37;$46 = $38;$ex$026 = 0;
      while(1) {
       $44 = (($ex$026) + -1)|0;
       $47 = (_bitshift64Shl(($45|0),($46|0),1)|0);
       $48 = tempRet0;
       $49 = ($48|0)>(-1);
       $50 = ($47>>>0)>(4294967295);
       $51 = ($48|0)==(-1);
       $52 = $51 & $50;
       $53 = $49 | $52;
       if ($53) {
        $45 = $47;$46 = $48;$ex$026 = $44;
       } else {
        $ex$0$lcssa = $44;
        break;
       }
      }
     } else {
      $ex$0$lcssa = 0;
     }
     $54 = (1 - ($ex$0$lcssa))|0;
     $55 = (_bitshift64Shl(($0|0),($1|0),($54|0))|0);
     $56 = tempRet0;
     $83 = $55;$84 = $56;$ex$1 = $ex$0$lcssa;
    } else {
     $57 = $1 & 1048575;
     $58 = $57 | 1048576;
     $83 = $0;$84 = $58;$ex$1 = $6;
    }
    $59 = ($9|0)==(0);
    if ($59) {
     $60 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $61 = tempRet0;
     $62 = ($61|0)>(-1);
     $63 = ($60>>>0)>(4294967295);
     $64 = ($61|0)==(-1);
     $65 = $64 & $63;
     $66 = $62 | $65;
     if ($66) {
      $68 = $60;$69 = $61;$ey$020 = 0;
      while(1) {
       $67 = (($ey$020) + -1)|0;
       $70 = (_bitshift64Shl(($68|0),($69|0),1)|0);
       $71 = tempRet0;
       $72 = ($71|0)>(-1);
       $73 = ($70>>>0)>(4294967295);
       $74 = ($71|0)==(-1);
       $75 = $74 & $73;
       $76 = $72 | $75;
       if ($76) {
        $68 = $70;$69 = $71;$ey$020 = $67;
       } else {
        $ey$0$lcssa = $67;
        break;
       }
      }
     } else {
      $ey$0$lcssa = 0;
     }
     $77 = (1 - ($ey$0$lcssa))|0;
     $78 = (_bitshift64Shl(($2|0),($3|0),($77|0))|0);
     $79 = tempRet0;
     $85 = $78;$86 = $79;$ey$1$ph = $ey$0$lcssa;
    } else {
     $80 = $3 & 1048575;
     $81 = $80 | 1048576;
     $85 = $2;$86 = $81;$ey$1$ph = $9;
    }
    $82 = ($ex$1|0)>($ey$1$ph|0);
    $87 = (_i64Subtract(($83|0),($84|0),($85|0),($86|0))|0);
    $88 = tempRet0;
    $89 = ($88|0)>(-1);
    $90 = ($87>>>0)>(4294967295);
    $91 = ($88|0)==(-1);
    $92 = $91 & $90;
    $93 = $89 | $92;
    L23: do {
     if ($82) {
      $152 = $93;$153 = $87;$154 = $88;$94 = $83;$96 = $84;$ex$212 = $ex$1;
      while(1) {
       if ($152) {
        $95 = ($94|0)==($85|0);
        $97 = ($96|0)==($86|0);
        $98 = $95 & $97;
        if ($98) {
         break;
        } else {
         $100 = $153;$101 = $154;
        }
       } else {
        $100 = $94;$101 = $96;
       }
       $102 = (_bitshift64Shl(($100|0),($101|0),1)|0);
       $103 = tempRet0;
       $104 = (($ex$212) + -1)|0;
       $105 = ($104|0)>($ey$1$ph|0);
       $106 = (_i64Subtract(($102|0),($103|0),($85|0),($86|0))|0);
       $107 = tempRet0;
       $108 = ($107|0)>(-1);
       $109 = ($106>>>0)>(4294967295);
       $110 = ($107|0)==(-1);
       $111 = $110 & $109;
       $112 = $108 | $111;
       if ($105) {
        $152 = $112;$153 = $106;$154 = $107;$94 = $102;$96 = $103;$ex$212 = $104;
       } else {
        $$lcssa7 = $112;$113 = $102;$115 = $103;$155 = $106;$156 = $107;$ex$2$lcssa = $104;
        break L23;
       }
      }
      $99 = $x * 0.0;
      $$0 = $99;
      break L1;
     } else {
      $$lcssa7 = $93;$113 = $83;$115 = $84;$155 = $87;$156 = $88;$ex$2$lcssa = $ex$1;
     }
    } while(0);
    if ($$lcssa7) {
     $114 = ($113|0)==($85|0);
     $116 = ($115|0)==($86|0);
     $117 = $114 & $116;
     if ($117) {
      $125 = $x * 0.0;
      $$0 = $125;
      break;
     } else {
      $118 = $156;$120 = $155;
     }
    } else {
     $118 = $115;$120 = $113;
    }
    $119 = ($118>>>0)<(1048576);
    $121 = ($120>>>0)<(0);
    $122 = ($118|0)==(1048576);
    $123 = $122 & $121;
    $124 = $119 | $123;
    if ($124) {
     $126 = $120;$127 = $118;$ex$39 = $ex$2$lcssa;
     while(1) {
      $128 = (_bitshift64Shl(($126|0),($127|0),1)|0);
      $129 = tempRet0;
      $130 = (($ex$39) + -1)|0;
      $131 = ($129>>>0)<(1048576);
      $132 = ($128>>>0)<(0);
      $133 = ($129|0)==(1048576);
      $134 = $133 & $132;
      $135 = $131 | $134;
      if ($135) {
       $126 = $128;$127 = $129;$ex$39 = $130;
      } else {
       $137 = $128;$138 = $129;$ex$3$lcssa = $130;
       break;
      }
     }
    } else {
     $137 = $120;$138 = $118;$ex$3$lcssa = $ex$2$lcssa;
    }
    $136 = ($ex$3$lcssa|0)>(0);
    if ($136) {
     $139 = (_i64Add(($137|0),($138|0),0,-1048576)|0);
     $140 = tempRet0;
     $141 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
     $142 = tempRet0;
     $143 = $139 | $141;
     $144 = $140 | $142;
     $149 = $144;$151 = $143;
    } else {
     $145 = (1 - ($ex$3$lcssa))|0;
     $146 = (_bitshift64Lshr(($137|0),($138|0),($145|0))|0);
     $147 = tempRet0;
     $149 = $147;$151 = $146;
    }
    $148 = $149 | $10;
    HEAP32[tempDoublePtr>>2] = $151;HEAP32[tempDoublePtr+4>>2] = $148;$150 = +HEAPF64[tempDoublePtr>>3];
    $$0 = $150;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $23 = $x * $y;
  $24 = $23 / $23;
  $$0 = $24;
 }
 return (+$$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  break;
 }
 case 2047:  {
  $$0 = $x;
  break;
 }
 default: {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
 }
 }
 return (+$$0);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmod($x,$y));
 return (+$0);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_copysign($x,$y));
 return (+$0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond$3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond$3 = $3 | $2;
 if ($or$cond$3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = ((($$014)) + 1|0);
   $5 = ((($$05)) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $9 | $8;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     $$lcssa = $1;$$lcssa19 = $2;
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = ((($l$04)) + 1|0);
    $6 = ((($r$05)) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $$lcssa&255;
   $9 = $$lcssa19&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 return ($11|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn$15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;$21 = $0;
   while(1) {
    $3 = HEAP8[$$014>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = ((($$014)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;$21 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0 = $$01$lcssa;
  while(1) {
   $9 = HEAP32[$w$0>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0)) + 4|0);
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;$w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn$15 = $w$0$lcssa;
   while(1) {
    $18 = ((($$pn$15)) + 1|0);
    $$pre = HEAP8[$18>>0]|0;
    $19 = ($$pre<<24>>24)==(0);
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn$15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = (($$pn) - ($0))|0;
 return ($$0|0);
}
function _wmemcpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if (!($0)) {
  $$014 = $n;$$023 = $s;$$05 = $d;
  while(1) {
   $1 = (($$014) + -1)|0;
   $2 = ((($$023)) + 4|0);
   $3 = HEAP32[$$023>>2]|0;
   $4 = ((($$05)) + 4|0);
   HEAP32[$$05>>2] = $3;
   $5 = ($1|0)==(0);
   if ($5) {
    break;
   } else {
    $$014 = $1;$$023 = $2;$$05 = $4;
   }
  }
 }
 return ($d|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond$18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond$18 = $4 & $3;
 L1: do {
  if ($or$cond$18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa43>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa44>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _wcslen($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP32[$$0>>2]|0;
  $1 = ($0|0)==(0);
  $2 = ((($$0)) + 4|0);
  if ($1) {
   $$0$lcssa = $$0;
   break;
  } else {
   $$0 = $2;
  }
 }
 $3 = $$0$lcssa;
 $4 = $s;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 return ($6|0);
}
function _wmemset($d,$c,$n) {
 $d = $d|0;
 $c = $c|0;
 $n = $n|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if (!($0)) {
  $$012 = $n;$$03 = $d;
  while(1) {
   $1 = (($$012) + -1)|0;
   $2 = ((($$03)) + 4|0);
   HEAP32[$$03>>2] = $c;
   $3 = ($1|0)==(0);
   if ($3) {
    break;
   } else {
    $$012 = $1;$$03 = $2;
   }
  }
 }
 return ($d|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $6 = (_strlen($s)|0);
   $7 = (($s) + ($6)|0);
   $$0 = $7;
  } else {
   $2 = $s;
   $3 = $2 & 3;
   $4 = ($3|0)==(0);
   if ($4) {
    $$02$lcssa = $s;
   } else {
    $5 = $c&255;
    $$0211 = $s;
    while(1) {
     $8 = HEAP8[$$0211>>0]|0;
     $9 = ($8<<24>>24)==(0);
     $10 = ($8<<24>>24)==($5<<24>>24);
     $or$cond = $9 | $10;
     if ($or$cond) {
      $$0 = $$0211;
      break L1;
     }
     $11 = ((($$0211)) + 1|0);
     $12 = $11;
     $13 = $12 & 3;
     $14 = ($13|0)==(0);
     if ($14) {
      $$02$lcssa = $11;
      break;
     } else {
      $$0211 = $11;
     }
    }
   }
   $15 = Math_imul($0, 16843009)|0;
   $16 = HEAP32[$$02$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   L10: do {
    if ($21) {
     $23 = $16;$w$08 = $$02$lcssa;
     while(1) {
      $22 = $23 ^ $15;
      $24 = (($22) + -16843009)|0;
      $25 = $22 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $w$0$lcssa = $w$08;
       break L10;
      }
      $29 = ((($w$08)) + 4|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($30) + -16843009)|0;
      $32 = $30 & -2139062144;
      $33 = $32 ^ -2139062144;
      $34 = $33 & $31;
      $35 = ($34|0)==(0);
      if ($35) {
       $23 = $30;$w$08 = $29;
      } else {
       $w$0$lcssa = $29;
       break;
      }
     }
    } else {
     $w$0$lcssa = $$02$lcssa;
    }
   } while(0);
   $36 = $c&255;
   $$1 = $w$0$lcssa;
   while(1) {
    $37 = HEAP8[$$1>>0]|0;
    $38 = ($37<<24>>24)==(0);
    $39 = ($37<<24>>24)==($36<<24>>24);
    $or$cond5 = $38 | $39;
    $40 = ((($$1)) + 1|0);
    if ($or$cond5) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $40;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _wmemmove($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$025 = 0, $$07 = 0, $$16 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $d;
 $1 = $s;
 $2 = (($0) - ($1))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)<($n>>>0);
 $5 = ($n|0)==(0);
 if ($4) {
  if (!($5)) {
   $$in = $n;
   while(1) {
    $6 = (($$in) + -1)|0;
    $7 = (($s) + ($6<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (($d) + ($6<<2)|0);
    HEAP32[$9>>2] = $8;
    $10 = ($6|0)==(0);
    if ($10) {
     break;
    } else {
     $$in = $6;
    }
   }
  }
 } else {
  if (!($5)) {
   $$025 = $s;$$07 = $d;$$16 = $n;
   while(1) {
    $11 = (($$16) + -1)|0;
    $12 = ((($$025)) + 4|0);
    $13 = HEAP32[$$025>>2]|0;
    $14 = ((($$07)) + 4|0);
    HEAP32[$$07>>2] = $13;
    $15 = ($11|0)==(0);
    if ($15) {
     break;
    } else {
     $$025 = $12;$$07 = $14;$$16 = $11;
    }
   }
  }
 }
 return ($d|0);
}
function _strtoull_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoull($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _strtoll_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoll($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function ___ftello_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$f>>2]|0;
 $3 = $2 & 128;
 $4 = ($3|0)==(0);
 if ($4) {
  $10 = 1;
 } else {
  $5 = ((($f)) + 20|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($f)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6>>>0)>($8>>>0);
  $phitmp = $9 ? 2 : 1;
  $10 = $phitmp;
 }
 $11 = (FUNCTION_TABLE_iiii[$1 & 1023]($f,0,$10)|0);
 $12 = ($11|0)<(0);
 if ($12) {
  $$0 = $11;
 } else {
  $13 = ((($f)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($f)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($f)) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($f)) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($11) - ($14))|0;
  $22 = (($21) + ($16))|0;
  $23 = (($22) + ($18))|0;
  $24 = (($23) - ($20))|0;
  $$0 = $24;
 }
 return ($$0|0);
}
function ___ftello($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___ftello_unlocked($f)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   $6 = $5;
  }
 } else {
  $3 = (___ftello_unlocked($f)|0);
  $6 = $3;
 }
 return ($6|0);
}
function _ftell($f) {
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___ftello($f)|0);
 return ($0|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0;
 var $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = ((($f)) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(-1);
  if ($4) {
   $5 = (___lockfile($f)|0);
   $32 = $5;
  } else {
   $32 = 0;
  }
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & 32;
  $8 = ((($f)) + 74|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)<(1);
  if ($10) {
   $11 = $6 & -33;
   HEAP32[$f>>2] = $11;
  }
  $12 = ((($f)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $16 = ((($f)) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$16>>2] = $internal_buf;
   $18 = ((($f)) + 28|0);
   HEAP32[$18>>2] = $internal_buf;
   $19 = ((($f)) + 20|0);
   HEAP32[$19>>2] = $internal_buf;
   HEAP32[$12>>2] = 80;
   $20 = ((($internal_buf)) + 80|0);
   $21 = ((($f)) + 16|0);
   HEAP32[$21>>2] = $20;
   $22 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $23 = ($17|0)==(0|0);
   if ($23) {
    $ret$1 = $22;
   } else {
    $24 = ((($f)) + 36|0);
    $25 = HEAP32[$24>>2]|0;
    (FUNCTION_TABLE_iiii[$25 & 1023]($f,0,0)|0);
    $26 = HEAP32[$19>>2]|0;
    $27 = ($26|0)==(0|0);
    $$ = $27 ? -1 : $22;
    HEAP32[$16>>2] = $17;
    HEAP32[$12>>2] = 0;
    HEAP32[$21>>2] = 0;
    HEAP32[$18>>2] = 0;
    HEAP32[$19>>2] = 0;
    $ret$1 = $$;
   }
  } else {
   $15 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $ret$1 = $15;
  }
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 & 32;
  $30 = ($29|0)==(0);
  $ret$1$ = $30 ? $ret$1 : -1;
  $31 = $28 | $7;
  HEAP32[$f>>2] = $31;
  $33 = ($32|0)==(0);
  if (!($33)) {
   ___unlockfile($f);
  }
  $$0 = $ret$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _feof($f) {
 $f = $f|0;
 var $$lobit = 0, $$lobit$1 = 0, $$lobit2 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 >>> 4;
  $$lobit = $7 & 1;
  if ($phitmp) {
   $$lobit2 = $$lobit;
  } else {
   $$lobit2 = $$lobit;
  }
 } else {
  $3 = HEAP32[$f>>2]|0;
  $4 = $3 >>> 4;
  $$lobit$1 = $4 & 1;
  $$lobit2 = $$lobit$1;
 }
 return ($$lobit2|0);
}
function _fputc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $18 = ((($f)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)==($c|0);
   if ($21) {
    label = 10;
   } else {
    $22 = ((($f)) + 20|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($f)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($23>>>0)<($25>>>0);
    if ($26) {
     $27 = $c&255;
     $28 = ((($23)) + 1|0);
     HEAP32[$22>>2] = $28;
     HEAP8[$23>>0] = $27;
     $29 = $c & 255;
     $31 = $29;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($f,$c)|0);
    $31 = $30;
   }
   ___unlockfile($f);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 75|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6 << 24 >> 24;
   $8 = ($7|0)==($c|0);
   if (!($8)) {
    $9 = ((($f)) + 20|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($f)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($10>>>0)<($12>>>0);
    if ($13) {
     $14 = $c&255;
     $15 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $15;
     HEAP8[$10>>0] = $14;
     $16 = $c & 255;
     $$0 = $16;
     break;
    }
   }
   $17 = (___overflow($f,$c)|0);
   $$0 = $17;
  }
 } while(0);
 return ($$0|0);
}
function _fopen($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(15448,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (___fmodeflags($mode)|0);
  $5 = $4 | 32768;
  HEAP32[$vararg_buffer>>2] = $filename;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $6 = (___syscall5(5,($vararg_buffer|0))|0);
  $7 = (___syscall_ret($6)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   $$0 = 0;
  } else {
   $9 = (___fdopen($7,$mode)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    HEAP32[$vararg_buffer3>>2] = $7;
    (___syscall6(6,($vararg_buffer3|0))|0);
    $$0 = 0;
   } else {
    $$0 = $9;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___overflow($f,$_c) {
 $f = $f|0;
 $_c = $_c|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = $_c&255;
 HEAP8[$c>>0] = $0;
 $1 = ((($f)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$1>>2]|0;
   $9 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $9 = $2;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7>>>0)<($9>>>0);
   if ($8) {
    $10 = $_c & 255;
    $11 = ((($f)) + 75|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12 << 24 >> 24;
    $14 = ($10|0)==($13|0);
    if (!($14)) {
     $15 = ((($7)) + 1|0);
     HEAP32[$6>>2] = $15;
     HEAP8[$7>>0] = $0;
     $$0 = $10;
     break;
    }
   }
   $16 = ((($f)) + 36|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iiii[$17 & 1023]($f,$c,1)|0);
   $19 = ($18|0)==(1);
   if ($19) {
    $20 = HEAP8[$c>>0]|0;
    $21 = $20&255;
    $$0 = $21;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa12 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$0>>2]|0;
   $9 = $$pre;
   label = 5;
  } else {
   $$0 = 0;
  }
 } else {
  $3 = $1;
  $9 = $3;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($9) - ($7))|0;
   $10 = ($8>>>0)<($l>>>0);
   $11 = $7;
   if ($10) {
    $12 = ((($f)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 1023]($f,$s,$l)|0);
    $$0 = $14;
    break;
   }
   $15 = ((($f)) + 75|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)>(-1);
   L10: do {
    if ($17) {
     $i$0 = $l;
     while(1) {
      $18 = ($i$0|0)==(0);
      if ($18) {
       $$01 = $l;$$02 = $s;$29 = $11;$i$1 = 0;
       break L10;
      }
      $19 = (($i$0) + -1)|0;
      $20 = (($s) + ($19)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(10);
      if ($22) {
       $i$0$lcssa12 = $i$0;
       break;
      } else {
       $i$0 = $19;
      }
     }
     $23 = ((($f)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iiii[$24 & 1023]($f,$s,$i$0$lcssa12)|0);
     $26 = ($25>>>0)<($i$0$lcssa12>>>0);
     if ($26) {
      $$0 = $i$0$lcssa12;
      break L5;
     }
     $27 = (($s) + ($i$0$lcssa12)|0);
     $28 = (($l) - ($i$0$lcssa12))|0;
     $$pre6 = HEAP32[$6>>2]|0;
     $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa12;
    } else {
     $$01 = $l;$$02 = $s;$29 = $11;$i$1 = 0;
    }
   } while(0);
   _memcpy(($29|0),($$02|0),($$01|0))|0;
   $30 = HEAP32[$6>>2]|0;
   $31 = (($30) + ($$01)|0);
   HEAP32[$6>>2] = $31;
   $32 = (($i$1) + ($$01))|0;
   $$0 = $32;
  }
 } while(0);
 return ($$0|0);
}
function _fwrite($src,$size,$nmemb,$f) {
 $src = $src|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___fwritex($src,$0,$f)|0);
  if ($phitmp) {
   $7 = $6;
  } else {
   ___unlockfile($f);
   $7 = $6;
  }
 } else {
  $4 = (___fwritex($src,$0,$f)|0);
  $7 = $4;
 }
 $8 = ($7|0)==($0|0);
 if ($8) {
  $10 = $nmemb;
 } else {
  $9 = (($7>>>0) / ($size>>>0))&-1;
  $10 = $9;
 }
 return ($10|0);
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$11 = 0, $$12 = 0, $$13 = 0, $$14 = 0, $$lcssa = 0, $$lcssa386 = 0, $$lcssa40 = 0, $$not = 0, $$old4 = 0, $$pre = 0, $$pre$phi184Z2D = 0, $$pre170 = 0, $$pre172 = 0, $$pre174 = 0, $$pre176 = 0, $$pre178 = 0, $$pre180 = 0, $$pre182 = 0, $$pre183 = 0;
 var $$size$0 = 0, $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0.0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$0402 = 0, $alloc$1 = 0, $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $base$0 = 0, $c$0102 = 0, $dest$0 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $factor = 0, $factor18 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph$phi = 0, $i$0$ph22 = 0, $i$0$ph22$lcssa = 0;
 var $i$1 = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0, $isdigit = 0, $isdigit8 = 0, $isdigit8$97 = 0, $isdigittmp = 0, $isdigittmp7 = 0, $isdigittmp7$96 = 0, $k$0$ph = 0, $k$1$ph = 0, $matches$0$ = 0, $matches$0107 = 0, $matches$0107$lcssa = 0, $matches$0107371 = 0, $matches$1 = 0;
 var $matches$2 = 0, $matches$3 = 0, $not$ = 0, $or$cond = 0, $or$cond10 = 0, $or$cond3 = 0, $or$cond5 = 0, $p$0110 = 0, $p$1 = 0, $p$1$lcssa = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$398 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$ph = 0;
 var $p$8 = 0, $p$9 = 0, $pos$0111 = 0, $pos$1 = 0, $pos$2 = 0, $s$0105 = 0, $s$0105$lcssa = 0, $s$1 = 0, $s$2$ph = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, $scanset = 0, $size$0 = 0, $st = 0, $vacopy_currentptr = 0, $wc = 0;
 var $wcs$0106 = 0, $wcs$0106$lcssa = 0, $wcs$1 = 0, $wcs$10 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph$lcssa = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $wcs$9 = 0, $width$0$lcssa = 0, $width$099 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2$i = sp + 16|0;
 $st = sp + 8|0;
 $scanset = sp + 33|0;
 $wc = sp;
 $0 = sp + 32|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $327 = $4;
 } else {
  $327 = 0;
 }
 $5 = HEAP8[$fmt>>0]|0;
 $6 = ($5<<24>>24)==(0);
 L4: do {
  if ($6) {
   $matches$3 = 0;
  } else {
   $7 = ((($f)) + 4|0);
   $8 = ((($f)) + 100|0);
   $9 = ((($f)) + 108|0);
   $10 = ((($f)) + 8|0);
   $11 = ((($scanset)) + 10|0);
   $12 = ((($scanset)) + 33|0);
   $13 = ((($st)) + 4|0);
   $14 = ((($scanset)) + 46|0);
   $15 = ((($scanset)) + 94|0);
   $17 = $5;$matches$0107 = 0;$p$0110 = $fmt;$pos$0111 = 0;$s$0105 = 0;$wcs$0106 = 0;
   L6: while(1) {
    $16 = $17&255;
    $18 = (_isspace($16)|0);
    $19 = ($18|0)==(0);
    L8: do {
     if ($19) {
      $46 = HEAP8[$p$0110>>0]|0;
      $47 = ($46<<24>>24)==(37);
      L10: do {
       if ($47) {
        $48 = ((($p$0110)) + 1|0);
        $49 = HEAP8[$48>>0]|0;
        L12: do {
         switch ($49<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $70 = ((($p$0110)) + 2|0);
          $dest$0 = 0;$p$2 = $70;
          break;
         }
         default: {
          $71 = $49&255;
          $isdigittmp = (($71) + -48)|0;
          $isdigit = ($isdigittmp>>>0)<(10);
          if ($isdigit) {
           $72 = ((($p$0110)) + 2|0);
           $73 = HEAP8[$72>>0]|0;
           $74 = ($73<<24>>24)==(36);
           if ($74) {
            $vacopy_currentptr = HEAP32[$ap>>2]|0;
            HEAP32[$ap2$i>>2] = $vacopy_currentptr;
            $i$0$i = $isdigittmp;
            while(1) {
             $75 = ($i$0$i>>>0)>(1);
             $arglist_current = HEAP32[$ap2$i>>2]|0;
             $76 = $arglist_current;
             $77 = ((0) + 4|0);
             $expanded4 = $77;
             $expanded = (($expanded4) - 1)|0;
             $78 = (($76) + ($expanded))|0;
             $79 = ((0) + 4|0);
             $expanded8 = $79;
             $expanded7 = (($expanded8) - 1)|0;
             $expanded6 = $expanded7 ^ -1;
             $80 = $78 & $expanded6;
             $81 = $80;
             $82 = HEAP32[$81>>2]|0;
             $arglist_next = ((($81)) + 4|0);
             HEAP32[$ap2$i>>2] = $arglist_next;
             $83 = (($i$0$i) + -1)|0;
             if ($75) {
              $i$0$i = $83;
             } else {
              $$lcssa = $82;
              break;
             }
            }
            $84 = ((($p$0110)) + 3|0);
            $dest$0 = $$lcssa;$p$2 = $84;
            break L12;
           }
          }
          $arglist_current2 = HEAP32[$ap>>2]|0;
          $85 = $arglist_current2;
          $86 = ((0) + 4|0);
          $expanded11 = $86;
          $expanded10 = (($expanded11) - 1)|0;
          $87 = (($85) + ($expanded10))|0;
          $88 = ((0) + 4|0);
          $expanded15 = $88;
          $expanded14 = (($expanded15) - 1)|0;
          $expanded13 = $expanded14 ^ -1;
          $89 = $87 & $expanded13;
          $90 = $89;
          $91 = HEAP32[$90>>2]|0;
          $arglist_next3 = ((($90)) + 4|0);
          HEAP32[$ap>>2] = $arglist_next3;
          $dest$0 = $91;$p$2 = $48;
         }
         }
        } while(0);
        $92 = HEAP8[$p$2>>0]|0;
        $93 = $92&255;
        $isdigittmp7$96 = (($93) + -48)|0;
        $isdigit8$97 = ($isdigittmp7$96>>>0)<(10);
        if ($isdigit8$97) {
         $97 = $93;$p$398 = $p$2;$width$099 = 0;
         while(1) {
          $94 = ($width$099*10)|0;
          $95 = (($94) + -48)|0;
          $96 = (($95) + ($97))|0;
          $98 = ((($p$398)) + 1|0);
          $99 = HEAP8[$98>>0]|0;
          $100 = $99&255;
          $isdigittmp7 = (($100) + -48)|0;
          $isdigit8 = ($isdigittmp7>>>0)<(10);
          if ($isdigit8) {
           $97 = $100;$p$398 = $98;$width$099 = $96;
          } else {
           $$lcssa40 = $99;$p$3$lcssa = $98;$width$0$lcssa = $96;
           break;
          }
         }
        } else {
         $$lcssa40 = $92;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
        }
        $101 = ($$lcssa40<<24>>24)==(109);
        if ($101) {
         $102 = ($dest$0|0)!=(0|0);
         $103 = $102&1;
         $104 = ((($p$3$lcssa)) + 1|0);
         $$pre170 = HEAP8[$104>>0]|0;
         $107 = $$pre170;$alloc$0 = $103;$p$4 = $104;$s$1 = 0;$wcs$1 = 0;
        } else {
         $107 = $$lcssa40;$alloc$0 = 0;$p$4 = $p$3$lcssa;$s$1 = $s$0105;$wcs$1 = $wcs$0106;
        }
        $105 = ((($p$4)) + 1|0);
        $106 = $107&255;
        switch ($106|0) {
        case 104:  {
         $108 = HEAP8[$105>>0]|0;
         $109 = ($108<<24>>24)==(104);
         $110 = ((($p$4)) + 2|0);
         $$11 = $109 ? $110 : $105;
         $$12 = $109 ? -2 : -1;
         $p$5 = $$11;$size$0 = $$12;
         break;
        }
        case 108:  {
         $111 = HEAP8[$105>>0]|0;
         $112 = ($111<<24>>24)==(108);
         $113 = ((($p$4)) + 2|0);
         $$13 = $112 ? $113 : $105;
         $$14 = $112 ? 3 : 1;
         $p$5 = $$13;$size$0 = $$14;
         break;
        }
        case 106:  {
         $p$5 = $105;$size$0 = 3;
         break;
        }
        case 116: case 122:  {
         $p$5 = $105;$size$0 = 1;
         break;
        }
        case 76:  {
         $p$5 = $105;$size$0 = 2;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $p$5 = $p$4;$size$0 = 0;
         break;
        }
        default: {
         $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = $s$1;$wcs$8 = $wcs$1;
         label = 154;
         break L6;
        }
        }
        $114 = HEAP8[$p$5>>0]|0;
        $115 = $114&255;
        $116 = $115 & 47;
        $117 = ($116|0)==(3);
        $118 = $115 | 32;
        $$ = $117 ? $118 : $115;
        $$size$0 = $117 ? 1 : $size$0;
        switch ($$|0) {
        case 99:  {
         $119 = ($width$0$lcssa|0)<(1);
         $$width$0 = $119 ? 1 : $width$0$lcssa;
         $pos$1 = $pos$0111;$width$1 = $$width$0;
         break;
        }
        case 91:  {
         $pos$1 = $pos$0111;$width$1 = $width$0$lcssa;
         break;
        }
        case 110:  {
         $120 = ($pos$0111|0)<(0);
         $121 = $120 << 31 >> 31;
         $122 = ($dest$0|0)==(0|0);
         if ($122) {
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
         }
         switch ($$size$0|0) {
         case -2:  {
          $123 = $pos$0111&255;
          HEAP8[$dest$0>>0] = $123;
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
          break;
         }
         case -1:  {
          $124 = $pos$0111&65535;
          HEAP16[$dest$0>>1] = $124;
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
          break;
         }
         case 0:  {
          HEAP32[$dest$0>>2] = $pos$0111;
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
          break;
         }
         case 1:  {
          HEAP32[$dest$0>>2] = $pos$0111;
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
          break;
         }
         case 3:  {
          $125 = $dest$0;
          $126 = $125;
          HEAP32[$126>>2] = $pos$0111;
          $127 = (($125) + 4)|0;
          $128 = $127;
          HEAP32[$128>>2] = $121;
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
          break;
         }
         default: {
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
         }
         }
         break;
        }
        default: {
         ___shlim($f,0);
         while(1) {
          $129 = HEAP32[$7>>2]|0;
          $130 = HEAP32[$8>>2]|0;
          $131 = ($129>>>0)<($130>>>0);
          if ($131) {
           $132 = ((($129)) + 1|0);
           HEAP32[$7>>2] = $132;
           $133 = HEAP8[$129>>0]|0;
           $134 = $133&255;
           $136 = $134;
          } else {
           $135 = (___shgetc($f)|0);
           $136 = $135;
          }
          $137 = (_isspace($136)|0);
          $138 = ($137|0)==(0);
          if ($138) {
           break;
          }
         }
         $139 = HEAP32[$8>>2]|0;
         $140 = ($139|0)==(0|0);
         if ($140) {
          $$pre172 = HEAP32[$7>>2]|0;
          $148 = $$pre172;
         } else {
          $141 = HEAP32[$7>>2]|0;
          $142 = ((($141)) + -1|0);
          HEAP32[$7>>2] = $142;
          $143 = $142;
          $148 = $143;
         }
         $144 = HEAP32[$9>>2]|0;
         $145 = HEAP32[$10>>2]|0;
         $146 = (($144) + ($pos$0111))|0;
         $147 = (($146) + ($148))|0;
         $149 = (($147) - ($145))|0;
         $pos$1 = $149;$width$1 = $width$0$lcssa;
        }
        }
        ___shlim($f,$width$1);
        $150 = HEAP32[$7>>2]|0;
        $151 = HEAP32[$8>>2]|0;
        $152 = ($150>>>0)<($151>>>0);
        if ($152) {
         $153 = ((($150)) + 1|0);
         HEAP32[$7>>2] = $153;
         $156 = $151;
        } else {
         $154 = (___shgetc($f)|0);
         $155 = ($154|0)<(0);
         if ($155) {
          $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = $s$1;$wcs$8 = $wcs$1;
          label = 154;
          break L6;
         }
         $$pre174 = HEAP32[$8>>2]|0;
         $156 = $$pre174;
        }
        $157 = ($156|0)==(0|0);
        if (!($157)) {
         $158 = HEAP32[$7>>2]|0;
         $159 = ((($158)) + -1|0);
         HEAP32[$7>>2] = $159;
        }
        L68: do {
         switch ($$|0) {
         case 91: case 99: case 115:  {
          $160 = ($$|0)==(99);
          $161 = $$ & 239;
          $162 = ($161|0)==(99);
          L70: do {
           if ($162) {
            $163 = ($$|0)==(115);
            _memset(($scanset|0),-1,257)|0;
            HEAP8[$scanset>>0] = 0;
            if ($163) {
             HEAP8[$12>>0] = 0;
             ;HEAP8[$11>>0]=0|0;HEAP8[$11+1>>0]=0|0;HEAP8[$11+2>>0]=0|0;HEAP8[$11+3>>0]=0|0;HEAP8[$11+4>>0]=0|0;
             $p$9 = $p$5;
            } else {
             $p$9 = $p$5;
            }
           } else {
            $164 = ((($p$5)) + 1|0);
            $165 = HEAP8[$164>>0]|0;
            $166 = ($165<<24>>24)==(94);
            $167 = ((($p$5)) + 2|0);
            $invert$0 = $166&1;
            $168 = $166 ? $164 : $p$5;
            $p$6 = $166 ? $167 : $164;
            $169 = $166&1;
            _memset(($scanset|0),($169|0),257)|0;
            HEAP8[$scanset>>0] = 0;
            $170 = HEAP8[$p$6>>0]|0;
            switch ($170<<24>>24) {
            case 45:  {
             $171 = ((($168)) + 2|0);
             $172 = $invert$0 ^ 1;
             $173 = $172&255;
             HEAP8[$14>>0] = $173;
             $$pre$phi184Z2D = $173;$p$7$ph = $171;
             break;
            }
            case 93:  {
             $174 = ((($168)) + 2|0);
             $175 = $invert$0 ^ 1;
             $176 = $175&255;
             HEAP8[$15>>0] = $176;
             $$pre$phi184Z2D = $176;$p$7$ph = $174;
             break;
            }
            default: {
             $$pre182 = $invert$0 ^ 1;
             $$pre183 = $$pre182&255;
             $$pre$phi184Z2D = $$pre183;$p$7$ph = $p$6;
            }
            }
            $p$7 = $p$7$ph;
            while(1) {
             $177 = HEAP8[$p$7>>0]|0;
             L81: do {
              switch ($177<<24>>24) {
              case 0:  {
               $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = $s$1;$wcs$8 = $wcs$1;
               label = 154;
               break L6;
               break;
              }
              case 93:  {
               $p$9 = $p$7;
               break L70;
               break;
              }
              case 45:  {
               $178 = ((($p$7)) + 1|0);
               $179 = HEAP8[$178>>0]|0;
               switch ($179<<24>>24) {
               case 93: case 0:  {
                $190 = 45;$p$8 = $p$7;
                break L81;
                break;
               }
               default: {
               }
               }
               $180 = ((($p$7)) + -1|0);
               $181 = HEAP8[$180>>0]|0;
               $182 = ($181&255)<($179&255);
               if ($182) {
                $183 = $181&255;
                $c$0102 = $183;
                while(1) {
                 $184 = (($c$0102) + 1)|0;
                 $185 = (($scanset) + ($184)|0);
                 HEAP8[$185>>0] = $$pre$phi184Z2D;
                 $186 = HEAP8[$178>>0]|0;
                 $187 = $186&255;
                 $188 = ($184|0)<($187|0);
                 if ($188) {
                  $c$0102 = $184;
                 } else {
                  $190 = $186;$p$8 = $178;
                  break;
                 }
                }
               } else {
                $190 = $179;$p$8 = $178;
               }
               break;
              }
              default: {
               $190 = $177;$p$8 = $p$7;
              }
              }
             } while(0);
             $189 = $190&255;
             $191 = (($189) + 1)|0;
             $192 = (($scanset) + ($191)|0);
             HEAP8[$192>>0] = $$pre$phi184Z2D;
             $193 = ((($p$8)) + 1|0);
             $p$7 = $193;
            }
           }
          } while(0);
          $194 = (($width$1) + 1)|0;
          $195 = $160 ? $194 : 31;
          $196 = ($$size$0|0)==(1);
          $197 = ($alloc$0|0)!=(0);
          L89: do {
           if ($196) {
            if ($197) {
             $198 = $195 << 2;
             $199 = (_malloc($198)|0);
             $200 = ($199|0)==(0|0);
             if ($200) {
              $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = 0;$wcs$8 = $199;
              label = 154;
              break L6;
             } else {
              $wcs$2 = $199;
             }
            } else {
             $wcs$2 = $dest$0;
            }
            HEAP32[$st>>2] = 0;
            HEAP32[$13>>2] = 0;
            $i$0$ph = 0;$k$0$ph = $195;$wcs$3$ph = $wcs$2;
            L95: while(1) {
             $201 = ($wcs$3$ph|0)==(0|0);
             $i$0$ph22 = $i$0$ph;
             while(1) {
              L99: while(1) {
               $202 = HEAP32[$7>>2]|0;
               $203 = HEAP32[$8>>2]|0;
               $204 = ($202>>>0)<($203>>>0);
               if ($204) {
                $205 = ((($202)) + 1|0);
                HEAP32[$7>>2] = $205;
                $206 = HEAP8[$202>>0]|0;
                $207 = $206&255;
                $210 = $207;
               } else {
                $208 = (___shgetc($f)|0);
                $210 = $208;
               }
               $209 = (($210) + 1)|0;
               $211 = (($scanset) + ($209)|0);
               $212 = HEAP8[$211>>0]|0;
               $213 = ($212<<24>>24)==(0);
               if ($213) {
                $i$0$ph22$lcssa = $i$0$ph22;$wcs$3$ph$lcssa = $wcs$3$ph;
                break L95;
               }
               $214 = $210&255;
               HEAP8[$0>>0] = $214;
               $215 = (_mbrtowc($wc,$0,1,$st)|0);
               switch ($215|0) {
               case -1:  {
                $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = 0;$wcs$8 = $wcs$3$ph;
                label = 154;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L99;
               }
               }
              }
              if ($201) {
               $i$1 = $i$0$ph22;
              } else {
               $216 = HEAP32[$wc>>2]|0;
               $217 = (($i$0$ph22) + 1)|0;
               $218 = (($wcs$3$ph) + ($i$0$ph22<<2)|0);
               HEAP32[$218>>2] = $216;
               $i$1 = $217;
              }
              $219 = ($i$1|0)==($k$0$ph|0);
              $or$cond = $197 & $219;
              if ($or$cond) {
               break;
              } else {
               $i$0$ph22 = $i$1;
              }
             }
             $factor = $k$0$ph << 1;
             $220 = $factor | 1;
             $221 = $220 << 2;
             $222 = (_realloc($wcs$3$ph,$221)|0);
             $223 = ($222|0)==(0|0);
             if ($223) {
              $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = 0;$wcs$8 = $wcs$3$ph;
              label = 154;
              break L6;
             } else {
              $i$0$ph$phi = $k$0$ph;$k$0$ph = $220;$wcs$3$ph = $222;$i$0$ph = $i$0$ph$phi;
             }
            }
            $224 = (_mbsinit($st)|0);
            $225 = ($224|0)==(0);
            if ($225) {
             $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = 0;$wcs$8 = $wcs$3$ph$lcssa;
             label = 154;
             break L6;
            } else {
             $i$4 = $i$0$ph22$lcssa;$s$4 = 0;$wcs$5 = $wcs$3$ph$lcssa;
            }
           } else {
            if ($197) {
             $226 = (_malloc($195)|0);
             $227 = ($226|0)==(0|0);
             if ($227) {
              $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = 0;$wcs$8 = 0;
              label = 154;
              break L6;
             } else {
              $i$2$ph = 0;$k$1$ph = $195;$s$2$ph = $226;
             }
             while(1) {
              $i$2 = $i$2$ph;
              while(1) {
               $228 = HEAP32[$7>>2]|0;
               $229 = HEAP32[$8>>2]|0;
               $230 = ($228>>>0)<($229>>>0);
               if ($230) {
                $231 = ((($228)) + 1|0);
                HEAP32[$7>>2] = $231;
                $232 = HEAP8[$228>>0]|0;
                $233 = $232&255;
                $236 = $233;
               } else {
                $234 = (___shgetc($f)|0);
                $236 = $234;
               }
               $235 = (($236) + 1)|0;
               $237 = (($scanset) + ($235)|0);
               $238 = HEAP8[$237>>0]|0;
               $239 = ($238<<24>>24)==(0);
               if ($239) {
                $i$4 = $i$2;$s$4 = $s$2$ph;$wcs$5 = 0;
                break L89;
               }
               $240 = $236&255;
               $241 = (($i$2) + 1)|0;
               $242 = (($s$2$ph) + ($i$2)|0);
               HEAP8[$242>>0] = $240;
               $243 = ($241|0)==($k$1$ph|0);
               if ($243) {
                break;
               } else {
                $i$2 = $241;
               }
              }
              $factor18 = $k$1$ph << 1;
              $244 = $factor18 | 1;
              $245 = (_realloc($s$2$ph,$244)|0);
              $246 = ($245|0)==(0|0);
              if ($246) {
               $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = $s$2$ph;$wcs$8 = 0;
               label = 154;
               break L6;
              } else {
               $i$2$ph$phi = $k$1$ph;$k$1$ph = $244;$s$2$ph = $245;$i$2$ph = $i$2$ph$phi;
              }
             }
            }
            $247 = ($dest$0|0)==(0|0);
            if ($247) {
             $265 = $156;
             while(1) {
              $263 = HEAP32[$7>>2]|0;
              $264 = ($263>>>0)<($265>>>0);
              if ($264) {
               $266 = ((($263)) + 1|0);
               HEAP32[$7>>2] = $266;
               $267 = HEAP8[$263>>0]|0;
               $268 = $267&255;
               $271 = $268;
              } else {
               $269 = (___shgetc($f)|0);
               $271 = $269;
              }
              $270 = (($271) + 1)|0;
              $272 = (($scanset) + ($270)|0);
              $273 = HEAP8[$272>>0]|0;
              $274 = ($273<<24>>24)==(0);
              if ($274) {
               $i$4 = 0;$s$4 = 0;$wcs$5 = 0;
               break L89;
              }
              $$pre178 = HEAP32[$8>>2]|0;
              $265 = $$pre178;
             }
            } else {
             $250 = $156;$i$3 = 0;
             while(1) {
              $248 = HEAP32[$7>>2]|0;
              $249 = ($248>>>0)<($250>>>0);
              if ($249) {
               $251 = ((($248)) + 1|0);
               HEAP32[$7>>2] = $251;
               $252 = HEAP8[$248>>0]|0;
               $253 = $252&255;
               $256 = $253;
              } else {
               $254 = (___shgetc($f)|0);
               $256 = $254;
              }
              $255 = (($256) + 1)|0;
              $257 = (($scanset) + ($255)|0);
              $258 = HEAP8[$257>>0]|0;
              $259 = ($258<<24>>24)==(0);
              if ($259) {
               $i$4 = $i$3;$s$4 = $dest$0;$wcs$5 = 0;
               break L89;
              }
              $260 = $256&255;
              $261 = (($i$3) + 1)|0;
              $262 = (($dest$0) + ($i$3)|0);
              HEAP8[$262>>0] = $260;
              $$pre176 = HEAP32[$8>>2]|0;
              $250 = $$pre176;$i$3 = $261;
             }
            }
           }
          } while(0);
          $275 = HEAP32[$8>>2]|0;
          $276 = ($275|0)==(0|0);
          if ($276) {
           $$pre180 = HEAP32[$7>>2]|0;
           $283 = $$pre180;
          } else {
           $277 = HEAP32[$7>>2]|0;
           $278 = ((($277)) + -1|0);
           HEAP32[$7>>2] = $278;
           $279 = $278;
           $283 = $279;
          }
          $280 = HEAP32[$9>>2]|0;
          $281 = HEAP32[$10>>2]|0;
          $282 = (($283) - ($281))|0;
          $284 = (($282) + ($280))|0;
          $285 = ($284|0)==(0);
          if ($285) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0107;$s$9 = $s$4;$wcs$10 = $wcs$5;
           break L6;
          }
          $$not = $160 ^ 1;
          $286 = ($284|0)==($width$1|0);
          $or$cond10 = $286 | $$not;
          if (!($or$cond10)) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0107;$s$9 = $s$4;$wcs$10 = $wcs$5;
           break L6;
          }
          do {
           if ($197) {
            if ($196) {
             HEAP32[$dest$0>>2] = $wcs$5;
             break;
            } else {
             HEAP32[$dest$0>>2] = $s$4;
             break;
            }
           }
          } while(0);
          if ($160) {
           $p$10 = $p$9;$s$5 = $s$4;$wcs$6 = $wcs$5;
          } else {
           $287 = ($wcs$5|0)==(0|0);
           if (!($287)) {
            $288 = (($wcs$5) + ($i$4<<2)|0);
            HEAP32[$288>>2] = 0;
           }
           $289 = ($s$4|0)==(0|0);
           if ($289) {
            $p$10 = $p$9;$s$5 = 0;$wcs$6 = $wcs$5;
            break L68;
           }
           $290 = (($s$4) + ($i$4)|0);
           HEAP8[$290>>0] = 0;
           $p$10 = $p$9;$s$5 = $s$4;$wcs$6 = $wcs$5;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $base$0 = 16;
          label = 136;
          break;
         }
         case 111:  {
          $base$0 = 8;
          label = 136;
          break;
         }
         case 117: case 100:  {
          $base$0 = 10;
          label = 136;
          break;
         }
         case 105:  {
          $base$0 = 0;
          label = 136;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $308 = (+___floatscan($f,$$size$0,0));
          $309 = HEAP32[$9>>2]|0;
          $310 = HEAP32[$7>>2]|0;
          $311 = HEAP32[$10>>2]|0;
          $312 = (($311) - ($310))|0;
          $313 = ($309|0)==($312|0);
          if ($313) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0107;$s$9 = $s$1;$wcs$10 = $wcs$1;
           break L6;
          }
          $314 = ($dest$0|0)==(0|0);
          if ($314) {
           $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
          } else {
           switch ($$size$0|0) {
           case 0:  {
            $315 = $308;
            HEAPF32[$dest$0>>2] = $315;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L68;
            break;
           }
           case 1:  {
            HEAPF64[$dest$0>>3] = $308;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L68;
            break;
           }
           case 2:  {
            HEAPF64[$dest$0>>3] = $308;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L68;
            break;
           }
           default: {
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L68;
           }
           }
          }
          break;
         }
         default: {
          $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
         }
         }
        } while(0);
        L169: do {
         if ((label|0) == 136) {
          label = 0;
          $291 = (___intscan($f,$base$0,0,-1,-1)|0);
          $292 = tempRet0;
          $293 = HEAP32[$9>>2]|0;
          $294 = HEAP32[$7>>2]|0;
          $295 = HEAP32[$10>>2]|0;
          $296 = (($295) - ($294))|0;
          $297 = ($293|0)==($296|0);
          if ($297) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0107;$s$9 = $s$1;$wcs$10 = $wcs$1;
           break L6;
          }
          $298 = ($$|0)==(112);
          $299 = ($dest$0|0)!=(0|0);
          $or$cond3 = $299 & $298;
          if ($or$cond3) {
           $300 = $291;
           HEAP32[$dest$0>>2] = $300;
           $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
           break;
          }
          $301 = ($dest$0|0)==(0|0);
          if ($301) {
           $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
          } else {
           switch ($$size$0|0) {
           case -2:  {
            $302 = $291&255;
            HEAP8[$dest$0>>0] = $302;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
            break;
           }
           case -1:  {
            $303 = $291&65535;
            HEAP16[$dest$0>>1] = $303;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
            break;
           }
           case 0:  {
            HEAP32[$dest$0>>2] = $291;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
            break;
           }
           case 1:  {
            HEAP32[$dest$0>>2] = $291;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
            break;
           }
           case 3:  {
            $304 = $dest$0;
            $305 = $304;
            HEAP32[$305>>2] = $291;
            $306 = (($304) + 4)|0;
            $307 = $306;
            HEAP32[$307>>2] = $292;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
            break;
           }
           default: {
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
           }
           }
          }
         }
        } while(0);
        $316 = HEAP32[$9>>2]|0;
        $317 = HEAP32[$7>>2]|0;
        $318 = HEAP32[$10>>2]|0;
        $319 = (($316) + ($pos$1))|0;
        $320 = (($319) + ($317))|0;
        $321 = (($320) - ($318))|0;
        $not$ = ($dest$0|0)!=(0|0);
        $322 = $not$&1;
        $matches$0$ = (($322) + ($matches$0107))|0;
        $matches$1 = $matches$0$;$p$11 = $p$10;$pos$2 = $321;$s$6 = $s$5;$wcs$7 = $wcs$6;
        break L8;
       }
      } while(0);
      $50 = $47&1;
      $51 = (($p$0110) + ($50)|0);
      ___shlim($f,0);
      $52 = HEAP32[$7>>2]|0;
      $53 = HEAP32[$8>>2]|0;
      $54 = ($52>>>0)<($53>>>0);
      if ($54) {
       $55 = ((($52)) + 1|0);
       HEAP32[$7>>2] = $55;
       $56 = HEAP8[$52>>0]|0;
       $57 = $56&255;
       $61 = $57;
      } else {
       $58 = (___shgetc($f)|0);
       $61 = $58;
      }
      $59 = HEAP8[$51>>0]|0;
      $60 = $59&255;
      $62 = ($61|0)==($60|0);
      if (!($62)) {
       $$lcssa386 = $61;$matches$0107$lcssa = $matches$0107;$s$0105$lcssa = $s$0105;$wcs$0106$lcssa = $wcs$0106;
       label = 22;
       break L6;
      }
      $69 = (($pos$0111) + 1)|0;
      $matches$1 = $matches$0107;$p$11 = $51;$pos$2 = $69;$s$6 = $s$0105;$wcs$7 = $wcs$0106;
     } else {
      $p$1 = $p$0110;
      while(1) {
       $20 = ((($p$1)) + 1|0);
       $21 = HEAP8[$20>>0]|0;
       $22 = $21&255;
       $23 = (_isspace($22)|0);
       $24 = ($23|0)==(0);
       if ($24) {
        $p$1$lcssa = $p$1;
        break;
       } else {
        $p$1 = $20;
       }
      }
      ___shlim($f,0);
      while(1) {
       $25 = HEAP32[$7>>2]|0;
       $26 = HEAP32[$8>>2]|0;
       $27 = ($25>>>0)<($26>>>0);
       if ($27) {
        $28 = ((($25)) + 1|0);
        HEAP32[$7>>2] = $28;
        $29 = HEAP8[$25>>0]|0;
        $30 = $29&255;
        $32 = $30;
       } else {
        $31 = (___shgetc($f)|0);
        $32 = $31;
       }
       $33 = (_isspace($32)|0);
       $34 = ($33|0)==(0);
       if ($34) {
        break;
       }
      }
      $35 = HEAP32[$8>>2]|0;
      $36 = ($35|0)==(0|0);
      if ($36) {
       $$pre = HEAP32[$7>>2]|0;
       $44 = $$pre;
      } else {
       $37 = HEAP32[$7>>2]|0;
       $38 = ((($37)) + -1|0);
       HEAP32[$7>>2] = $38;
       $39 = $38;
       $44 = $39;
      }
      $40 = HEAP32[$9>>2]|0;
      $41 = HEAP32[$10>>2]|0;
      $42 = (($40) + ($pos$0111))|0;
      $43 = (($42) + ($44))|0;
      $45 = (($43) - ($41))|0;
      $matches$1 = $matches$0107;$p$11 = $p$1$lcssa;$pos$2 = $45;$s$6 = $s$0105;$wcs$7 = $wcs$0106;
     }
    } while(0);
    $323 = ((($p$11)) + 1|0);
    $324 = HEAP8[$323>>0]|0;
    $325 = ($324<<24>>24)==(0);
    if ($325) {
     $matches$3 = $matches$1;
     break L4;
    } else {
     $17 = $324;$matches$0107 = $matches$1;$p$0110 = $323;$pos$0111 = $pos$2;$s$0105 = $s$6;$wcs$0106 = $wcs$7;
    }
   }
   if ((label|0) == 22) {
    $63 = HEAP32[$8>>2]|0;
    $64 = ($63|0)==(0|0);
    if (!($64)) {
     $65 = HEAP32[$7>>2]|0;
     $66 = ((($65)) + -1|0);
     HEAP32[$7>>2] = $66;
    }
    $67 = ($$lcssa386|0)>(-1);
    $68 = ($matches$0107$lcssa|0)!=(0);
    $or$cond5 = $68 | $67;
    if ($or$cond5) {
     $matches$3 = $matches$0107$lcssa;
     break;
    } else {
     $alloc$1 = 0;$s$8 = $s$0105$lcssa;$wcs$9 = $wcs$0106$lcssa;
     label = 155;
    }
   }
   else if ((label|0) == 154) {
    $$old4 = ($matches$0107371|0)==(0);
    if ($$old4) {
     $alloc$1 = $alloc$0402;$s$8 = $s$7;$wcs$9 = $wcs$8;
     label = 155;
    } else {
     $alloc$2 = $alloc$0402;$matches$2 = $matches$0107371;$s$9 = $s$7;$wcs$10 = $wcs$8;
    }
   }
   if ((label|0) == 155) {
    $alloc$2 = $alloc$1;$matches$2 = -1;$s$9 = $s$8;$wcs$10 = $wcs$9;
   }
   $326 = ($alloc$2|0)==(0);
   if ($326) {
    $matches$3 = $matches$2;
   } else {
    _free($s$9);
    _free($wcs$10);
    $matches$3 = $matches$2;
   }
  }
 } while(0);
 $328 = ($327|0)==(0);
 if (!($328)) {
  ___unlockfile($f);
 }
 STACKTOP = sp;return ($matches$3|0);
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ret;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  HEAP32[$ret>>2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $5 = $$pre;
 }
 STACKTOP = sp;return ($5|0);
}
function _fscanf($f,$fmt,$varargs) {
 $f = $f|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _fclose($f) {
 $f = $f|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
 }
 $3 = HEAP32[$f>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  ___lock(((3148)|0));
  $6 = ((($f)) + 52|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  $9 = $7;
  $$pre = ((($f)) + 56|0);
  if (!($8)) {
   $10 = HEAP32[$$pre>>2]|0;
   $11 = ((($7)) + 56|0);
   HEAP32[$11>>2] = $10;
  }
  $12 = HEAP32[$$pre>>2]|0;
  $13 = ($12|0)==(0|0);
  $14 = $12;
  if (!($13)) {
   $15 = ((($12)) + 52|0);
   HEAP32[$15>>2] = $9;
  }
  $16 = HEAP32[(3144)>>2]|0;
  $17 = ($16|0)==($f|0);
  if ($17) {
   HEAP32[(3144)>>2] = $14;
  }
  ___unlock(((3148)|0));
 }
 $18 = (_fflush($f)|0);
 $19 = ((($f)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (FUNCTION_TABLE_ii[$20 & 1023]($f)|0);
 $22 = $21 | $18;
 $23 = ((($f)) + 92|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  _free($24);
 }
 if (!($5)) {
  _free($f);
 }
 return ($22|0);
}
function ___stdio_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$cast = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cnt$0 = 0, $iov = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iov = sp + 32|0;
 HEAP32[$iov>>2] = $buf;
 $0 = ((($iov)) + 4|0);
 $1 = ((($f)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $4 = $3&1;
 $5 = (($len) - ($4))|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($iov)) + 8|0);
 $7 = ((($f)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = ((($iov)) + 12|0);
 HEAP32[$9>>2] = $2;
 $10 = HEAP32[780]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $16 = ((($f)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $17;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $iov;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 2;
  $18 = (___syscall145(145,($vararg_buffer3|0))|0);
  $19 = (___syscall_ret($18)|0);
  $cnt$0 = $19;
 } else {
  _pthread_cleanup_push((407|0),($f|0));
  $12 = ((($f)) + 60|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $iov;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2;
  $14 = (___syscall145(145,($vararg_buffer|0))|0);
  $15 = (___syscall_ret($14)|0);
  _pthread_cleanup_pop(0);
  $cnt$0 = $15;
 }
 $20 = ($cnt$0|0)<(1);
 if ($20) {
  $21 = $cnt$0 & 48;
  $22 = $21 ^ 16;
  $23 = HEAP32[$f>>2]|0;
  $24 = $23 | $22;
  HEAP32[$f>>2] = $24;
  $25 = ((($f)) + 8|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($f)) + 4|0);
  HEAP32[$26>>2] = 0;
  $$0 = $cnt$0;
 } else {
  $27 = HEAP32[$0>>2]|0;
  $28 = ($cnt$0>>>0)>($27>>>0);
  if ($28) {
   $29 = (($cnt$0) - ($27))|0;
   $30 = HEAP32[$7>>2]|0;
   $31 = ((($f)) + 4|0);
   HEAP32[$31>>2] = $30;
   $$cast = $30;
   $32 = (($$cast) + ($29)|0);
   $33 = ((($f)) + 8|0);
   HEAP32[$33>>2] = $32;
   $34 = HEAP32[$1>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $$0 = $len;
   } else {
    $36 = ((($$cast)) + 1|0);
    HEAP32[$31>>2] = $36;
    $37 = HEAP8[$$cast>>0]|0;
    $38 = (($len) + -1)|0;
    $39 = (($buf) + ($38)|0);
    HEAP8[$39>>0] = $37;
    $$0 = $len;
   }
  } else {
   $$0 = $cnt$0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vasprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp;
 $0 = (_malloc(240)|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $$0 = -1;
  } else {
   $vacopy_currentptr = HEAP32[$ap>>2]|0;
   HEAP32[$ap2>>2] = $vacopy_currentptr;
   $2 = (_vsnprintf($0,240,$fmt,$ap2)|0);
   $3 = ($2>>>0)<(240);
   if ($3) {
    $4 = (($2) + 1)|0;
    $5 = (_realloc($0,$4)|0);
    $6 = ($5|0)!=(0|0);
    $7 = $6 ? $5 : $0;
    HEAP32[$s>>2] = $7;
    $$0 = $2;
    break;
   }
   _free($0);
   $8 = ($2|0)<(0);
   if ($8) {
    $$0 = -1;
   } else {
    $9 = (($2) + 1)|0;
    $10 = (_malloc($9)|0);
    HEAP32[$s>>2] = $10;
    $11 = ($10|0)==(0|0);
    if ($11) {
     $$0 = -1;
    } else {
     $12 = (_vsnprintf($10,$9,$fmt,$ap)|0);
     $$0 = $12;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($mode) {
 $mode = $mode|0;
 var $$ = 0, $$flags$4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags$0 = 0, $flags$0$ = 0, $flags$2 = 0;
 var $flags$2$ = 0, $flags$4 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strchr($mode,43)|0);
 $1 = ($0|0)==(0|0);
 $2 = HEAP8[$mode>>0]|0;
 $not$ = ($2<<24>>24)!=(114);
 $$ = $not$&1;
 $flags$0 = $1 ? $$ : 2;
 $3 = (_strchr($mode,120)|0);
 $4 = ($3|0)==(0|0);
 $5 = $flags$0 | 128;
 $flags$0$ = $4 ? $flags$0 : $5;
 $6 = (_strchr($mode,101)|0);
 $7 = ($6|0)==(0|0);
 $8 = $flags$0$ | 524288;
 $flags$2 = $7 ? $flags$0$ : $8;
 $9 = ($2<<24>>24)==(114);
 $10 = $flags$2 | 64;
 $flags$2$ = $9 ? $flags$2 : $10;
 $11 = ($2<<24>>24)==(119);
 $12 = $flags$2$ | 512;
 $flags$4 = $11 ? $12 : $flags$2$;
 $13 = ($2<<24>>24)==(97);
 $14 = $flags$4 | 1024;
 $$flags$4 = $13 ? $14 : $flags$4;
 return ($$flags$4|0);
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tio = sp + 12|0;
 $0 = ((($f)) + 36|0);
 HEAP32[$0>>2] = 59;
 $1 = HEAP32[$f>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($f)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $tio;
  $6 = (___syscall54(54,($vararg_buffer|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = ((($f)) + 75|0);
   HEAP8[$8>>0] = -1;
  }
 }
 $9 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($9|0);
}
function ___fseeko_unlocked($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($whence|0)==(1);
 if ($0) {
  $1 = ((($f)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($f)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($off) - ($2))|0;
  $6 = (($5) + ($4))|0;
  $$01 = $6;
 } else {
  $$01 = $off;
 }
 $7 = ((($f)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($f)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($f)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 1023]($f,0,0)|0);
  $14 = HEAP32[$7>>2]|0;
  $15 = ($14|0)==(0|0);
  if ($15) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $16 = ((($f)) + 16|0);
  HEAP32[$16>>2] = 0;
  HEAP32[$9>>2] = 0;
  HEAP32[$7>>2] = 0;
  $17 = ((($f)) + 40|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (FUNCTION_TABLE_iiii[$18 & 1023]($f,$$01,$whence)|0);
  $20 = ($19|0)<(0);
  if ($20) {
   $$0 = -1;
  } else {
   $21 = ((($f)) + 8|0);
   HEAP32[$21>>2] = 0;
   $22 = ((($f)) + 4|0);
   HEAP32[$22>>2] = 0;
   $23 = HEAP32[$f>>2]|0;
   $24 = $23 & -17;
   HEAP32[$f>>2] = $24;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function ___fseeko($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___fseeko_unlocked($f,$off,$whence)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   ___unlockfile($f);
   $6 = $5;
  }
 } else {
  $3 = (___fseeko_unlocked($f,$off,$whence)|0);
  $6 = $3;
 }
 return ($6|0);
}
function _fseek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___fseeko($f,$off,$whence)|0);
 return ($0|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = ((($f)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($f)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = ((($f)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 1023]($f,0,0)|0);
 }
 $13 = ((($f)) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($f)) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($f)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($f)) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
 } else {
  $18 = $15 & 4;
  $19 = ($18|0)==(0);
  if ($19) {
   $$0 = -1;
  } else {
   $20 = $15 | 32;
   HEAP32[$f>>2] = $20;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f; src=3368; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
   label = 4;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$01 = $s;$$02 = $n;
  label = 4;
 }
 if ((label|0) == 4) {
  $4 = $$01;
  $5 = (-2 - ($4))|0;
  $6 = ($$02>>>0)>($5>>>0);
  $$$02 = $6 ? $5 : $$02;
  $7 = ((($f)) + 48|0);
  HEAP32[$7>>2] = $$$02;
  $8 = ((($f)) + 20|0);
  HEAP32[$8>>2] = $$01;
  $9 = ((($f)) + 44|0);
  HEAP32[$9>>2] = $$01;
  $10 = (($$01) + ($$$02)|0);
  $11 = ((($f)) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = ((($f)) + 28|0);
  HEAP32[$12>>2] = $10;
  $13 = (_vfprintf($f,$fmt,$ap)|0);
  $14 = ($$$02|0)==(0);
  if ($14) {
   $$0 = $13;
  } else {
   $15 = HEAP32[$8>>2]|0;
   $16 = HEAP32[$11>>2]|0;
   $17 = ($15|0)==($16|0);
   $18 = $17 << 31 >> 31;
   $19 = (($15) + ($18)|0);
   HEAP8[$19>>0] = 0;
   $$0 = $13;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f)) + 32|0);
 HEAP32[$0>>2] = 408;
 $1 = ((($f)) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ((($f)) + 76|0);
 HEAP32[$2>>2] = -1;
 $3 = ((($f)) + 84|0);
 HEAP32[$3>>2] = $s;
 $4 = (_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($4|0);
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = ((($f)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = ((($f)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 1023]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0, $iovcnt$0$lcssa12 = 0;
 var $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $0 = ((($f)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iovs>>2] = $1;
 $2 = ((($iovs)) + 4|0);
 $3 = ((($f)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) - ($1))|0;
 HEAP32[$2>>2] = $5;
 $6 = ((($iovs)) + 8|0);
 HEAP32[$6>>2] = $buf;
 $7 = ((($iovs)) + 12|0);
 HEAP32[$7>>2] = $len;
 $8 = (($5) + ($len))|0;
 $9 = ((($f)) + 60|0);
 $10 = ((($f)) + 44|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $8;
 while(1) {
  $11 = HEAP32[780]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   $16 = HEAP32[$9>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $16;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $iov$0;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
   $17 = (___syscall146(146,($vararg_buffer3|0))|0);
   $18 = (___syscall_ret($17)|0);
   $cnt$0 = $18;
  } else {
   _pthread_cleanup_push((409|0),($f|0));
   $13 = HEAP32[$9>>2]|0;
   HEAP32[$vararg_buffer>>2] = $13;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $iov$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
   $14 = (___syscall146(146,($vararg_buffer|0))|0);
   $15 = (___syscall_ret($14)|0);
   _pthread_cleanup_pop(0);
   $cnt$0 = $15;
  }
  $19 = ($rem$0|0)==($cnt$0|0);
  if ($19) {
   label = 6;
   break;
  }
  $26 = ($cnt$0|0)<(0);
  if ($26) {
   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $34 = (($rem$0) - ($cnt$0))|0;
  $35 = ((($iov$0)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($cnt$0>>>0)>($36>>>0);
  if ($37) {
   $38 = HEAP32[$10>>2]|0;
   HEAP32[$0>>2] = $38;
   HEAP32[$3>>2] = $38;
   $39 = (($cnt$0) - ($36))|0;
   $40 = ((($iov$0)) + 8|0);
   $41 = (($iovcnt$0) + -1)|0;
   $$phi$trans$insert = ((($iov$0)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $49 = $$pre;$cnt$1 = $39;$iov$1 = $40;$iovcnt$1 = $41;
  } else {
   $42 = ($iovcnt$0|0)==(2);
   if ($42) {
    $43 = HEAP32[$0>>2]|0;
    $44 = (($43) + ($cnt$0)|0);
    HEAP32[$0>>2] = $44;
    $49 = $36;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
   } else {
    $49 = $36;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
   }
  }
  $45 = HEAP32[$iov$1>>2]|0;
  $46 = (($45) + ($cnt$1)|0);
  HEAP32[$iov$1>>2] = $46;
  $47 = ((($iov$1)) + 4|0);
  $48 = (($49) - ($cnt$1))|0;
  HEAP32[$47>>2] = $48;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $34;
 }
 if ((label|0) == 6) {
  $20 = HEAP32[$10>>2]|0;
  $21 = ((($f)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($f)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$0>>2] = $25;
  HEAP32[$3>>2] = $25;
  $$0 = $len;
 }
 else if ((label|0) == 8) {
  $27 = ((($f)) + 16|0);
  HEAP32[$27>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 | 32;
  HEAP32[$f>>2] = $29;
  $30 = ($iovcnt$0$lcssa12|0)==(2);
  if ($30) {
   $$0 = 0;
  } else {
   $31 = ((($iov$0$lcssa11)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($len) - ($32))|0;
   $$0 = $33;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = (_memchr($1,0,$2)|0);
 $4 = ($3|0)==(0|0);
 $5 = $3;
 $6 = $1;
 $7 = (($5) - ($6))|0;
 $k$0 = $4 ? $2 : $7;
 $8 = ($k$0>>>0)<($len>>>0);
 $k$0$len = $8 ? $k$0 : $len;
 _memcpy(($buf|0),($1|0),($k$0$len|0))|0;
 $9 = (($1) + ($k$0$len)|0);
 $10 = ((($f)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (($1) + ($k$0)|0);
 $12 = ((($f)) + 8|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$0>>2] = $11;
 return ($k$0$len|0);
}
function _fflush($f) {
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$01$2 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f|0)==(0|0);
 do {
  if ($0) {
   $7 = HEAP32[779]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = HEAP32[779]|0;
    $10 = (_fflush($9)|0);
    $27 = $10;
   }
   ___lock(((3148)|0));
   $$01$2 = HEAP32[(3144)>>2]|0;
   $11 = ($$01$2|0)==(0|0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$01$2;$r$03 = $27;
    while(1) {
     $12 = ((($$014)) + 76|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)>(-1);
     if ($14) {
      $15 = (___lockfile($$014)|0);
      $23 = $15;
     } else {
      $23 = 0;
     }
     $16 = ((($$014)) + 20|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($$014)) + 28|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($17>>>0)>($19>>>0);
     if ($20) {
      $21 = (___fflush_unlocked($$014)|0);
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $24 = ($23|0)==(0);
     if (!($24)) {
      ___unlockfile($$014);
     }
     $25 = ((($$014)) + 56|0);
     $$01 = HEAP32[$25>>2]|0;
     $26 = ($$01|0)==(0|0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;$r$03 = $r$1;
     }
    }
   }
   ___unlock(((3148)|0));
   $$0 = $r$0$lcssa;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if (!($3)) {
    $4 = (___fflush_unlocked($f)|0);
    $$0 = $4;
    break;
   }
   $5 = (___lockfile($f)|0);
   $phitmp = ($5|0)==(0);
   $6 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f);
    $$0 = $6;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fdopen($fd,$mode) {
 $fd = $fd|0;
 $mode = $mode|0;
 var $$0 = 0, $$cast = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $tio = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $tio = sp + 52|0;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(15448,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (_malloc(1144)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$0 = 0;
  } else {
   dest=$4; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $6 = (_strchr($mode,43)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $8 = ($0<<24>>24)==(114);
    $9 = $8 ? 8 : 4;
    HEAP32[$4>>2] = $9;
   }
   $10 = (_strchr($mode,101)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = $0;
   } else {
    HEAP32[$vararg_buffer>>2] = $fd;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$mode>>0]|0;
    $12 = $$pre;
   }
   $13 = ($12<<24>>24)==(97);
   if ($13) {
    HEAP32[$vararg_buffer3>>2] = $fd;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $14 = (___syscall221(221,($vararg_buffer3|0))|0);
    $15 = $14 & 1024;
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = $14 | 1024;
     HEAP32[$vararg_buffer7>>2] = $fd;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $17;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $18 = HEAP32[$4>>2]|0;
    $19 = $18 | 128;
    HEAP32[$4>>2] = $19;
    $26 = $19;
   } else {
    $$pre1 = HEAP32[$4>>2]|0;
    $26 = $$pre1;
   }
   $20 = ((($4)) + 60|0);
   HEAP32[$20>>2] = $fd;
   $21 = ((($4)) + 120|0);
   $22 = ((($4)) + 44|0);
   HEAP32[$22>>2] = $21;
   $23 = ((($4)) + 48|0);
   HEAP32[$23>>2] = 1024;
   $24 = ((($4)) + 75|0);
   HEAP8[$24>>0] = -1;
   $25 = $26 & 8;
   $27 = ($25|0)==(0);
   if ($27) {
    HEAP32[$vararg_buffer12>>2] = $fd;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21505;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $tio;
    $28 = (___syscall54(54,($vararg_buffer12|0))|0);
    $29 = ($28|0)==(0);
    if ($29) {
     HEAP8[$24>>0] = 10;
    }
   }
   $30 = ((($4)) + 32|0);
   HEAP32[$30>>2] = 410;
   $31 = ((($4)) + 36|0);
   HEAP32[$31>>2] = 59;
   $32 = ((($4)) + 40|0);
   HEAP32[$32>>2] = 60;
   $33 = ((($4)) + 12|0);
   HEAP32[$33>>2] = 58;
   $34 = HEAP32[(3124)>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = ((($4)) + 76|0);
    HEAP32[$36>>2] = -1;
   }
   ___lock(((3148)|0));
   $37 = HEAP32[(3144)>>2]|0;
   $38 = ((($4)) + 56|0);
   HEAP32[$38>>2] = $37;
   $39 = ($37|0)==(0);
   if (!($39)) {
    $$cast = $37;
    $40 = ((($$cast)) + 52|0);
    HEAP32[$40>>2] = $4;
   }
   HEAP32[(3144)>>2] = $4;
   ___unlock(((3148)|0));
   $$0 = $4;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fread($destv,$size,$nmemb,$f) {
 $destv = $destv|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $dest$0$ph = 0, $dest$02 = 0, $l$0$ph = 0, $l$03 = 0, $l$03$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $30 = $4;
 } else {
  $30 = 0;
 }
 $5 = ((($f)) + 74|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = (($7) + 255)|0;
 $9 = $8 | $7;
 $10 = $9&255;
 HEAP8[$5>>0] = $10;
 $11 = ((($f)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($f)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) - ($14))|0;
 $16 = ($15|0)>(0);
 $17 = $14;
 if ($16) {
  $18 = ($15>>>0)<($0>>>0);
  $$ = $18 ? $15 : $0;
  _memcpy(($destv|0),($17|0),($$|0))|0;
  $19 = (($17) + ($$)|0);
  HEAP32[$13>>2] = $19;
  $20 = (($destv) + ($$)|0);
  $21 = (($0) - ($$))|0;
  $dest$0$ph = $20;$l$0$ph = $21;
 } else {
  $dest$0$ph = $destv;$l$0$ph = $0;
 }
 $22 = ($l$0$ph|0)==(0);
 L7: do {
  if ($22) {
   label = 13;
  } else {
   $23 = ((($f)) + 32|0);
   $dest$02 = $dest$0$ph;$l$03 = $l$0$ph;
   while(1) {
    $24 = (___toread($f)|0);
    $25 = ($24|0)==(0);
    if (!($25)) {
     $l$03$lcssa = $l$03;
     break;
    }
    $26 = HEAP32[$23>>2]|0;
    $27 = (FUNCTION_TABLE_iiii[$26 & 1023]($f,$dest$02,$l$03)|0);
    $28 = (($27) + 1)|0;
    $29 = ($28>>>0)<(2);
    if ($29) {
     $l$03$lcssa = $l$03;
     break;
    }
    $34 = (($l$03) - ($27))|0;
    $35 = (($dest$02) + ($27)|0);
    $36 = ($l$03|0)==($27|0);
    if ($36) {
     label = 13;
     break L7;
    } else {
     $dest$02 = $35;$l$03 = $34;
    }
   }
   $31 = ($30|0)==(0);
   if (!($31)) {
    ___unlockfile($f);
   }
   $32 = (($0) - ($l$03$lcssa))|0;
   $33 = (($32>>>0) / ($size>>>0))&-1;
   $$0 = $33;
  }
 } while(0);
 if ((label|0) == 13) {
  $37 = ($30|0)==(0);
  if ($37) {
   $$0 = $nmemb;
  } else {
   ___unlockfile($f);
   $$0 = $nmemb;
  }
 }
 return ($$0|0);
}
function _strtold_l($s,$p,$l) {
 $s = $s|0;
 $p = $p|0;
 $l = $l|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtox($s,$p,2));
 return (+$0);
}
function _strtoull($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtox_456($s,$p,$base,-1,-1)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _strtoll($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtox_456($s,$p,$base,0,-2147483648)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r>>>0)>(4294963200);
 if ($0) {
  $1 = (0 - ($r))|0;
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return ($$0|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$010$i = 0, $$012$i = 0, $$07$i = 0, $$0710$i = 0, $$0711$i = 0, $$1$i = 0.0, $$111$be$i = 0, $$111$ph$i = 0, $$16$i = 0, $$2$i = 0, $$24$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3113$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa = 0, $$lcssa256 = 0;
 var $$lcssa256$lcssa = 0, $$lcssa257 = 0, $$lcssa257$lcssa = 0, $$lcssa263 = 0, $$lcssa264 = 0, $$lcssa265 = 0, $$lcssa275 = 0, $$lnz$0$i = 0, $$neg40$i = 0, $$not$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0, $$pre$i$17 = 0, $$pre$phi42$iZ2D = 0.0, $$pre41$i = 0.0, $$promoted$i = 0, $$sink$off0$i = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0.0, $425 = 0.0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0.0;
 var $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0.0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0.0, $501 = 0, $502 = 0, $503 = 0, $504 = 0.0, $505 = 0.0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0.0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0.0, $625 = 0.0, $626 = 0.0, $627 = 0, $628 = 0.0, $629 = 0.0, $63 = 0, $630 = 0.0, $631 = 0.0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0, $646 = 0.0, $647 = 0.0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0, $656 = 0, $657 = 0.0, $658 = 0;
 var $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0.0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0.0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0.0, $684 = 0, $685 = 0, $686 = 0.0, $687 = 0.0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0$lcssa159$i = 0, $a$093$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph46$i = 0, $a$4$i = 0, $a$4$i$lcssa248 = 0, $a$4$i249 = 0, $a$4$ph$i = 0, $a$4$ph165$i = 0, $a$586$i = 0, $a$6$i = 0, $a$6$i$lcssa = 0, $a$6$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i$25 = 0.0, $bits$0$ph = 0, $brmerge$i$28 = 0;
 var $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$179 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$377 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$095$i = 0, $carry1$0$i = 0, $carry1$1$i = 0, $carry1$1$i$lcssa = 0, $carry1$1$i$lcssa$lcssa = 0, $carry4$089$i = 0, $cond$i = 0, $d$0$i = 0;
 var $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$i$19 = 0, $e2$0$ph$i = 0, $e2$1$i = 0, $e2$1$i246 = 0, $e2$1$ph$i = 0, $e2$1$ph164$i = 0, $e2$3$i = 0, $e2$4$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$3$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$12 = 0, $gotdig$0$i$12$lcssa273 = 0, $gotdig$0$i$lcssa242 = 0;
 var $gotdig$2$i = 0, $gotdig$2$i$13 = 0, $gotdig$2$i$lcssa = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3109$i = 0, $gotdig$3109$i$lcssa = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$14 = 0, $gotrad$0$i$lcssa = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1110$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$078 = 0;
 var $i$1 = 0, $i$276 = 0, $i$3 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0112$i = 0, $j$0112$i$lcssa = 0, $j$075$i = 0, $j$076$i = 0, $j$077$i = 0, $j$2$i = 0, $j$3102$i = 0, $k$0$lcssa$i = 0, $k$0111$i = 0, $k$0111$i$lcssa = 0, $k$071$i = 0, $k$072$i = 0, $k$073$i = 0, $k$2$i = 0;
 var $k$3$i = 0, $k$494$i = 0, $k$5$i = 0, $k$5$in$i = 0, $k$5$z$2$i = 0, $k$687$i = 0, $lnz$0$lcssa$i = 0, $lnz$0108$i = 0, $lnz$0108$i$lcssa = 0, $lnz$065$i = 0, $lnz$066$i = 0, $lnz$067$i = 0, $lnz$2$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$16 = 0, $or$cond18$i = 0, $or$cond190$i = 0, $or$cond20$i = 0, $or$cond21$i = 0;
 var $or$cond22$i = 0, $or$cond25$i = 0, $or$cond26$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond9 = 0, $or$cond9$i = 0, $or$cond9$i$27 = 0, $rp$0$lcssa160$i = 0, $rp$092$i = 0, $rp$1$i$18 = 0, $rp$1$i$18$lcssa = 0, $rp$2$ph44$i = 0, $rp$4$ph$i = 0, $rp$4$ph42$i = 0, $rp$585$i = 0, $rp$6$i = 0;
 var $rp$6$i$lcssa = 0, $rp$6$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$324$i = 0, $x$4$lcssa$i = 0, $x$419$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i$24 = 0.0, $y$2$i = 0.0, $y$2$i$26 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$320$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$i = 0, $z$1$ph45$i = 0, $z$10$1$i = 0, $z$10$i = 0, $z$2$i = 0, $z$3$i = 0, $z$3$i$lcssa = 0, $z$3$i$lcssa$lcssa = 0, $z$4$i = 0;
 var $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 switch ($prec|0) {
 case 0:  {
  $bits$0$ph = 24;$emin$0$ph = -149;
  label = 4;
  break;
 }
 case 1:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 case 2:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 default: {
  $$0 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $0 = ((($f)) + 4|0);
   $1 = ((($f)) + 100|0);
   while(1) {
    $2 = HEAP32[$0>>2]|0;
    $3 = HEAP32[$1>>2]|0;
    $4 = ($2>>>0)<($3>>>0);
    if ($4) {
     $5 = ((($2)) + 1|0);
     HEAP32[$0>>2] = $5;
     $6 = HEAP8[$2>>0]|0;
     $7 = $6&255;
     $9 = $7;
    } else {
     $8 = (___shgetc($f)|0);
     $9 = $8;
    }
    $10 = (_isspace($9)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $$lcssa275 = $9;
     break;
    }
   }
   $12 = ($$lcssa275|0)==(45);
   L13: do {
    switch ($$lcssa275|0) {
    case 43: case 45:  {
     $13 = $12&1;
     $14 = $13 << 1;
     $15 = (1 - ($14))|0;
     $16 = HEAP32[$0>>2]|0;
     $17 = HEAP32[$1>>2]|0;
     $18 = ($16>>>0)<($17>>>0);
     if ($18) {
      $19 = ((($16)) + 1|0);
      HEAP32[$0>>2] = $19;
      $20 = HEAP8[$16>>0]|0;
      $21 = $20&255;
      $c$0 = $21;$sign$0 = $15;
      break L13;
     } else {
      $22 = (___shgetc($f)|0);
      $c$0 = $22;$sign$0 = $15;
      break L13;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa275;$sign$0 = 1;
    }
    }
   } while(0);
   $c$179 = $c$0;$i$078 = 0;
   while(1) {
    $23 = $c$179 | 32;
    $24 = (15452 + ($i$078)|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25 << 24 >> 24;
    $27 = ($23|0)==($26|0);
    if (!($27)) {
     $c$1$lcssa = $c$179;$i$0$lcssa = $i$078;
     break;
    }
    $28 = ($i$078>>>0)<(7);
    do {
     if ($28) {
      $29 = HEAP32[$0>>2]|0;
      $30 = HEAP32[$1>>2]|0;
      $31 = ($29>>>0)<($30>>>0);
      if ($31) {
       $32 = ((($29)) + 1|0);
       HEAP32[$0>>2] = $32;
       $33 = HEAP8[$29>>0]|0;
       $34 = $33&255;
       $c$2 = $34;
       break;
      } else {
       $35 = (___shgetc($f)|0);
       $c$2 = $35;
       break;
      }
     } else {
      $c$2 = $c$179;
     }
    } while(0);
    $36 = (($i$078) + 1)|0;
    $37 = ($36>>>0)<(8);
    if ($37) {
     $c$179 = $c$2;$i$078 = $36;
    } else {
     $c$1$lcssa = $c$2;$i$0$lcssa = $36;
     break;
    }
   }
   L29: do {
    switch ($i$0$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $38 = ($i$0$lcssa>>>0)>(3);
     $39 = ($pok|0)!=(0);
     $or$cond5 = $39 & $38;
     if ($or$cond5) {
      $40 = ($i$0$lcssa|0)==(8);
      if ($40) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $53 = ($i$0$lcssa|0)==(0);
     L34: do {
      if ($53) {
       $c$377 = $c$1$lcssa;$i$276 = 0;
       while(1) {
        $54 = $c$377 | 32;
        $55 = (19183 + ($i$276)|0);
        $56 = HEAP8[$55>>0]|0;
        $57 = $56 << 24 >> 24;
        $58 = ($54|0)==($57|0);
        if (!($58)) {
         $c$5 = $c$377;$i$3 = $i$276;
         break L34;
        }
        $59 = ($i$276>>>0)<(2);
        do {
         if ($59) {
          $60 = HEAP32[$0>>2]|0;
          $61 = HEAP32[$1>>2]|0;
          $62 = ($60>>>0)<($61>>>0);
          if ($62) {
           $63 = ((($60)) + 1|0);
           HEAP32[$0>>2] = $63;
           $64 = HEAP8[$60>>0]|0;
           $65 = $64&255;
           $c$4 = $65;
           break;
          } else {
           $66 = (___shgetc($f)|0);
           $c$4 = $66;
           break;
          }
         } else {
          $c$4 = $c$377;
         }
        } while(0);
        $67 = (($i$276) + 1)|0;
        $68 = ($67>>>0)<(3);
        if ($68) {
         $c$377 = $c$4;$i$276 = $67;
        } else {
         $c$5 = $c$4;$i$3 = $67;
         break;
        }
       }
      } else {
       $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
      }
     } while(0);
     switch ($i$3|0) {
     case 3:  {
      $69 = HEAP32[$0>>2]|0;
      $70 = HEAP32[$1>>2]|0;
      $71 = ($69>>>0)<($70>>>0);
      if ($71) {
       $72 = ((($69)) + 1|0);
       HEAP32[$0>>2] = $72;
       $73 = HEAP8[$69>>0]|0;
       $74 = $73&255;
       $76 = $74;
      } else {
       $75 = (___shgetc($f)|0);
       $76 = $75;
      }
      $77 = ($76|0)==(40);
      if ($77) {
       $i$4 = 1;
      } else {
       $78 = HEAP32[$1>>2]|0;
       $79 = ($78|0)==(0|0);
       if ($79) {
        $$0 = nan;
        break L4;
       }
       $80 = HEAP32[$0>>2]|0;
       $81 = ((($80)) + -1|0);
       HEAP32[$0>>2] = $81;
       $$0 = nan;
       break L4;
      }
      while(1) {
       $82 = HEAP32[$0>>2]|0;
       $83 = HEAP32[$1>>2]|0;
       $84 = ($82>>>0)<($83>>>0);
       if ($84) {
        $85 = ((($82)) + 1|0);
        HEAP32[$0>>2] = $85;
        $86 = HEAP8[$82>>0]|0;
        $87 = $86&255;
        $90 = $87;
       } else {
        $88 = (___shgetc($f)|0);
        $90 = $88;
       }
       $89 = (($90) + -48)|0;
       $91 = ($89>>>0)<(10);
       $92 = (($90) + -65)|0;
       $93 = ($92>>>0)<(26);
       $or$cond = $91 | $93;
       if (!($or$cond)) {
        $94 = (($90) + -97)|0;
        $95 = ($94>>>0)<(26);
        $96 = ($90|0)==(95);
        $or$cond7 = $96 | $95;
        if (!($or$cond7)) {
         $$lcssa = $90;$i$4$lcssa = $i$4;
         break;
        }
       }
       $108 = (($i$4) + 1)|0;
       $i$4 = $108;
      }
      $97 = ($$lcssa|0)==(41);
      if ($97) {
       $$0 = nan;
       break L4;
      }
      $98 = HEAP32[$1>>2]|0;
      $99 = ($98|0)==(0|0);
      if (!($99)) {
       $100 = HEAP32[$0>>2]|0;
       $101 = ((($100)) + -1|0);
       HEAP32[$0>>2] = $101;
      }
      if (!($39)) {
       $103 = (___errno_location()|0);
       HEAP32[$103>>2] = 22;
       ___shlim($f,0);
       $$0 = 0.0;
       break L4;
      }
      $102 = ($i$4$lcssa|0)==(0);
      if ($102) {
       $$0 = nan;
       break L4;
      } else {
       $$in = $i$4$lcssa;
      }
      while(1) {
       $104 = (($$in) + -1)|0;
       if (!($99)) {
        $105 = HEAP32[$0>>2]|0;
        $106 = ((($105)) + -1|0);
        HEAP32[$0>>2] = $106;
       }
       $107 = ($104|0)==(0);
       if ($107) {
        $$0 = nan;
        break L4;
       } else {
        $$in = $104;
       }
      }
      break;
     }
     case 0:  {
      $114 = ($c$5|0)==(48);
      do {
       if ($114) {
        $115 = HEAP32[$0>>2]|0;
        $116 = HEAP32[$1>>2]|0;
        $117 = ($115>>>0)<($116>>>0);
        if ($117) {
         $118 = ((($115)) + 1|0);
         HEAP32[$0>>2] = $118;
         $119 = HEAP8[$115>>0]|0;
         $120 = $119&255;
         $123 = $120;
        } else {
         $121 = (___shgetc($f)|0);
         $123 = $121;
        }
        $122 = $123 | 32;
        $124 = ($122|0)==(120);
        if (!($124)) {
         $326 = HEAP32[$1>>2]|0;
         $327 = ($326|0)==(0|0);
         if ($327) {
          $c$6 = 48;
          break;
         }
         $328 = HEAP32[$0>>2]|0;
         $329 = ((($328)) + -1|0);
         HEAP32[$0>>2] = $329;
         $c$6 = 48;
         break;
        }
        $125 = HEAP32[$0>>2]|0;
        $126 = HEAP32[$1>>2]|0;
        $127 = ($125>>>0)<($126>>>0);
        if ($127) {
         $128 = ((($125)) + 1|0);
         HEAP32[$0>>2] = $128;
         $129 = HEAP8[$125>>0]|0;
         $130 = $129&255;
         $c$0$i = $130;$gotdig$0$i = 0;
        } else {
         $131 = (___shgetc($f)|0);
         $c$0$i = $131;$gotdig$0$i = 0;
        }
        L94: while(1) {
         switch ($c$0$i|0) {
         case 46:  {
          $gotdig$0$i$lcssa242 = $gotdig$0$i;
          label = 74;
          break L94;
          break;
         }
         case 48:  {
          break;
         }
         default: {
          $168 = 0;$170 = 0;$694 = 0;$695 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
          break L94;
         }
         }
         $132 = HEAP32[$0>>2]|0;
         $133 = HEAP32[$1>>2]|0;
         $134 = ($132>>>0)<($133>>>0);
         if ($134) {
          $135 = ((($132)) + 1|0);
          HEAP32[$0>>2] = $135;
          $136 = HEAP8[$132>>0]|0;
          $137 = $136&255;
          $c$0$i = $137;$gotdig$0$i = 1;
          continue;
         } else {
          $138 = (___shgetc($f)|0);
          $c$0$i = $138;$gotdig$0$i = 1;
          continue;
         }
        }
        if ((label|0) == 74) {
         $139 = HEAP32[$0>>2]|0;
         $140 = HEAP32[$1>>2]|0;
         $141 = ($139>>>0)<($140>>>0);
         if ($141) {
          $142 = ((($139)) + 1|0);
          HEAP32[$0>>2] = $142;
          $143 = HEAP8[$139>>0]|0;
          $144 = $143&255;
          $c$1$ph$i = $144;
         } else {
          $145 = (___shgetc($f)|0);
          $c$1$ph$i = $145;
         }
         $146 = ($c$1$ph$i|0)==(48);
         if ($146) {
          $154 = 0;$155 = 0;
          while(1) {
           $147 = HEAP32[$0>>2]|0;
           $148 = HEAP32[$1>>2]|0;
           $149 = ($147>>>0)<($148>>>0);
           if ($149) {
            $150 = ((($147)) + 1|0);
            HEAP32[$0>>2] = $150;
            $151 = HEAP8[$147>>0]|0;
            $152 = $151&255;
            $158 = $152;
           } else {
            $153 = (___shgetc($f)|0);
            $158 = $153;
           }
           $156 = (_i64Add(($154|0),($155|0),-1,-1)|0);
           $157 = tempRet0;
           $159 = ($158|0)==(48);
           if ($159) {
            $154 = $156;$155 = $157;
           } else {
            $168 = 0;$170 = 0;$694 = $156;$695 = $157;$c$2$i = $158;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
            break;
           }
          }
         } else {
          $168 = 0;$170 = 0;$694 = 0;$695 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i$lcssa242;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
         }
        }
        while(1) {
         $160 = (($c$2$i) + -48)|0;
         $161 = ($160>>>0)<(10);
         $$pre$i = $c$2$i | 32;
         if ($161) {
          label = 86;
         } else {
          $162 = (($$pre$i) + -97)|0;
          $163 = ($162>>>0)<(6);
          $164 = ($c$2$i|0)==(46);
          $or$cond6$i = $164 | $163;
          if (!($or$cond6$i)) {
           $212 = $694;$213 = $170;$215 = $695;$216 = $168;$c$2$lcssa$i = $c$2$i;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
           break;
          }
          if ($164) {
           $165 = ($gotrad$0$i|0)==(0);
           if ($165) {
            $696 = $170;$697 = $168;$698 = $170;$699 = $168;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           } else {
            $212 = $694;$213 = $170;$215 = $695;$216 = $168;$c$2$lcssa$i = 46;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
            break;
           }
          } else {
           label = 86;
          }
         }
         if ((label|0) == 86) {
          label = 0;
          $166 = ($c$2$i|0)>(57);
          $167 = (($$pre$i) + -87)|0;
          $d$0$i = $166 ? $167 : $160;
          $169 = ($168|0)<(0);
          $171 = ($170>>>0)<(8);
          $172 = ($168|0)==(0);
          $173 = $172 & $171;
          $174 = $169 | $173;
          do {
           if ($174) {
            $175 = $x$0$i << 4;
            $176 = (($d$0$i) + ($175))|0;
            $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $176;$y$1$i = $y$0$i;
           } else {
            $177 = ($168|0)<(0);
            $178 = ($170>>>0)<(14);
            $179 = ($168|0)==(0);
            $180 = $179 & $178;
            $181 = $177 | $180;
            if ($181) {
             $182 = (+($d$0$i|0));
             $183 = $scale$0$i * 0.0625;
             $184 = $183 * $182;
             $185 = $y$0$i + $184;
             $gottail$1$i = $gottail$0$i;$scale$1$i = $183;$x$1$i = $x$0$i;$y$1$i = $185;
             break;
            }
            $186 = ($d$0$i|0)==(0);
            $187 = ($gottail$0$i|0)!=(0);
            $or$cond$i = $187 | $186;
            if ($or$cond$i) {
             $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
            } else {
             $188 = $scale$0$i * 0.5;
             $189 = $y$0$i + $188;
             $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $189;
            }
           }
          } while(0);
          $190 = (_i64Add(($170|0),($168|0),1,0)|0);
          $191 = tempRet0;
          $696 = $694;$697 = $695;$698 = $190;$699 = $191;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
         }
         $192 = HEAP32[$0>>2]|0;
         $193 = HEAP32[$1>>2]|0;
         $194 = ($192>>>0)<($193>>>0);
         if ($194) {
          $195 = ((($192)) + 1|0);
          HEAP32[$0>>2] = $195;
          $196 = HEAP8[$192>>0]|0;
          $197 = $196&255;
          $168 = $699;$170 = $698;$694 = $696;$695 = $697;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         } else {
          $198 = (___shgetc($f)|0);
          $168 = $699;$170 = $698;$694 = $696;$695 = $697;$c$2$i = $198;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         }
        }
        $199 = ($gotdig$2$i$lcssa|0)==(0);
        if ($199) {
         $200 = HEAP32[$1>>2]|0;
         $201 = ($200|0)==(0|0);
         if (!($201)) {
          $202 = HEAP32[$0>>2]|0;
          $203 = ((($202)) + -1|0);
          HEAP32[$0>>2] = $203;
         }
         $204 = ($pok|0)==(0);
         if ($204) {
          ___shlim($f,0);
         } else {
          if (!($201)) {
           $205 = HEAP32[$0>>2]|0;
           $206 = ((($205)) + -1|0);
           HEAP32[$0>>2] = $206;
           $207 = ($gotrad$0$i$lcssa|0)==(0);
           if (!($207)) {
            $208 = ((($205)) + -2|0);
            HEAP32[$0>>2] = $208;
           }
          }
         }
         $209 = (+($sign$0|0));
         $210 = $209 * 0.0;
         $$0 = $210;
         break L4;
        }
        $211 = ($gotrad$0$i$lcssa|0)==(0);
        $214 = $211 ? $213 : $212;
        $217 = $211 ? $216 : $215;
        $218 = ($216|0)<(0);
        $219 = ($213>>>0)<(8);
        $220 = ($216|0)==(0);
        $221 = $220 & $219;
        $222 = $218 | $221;
        if ($222) {
         $224 = $213;$225 = $216;$x$324$i = $x$0$i$lcssa;
         while(1) {
          $223 = $x$324$i << 4;
          $226 = (_i64Add(($224|0),($225|0),1,0)|0);
          $227 = tempRet0;
          $228 = ($227|0)<(0);
          $229 = ($226>>>0)<(8);
          $230 = ($227|0)==(0);
          $231 = $230 & $229;
          $232 = $228 | $231;
          if ($232) {
           $224 = $226;$225 = $227;$x$324$i = $223;
          } else {
           $x$3$lcssa$i = $223;
           break;
          }
         }
        } else {
         $x$3$lcssa$i = $x$0$i$lcssa;
        }
        $233 = $c$2$lcssa$i | 32;
        $234 = ($233|0)==(112);
        if ($234) {
         $235 = (_scanexp($f,$pok)|0);
         $236 = tempRet0;
         $237 = ($235|0)==(0);
         $238 = ($236|0)==(-2147483648);
         $239 = $237 & $238;
         if ($239) {
          $240 = ($pok|0)==(0);
          if ($240) {
           ___shlim($f,0);
           $$0 = 0.0;
           break L4;
          }
          $241 = HEAP32[$1>>2]|0;
          $242 = ($241|0)==(0|0);
          if ($242) {
           $253 = 0;$254 = 0;
          } else {
           $243 = HEAP32[$0>>2]|0;
           $244 = ((($243)) + -1|0);
           HEAP32[$0>>2] = $244;
           $253 = 0;$254 = 0;
          }
         } else {
          $253 = $235;$254 = $236;
         }
        } else {
         $245 = HEAP32[$1>>2]|0;
         $246 = ($245|0)==(0|0);
         if ($246) {
          $253 = 0;$254 = 0;
         } else {
          $247 = HEAP32[$0>>2]|0;
          $248 = ((($247)) + -1|0);
          HEAP32[$0>>2] = $248;
          $253 = 0;$254 = 0;
         }
        }
        $249 = (_bitshift64Shl(($214|0),($217|0),2)|0);
        $250 = tempRet0;
        $251 = (_i64Add(($249|0),($250|0),-32,-1)|0);
        $252 = tempRet0;
        $255 = (_i64Add(($251|0),($252|0),($253|0),($254|0))|0);
        $256 = tempRet0;
        $257 = ($x$3$lcssa$i|0)==(0);
        if ($257) {
         $258 = (+($sign$0|0));
         $259 = $258 * 0.0;
         $$0 = $259;
         break L4;
        }
        $260 = (0 - ($emin$0$ph))|0;
        $261 = ($256|0)>(0);
        $262 = ($255>>>0)>($260>>>0);
        $263 = ($256|0)==(0);
        $264 = $263 & $262;
        $265 = $261 | $264;
        if ($265) {
         $266 = (___errno_location()|0);
         HEAP32[$266>>2] = 34;
         $267 = (+($sign$0|0));
         $268 = $267 * 1.7976931348623157E+308;
         $269 = $268 * 1.7976931348623157E+308;
         $$0 = $269;
         break L4;
        }
        $270 = (($emin$0$ph) + -106)|0;
        $271 = ($270|0)<(0);
        $272 = $271 << 31 >> 31;
        $273 = ($256|0)<($272|0);
        $274 = ($255>>>0)<($270>>>0);
        $275 = ($256|0)==($272|0);
        $276 = $275 & $274;
        $277 = $273 | $276;
        if ($277) {
         $279 = (___errno_location()|0);
         HEAP32[$279>>2] = 34;
         $280 = (+($sign$0|0));
         $281 = $280 * 2.2250738585072014E-308;
         $282 = $281 * 2.2250738585072014E-308;
         $$0 = $282;
         break L4;
        }
        $278 = ($x$3$lcssa$i|0)>(-1);
        if ($278) {
         $288 = $255;$289 = $256;$x$419$i = $x$3$lcssa$i;$y$320$i = $y$0$i$lcssa;
         while(1) {
          $283 = !($y$320$i >= 0.5);
          $284 = $x$419$i << 1;
          $285 = $y$320$i + -1.0;
          $286 = $283&1;
          $287 = $286 | $284;
          $x$5$i = $287 ^ 1;
          $$pn$i = $283 ? $y$320$i : $285;
          $y$4$i = $y$320$i + $$pn$i;
          $290 = (_i64Add(($288|0),($289|0),-1,-1)|0);
          $291 = tempRet0;
          $292 = ($287|0)>(-1);
          if ($292) {
           $288 = $290;$289 = $291;$x$419$i = $x$5$i;$y$320$i = $y$4$i;
          } else {
           $297 = $290;$298 = $291;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
           break;
          }
         }
        } else {
         $297 = $255;$298 = $256;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i$lcssa;
        }
        $293 = ($emin$0$ph|0)<(0);
        $294 = $293 << 31 >> 31;
        $295 = (_i64Subtract(32,0,($emin$0$ph|0),($294|0))|0);
        $296 = tempRet0;
        $299 = (_i64Add(($297|0),($298|0),($295|0),($296|0))|0);
        $300 = tempRet0;
        $301 = (0)>($300|0);
        $302 = ($bits$0$ph>>>0)>($299>>>0);
        $303 = (0)==($300|0);
        $304 = $303 & $302;
        $305 = $301 | $304;
        if ($305) {
         $306 = ($299|0)<(0);
         if ($306) {
          $$0710$i = 0;
          label = 127;
         } else {
          $$07$i = $299;
          label = 125;
         }
        } else {
         $$07$i = $bits$0$ph;
         label = 125;
        }
        if ((label|0) == 125) {
         $307 = ($$07$i|0)<(53);
         if ($307) {
          $$0710$i = $$07$i;
          label = 127;
         } else {
          $$pre41$i = (+($sign$0|0));
          $$0711$i = $$07$i;$$pre$phi42$iZ2D = $$pre41$i;$bias$0$i = 0.0;
         }
        }
        if ((label|0) == 127) {
         $308 = (84 - ($$0710$i))|0;
         $309 = (+_scalbn(1.0,$308));
         $310 = (+($sign$0|0));
         $311 = (+_copysignl($309,$310));
         $$0711$i = $$0710$i;$$pre$phi42$iZ2D = $310;$bias$0$i = $311;
        }
        $312 = ($$0711$i|0)<(32);
        $313 = $y$3$lcssa$i != 0.0;
        $or$cond4$i = $313 & $312;
        $314 = $x$4$lcssa$i & 1;
        $315 = ($314|0)==(0);
        $or$cond9$i = $315 & $or$cond4$i;
        $316 = $or$cond9$i&1;
        $x$6$i = (($316) + ($x$4$lcssa$i))|0;
        $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
        $317 = (+($x$6$i>>>0));
        $318 = $$pre$phi42$iZ2D * $317;
        $319 = $bias$0$i + $318;
        $320 = $$pre$phi42$iZ2D * $y$5$i;
        $321 = $320 + $319;
        $322 = $321 - $bias$0$i;
        $323 = $322 != 0.0;
        if (!($323)) {
         $324 = (___errno_location()|0);
         HEAP32[$324>>2] = 34;
        }
        $325 = (+_scalbnl($322,$297));
        $$0 = $325;
        break L4;
       } else {
        $c$6 = $c$5;
       }
      } while(0);
      $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
      $330 = (0 - ($sum$i))|0;
      $$010$i = $c$6;$gotdig$0$i$12 = 0;
      L184: while(1) {
       switch ($$010$i|0) {
       case 46:  {
        $gotdig$0$i$12$lcssa273 = $gotdig$0$i$12;
        label = 138;
        break L184;
        break;
       }
       case 48:  {
        break;
       }
       default: {
        $$2$i = $$010$i;$700 = 0;$701 = 0;$gotdig$2$i$13 = $gotdig$0$i$12;$gotrad$0$i$14 = 0;
        break L184;
       }
       }
       $331 = HEAP32[$0>>2]|0;
       $332 = HEAP32[$1>>2]|0;
       $333 = ($331>>>0)<($332>>>0);
       if ($333) {
        $334 = ((($331)) + 1|0);
        HEAP32[$0>>2] = $334;
        $335 = HEAP8[$331>>0]|0;
        $336 = $335&255;
        $$010$i = $336;$gotdig$0$i$12 = 1;
        continue;
       } else {
        $337 = (___shgetc($f)|0);
        $$010$i = $337;$gotdig$0$i$12 = 1;
        continue;
       }
      }
      if ((label|0) == 138) {
       $338 = HEAP32[$0>>2]|0;
       $339 = HEAP32[$1>>2]|0;
       $340 = ($338>>>0)<($339>>>0);
       if ($340) {
        $341 = ((($338)) + 1|0);
        HEAP32[$0>>2] = $341;
        $342 = HEAP8[$338>>0]|0;
        $343 = $342&255;
        $$111$ph$i = $343;
       } else {
        $344 = (___shgetc($f)|0);
        $$111$ph$i = $344;
       }
       $345 = ($$111$ph$i|0)==(48);
       if ($345) {
        $346 = 0;$347 = 0;
        while(1) {
         $348 = (_i64Add(($346|0),($347|0),-1,-1)|0);
         $349 = tempRet0;
         $350 = HEAP32[$0>>2]|0;
         $351 = HEAP32[$1>>2]|0;
         $352 = ($350>>>0)<($351>>>0);
         if ($352) {
          $353 = ((($350)) + 1|0);
          HEAP32[$0>>2] = $353;
          $354 = HEAP8[$350>>0]|0;
          $355 = $354&255;
          $$111$be$i = $355;
         } else {
          $356 = (___shgetc($f)|0);
          $$111$be$i = $356;
         }
         $357 = ($$111$be$i|0)==(48);
         if ($357) {
          $346 = $348;$347 = $349;
         } else {
          $$2$i = $$111$be$i;$700 = $348;$701 = $349;$gotdig$2$i$13 = 1;$gotrad$0$i$14 = 1;
          break;
         }
        }
       } else {
        $$2$i = $$111$ph$i;$700 = 0;$701 = 0;$gotdig$2$i$13 = $gotdig$0$i$12$lcssa273;$gotrad$0$i$14 = 1;
       }
      }
      HEAP32[$x$i>>2] = 0;
      $358 = (($$2$i) + -48)|0;
      $359 = ($358>>>0)<(10);
      $360 = ($$2$i|0)==(46);
      $361 = $360 | $359;
      L203: do {
       if ($361) {
        $362 = ((($x$i)) + 496|0);
        $$3113$i = $$2$i;$365 = 0;$366 = 0;$702 = $360;$703 = $358;$704 = $700;$705 = $701;$gotdig$3109$i = $gotdig$2$i$13;$gotrad$1110$i = $gotrad$0$i$14;$j$0112$i = 0;$k$0111$i = 0;$lnz$0108$i = 0;
        L205: while(1) {
         do {
          if ($702) {
           $cond$i = ($gotrad$1110$i|0)==(0);
           if ($cond$i) {
            $706 = $365;$707 = $366;$708 = $365;$709 = $366;$gotdig$4$i = $gotdig$3109$i;$gotrad$2$i = 1;$j$2$i = $j$0112$i;$k$2$i = $k$0111$i;$lnz$2$i = $lnz$0108$i;
           } else {
            $710 = $704;$711 = $705;$712 = $365;$713 = $366;$gotdig$3109$i$lcssa = $gotdig$3109$i;$j$0112$i$lcssa = $j$0112$i;$k$0111$i$lcssa = $k$0111$i;$lnz$0108$i$lcssa = $lnz$0108$i;
            break L205;
           }
          } else {
           $364 = ($k$0111$i|0)<(125);
           $367 = (_i64Add(($365|0),($366|0),1,0)|0);
           $368 = tempRet0;
           $369 = ($$3113$i|0)!=(48);
           if (!($364)) {
            if (!($369)) {
             $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = $gotdig$3109$i;$gotrad$2$i = $gotrad$1110$i;$j$2$i = $j$0112$i;$k$2$i = $k$0111$i;$lnz$2$i = $lnz$0108$i;
             break;
            }
            $379 = HEAP32[$362>>2]|0;
            $380 = $379 | 1;
            HEAP32[$362>>2] = $380;
            $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = $gotdig$3109$i;$gotrad$2$i = $gotrad$1110$i;$j$2$i = $j$0112$i;$k$2$i = $k$0111$i;$lnz$2$i = $lnz$0108$i;
            break;
           }
           $$lnz$0$i = $369 ? $367 : $lnz$0108$i;
           $370 = ($j$0112$i|0)==(0);
           $371 = (($x$i) + ($k$0111$i<<2)|0);
           if ($370) {
            $storemerge$i = $703;
           } else {
            $372 = HEAP32[$371>>2]|0;
            $373 = ($372*10)|0;
            $374 = (($$3113$i) + -48)|0;
            $375 = (($374) + ($373))|0;
            $storemerge$i = $375;
           }
           HEAP32[$371>>2] = $storemerge$i;
           $376 = (($j$0112$i) + 1)|0;
           $377 = ($376|0)==(9);
           $378 = $377&1;
           $$k$0$i = (($378) + ($k$0111$i))|0;
           $$16$i = $377 ? 0 : $376;
           $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1110$i;$j$2$i = $$16$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
          }
         } while(0);
         $381 = HEAP32[$0>>2]|0;
         $382 = HEAP32[$1>>2]|0;
         $383 = ($381>>>0)<($382>>>0);
         if ($383) {
          $384 = ((($381)) + 1|0);
          HEAP32[$0>>2] = $384;
          $385 = HEAP8[$381>>0]|0;
          $386 = $385&255;
          $$3$be$i = $386;
         } else {
          $387 = (___shgetc($f)|0);
          $$3$be$i = $387;
         }
         $388 = (($$3$be$i) + -48)|0;
         $389 = ($388>>>0)<(10);
         $390 = ($$3$be$i|0)==(46);
         $391 = $390 | $389;
         if ($391) {
          $$3113$i = $$3$be$i;$365 = $708;$366 = $709;$702 = $390;$703 = $388;$704 = $706;$705 = $707;$gotdig$3109$i = $gotdig$4$i;$gotrad$1110$i = $gotrad$2$i;$j$0112$i = $j$2$i;$k$0111$i = $k$2$i;$lnz$0108$i = $lnz$2$i;
         } else {
          $$3$lcssa$i = $$3$be$i;$393 = $706;$394 = $708;$396 = $707;$397 = $709;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
          label = 161;
          break L203;
         }
        }
        $363 = ($gotdig$3109$i$lcssa|0)!=(0);
        $714 = $712;$715 = $713;$716 = $710;$717 = $711;$718 = $363;$j$077$i = $j$0112$i$lcssa;$k$073$i = $k$0111$i$lcssa;$lnz$067$i = $lnz$0108$i$lcssa;
        label = 169;
       } else {
        $$3$lcssa$i = $$2$i;$393 = $700;$394 = 0;$396 = $701;$397 = 0;$gotdig$3$lcssa$i = $gotdig$2$i$13;$gotrad$1$lcssa$i = $gotrad$0$i$14;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
        label = 161;
       }
      } while(0);
      do {
       if ((label|0) == 161) {
        $392 = ($gotrad$1$lcssa$i|0)==(0);
        $395 = $392 ? $394 : $393;
        $398 = $392 ? $397 : $396;
        $399 = ($gotdig$3$lcssa$i|0)!=(0);
        $400 = $$3$lcssa$i | 32;
        $401 = ($400|0)==(101);
        $or$cond18$i = $401 & $399;
        if (!($or$cond18$i)) {
         $416 = ($$3$lcssa$i|0)>(-1);
         if ($416) {
          $714 = $394;$715 = $397;$716 = $395;$717 = $398;$718 = $399;$j$077$i = $j$0$lcssa$i;$k$073$i = $k$0$lcssa$i;$lnz$067$i = $lnz$0$lcssa$i;
          label = 169;
          break;
         } else {
          $719 = $394;$720 = $397;$721 = $399;$722 = $395;$723 = $398;$j$076$i = $j$0$lcssa$i;$k$072$i = $k$0$lcssa$i;$lnz$066$i = $lnz$0$lcssa$i;
          label = 171;
          break;
         }
        }
        $402 = (_scanexp($f,$pok)|0);
        $403 = tempRet0;
        $404 = ($402|0)==(0);
        $405 = ($403|0)==(-2147483648);
        $406 = $404 & $405;
        if ($406) {
         $407 = ($pok|0)==(0);
         if ($407) {
          ___shlim($f,0);
          $$1$i = 0.0;
          break;
         }
         $408 = HEAP32[$1>>2]|0;
         $409 = ($408|0)==(0|0);
         if ($409) {
          $412 = 0;$413 = 0;
         } else {
          $410 = HEAP32[$0>>2]|0;
          $411 = ((($410)) + -1|0);
          HEAP32[$0>>2] = $411;
          $412 = 0;$413 = 0;
         }
        } else {
         $412 = $402;$413 = $403;
        }
        $414 = (_i64Add(($412|0),($413|0),($395|0),($398|0))|0);
        $415 = tempRet0;
        $426 = $414;$428 = $394;$429 = $415;$431 = $397;$j$075$i = $j$0$lcssa$i;$k$071$i = $k$0$lcssa$i;$lnz$065$i = $lnz$0$lcssa$i;
        label = 173;
       }
      } while(0);
      if ((label|0) == 169) {
       $417 = HEAP32[$1>>2]|0;
       $418 = ($417|0)==(0|0);
       if ($418) {
        $719 = $714;$720 = $715;$721 = $718;$722 = $716;$723 = $717;$j$076$i = $j$077$i;$k$072$i = $k$073$i;$lnz$066$i = $lnz$067$i;
        label = 171;
       } else {
        $419 = HEAP32[$0>>2]|0;
        $420 = ((($419)) + -1|0);
        HEAP32[$0>>2] = $420;
        if ($718) {
         $426 = $716;$428 = $714;$429 = $717;$431 = $715;$j$075$i = $j$077$i;$k$071$i = $k$073$i;$lnz$065$i = $lnz$067$i;
         label = 173;
        } else {
         label = 172;
        }
       }
      }
      if ((label|0) == 171) {
       if ($721) {
        $426 = $722;$428 = $719;$429 = $723;$431 = $720;$j$075$i = $j$076$i;$k$071$i = $k$072$i;$lnz$065$i = $lnz$066$i;
        label = 173;
       } else {
        label = 172;
       }
      }
      do {
       if ((label|0) == 172) {
        $421 = (___errno_location()|0);
        HEAP32[$421>>2] = 22;
        ___shlim($f,0);
        $$1$i = 0.0;
       }
       else if ((label|0) == 173) {
        $422 = HEAP32[$x$i>>2]|0;
        $423 = ($422|0)==(0);
        if ($423) {
         $424 = (+($sign$0|0));
         $425 = $424 * 0.0;
         $$1$i = $425;
         break;
        }
        $427 = ($426|0)==($428|0);
        $430 = ($429|0)==($431|0);
        $432 = $427 & $430;
        $433 = ($431|0)<(0);
        $434 = ($428>>>0)<(10);
        $435 = ($431|0)==(0);
        $436 = $435 & $434;
        $437 = $433 | $436;
        $or$cond$i$16 = $437 & $432;
        if ($or$cond$i$16) {
         $438 = ($bits$0$ph>>>0)>(30);
         $439 = $422 >>> $bits$0$ph;
         $440 = ($439|0)==(0);
         $or$cond20$i = $438 | $440;
         if ($or$cond20$i) {
          $441 = (+($sign$0|0));
          $442 = (+($422>>>0));
          $443 = $441 * $442;
          $$1$i = $443;
          break;
         }
        }
        $444 = (($emin$0$ph|0) / -2)&-1;
        $445 = ($444|0)<(0);
        $446 = $445 << 31 >> 31;
        $447 = ($429|0)>($446|0);
        $448 = ($426>>>0)>($444>>>0);
        $449 = ($429|0)==($446|0);
        $450 = $449 & $448;
        $451 = $447 | $450;
        if ($451) {
         $452 = (___errno_location()|0);
         HEAP32[$452>>2] = 34;
         $453 = (+($sign$0|0));
         $454 = $453 * 1.7976931348623157E+308;
         $455 = $454 * 1.7976931348623157E+308;
         $$1$i = $455;
         break;
        }
        $456 = (($emin$0$ph) + -106)|0;
        $457 = ($456|0)<(0);
        $458 = $457 << 31 >> 31;
        $459 = ($429|0)<($458|0);
        $460 = ($426>>>0)<($456>>>0);
        $461 = ($429|0)==($458|0);
        $462 = $461 & $460;
        $463 = $459 | $462;
        if ($463) {
         $464 = (___errno_location()|0);
         HEAP32[$464>>2] = 34;
         $465 = (+($sign$0|0));
         $466 = $465 * 2.2250738585072014E-308;
         $467 = $466 * 2.2250738585072014E-308;
         $$1$i = $467;
         break;
        }
        $468 = ($j$075$i|0)==(0);
        if ($468) {
         $k$3$i = $k$071$i;
        } else {
         $469 = ($j$075$i|0)<(9);
         if ($469) {
          $470 = (($x$i) + ($k$071$i<<2)|0);
          $$promoted$i = HEAP32[$470>>2]|0;
          $472 = $$promoted$i;$j$3102$i = $j$075$i;
          while(1) {
           $471 = ($472*10)|0;
           $473 = (($j$3102$i) + 1)|0;
           $exitcond$i = ($473|0)==(9);
           if ($exitcond$i) {
            $$lcssa265 = $471;
            break;
           } else {
            $472 = $471;$j$3102$i = $473;
           }
          }
          HEAP32[$470>>2] = $$lcssa265;
         }
         $474 = (($k$071$i) + 1)|0;
         $k$3$i = $474;
        }
        $475 = ($lnz$065$i|0)<(9);
        if ($475) {
         $476 = ($lnz$065$i|0)<=($426|0);
         $477 = ($426|0)<(18);
         $or$cond3$i = $476 & $477;
         if ($or$cond3$i) {
          $478 = ($426|0)==(9);
          if ($478) {
           $479 = (+($sign$0|0));
           $480 = HEAP32[$x$i>>2]|0;
           $481 = (+($480>>>0));
           $482 = $479 * $481;
           $$1$i = $482;
           break;
          }
          $483 = ($426|0)<(9);
          if ($483) {
           $484 = (+($sign$0|0));
           $485 = HEAP32[$x$i>>2]|0;
           $486 = (+($485>>>0));
           $487 = $484 * $486;
           $488 = (8 - ($426))|0;
           $489 = (3480 + ($488<<2)|0);
           $490 = HEAP32[$489>>2]|0;
           $491 = (+($490|0));
           $492 = $487 / $491;
           $$1$i = $492;
           break;
          }
          $493 = Math_imul($426, -3)|0;
          $$neg40$i = (($bits$0$ph) + 27)|0;
          $494 = (($$neg40$i) + ($493))|0;
          $495 = ($494|0)>(30);
          $$pre$i$17 = HEAP32[$x$i>>2]|0;
          $496 = $$pre$i$17 >>> $494;
          $497 = ($496|0)==(0);
          $or$cond190$i = $495 | $497;
          if ($or$cond190$i) {
           $498 = (+($sign$0|0));
           $499 = (+($$pre$i$17>>>0));
           $500 = $498 * $499;
           $501 = (($426) + -10)|0;
           $502 = (3480 + ($501<<2)|0);
           $503 = HEAP32[$502>>2]|0;
           $504 = (+($503|0));
           $505 = $500 * $504;
           $$1$i = $505;
           break;
          }
         }
        }
        $506 = (($426|0) % 9)&-1;
        $507 = ($506|0)==(0);
        if ($507) {
         $a$2$ph46$i = 0;$e2$0$ph$i = 0;$rp$2$ph44$i = $426;$z$1$ph45$i = $k$3$i;
        } else {
         $508 = ($426|0)>(-1);
         $509 = (($506) + 9)|0;
         $510 = $508 ? $506 : $509;
         $511 = (8 - ($510))|0;
         $512 = (3480 + ($511<<2)|0);
         $513 = HEAP32[$512>>2]|0;
         $514 = ($k$3$i|0)==(0);
         if ($514) {
          $a$0$lcssa159$i = 0;$rp$0$lcssa160$i = $426;$z$0$i = 0;
         } else {
          $515 = (1000000000 / ($513|0))&-1;
          $a$093$i = 0;$carry$095$i = 0;$k$494$i = 0;$rp$092$i = $426;
          while(1) {
           $516 = (($x$i) + ($k$494$i<<2)|0);
           $517 = HEAP32[$516>>2]|0;
           $518 = (($517>>>0) % ($513>>>0))&-1;
           $519 = (($517>>>0) / ($513>>>0))&-1;
           $520 = (($519) + ($carry$095$i))|0;
           HEAP32[$516>>2] = $520;
           $521 = Math_imul($518, $515)|0;
           $522 = ($k$494$i|0)==($a$093$i|0);
           $523 = ($520|0)==(0);
           $or$cond21$i = $522 & $523;
           $524 = (($k$494$i) + 1)|0;
           $525 = $524 & 127;
           $526 = (($rp$092$i) + -9)|0;
           $rp$1$i$18 = $or$cond21$i ? $526 : $rp$092$i;
           $a$1$i = $or$cond21$i ? $525 : $a$093$i;
           $527 = ($524|0)==($k$3$i|0);
           if ($527) {
            $$lcssa264 = $521;$a$1$i$lcssa = $a$1$i;$rp$1$i$18$lcssa = $rp$1$i$18;
            break;
           } else {
            $a$093$i = $a$1$i;$carry$095$i = $521;$k$494$i = $524;$rp$092$i = $rp$1$i$18;
           }
          }
          $528 = ($$lcssa264|0)==(0);
          if ($528) {
           $a$0$lcssa159$i = $a$1$i$lcssa;$rp$0$lcssa160$i = $rp$1$i$18$lcssa;$z$0$i = $k$3$i;
          } else {
           $529 = (($k$3$i) + 1)|0;
           $530 = (($x$i) + ($k$3$i<<2)|0);
           HEAP32[$530>>2] = $$lcssa264;
           $a$0$lcssa159$i = $a$1$i$lcssa;$rp$0$lcssa160$i = $rp$1$i$18$lcssa;$z$0$i = $529;
          }
         }
         $531 = (9 - ($510))|0;
         $532 = (($531) + ($rp$0$lcssa160$i))|0;
         $a$2$ph46$i = $a$0$lcssa159$i;$e2$0$ph$i = 0;$rp$2$ph44$i = $532;$z$1$ph45$i = $z$0$i;
        }
        L284: while(1) {
         $533 = ($rp$2$ph44$i|0)<(18);
         $534 = ($rp$2$ph44$i|0)==(18);
         $535 = (($x$i) + ($a$2$ph46$i<<2)|0);
         $e2$0$i$19 = $e2$0$ph$i;$z$1$i = $z$1$ph45$i;
         while(1) {
          if (!($533)) {
           if (!($534)) {
            $a$4$ph$i = $a$2$ph46$i;$e2$1$ph$i = $e2$0$i$19;$rp$4$ph42$i = $rp$2$ph44$i;$z$6$ph$i = $z$1$i;
            break L284;
           }
           $536 = HEAP32[$535>>2]|0;
           $537 = ($536>>>0)<(9007199);
           if (!($537)) {
            $a$4$ph$i = $a$2$ph46$i;$e2$1$ph$i = $e2$0$i$19;$rp$4$ph42$i = 18;$z$6$ph$i = $z$1$i;
            break L284;
           }
          }
          $538 = (($z$1$i) + 127)|0;
          $carry1$0$i = 0;$k$5$in$i = $538;$z$2$i = $z$1$i;
          while(1) {
           $k$5$i = $k$5$in$i & 127;
           $539 = (($x$i) + ($k$5$i<<2)|0);
           $540 = HEAP32[$539>>2]|0;
           $541 = (_bitshift64Shl(($540|0),0,29)|0);
           $542 = tempRet0;
           $543 = (_i64Add(($541|0),($542|0),($carry1$0$i|0),0)|0);
           $544 = tempRet0;
           $545 = ($544>>>0)>(0);
           $546 = ($543>>>0)>(1000000000);
           $547 = ($544|0)==(0);
           $548 = $547 & $546;
           $549 = $545 | $548;
           $550 = (___udivdi3(($543|0),($544|0),1000000000,0)|0);
           $551 = tempRet0;
           $552 = (___uremdi3(($543|0),($544|0),1000000000,0)|0);
           $553 = tempRet0;
           $$sink$off0$i = $549 ? $552 : $543;
           $carry1$1$i = $549 ? $550 : 0;
           HEAP32[$539>>2] = $$sink$off0$i;
           $554 = (($z$2$i) + 127)|0;
           $555 = $554 & 127;
           $556 = ($k$5$i|0)!=($555|0);
           $557 = ($k$5$i|0)==($a$2$ph46$i|0);
           $or$cond22$i = $556 | $557;
           $558 = ($$sink$off0$i|0)==(0);
           $k$5$z$2$i = $558 ? $k$5$i : $z$2$i;
           $z$3$i = $or$cond22$i ? $z$2$i : $k$5$z$2$i;
           $559 = (($k$5$i) + -1)|0;
           if ($557) {
            $carry1$1$i$lcssa = $carry1$1$i;$z$3$i$lcssa = $z$3$i;
            break;
           } else {
            $carry1$0$i = $carry1$1$i;$k$5$in$i = $559;$z$2$i = $z$3$i;
           }
          }
          $560 = (($e2$0$i$19) + -29)|0;
          $561 = ($carry1$1$i$lcssa|0)==(0);
          if ($561) {
           $e2$0$i$19 = $560;$z$1$i = $z$3$i$lcssa;
          } else {
           $$lcssa263 = $560;$carry1$1$i$lcssa$lcssa = $carry1$1$i$lcssa;$z$3$i$lcssa$lcssa = $z$3$i$lcssa;
           break;
          }
         }
         $562 = (($rp$2$ph44$i) + 9)|0;
         $563 = (($a$2$ph46$i) + 127)|0;
         $564 = $563 & 127;
         $565 = ($564|0)==($z$3$i$lcssa$lcssa|0);
         if ($565) {
          $566 = (($z$3$i$lcssa$lcssa) + 127)|0;
          $567 = $566 & 127;
          $568 = (($x$i) + ($567<<2)|0);
          $569 = HEAP32[$568>>2]|0;
          $570 = (($z$3$i$lcssa$lcssa) + 126)|0;
          $571 = $570 & 127;
          $572 = (($x$i) + ($571<<2)|0);
          $573 = HEAP32[$572>>2]|0;
          $574 = $573 | $569;
          HEAP32[$572>>2] = $574;
          $z$4$i = $567;
         } else {
          $z$4$i = $z$3$i$lcssa$lcssa;
         }
         $575 = (($x$i) + ($564<<2)|0);
         HEAP32[$575>>2] = $carry1$1$i$lcssa$lcssa;
         $a$2$ph46$i = $564;$e2$0$ph$i = $$lcssa263;$rp$2$ph44$i = $562;$z$1$ph45$i = $z$4$i;
        }
        L299: while(1) {
         $606 = (($z$6$ph$i) + 1)|0;
         $603 = $606 & 127;
         $607 = (($z$6$ph$i) + 127)|0;
         $608 = $607 & 127;
         $609 = (($x$i) + ($608<<2)|0);
         $a$4$ph165$i = $a$4$ph$i;$e2$1$ph164$i = $e2$1$ph$i;$rp$4$ph$i = $rp$4$ph42$i;
         while(1) {
          $610 = ($rp$4$ph$i|0)==(18);
          $611 = ($rp$4$ph$i|0)>(27);
          $$24$i = $611 ? 9 : 1;
          $$not$i = $610 ^ 1;
          $a$4$i = $a$4$ph165$i;$e2$1$i = $e2$1$ph164$i;
          while(1) {
           $576 = $a$4$i & 127;
           $577 = ($576|0)==($z$6$ph$i|0);
           do {
            if ($577) {
             label = 217;
            } else {
             $578 = (($x$i) + ($576<<2)|0);
             $579 = HEAP32[$578>>2]|0;
             $580 = ($579>>>0)<(9007199);
             if ($580) {
              label = 217;
              break;
             }
             $581 = ($579>>>0)>(9007199);
             if ($581) {
              break;
             }
             $582 = (($a$4$i) + 1)|0;
             $583 = $582 & 127;
             $584 = ($583|0)==($z$6$ph$i|0);
             if ($584) {
              label = 217;
              break;
             }
             $690 = (($x$i) + ($583<<2)|0);
             $691 = HEAP32[$690>>2]|0;
             $692 = ($691>>>0)<(254740991);
             if ($692) {
              label = 217;
              break;
             }
             $693 = ($691>>>0)>(254740991);
             $brmerge$i$28 = $693 | $$not$i;
             if (!($brmerge$i$28)) {
              $617 = $576;$a$4$i249 = $a$4$i;$e2$1$i246 = $e2$1$i;$z$10$i = $z$6$ph$i;
              break L299;
             }
            }
           } while(0);
           if ((label|0) == 217) {
            label = 0;
            if ($610) {
             label = 218;
             break L299;
            }
           }
           $585 = (($e2$1$i) + ($$24$i))|0;
           $586 = ($a$4$i|0)==($z$6$ph$i|0);
           if ($586) {
            $a$4$i = $z$6$ph$i;$e2$1$i = $585;
           } else {
            $$lcssa256 = $585;$a$4$i$lcssa248 = $a$4$i;
            break;
           }
          }
          $587 = 1 << $$24$i;
          $588 = (($587) + -1)|0;
          $589 = 1000000000 >>> $$24$i;
          $a$586$i = $a$4$i$lcssa248;$carry4$089$i = 0;$k$687$i = $a$4$i$lcssa248;$rp$585$i = $rp$4$ph$i;
          while(1) {
           $590 = (($x$i) + ($k$687$i<<2)|0);
           $591 = HEAP32[$590>>2]|0;
           $592 = $591 & $588;
           $593 = $591 >>> $$24$i;
           $594 = (($593) + ($carry4$089$i))|0;
           HEAP32[$590>>2] = $594;
           $595 = Math_imul($592, $589)|0;
           $596 = ($k$687$i|0)==($a$586$i|0);
           $597 = ($594|0)==(0);
           $or$cond25$i = $596 & $597;
           $598 = (($k$687$i) + 1)|0;
           $599 = $598 & 127;
           $600 = (($rp$585$i) + -9)|0;
           $rp$6$i = $or$cond25$i ? $600 : $rp$585$i;
           $a$6$i = $or$cond25$i ? $599 : $a$586$i;
           $601 = ($599|0)==($z$6$ph$i|0);
           if ($601) {
            $$lcssa257 = $595;$a$6$i$lcssa = $a$6$i;$rp$6$i$lcssa = $rp$6$i;
            break;
           } else {
            $a$586$i = $a$6$i;$carry4$089$i = $595;$k$687$i = $599;$rp$585$i = $rp$6$i;
           }
          }
          $602 = ($$lcssa257|0)==(0);
          if ($602) {
           $a$4$ph165$i = $a$6$i$lcssa;$e2$1$ph164$i = $$lcssa256;$rp$4$ph$i = $rp$6$i$lcssa;
           continue;
          }
          $604 = ($603|0)==($a$6$i$lcssa|0);
          if (!($604)) {
           $$lcssa256$lcssa = $$lcssa256;$$lcssa257$lcssa = $$lcssa257;$a$6$i$lcssa$lcssa = $a$6$i$lcssa;$rp$6$i$lcssa$lcssa = $rp$6$i$lcssa;
           break;
          }
          $612 = HEAP32[$609>>2]|0;
          $613 = $612 | 1;
          HEAP32[$609>>2] = $613;
          $a$4$ph165$i = $a$6$i$lcssa;$e2$1$ph164$i = $$lcssa256;$rp$4$ph$i = $rp$6$i$lcssa;
         }
         $605 = (($x$i) + ($z$6$ph$i<<2)|0);
         HEAP32[$605>>2] = $$lcssa257$lcssa;
         $a$4$ph$i = $a$6$i$lcssa$lcssa;$e2$1$ph$i = $$lcssa256$lcssa;$rp$4$ph42$i = $rp$6$i$lcssa$lcssa;$z$6$ph$i = $603;
        }
        if ((label|0) == 218) {
         if ($577) {
          $614 = (($603) + -1)|0;
          $615 = (($x$i) + ($614<<2)|0);
          HEAP32[$615>>2] = 0;
          $617 = $z$6$ph$i;$a$4$i249 = $a$4$i;$e2$1$i246 = $e2$1$i;$z$10$i = $603;
         } else {
          $617 = $576;$a$4$i249 = $a$4$i;$e2$1$i246 = $e2$1$i;$z$10$i = $z$6$ph$i;
         }
        }
        $616 = (($x$i) + ($617<<2)|0);
        $618 = HEAP32[$616>>2]|0;
        $619 = (+($618>>>0));
        $620 = (($a$4$i249) + 1)|0;
        $621 = $620 & 127;
        $622 = ($621|0)==($z$10$i|0);
        if ($622) {
         $679 = (($a$4$i249) + 2)|0;
         $680 = $679 & 127;
         $681 = (($680) + -1)|0;
         $682 = (($x$i) + ($681<<2)|0);
         HEAP32[$682>>2] = 0;
         $z$10$1$i = $680;
        } else {
         $z$10$1$i = $z$10$i;
        }
        $683 = $619 * 1.0E+9;
        $684 = (($x$i) + ($621<<2)|0);
        $685 = HEAP32[$684>>2]|0;
        $686 = (+($685>>>0));
        $687 = $683 + $686;
        $643 = (+($sign$0|0));
        $625 = $643 * $687;
        $663 = (($e2$1$i246) + 53)|0;
        $669 = (($663) - ($emin$0$ph))|0;
        $670 = ($669|0)<($bits$0$ph|0);
        $688 = ($669|0)<(0);
        $$$i = $688 ? 0 : $669;
        $denormal$0$i = $670&1;
        $$012$i = $670 ? $$$i : $bits$0$ph;
        $689 = ($$012$i|0)<(53);
        if ($689) {
         $623 = (105 - ($$012$i))|0;
         $624 = (+_scalbn(1.0,$623));
         $626 = (+_copysignl($624,$625));
         $627 = (53 - ($$012$i))|0;
         $628 = (+_scalbn(1.0,$627));
         $629 = (+_fmodl($625,$628));
         $630 = $625 - $629;
         $631 = $626 + $630;
         $bias$0$i$25 = $626;$frac$0$i = $629;$y$1$i$24 = $631;
        } else {
         $bias$0$i$25 = 0.0;$frac$0$i = 0.0;$y$1$i$24 = $625;
        }
        $632 = (($a$4$i249) + 2)|0;
        $633 = $632 & 127;
        $634 = ($633|0)==($z$10$1$i|0);
        do {
         if ($634) {
          $frac$3$i = $frac$0$i;
         } else {
          $635 = (($x$i) + ($633<<2)|0);
          $636 = HEAP32[$635>>2]|0;
          $637 = ($636>>>0)<(500000000);
          do {
           if ($637) {
            $638 = ($636|0)==(0);
            if ($638) {
             $639 = (($a$4$i249) + 3)|0;
             $640 = $639 & 127;
             $641 = ($640|0)==($z$10$1$i|0);
             if ($641) {
              $frac$1$i = $frac$0$i;
              break;
             }
            }
            $642 = $643 * 0.25;
            $644 = $642 + $frac$0$i;
            $frac$1$i = $644;
           } else {
            $645 = ($636>>>0)>(500000000);
            if ($645) {
             $646 = $643 * 0.75;
             $647 = $646 + $frac$0$i;
             $frac$1$i = $647;
             break;
            }
            $648 = (($a$4$i249) + 3)|0;
            $649 = $648 & 127;
            $650 = ($649|0)==($z$10$1$i|0);
            if ($650) {
             $651 = $643 * 0.5;
             $652 = $651 + $frac$0$i;
             $frac$1$i = $652;
             break;
            } else {
             $653 = $643 * 0.75;
             $654 = $653 + $frac$0$i;
             $frac$1$i = $654;
             break;
            }
           }
          } while(0);
          $655 = (53 - ($$012$i))|0;
          $656 = ($655|0)>(1);
          if (!($656)) {
           $frac$3$i = $frac$1$i;
           break;
          }
          $657 = (+_fmodl($frac$1$i,1.0));
          $658 = $657 != 0.0;
          if ($658) {
           $frac$3$i = $frac$1$i;
           break;
          }
          $659 = $frac$1$i + 1.0;
          $frac$3$i = $659;
         }
        } while(0);
        $660 = $y$1$i$24 + $frac$3$i;
        $661 = $660 - $bias$0$i$25;
        $662 = $663 & 2147483647;
        $664 = (-2 - ($sum$i))|0;
        $665 = ($662|0)>($664|0);
        do {
         if ($665) {
          $666 = (+Math_abs((+$661)));
          $667 = !($666 >= 9007199254740992.0);
          if ($667) {
           $denormal$2$i = $denormal$0$i;$e2$3$i = $e2$1$i246;$y$2$i$26 = $661;
          } else {
           $668 = ($$012$i|0)==($669|0);
           $or$cond26$i = $670 & $668;
           $denormal$1$i = $or$cond26$i ? 0 : $denormal$0$i;
           $671 = $661 * 0.5;
           $672 = (($e2$1$i246) + 1)|0;
           $denormal$2$i = $denormal$1$i;$e2$3$i = $672;$y$2$i$26 = $671;
          }
          $673 = (($e2$3$i) + 50)|0;
          $674 = ($673|0)>($330|0);
          if (!($674)) {
           $675 = ($denormal$2$i|0)!=(0);
           $676 = $frac$3$i != 0.0;
           $or$cond9$i$27 = $676 & $675;
           if (!($or$cond9$i$27)) {
            $e2$4$i = $e2$3$i;$y$3$i = $y$2$i$26;
            break;
           }
          }
          $677 = (___errno_location()|0);
          HEAP32[$677>>2] = 34;
          $e2$4$i = $e2$3$i;$y$3$i = $y$2$i$26;
         } else {
          $e2$4$i = $e2$1$i246;$y$3$i = $661;
         }
        } while(0);
        $678 = (+_scalbnl($y$3$i,$e2$4$i));
        $$1$i = $678;
       }
      } while(0);
      $$0 = $$1$i;
      break L4;
      break;
     }
     default: {
      $109 = HEAP32[$1>>2]|0;
      $110 = ($109|0)==(0|0);
      if (!($110)) {
       $111 = HEAP32[$0>>2]|0;
       $112 = ((($111)) + -1|0);
       HEAP32[$0>>2] = $112;
      }
      $113 = (___errno_location()|0);
      HEAP32[$113>>2] = 22;
      ___shlim($f,0);
      $$0 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $41 = HEAP32[$1>>2]|0;
    $42 = ($41|0)==(0|0);
    if (!($42)) {
     $43 = HEAP32[$0>>2]|0;
     $44 = ((($43)) + -1|0);
     HEAP32[$0>>2] = $44;
    }
    $45 = ($pok|0)!=(0);
    $46 = ($i$0$lcssa>>>0)>(3);
    $or$cond9 = $45 & $46;
    if ($or$cond9) {
     $i$1 = $i$0$lcssa;
     while(1) {
      if (!($42)) {
       $47 = HEAP32[$0>>2]|0;
       $48 = ((($47)) + -1|0);
       HEAP32[$0>>2] = $48;
      }
      $49 = (($i$1) + -1)|0;
      $$old8 = ($49>>>0)>(3);
      if ($$old8) {
       $i$1 = $49;
      } else {
       break;
      }
     }
    }
   }
   $50 = (+($sign$0|0));
   $51 = $50 * inf;
   $52 = $51;
   $$0 = $52;
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$115 = 0, $$116 = 0, $$base14 = 0, $$lcssa = 0, $$lcssa118 = 0, $$lcssa119 = 0, $$lcssa120 = 0, $$lcssa121 = 0, $$lcssa122 = 0, $$lcssa123 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$117 = 0, $c$2$be = 0, $c$2$be$lcssa = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$359 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0;
 var $c$6$lcssa = 0, $c$7$be = 0, $c$742 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $neg$0$ = 0, $neg$1 = 0, $or$cond = 0, $or$cond$31 = 0, $or$cond12 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$070 = 0, $x$136 = 0, $x$254 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 L1: do {
  if ($2) {
   $5 = (___errno_location()|0);
   HEAP32[$5>>2] = 22;
   $286 = 0;$287 = 0;
  } else {
   $3 = ((($f)) + 4|0);
   $4 = ((($f)) + 100|0);
   while(1) {
    $6 = HEAP32[$3>>2]|0;
    $7 = HEAP32[$4>>2]|0;
    $8 = ($6>>>0)<($7>>>0);
    if ($8) {
     $9 = ((($6)) + 1|0);
     HEAP32[$3>>2] = $9;
     $10 = HEAP8[$6>>0]|0;
     $11 = $10&255;
     $13 = $11;
    } else {
     $12 = (___shgetc($f)|0);
     $13 = $12;
    }
    $14 = (_isspace($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $$lcssa123 = $13;
     break;
    }
   }
   $16 = ($$lcssa123|0)==(45);
   L11: do {
    switch ($$lcssa123|0) {
    case 43: case 45:  {
     $17 = $16 << 31 >> 31;
     $18 = HEAP32[$3>>2]|0;
     $19 = HEAP32[$4>>2]|0;
     $20 = ($18>>>0)<($19>>>0);
     if ($20) {
      $21 = ((($18)) + 1|0);
      HEAP32[$3>>2] = $21;
      $22 = HEAP8[$18>>0]|0;
      $23 = $22&255;
      $c$0 = $23;$neg$0 = $17;
      break L11;
     } else {
      $24 = (___shgetc($f)|0);
      $c$0 = $24;$neg$0 = $17;
      break L11;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa123;$neg$0 = 0;
    }
    }
   } while(0);
   $25 = ($base|0)==(0);
   $26 = $base & -17;
   $27 = ($26|0)==(0);
   $28 = ($c$0|0)==(48);
   $or$cond5 = $27 & $28;
   do {
    if ($or$cond5) {
     $29 = HEAP32[$3>>2]|0;
     $30 = HEAP32[$4>>2]|0;
     $31 = ($29>>>0)<($30>>>0);
     if ($31) {
      $32 = ((($29)) + 1|0);
      HEAP32[$3>>2] = $32;
      $33 = HEAP8[$29>>0]|0;
      $34 = $33&255;
      $37 = $34;
     } else {
      $35 = (___shgetc($f)|0);
      $37 = $35;
     }
     $36 = $37 | 32;
     $38 = ($36|0)==(120);
     if (!($38)) {
      if ($25) {
       $$116 = 8;$c$117 = $37;
       label = 46;
       break;
      } else {
       $$1 = $base;$c$1 = $37;
       label = 32;
       break;
      }
     }
     $39 = HEAP32[$3>>2]|0;
     $40 = HEAP32[$4>>2]|0;
     $41 = ($39>>>0)<($40>>>0);
     if ($41) {
      $42 = ((($39)) + 1|0);
      HEAP32[$3>>2] = $42;
      $43 = HEAP8[$39>>0]|0;
      $44 = $43&255;
      $47 = $44;
     } else {
      $45 = (___shgetc($f)|0);
      $47 = $45;
     }
     $46 = ((15462) + ($47)|0);
     $48 = HEAP8[$46>>0]|0;
     $49 = ($48&255)>(15);
     if ($49) {
      $50 = HEAP32[$4>>2]|0;
      $51 = ($50|0)==(0|0);
      if (!($51)) {
       $52 = HEAP32[$3>>2]|0;
       $53 = ((($52)) + -1|0);
       HEAP32[$3>>2] = $53;
      }
      $54 = ($pok|0)==(0);
      if ($54) {
       ___shlim($f,0);
       $286 = 0;$287 = 0;
       break L1;
      }
      if ($51) {
       $286 = 0;$287 = 0;
       break L1;
      }
      $55 = HEAP32[$3>>2]|0;
      $56 = ((($55)) + -1|0);
      HEAP32[$3>>2] = $56;
      $286 = 0;$287 = 0;
      break L1;
     } else {
      $$116 = 16;$c$117 = $47;
      label = 46;
     }
    } else {
     $$base14 = $25 ? 10 : $base;
     $57 = ((15462) + ($c$0)|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58&255;
     $60 = ($59>>>0)<($$base14>>>0);
     if ($60) {
      $$1 = $$base14;$c$1 = $c$0;
      label = 32;
     } else {
      $61 = HEAP32[$4>>2]|0;
      $62 = ($61|0)==(0|0);
      if (!($62)) {
       $63 = HEAP32[$3>>2]|0;
       $64 = ((($63)) + -1|0);
       HEAP32[$3>>2] = $64;
      }
      ___shlim($f,0);
      $65 = (___errno_location()|0);
      HEAP32[$65>>2] = 22;
      $286 = 0;$287 = 0;
      break L1;
     }
    }
   } while(0);
   if ((label|0) == 32) {
    $66 = ($$1|0)==(10);
    if ($66) {
     $67 = (($c$1) + -48)|0;
     $68 = ($67>>>0)<(10);
     if ($68) {
      $71 = $67;$x$070 = 0;
      while(1) {
       $69 = ($x$070*10)|0;
       $70 = (($69) + ($71))|0;
       $72 = HEAP32[$3>>2]|0;
       $73 = HEAP32[$4>>2]|0;
       $74 = ($72>>>0)<($73>>>0);
       if ($74) {
        $75 = ((($72)) + 1|0);
        HEAP32[$3>>2] = $75;
        $76 = HEAP8[$72>>0]|0;
        $77 = $76&255;
        $c$2$be = $77;
       } else {
        $78 = (___shgetc($f)|0);
        $c$2$be = $78;
       }
       $79 = (($c$2$be) + -48)|0;
       $80 = ($79>>>0)<(10);
       $81 = ($70>>>0)<(429496729);
       $82 = $80 & $81;
       if ($82) {
        $71 = $79;$x$070 = $70;
       } else {
        $$lcssa122 = $70;$c$2$be$lcssa = $c$2$be;
        break;
       }
      }
      $288 = $$lcssa122;$289 = 0;$c$2$lcssa = $c$2$be$lcssa;
     } else {
      $288 = 0;$289 = 0;$c$2$lcssa = $c$1;
     }
     $83 = (($c$2$lcssa) + -48)|0;
     $84 = ($83>>>0)<(10);
     if ($84) {
      $85 = $288;$86 = $289;$89 = $83;$c$359 = $c$2$lcssa;
      while(1) {
       $87 = (___muldi3(($85|0),($86|0),10,0)|0);
       $88 = tempRet0;
       $90 = ($89|0)<(0);
       $91 = $90 << 31 >> 31;
       $92 = $89 ^ -1;
       $93 = $91 ^ -1;
       $94 = ($88>>>0)>($93>>>0);
       $95 = ($87>>>0)>($92>>>0);
       $96 = ($88|0)==($93|0);
       $97 = $96 & $95;
       $98 = $94 | $97;
       if ($98) {
        $$lcssa = $89;$290 = $85;$291 = $86;$c$3$lcssa = $c$359;
        break;
       }
       $99 = (_i64Add(($87|0),($88|0),($89|0),($91|0))|0);
       $100 = tempRet0;
       $101 = HEAP32[$3>>2]|0;
       $102 = HEAP32[$4>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        $104 = ((($101)) + 1|0);
        HEAP32[$3>>2] = $104;
        $105 = HEAP8[$101>>0]|0;
        $106 = $105&255;
        $c$3$be = $106;
       } else {
        $107 = (___shgetc($f)|0);
        $c$3$be = $107;
       }
       $108 = (($c$3$be) + -48)|0;
       $109 = ($108>>>0)<(10);
       $110 = ($100>>>0)<(429496729);
       $111 = ($99>>>0)<(2576980378);
       $112 = ($100|0)==(429496729);
       $113 = $112 & $111;
       $114 = $110 | $113;
       $or$cond7 = $109 & $114;
       if ($or$cond7) {
        $85 = $99;$86 = $100;$89 = $108;$c$359 = $c$3$be;
       } else {
        $$lcssa = $108;$290 = $99;$291 = $100;$c$3$lcssa = $c$3$be;
        break;
       }
      }
      $115 = ($$lcssa>>>0)>(9);
      if ($115) {
       $259 = $291;$261 = $290;$neg$1 = $neg$0;
      } else {
       $$115 = 10;$292 = $290;$293 = $291;$c$8 = $c$3$lcssa;
       label = 72;
      }
     } else {
      $259 = $289;$261 = $288;$neg$1 = $neg$0;
     }
    } else {
     $$116 = $$1;$c$117 = $c$1;
     label = 46;
    }
   }
   L63: do {
    if ((label|0) == 46) {
     $116 = (($$116) + -1)|0;
     $117 = $116 & $$116;
     $118 = ($117|0)==(0);
     if ($118) {
      $123 = ($$116*23)|0;
      $124 = $123 >>> 5;
      $125 = $124 & 7;
      $126 = (15718 + ($125)|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $129 = ((15462) + ($c$117)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130&255;
      $132 = ($131>>>0)<($$116>>>0);
      if ($132) {
       $135 = $131;$x$136 = 0;
       while(1) {
        $133 = $x$136 << $128;
        $134 = $135 | $133;
        $136 = HEAP32[$3>>2]|0;
        $137 = HEAP32[$4>>2]|0;
        $138 = ($136>>>0)<($137>>>0);
        if ($138) {
         $139 = ((($136)) + 1|0);
         HEAP32[$3>>2] = $139;
         $140 = HEAP8[$136>>0]|0;
         $141 = $140&255;
         $c$4$be = $141;
        } else {
         $142 = (___shgetc($f)|0);
         $c$4$be = $142;
        }
        $143 = ((15462) + ($c$4$be)|0);
        $144 = HEAP8[$143>>0]|0;
        $145 = $144&255;
        $146 = ($145>>>0)<($$116>>>0);
        $147 = ($134>>>0)<(134217728);
        $148 = $147 & $146;
        if ($148) {
         $135 = $145;$x$136 = $134;
        } else {
         $$lcssa118 = $134;$$lcssa119 = $144;$c$4$be$lcssa = $c$4$be;
         break;
        }
       }
       $152 = $$lcssa119;$154 = 0;$156 = $$lcssa118;$c$4$lcssa = $c$4$be$lcssa;
      } else {
       $152 = $130;$154 = 0;$156 = 0;$c$4$lcssa = $c$117;
      }
      $149 = (_bitshift64Lshr(-1,-1,($128|0))|0);
      $150 = tempRet0;
      $151 = $152&255;
      $153 = ($151>>>0)>=($$116>>>0);
      $155 = ($154>>>0)>($150>>>0);
      $157 = ($156>>>0)>($149>>>0);
      $158 = ($154|0)==($150|0);
      $159 = $158 & $157;
      $160 = $155 | $159;
      $or$cond$31 = $153 | $160;
      if ($or$cond$31) {
       $$115 = $$116;$292 = $156;$293 = $154;$c$8 = $c$4$lcssa;
       label = 72;
       break;
      } else {
       $161 = $156;$162 = $154;$166 = $152;
      }
      while(1) {
       $163 = (_bitshift64Shl(($161|0),($162|0),($128|0))|0);
       $164 = tempRet0;
       $165 = $166&255;
       $167 = $165 | $163;
       $168 = HEAP32[$3>>2]|0;
       $169 = HEAP32[$4>>2]|0;
       $170 = ($168>>>0)<($169>>>0);
       if ($170) {
        $171 = ((($168)) + 1|0);
        HEAP32[$3>>2] = $171;
        $172 = HEAP8[$168>>0]|0;
        $173 = $172&255;
        $c$5$be = $173;
       } else {
        $174 = (___shgetc($f)|0);
        $c$5$be = $174;
       }
       $175 = ((15462) + ($c$5$be)|0);
       $176 = HEAP8[$175>>0]|0;
       $177 = $176&255;
       $178 = ($177>>>0)>=($$116>>>0);
       $179 = ($164>>>0)>($150>>>0);
       $180 = ($167>>>0)>($149>>>0);
       $181 = ($164|0)==($150|0);
       $182 = $181 & $180;
       $183 = $179 | $182;
       $or$cond = $178 | $183;
       if ($or$cond) {
        $$115 = $$116;$292 = $167;$293 = $164;$c$8 = $c$5$be;
        label = 72;
        break L63;
       } else {
        $161 = $167;$162 = $164;$166 = $176;
       }
      }
     }
     $119 = ((15462) + ($c$117)|0);
     $120 = HEAP8[$119>>0]|0;
     $121 = $120&255;
     $122 = ($121>>>0)<($$116>>>0);
     if ($122) {
      $186 = $121;$x$254 = 0;
      while(1) {
       $184 = Math_imul($x$254, $$116)|0;
       $185 = (($186) + ($184))|0;
       $187 = HEAP32[$3>>2]|0;
       $188 = HEAP32[$4>>2]|0;
       $189 = ($187>>>0)<($188>>>0);
       if ($189) {
        $190 = ((($187)) + 1|0);
        HEAP32[$3>>2] = $190;
        $191 = HEAP8[$187>>0]|0;
        $192 = $191&255;
        $c$6$be = $192;
       } else {
        $193 = (___shgetc($f)|0);
        $c$6$be = $193;
       }
       $194 = ((15462) + ($c$6$be)|0);
       $195 = HEAP8[$194>>0]|0;
       $196 = $195&255;
       $197 = ($196>>>0)<($$116>>>0);
       $198 = ($185>>>0)<(119304647);
       $199 = $198 & $197;
       if ($199) {
        $186 = $196;$x$254 = $185;
       } else {
        $$lcssa120 = $185;$$lcssa121 = $195;$c$6$be$lcssa = $c$6$be;
        break;
       }
      }
      $201 = $$lcssa121;$294 = $$lcssa120;$295 = 0;$c$6$lcssa = $c$6$be$lcssa;
     } else {
      $201 = $120;$294 = 0;$295 = 0;$c$6$lcssa = $c$117;
     }
     $200 = $201&255;
     $202 = ($200>>>0)<($$116>>>0);
     if ($202) {
      $203 = (___udivdi3(-1,-1,($$116|0),0)|0);
      $204 = tempRet0;
      $205 = $295;$207 = $294;$215 = $201;$c$742 = $c$6$lcssa;
      while(1) {
       $206 = ($205>>>0)>($204>>>0);
       $208 = ($207>>>0)>($203>>>0);
       $209 = ($205|0)==($204|0);
       $210 = $209 & $208;
       $211 = $206 | $210;
       if ($211) {
        $$115 = $$116;$292 = $207;$293 = $205;$c$8 = $c$742;
        label = 72;
        break L63;
       }
       $212 = (___muldi3(($207|0),($205|0),($$116|0),0)|0);
       $213 = tempRet0;
       $214 = $215&255;
       $216 = $214 ^ -1;
       $217 = ($213>>>0)>(4294967295);
       $218 = ($212>>>0)>($216>>>0);
       $219 = ($213|0)==(-1);
       $220 = $219 & $218;
       $221 = $217 | $220;
       if ($221) {
        $$115 = $$116;$292 = $207;$293 = $205;$c$8 = $c$742;
        label = 72;
        break L63;
       }
       $222 = (_i64Add(($214|0),0,($212|0),($213|0))|0);
       $223 = tempRet0;
       $224 = HEAP32[$3>>2]|0;
       $225 = HEAP32[$4>>2]|0;
       $226 = ($224>>>0)<($225>>>0);
       if ($226) {
        $227 = ((($224)) + 1|0);
        HEAP32[$3>>2] = $227;
        $228 = HEAP8[$224>>0]|0;
        $229 = $228&255;
        $c$7$be = $229;
       } else {
        $230 = (___shgetc($f)|0);
        $c$7$be = $230;
       }
       $231 = ((15462) + ($c$7$be)|0);
       $232 = HEAP8[$231>>0]|0;
       $233 = $232&255;
       $234 = ($233>>>0)<($$116>>>0);
       if ($234) {
        $205 = $223;$207 = $222;$215 = $232;$c$742 = $c$7$be;
       } else {
        $$115 = $$116;$292 = $222;$293 = $223;$c$8 = $c$7$be;
        label = 72;
        break;
       }
      }
     } else {
      $$115 = $$116;$292 = $294;$293 = $295;$c$8 = $c$6$lcssa;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $235 = ((15462) + ($c$8)|0);
    $236 = HEAP8[$235>>0]|0;
    $237 = $236&255;
    $238 = ($237>>>0)<($$115>>>0);
    if ($238) {
     while(1) {
      $239 = HEAP32[$3>>2]|0;
      $240 = HEAP32[$4>>2]|0;
      $241 = ($239>>>0)<($240>>>0);
      if ($241) {
       $242 = ((($239)) + 1|0);
       HEAP32[$3>>2] = $242;
       $243 = HEAP8[$239>>0]|0;
       $244 = $243&255;
       $c$9$be = $244;
      } else {
       $245 = (___shgetc($f)|0);
       $c$9$be = $245;
      }
      $246 = ((15462) + ($c$9$be)|0);
      $247 = HEAP8[$246>>0]|0;
      $248 = $247&255;
      $249 = ($248>>>0)<($$115>>>0);
      if (!($249)) {
       break;
      }
     }
     $250 = (___errno_location()|0);
     HEAP32[$250>>2] = 34;
     $251 = $0 & 1;
     $252 = ($251|0)==(0);
     $253 = (0)==(0);
     $254 = $252 & $253;
     $neg$0$ = $254 ? $neg$0 : 0;
     $259 = $1;$261 = $0;$neg$1 = $neg$0$;
    } else {
     $259 = $293;$261 = $292;$neg$1 = $neg$0;
    }
   }
   $255 = HEAP32[$4>>2]|0;
   $256 = ($255|0)==(0|0);
   if (!($256)) {
    $257 = HEAP32[$3>>2]|0;
    $258 = ((($257)) + -1|0);
    HEAP32[$3>>2] = $258;
   }
   $260 = ($259>>>0)<($1>>>0);
   $262 = ($261>>>0)<($0>>>0);
   $263 = ($259|0)==($1|0);
   $264 = $263 & $262;
   $265 = $260 | $264;
   if (!($265)) {
    $266 = $0 & 1;
    $267 = ($266|0)!=(0);
    $268 = (0)!=(0);
    $269 = $267 | $268;
    $270 = ($neg$1|0)!=(0);
    $or$cond12 = $269 | $270;
    if (!($or$cond12)) {
     $271 = (___errno_location()|0);
     HEAP32[$271>>2] = 34;
     $272 = (_i64Add(($0|0),($1|0),-1,-1)|0);
     $273 = tempRet0;
     $286 = $273;$287 = $272;
     break;
    }
    $274 = ($259>>>0)>($1>>>0);
    $275 = ($261>>>0)>($0>>>0);
    $276 = ($259|0)==($1|0);
    $277 = $276 & $275;
    $278 = $274 | $277;
    if ($278) {
     $279 = (___errno_location()|0);
     HEAP32[$279>>2] = 34;
     $286 = $1;$287 = $0;
     break;
    }
   }
   $280 = ($neg$1|0)<(0);
   $281 = $280 << 31 >> 31;
   $282 = $261 ^ $neg$1;
   $283 = $259 ^ $281;
   $284 = (_i64Subtract(($282|0),($283|0),($neg$1|0),($281|0))|0);
   $285 = tempRet0;
   $286 = $285;$287 = $284;
  }
 } while(0);
 tempRet0 = ($286);
 return ($287|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = ((($f)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($f)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) - ($4))|0;
 $6 = ((($f)) + 108|0);
 HEAP32[$6>>2] = $5;
 $7 = ($lim|0)!=(0);
 $8 = ($5|0)>($lim|0);
 $or$cond = $7 & $8;
 if ($or$cond) {
  $9 = $4;
  $10 = (($9) + ($lim)|0);
  $11 = ((($f)) + 100|0);
  HEAP32[$11>>2] = $10;
 } else {
  $12 = ((($f)) + 100|0);
  HEAP32[$12>>2] = $2;
 }
 return;
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert3 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = ((($f)) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if ($7) {
   label = 4;
  } else {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = ((($f)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    $11 = $$pre;
    $41 = $11;
    label = 9;
   } else {
    $12 = ((($f)) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $13;
    $15 = (($$pre) - ($14))|0;
    $16 = ((($f)) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = (($18) + -1)|0;
    $20 = ($15|0)>($19|0);
    $21 = $$pre;
    if ($20) {
     $22 = (($13) + ($19)|0);
     $23 = ((($f)) + 100|0);
     HEAP32[$23>>2] = $22;
     $25 = $21;
    } else {
     $41 = $21;
     label = 9;
    }
   }
   if ((label|0) == 9) {
    $24 = ((($f)) + 100|0);
    HEAP32[$24>>2] = $$pre;
    $25 = $41;
   }
   $26 = ($25|0)==(0|0);
   $$phi$trans$insert3 = ((($f)) + 4|0);
   if ($26) {
    $$pre4 = HEAP32[$$phi$trans$insert3>>2]|0;
    $36 = $$pre4;
   } else {
    $27 = HEAP32[$$phi$trans$insert3>>2]|0;
    $28 = $25;
    $29 = ((($f)) + 108|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 1)|0;
    $32 = (($31) - ($27))|0;
    $33 = (($32) + ($30))|0;
    HEAP32[$29>>2] = $33;
    $34 = $27;
    $36 = $34;
   }
   $35 = ((($36)) + -1|0);
   $37 = HEAP8[$35>>0]|0;
   $38 = $37&255;
   $39 = ($38|0)==($6|0);
   if ($39) {
    $$0 = $6;
   } else {
    $40 = $6&255;
    HEAP8[$35>>0] = $40;
    $$0 = $6;
   }
  }
 }
 if ((label|0) == 4) {
  $8 = ((($f)) + 100|0);
  HEAP32[$8>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = ($wc>>>0)<(128);
   if ($1) {
    $2 = $wc&255;
    HEAP8[$s>>0] = $2;
    $$0 = 1;
    break;
   }
   $3 = ($wc>>>0)<(2048);
   if ($3) {
    $4 = $wc >>> 6;
    $5 = $4 | 192;
    $6 = $5&255;
    $7 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $6;
    $8 = $wc & 63;
    $9 = $8 | 128;
    $10 = $9&255;
    HEAP8[$7>>0] = $10;
    $$0 = 2;
    break;
   }
   $11 = ($wc>>>0)<(55296);
   $12 = $wc & -8192;
   $13 = ($12|0)==(57344);
   $or$cond = $11 | $13;
   if ($or$cond) {
    $14 = $wc >>> 12;
    $15 = $14 | 224;
    $16 = $15&255;
    $17 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $16;
    $18 = $wc >>> 6;
    $19 = $18 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    $22 = ((($s)) + 2|0);
    HEAP8[$17>>0] = $21;
    $23 = $wc & 63;
    $24 = $23 | 128;
    $25 = $24&255;
    HEAP8[$22>>0] = $25;
    $$0 = 3;
    break;
   }
   $26 = (($wc) + -65536)|0;
   $27 = ($26>>>0)<(1048576);
   if ($27) {
    $28 = $wc >>> 18;
    $29 = $28 | 240;
    $30 = $29&255;
    $31 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $30;
    $32 = $wc >>> 12;
    $33 = $32 & 63;
    $34 = $33 | 128;
    $35 = $34&255;
    $36 = ((($s)) + 2|0);
    HEAP8[$31>>0] = $35;
    $37 = $wc >>> 6;
    $38 = $37 & 63;
    $39 = $38 | 128;
    $40 = $39&255;
    $41 = ((($s)) + 3|0);
    HEAP8[$36>>0] = $40;
    $42 = $wc & 63;
    $43 = $42 | 128;
    $44 = $43&255;
    HEAP8[$41>>0] = $44;
    $$0 = 4;
    break;
   } else {
    $45 = (___errno_location()|0);
    HEAP32[$45>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _mbsrtowcs($ws,$src,$wn,$st) {
 $ws = $ws|0;
 $src = $src|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$0 = 0, $$02$ph = 0, $$0219 = 0, $$03 = 0, $$1 = 0, $$1$lcssa = 0, $$14$lcssa = 0, $$1415 = 0, $$2 = 0, $$2$lcssa = 0, $$25 = 0, $$25$lcssa = 0, $$3 = 0, $$36 = 0, $$4 = 0, $$434 = 0, $$47$ph = 0, $$4718 = 0, $$48 = 0, $$5 = 0;
 var $$5$lcssa = 0, $$6 = 0, $$6$lcssa = 0, $$7 = 0, $$8 = 0, $$833 = 0, $$in = 0, $$lcssa102 = 0, $$lcssa90 = 0, $$lcssa94 = 0, $$lcssa96 = 0, $$lcssa97 = 0, $$lcssa98 = 0, $$old1 = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $or$cond = 0, $s$0 = 0, $s$1$lcssa = 0, $s$10 = 0, $s$1035 = 0, $s$109 = 0, $s$116 = 0, $s$2 = 0, $s$2$lcssa = 0, $s$3 = 0, $s$4 = 0, $s$5$lcssa = 0, $s$5$ph = 0;
 var $s$520 = 0, $s$6 = 0, $s$6$lcssa = 0, $s$7 = 0, $s$7$lcssa = 0, $s$8 = 0, $s$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$src>>2]|0;
 $1 = ($st|0)==(0|0);
 if ($1) {
  label = 5;
 } else {
  $2 = HEAP32[$st>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   label = 5;
  } else {
   $4 = ($ws|0)==(0|0);
   if ($4) {
    $$36 = $wn;$c$2 = $2;$s$3 = $0;
    label = 16;
   } else {
    HEAP32[$st>>2] = 0;
    $$3 = $ws;$$7 = $wn;$c$4 = $2;$s$8 = $0;
    label = 37;
   }
  }
 }
 if ((label|0) == 5) {
  $5 = ($ws|0)==(0|0);
  if ($5) {
   $$03 = $wn;$s$0 = $0;
   label = 7;
  } else {
   $$02$ph = $ws;$$47$ph = $wn;$s$5$ph = $0;
   label = 6;
  }
 }
 L7: while(1) {
  if ((label|0) == 6) {
   label = 0;
   $6 = ($$47$ph|0)==(0);
   if ($6) {
    $s$5$lcssa = $s$5$ph;
    label = 26;
    break;
   } else {
    $$0219 = $$02$ph;$$4718 = $$47$ph;$s$520 = $s$5$ph;
   }
   while(1) {
    $63 = HEAP8[$s$520>>0]|0;
    $64 = $63&255;
    $65 = (($64) + -1)|0;
    $66 = ($65>>>0)<(127);
    do {
     if ($66) {
      $67 = $s$520;
      $68 = $67 & 3;
      $69 = ($68|0)==(0);
      $70 = ($$4718>>>0)>(4);
      $or$cond = $70 & $69;
      if ($or$cond) {
       $$1 = $$0219;$$5 = $$4718;$s$6 = $s$520;
       while(1) {
        $71 = HEAP32[$s$6>>2]|0;
        $72 = (($71) + -16843009)|0;
        $73 = $72 | $71;
        $74 = $73 & -2139062144;
        $75 = ($74|0)==(0);
        if (!($75)) {
         $$1$lcssa = $$1;$$5$lcssa = $$5;$$lcssa94 = $71;$s$6$lcssa = $s$6;
         label = 32;
         break;
        }
        $76 = ((($s$6)) + 1|0);
        $77 = $71 & 255;
        $78 = ((($$1)) + 4|0);
        HEAP32[$$1>>2] = $77;
        $79 = ((($s$6)) + 2|0);
        $80 = HEAP8[$76>>0]|0;
        $81 = $80&255;
        $82 = ((($$1)) + 8|0);
        HEAP32[$78>>2] = $81;
        $83 = ((($s$6)) + 3|0);
        $84 = HEAP8[$79>>0]|0;
        $85 = $84&255;
        $86 = ((($$1)) + 12|0);
        HEAP32[$82>>2] = $85;
        $87 = ((($s$6)) + 4|0);
        $88 = HEAP8[$83>>0]|0;
        $89 = $88&255;
        $90 = ((($$1)) + 16|0);
        HEAP32[$86>>2] = $89;
        $91 = (($$5) + -4)|0;
        $$old1 = ($91>>>0)>(4);
        if ($$old1) {
         $$1 = $90;$$5 = $91;$s$6 = $87;
        } else {
         $$lcssa96 = $87;$$lcssa97 = $90;$$lcssa98 = $91;
         label = 31;
         break;
        }
       }
       if ((label|0) == 31) {
        label = 0;
        $$pre$pre = HEAP8[$$lcssa96>>0]|0;
        $$2 = $$lcssa97;$$6 = $$lcssa98;$94 = $$pre$pre;$s$7 = $$lcssa96;
        break;
       }
       else if ((label|0) == 32) {
        label = 0;
        $92 = $$lcssa94&255;
        $$2 = $$1$lcssa;$$6 = $$5$lcssa;$94 = $92;$s$7 = $s$6$lcssa;
        break;
       }
      } else {
       $$2 = $$0219;$$6 = $$4718;$94 = $63;$s$7 = $s$520;
      }
     } else {
      $$2 = $$0219;$$6 = $$4718;$94 = $63;$s$7 = $s$520;
     }
    } while(0);
    $93 = $94&255;
    $95 = (($93) + -1)|0;
    $96 = ($95>>>0)<(127);
    if (!($96)) {
     $$2$lcssa = $$2;$$6$lcssa = $$6;$$lcssa102 = $93;$s$7$lcssa = $s$7;
     break;
    }
    $97 = ((($s$7)) + 1|0);
    $98 = ((($$2)) + 4|0);
    HEAP32[$$2>>2] = $93;
    $99 = (($$6) + -1)|0;
    $100 = ($99|0)==(0);
    if ($100) {
     $s$5$lcssa = $97;
     label = 26;
     break L7;
    } else {
     $$0219 = $98;$$4718 = $99;$s$520 = $97;
    }
   }
   $101 = (($$lcssa102) + -194)|0;
   $102 = ($101>>>0)>(50);
   if ($102) {
    $$434 = $$2$lcssa;$$833 = $$6$lcssa;$s$1035 = $s$7$lcssa;
    label = 48;
    break;
   }
   $103 = ((($s$7$lcssa)) + 1|0);
   $104 = (3164 + ($101<<2)|0);
   $105 = HEAP32[$104>>2]|0;
   $$3 = $$2$lcssa;$$7 = $$6$lcssa;$c$4 = $105;$s$8 = $103;
   label = 37;
   continue;
  }
  else if ((label|0) == 7) {
   label = 0;
   $7 = HEAP8[$s$0>>0]|0;
   $8 = $7&255;
   $9 = (($8) + -1)|0;
   $10 = ($9>>>0)<(127);
   if ($10) {
    $11 = $s$0;
    $12 = $11 & 3;
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = HEAP32[$s$0>>2]|0;
     $15 = (($14) + -16843009)|0;
     $16 = $15 | $14;
     $17 = $16 & -2139062144;
     $18 = ($17|0)==(0);
     if ($18) {
      $$1415 = $$03;$s$116 = $s$0;
      while(1) {
       $19 = ((($s$116)) + 4|0);
       $20 = (($$1415) + -4)|0;
       $21 = HEAP32[$19>>2]|0;
       $22 = (($21) + -16843009)|0;
       $23 = $22 | $21;
       $24 = $23 & -2139062144;
       $25 = ($24|0)==(0);
       if ($25) {
        $$1415 = $20;$s$116 = $19;
       } else {
        $$14$lcssa = $20;$$in = $21;$s$1$lcssa = $19;
        break;
       }
      }
     } else {
      $$14$lcssa = $$03;$$in = $14;$s$1$lcssa = $s$0;
     }
     $26 = $$in&255;
     $$25 = $$14$lcssa;$28 = $26;$s$2 = $s$1$lcssa;
    } else {
     $$25 = $$03;$28 = $7;$s$2 = $s$0;
    }
   } else {
    $$25 = $$03;$28 = $7;$s$2 = $s$0;
   }
   $27 = $28&255;
   $29 = (($27) + -1)|0;
   $30 = ($29>>>0)<(127);
   if ($30) {
    $31 = ((($s$2)) + 1|0);
    $32 = (($$25) + -1)|0;
    $$03 = $32;$s$0 = $31;
    label = 7;
    continue;
   } else {
    $$25$lcssa = $$25;$$lcssa90 = $27;$s$2$lcssa = $s$2;
   }
   $33 = (($$lcssa90) + -194)|0;
   $34 = ($33>>>0)>(50);
   if ($34) {
    $$434 = $ws;$$833 = $$25$lcssa;$s$1035 = $s$2$lcssa;
    label = 48;
    break;
   }
   $35 = ((($s$2$lcssa)) + 1|0);
   $36 = (3164 + ($33<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $$36 = $$25$lcssa;$c$2 = $37;$s$3 = $35;
   label = 16;
   continue;
  }
  else if ((label|0) == 16) {
   label = 0;
   $38 = HEAP8[$s$3>>0]|0;
   $39 = $38&255;
   $40 = $39 >>> 3;
   $41 = (($40) + -16)|0;
   $42 = $c$2 >> 26;
   $43 = (($40) + ($42))|0;
   $44 = $41 | $43;
   $45 = ($44>>>0)>(7);
   if ($45) {
    label = 17;
    break;
   }
   $47 = ((($s$3)) + 1|0);
   $48 = $c$2 & 33554432;
   $49 = ($48|0)==(0);
   if ($49) {
    $s$4 = $47;
   } else {
    $50 = HEAP8[$47>>0]|0;
    $51 = $50 & -64;
    $52 = ($51<<24>>24)==(-128);
    if (!($52)) {
     label = 20;
     break;
    }
    $54 = ((($s$3)) + 2|0);
    $55 = $c$2 & 524288;
    $56 = ($55|0)==(0);
    if ($56) {
     $s$4 = $54;
    } else {
     $57 = HEAP8[$54>>0]|0;
     $58 = $57 & -64;
     $59 = ($58<<24>>24)==(-128);
     if (!($59)) {
      label = 23;
      break;
     }
     $61 = ((($s$3)) + 3|0);
     $s$4 = $61;
    }
   }
   $62 = (($$36) + -1)|0;
   $$03 = $62;$s$0 = $s$4;
   label = 7;
   continue;
  }
  else if ((label|0) == 37) {
   label = 0;
   $106 = HEAP8[$s$8>>0]|0;
   $107 = $106&255;
   $108 = $107 >>> 3;
   $109 = (($108) + -16)|0;
   $110 = $c$4 >> 26;
   $111 = (($108) + ($110))|0;
   $112 = $109 | $111;
   $113 = ($112>>>0)>(7);
   if ($113) {
    label = 38;
    break;
   }
   $115 = $c$4 << 6;
   $116 = ((($s$8)) + 1|0);
   $117 = (($107) + -128)|0;
   $118 = $117 | $115;
   $119 = ($118|0)<(0);
   if ($119) {
    $120 = HEAP8[$116>>0]|0;
    $121 = $120&255;
    $122 = $121 & 192;
    $123 = ($122|0)==(128);
    if (!($123)) {
     label = 41;
     break;
    }
    $125 = $118 << 6;
    $126 = ((($s$8)) + 2|0);
    $127 = (($121) + -128)|0;
    $128 = $127 | $125;
    $129 = ($128|0)<(0);
    if ($129) {
     $130 = HEAP8[$126>>0]|0;
     $131 = $130&255;
     $132 = $131 & 192;
     $133 = ($132|0)==(128);
     if (!($133)) {
      label = 44;
      break;
     }
     $135 = $128 << 6;
     $136 = ((($s$8)) + 3|0);
     $137 = (($131) + -128)|0;
     $138 = $137 | $135;
     $c$5 = $138;$s$9 = $136;
    } else {
     $c$5 = $128;$s$9 = $126;
    }
   } else {
    $c$5 = $118;$s$9 = $116;
   }
   $139 = ((($$3)) + 4|0);
   HEAP32[$$3>>2] = $c$5;
   $140 = (($$7) + -1)|0;
   $$02$ph = $139;$$47$ph = $140;$s$5$ph = $s$9;
   label = 6;
   continue;
  }
 }
 if ((label|0) == 17) {
  $46 = ((($s$3)) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $46;
  label = 47;
 }
 else if ((label|0) == 20) {
  $53 = ((($s$3)) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $53;
  label = 47;
 }
 else if ((label|0) == 23) {
  $60 = ((($s$3)) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $60;
  label = 47;
 }
 else if ((label|0) == 26) {
  HEAP32[$src>>2] = $s$5$lcssa;
  $$0 = $wn;
 }
 else if ((label|0) == 38) {
  $114 = ((($s$8)) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $c$4;$s$10 = $114;
  label = 47;
 }
 else if ((label|0) == 41) {
  $124 = ((($s$8)) + -1|0);
  $$48 = $$3;$s$109 = $124;
  label = 52;
 }
 else if ((label|0) == 44) {
  $134 = ((($s$8)) + -1|0);
  $$48 = $$3;$s$109 = $134;
  label = 52;
 }
 if ((label|0) == 47) {
  $141 = ($c$6|0)==(0);
  if ($141) {
   $$434 = $$4;$$833 = $$8;$s$1035 = $s$10;
   label = 48;
  } else {
   $$48 = $$4;$s$109 = $s$10;
   label = 52;
  }
 }
 if ((label|0) == 48) {
  $142 = HEAP8[$s$1035>>0]|0;
  $143 = ($142<<24>>24)==(0);
  if ($143) {
   $144 = ($$434|0)==(0|0);
   if (!($144)) {
    HEAP32[$$434>>2] = 0;
    HEAP32[$src>>2] = 0;
   }
   $145 = (($wn) - ($$833))|0;
   $$0 = $145;
  } else {
   $$48 = $$434;$s$109 = $s$1035;
   label = 52;
  }
 }
 if ((label|0) == 52) {
  $146 = (___errno_location()|0);
  HEAP32[$146>>2] = 84;
  $147 = ($$48|0)==(0|0);
  if ($147) {
   $$0 = -1;
  } else {
   HEAP32[$src>>2] = $s$109;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$024 = 0, $$1 = 0, $$lcssa = 0, $$lcssa35 = 0, $$st = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$05 = 0, $c$1 = 0, $c$2 = 0, $dummy = 0, $dummy$wc = 0, $s$06 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dummy = sp;
 $0 = ($st|0)==(0|0);
 $$st = $0 ? 3512 : $st;
 $1 = HEAP32[$$st>>2]|0;
 $2 = ($src|0)==(0|0);
 L1: do {
  if ($2) {
   $3 = ($1|0)==(0);
   if ($3) {
    $$0 = 0;
   } else {
    label = 15;
   }
  } else {
   $4 = ($wc|0)==(0|0);
   $dummy$wc = $4 ? $dummy : $wc;
   $5 = ($n|0)==(0);
   if ($5) {
    $$0 = -2;
   } else {
    $6 = ($1|0)==(0);
    if ($6) {
     $7 = HEAP8[$src>>0]|0;
     $8 = $7&255;
     $9 = ($7<<24>>24)>(-1);
     if ($9) {
      HEAP32[$dummy$wc>>2] = $8;
      $10 = ($7<<24>>24)!=(0);
      $11 = $10&1;
      $$0 = $11;
      break;
     }
     $12 = (($8) + -194)|0;
     $13 = ($12>>>0)>(50);
     if ($13) {
      label = 15;
      break;
     }
     $14 = ((($src)) + 1|0);
     $15 = (3164 + ($12<<2)|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($n) + -1)|0;
     $18 = ($17|0)==(0);
     if ($18) {
      $c$2 = $16;
     } else {
      $$024 = $17;$c$05 = $16;$s$06 = $14;
      label = 9;
     }
    } else {
     $$024 = $n;$c$05 = $1;$s$06 = $src;
     label = 9;
    }
    L11: do {
     if ((label|0) == 9) {
      $19 = HEAP8[$s$06>>0]|0;
      $20 = $19&255;
      $21 = $20 >>> 3;
      $22 = (($21) + -16)|0;
      $23 = $c$05 >> 26;
      $24 = (($21) + ($23))|0;
      $25 = $22 | $24;
      $26 = ($25>>>0)>(7);
      if ($26) {
       label = 15;
       break L1;
      } else {
       $$1 = $$024;$30 = $19;$c$1 = $c$05;$s$1 = $s$06;
      }
      while(1) {
       $27 = $c$1 << 6;
       $28 = ((($s$1)) + 1|0);
       $29 = $30&255;
       $31 = (($29) + -128)|0;
       $32 = $31 | $27;
       $33 = (($$1) + -1)|0;
       $34 = ($32|0)<(0);
       if (!($34)) {
        $$lcssa = $32;$$lcssa35 = $33;
        break;
       }
       $36 = ($33|0)==(0);
       if ($36) {
        $c$2 = $32;
        break L11;
       }
       $37 = HEAP8[$28>>0]|0;
       $38 = $37 & -64;
       $39 = ($38<<24>>24)==(-128);
       if ($39) {
        $$1 = $33;$30 = $37;$c$1 = $32;$s$1 = $28;
       } else {
        label = 15;
        break L1;
       }
      }
      HEAP32[$$st>>2] = 0;
      HEAP32[$dummy$wc>>2] = $$lcssa;
      $35 = (($n) - ($$lcssa35))|0;
      $$0 = $35;
      break L1;
     }
    } while(0);
    HEAP32[$$st>>2] = $c$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 15) {
  HEAP32[$$st>>2] = 0;
  $40 = (___errno_location()|0);
  HEAP32[$40>>2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _mbtowc($wc,$src,$n) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dummy = 0, $dummy$wc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dummy = sp;
 $0 = ($src|0)==(0|0);
 L1: do {
  if ($0) {
   $$0 = 0;
  } else {
   $1 = ($n|0)==(0);
   do {
    if (!($1)) {
     $2 = ($wc|0)==(0|0);
     $dummy$wc = $2 ? $dummy : $wc;
     $3 = HEAP8[$src>>0]|0;
     $4 = $3&255;
     $5 = ($3<<24>>24)>(-1);
     if ($5) {
      HEAP32[$dummy$wc>>2] = $4;
      $6 = ($3<<24>>24)!=(0);
      $7 = $6&1;
      $$0 = $7;
      break L1;
     }
     $8 = (($4) + -194)|0;
     $9 = ($8>>>0)>(50);
     if (!($9)) {
      $10 = ((($src)) + 1|0);
      $11 = (3164 + ($8<<2)|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = ($n>>>0)<(4);
      if ($13) {
       $14 = ($n*6)|0;
       $15 = (($14) + -6)|0;
       $16 = -2147483648 >>> $15;
       $17 = $12 & $16;
       $18 = ($17|0)==(0);
       if (!($18)) {
        break;
       }
      }
      $19 = HEAP8[$10>>0]|0;
      $20 = $19&255;
      $21 = $20 >>> 3;
      $22 = (($21) + -16)|0;
      $23 = $12 >> 26;
      $24 = (($21) + ($23))|0;
      $25 = $22 | $24;
      $26 = ($25>>>0)>(7);
      if (!($26)) {
       $27 = $12 << 6;
       $28 = (($20) + -128)|0;
       $29 = $28 | $27;
       $30 = ($29|0)<(0);
       if (!($30)) {
        HEAP32[$dummy$wc>>2] = $29;
        $$0 = 2;
        break L1;
       }
       $31 = ((($src)) + 2|0);
       $32 = HEAP8[$31>>0]|0;
       $33 = $32&255;
       $34 = $33 & 192;
       $35 = ($34|0)==(128);
       if ($35) {
        $36 = $29 << 6;
        $37 = (($33) + -128)|0;
        $38 = $37 | $36;
        $39 = ($38|0)<(0);
        if (!($39)) {
         HEAP32[$dummy$wc>>2] = $38;
         $$0 = 3;
         break L1;
        }
        $40 = ((($src)) + 3|0);
        $41 = HEAP8[$40>>0]|0;
        $42 = $41&255;
        $43 = $42 & 192;
        $44 = ($43|0)==(128);
        if ($44) {
         $45 = $38 << 6;
         $46 = (($42) + -128)|0;
         $47 = $46 | $45;
         HEAP32[$dummy$wc>>2] = $47;
         $$0 = 4;
         break L1;
        }
       }
      }
     }
    }
   } while(0);
   $48 = (___errno_location()|0);
   HEAP32[$48>>2] = 84;
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _mbsnrtowcs($wcs,$src,$n,$wn,$st) {
 $wcs = $wcs|0;
 $src = $src|0;
 $n = $n|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$019 = 0, $$02$ = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$214 = 0, $$24 = 0, $$313 = 0, $$cast = 0, $$lcssa = 0, $$lcssa57 = 0, $$pr$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$020 = 0, $cnt$1 = 0, $cnt$215 = 0, $cnt$215$lcssa = 0, $cnt$3 = 0, $or$cond = 0, $or$cond$17 = 0, $s = 0, $wbuf = 0, $wcs$ = 0;
 var $wn$ = 0, $ws$010 = 0, $ws$021 = 0, $ws$021$lcssa56 = 0, $ws$1 = 0, $ws$216 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wbuf = sp + 8|0;
 $s = sp;
 $0 = HEAP32[$src>>2]|0;
 HEAP32[$s>>2] = $0;
 $1 = ($wcs|0)!=(0|0);
 $wn$ = $1 ? $wn : 256;
 $wcs$ = $1 ? $wcs : $wbuf;
 $$cast = $0;
 $2 = ($0|0)!=(0);
 $3 = ($wn$|0)!=(0);
 $or$cond$17 = $3 & $2;
 L1: do {
  if ($or$cond$17) {
   $$019 = $n;$$0218 = $wn$;$37 = $$cast;$cnt$020 = 0;$ws$021 = $wcs$;
   while(1) {
    $4 = $$019 >>> 2;
    $5 = ($4>>>0)>=($$0218>>>0);
    $6 = ($$019>>>0)>(131);
    $7 = $6 | $5;
    if (!($7)) {
     $$1 = $$019;$$24 = $$0218;$18 = $37;$cnt$1 = $cnt$020;$ws$010 = $ws$021;
     break L1;
    }
    $$02$ = $5 ? $$0218 : $4;
    $8 = (($$019) - ($$02$))|0;
    $9 = (_mbsrtowcs($ws$021,$s,$$02$,$st)|0);
    $10 = ($9|0)==(-1);
    if ($10) {
     $$lcssa57 = $8;$ws$021$lcssa56 = $ws$021;
     break;
    }
    $11 = ($ws$021|0)==($wbuf|0);
    $12 = (($ws$021) + ($9<<2)|0);
    $13 = $11 ? 0 : $9;
    $$13 = (($$0218) - ($13))|0;
    $ws$1 = $11 ? $ws$021 : $12;
    $14 = (($9) + ($cnt$020))|0;
    $15 = HEAP32[$s>>2]|0;
    $16 = ($15|0)!=(0|0);
    $17 = ($$0218|0)!=($13|0);
    $or$cond = $17 & $16;
    if ($or$cond) {
     $$019 = $8;$$0218 = $$13;$37 = $15;$cnt$020 = $14;$ws$021 = $ws$1;
    } else {
     $$1 = $8;$$24 = $$13;$18 = $15;$cnt$1 = $14;$ws$010 = $ws$1;
     break L1;
    }
   }
   $$pr$pre = HEAP32[$s>>2]|0;
   $$1 = $$lcssa57;$$24 = 0;$18 = $$pr$pre;$cnt$1 = -1;$ws$010 = $ws$021$lcssa56;
  } else {
   $$1 = $n;$$24 = $wn$;$18 = $$cast;$cnt$1 = 0;$ws$010 = $wcs$;
  }
 } while(0);
 $19 = ($18|0)==(0|0);
 L8: do {
  if ($19) {
   $cnt$3 = $cnt$1;
  } else {
   $20 = ($$24|0)!=(0);
   $21 = ($$1|0)!=(0);
   $22 = $20 & $21;
   if ($22) {
    $$214 = $$1;$$313 = $$24;$23 = $18;$cnt$215 = $cnt$1;$ws$216 = $ws$010;
    while(1) {
     $24 = (_mbrtowc($ws$216,$23,$$214,$st)|0);
     $25 = (($24) + 2)|0;
     $26 = ($25>>>0)<(3);
     if ($26) {
      $$lcssa = $24;$cnt$215$lcssa = $cnt$215;
      break;
     }
     $27 = HEAP32[$s>>2]|0;
     $28 = (($27) + ($24)|0);
     HEAP32[$s>>2] = $28;
     $29 = (($$214) - ($24))|0;
     $30 = ((($ws$216)) + 4|0);
     $31 = (($$313) + -1)|0;
     $32 = (($cnt$215) + 1)|0;
     $33 = ($31|0)!=(0);
     $34 = ($$214|0)!=($24|0);
     $35 = $33 & $34;
     if ($35) {
      $$214 = $29;$$313 = $31;$23 = $28;$cnt$215 = $32;$ws$216 = $30;
     } else {
      $cnt$3 = $32;
      break L8;
     }
    }
    switch ($$lcssa|0) {
    case -1:  {
     $cnt$3 = -1;
     break L8;
     break;
    }
    case 0:  {
     HEAP32[$s>>2] = 0;
     $cnt$3 = $cnt$215$lcssa;
     break L8;
     break;
    }
    default: {
     HEAP32[$st>>2] = 0;
     $cnt$3 = $cnt$215$lcssa;
     break L8;
    }
    }
   } else {
    $cnt$3 = $cnt$1;
   }
  }
 } while(0);
 if ($1) {
  $36 = HEAP32[$s>>2]|0;
  HEAP32[$src>>2] = $36;
 }
 STACKTOP = sp;return ($cnt$3|0);
}
function _mbrlen($s,$n,$st) {
 $s = $s|0;
 $n = $n|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)!=(0|0);
 $1 = $0 ? $st : 3516;
 $2 = (_mbrtowc(0,$s,$n,$1)|0);
 return ($2|0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _wcsnrtombs($dst,$wcs,$wn,$n,$st) {
 $dst = $dst|0;
 $wcs = $wcs|0;
 $wn = $wn|0;
 $n = $n|0;
 $st = $st|0;
 var $$019 = 0, $$02$$0 = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$214 = 0, $$24 = 0, $$313 = 0, $$cast = 0, $$lcssa = 0, $$lcssa57 = 0, $$pr$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $cnt$020 = 0, $cnt$1 = 0, $cnt$215 = 0, $cnt$215$lcssa = 0, $cnt$3 = 0, $dst$ = 0, $n$ = 0, $or$cond = 0;
 var $or$cond$17 = 0, $s$010 = 0, $s$021 = 0, $s$021$lcssa56 = 0, $s$1 = 0, $s$216 = 0, $ws = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 8|0;
 $ws = sp;
 $0 = HEAP32[$wcs>>2]|0;
 HEAP32[$ws>>2] = $0;
 $1 = ($dst|0)!=(0|0);
 $n$ = $1 ? $n : 256;
 $dst$ = $1 ? $dst : $buf;
 $$cast = $0;
 $2 = ($0|0)!=(0);
 $3 = ($n$|0)!=(0);
 $or$cond$17 = $3 & $2;
 L1: do {
  if ($or$cond$17) {
   $$019 = $wn;$$0218 = $n$;$38 = $$cast;$cnt$020 = 0;$s$021 = $dst$;
   while(1) {
    $4 = ($$019>>>0)>=($$0218>>>0);
    $5 = ($$019>>>0)>(32);
    $6 = $4 | $5;
    if (!($6)) {
     $$1 = $$019;$$24 = $$0218;$17 = $38;$cnt$1 = $cnt$020;$s$010 = $s$021;
     break L1;
    }
    $$02$$0 = $4 ? $$0218 : $$019;
    $7 = (($$019) - ($$02$$0))|0;
    $8 = (_wcsrtombs($s$021,$ws,$$02$$0,0)|0);
    $9 = ($8|0)==(-1);
    if ($9) {
     $$lcssa57 = $7;$s$021$lcssa56 = $s$021;
     break;
    }
    $10 = ($s$021|0)==($buf|0);
    $11 = (($s$021) + ($8)|0);
    $12 = $10 ? 0 : $8;
    $$13 = (($$0218) - ($12))|0;
    $s$1 = $10 ? $s$021 : $11;
    $13 = (($8) + ($cnt$020))|0;
    $14 = HEAP32[$ws>>2]|0;
    $15 = ($14|0)!=(0|0);
    $16 = ($$0218|0)!=($12|0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$019 = $7;$$0218 = $$13;$38 = $14;$cnt$020 = $13;$s$021 = $s$1;
    } else {
     $$1 = $7;$$24 = $$13;$17 = $14;$cnt$1 = $13;$s$010 = $s$1;
     break L1;
    }
   }
   $$pr$pre = HEAP32[$ws>>2]|0;
   $$1 = $$lcssa57;$$24 = 0;$17 = $$pr$pre;$cnt$1 = -1;$s$010 = $s$021$lcssa56;
  } else {
   $$1 = $wn;$$24 = $n$;$17 = $$cast;$cnt$1 = 0;$s$010 = $dst$;
  }
 } while(0);
 $18 = ($17|0)==(0|0);
 L8: do {
  if ($18) {
   $cnt$3 = $cnt$1;
  } else {
   $19 = ($$24|0)!=(0);
   $20 = ($$1|0)!=(0);
   $21 = $19 & $20;
   if ($21) {
    $$214 = $$1;$$313 = $$24;$23 = $17;$cnt$215 = $cnt$1;$s$216 = $s$010;
    while(1) {
     $22 = HEAP32[$23>>2]|0;
     $24 = (_wcrtomb($s$216,$22,0)|0);
     $25 = (($24) + 1)|0;
     $26 = ($25>>>0)<(2);
     if ($26) {
      $$lcssa = $24;$cnt$215$lcssa = $cnt$215;
      break;
     }
     $28 = HEAP32[$ws>>2]|0;
     $29 = ((($28)) + 4|0);
     HEAP32[$ws>>2] = $29;
     $30 = (($$214) + -1)|0;
     $31 = (($s$216) + ($24)|0);
     $32 = (($$313) - ($24))|0;
     $33 = (($cnt$215) + 1)|0;
     $34 = ($$313|0)!=($24|0);
     $35 = ($30|0)!=(0);
     $36 = $34 & $35;
     if ($36) {
      $$214 = $30;$$313 = $32;$23 = $29;$cnt$215 = $33;$s$216 = $31;
     } else {
      $cnt$3 = $33;
      break L8;
     }
    }
    $27 = ($$lcssa|0)==(0);
    if ($27) {
     HEAP32[$ws>>2] = 0;
     $cnt$3 = $cnt$215$lcssa;
    } else {
     $cnt$3 = -1;
    }
   } else {
    $cnt$3 = $cnt$1;
   }
  }
 } while(0);
 if ($1) {
  $37 = HEAP32[$ws>>2]|0;
  HEAP32[$wcs>>2] = $37;
 }
 STACKTOP = sp;return ($cnt$3|0);
}
function _wcsrtombs($s,$ws,$n,$st) {
 $s = $s|0;
 $ws = $ws|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$01$lcssa = 0, $$0129 = 0, $$0129$lcssa = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$223 = 0, $$223$lcssa = 0, $$24$lcssa = 0, $$2428 = 0, $$2428$lcssa = 0, $$3 = 0, $$35 = 0, $$422 = 0, $$422$lcssa = 0, $$422$lcssa82 = 0, $$5 = 0, $$pn = 0, $$pre = 0;
 var $$pre43 = 0, $$pre44 = 0, $$pre45 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $ws2$019 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp;
 $0 = ($s|0)==(0|0);
 L1: do {
  if ($0) {
   $2 = HEAP32[$ws>>2]|0;
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==(0);
   if ($4) {
    $$0 = 0;
   } else {
    $$0218 = 0;$5 = $3;$ws2$019 = $2;
    while(1) {
     $6 = ($5>>>0)>(127);
     if ($6) {
      $7 = (_wcrtomb($buf,$5,0)|0);
      $8 = ($7|0)==(-1);
      if ($8) {
       $$0 = -1;
       break L1;
      } else {
       $$pn = $7;
      }
     } else {
      $$pn = 1;
     }
     $$13 = (($$pn) + ($$0218))|0;
     $9 = ((($ws2$019)) + 4|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = ($10|0)==(0);
     if ($11) {
      $$0 = $$13;
      break;
     } else {
      $$0218 = $$13;$5 = $10;$ws2$019 = $9;
     }
    }
   }
  } else {
   $1 = ($n>>>0)>(3);
   L9: do {
    if ($1) {
     $$pre = HEAP32[$ws>>2]|0;
     $$0129 = $s;$$2428 = $n;$14 = $$pre;
     while(1) {
      $13 = HEAP32[$14>>2]|0;
      $15 = (($13) + -1)|0;
      $16 = ($15>>>0)>(126);
      if ($16) {
       $17 = ($13|0)==(0);
       if ($17) {
        $$0129$lcssa = $$0129;$$2428$lcssa = $$2428;
        break;
       }
       $19 = (_wcrtomb($$0129,$13,0)|0);
       $20 = ($19|0)==(-1);
       if ($20) {
        $$0 = -1;
        break L1;
       }
       $21 = (($$0129) + ($19)|0);
       $22 = (($$2428) - ($19))|0;
       $$1 = $21;$$35 = $22;$27 = $14;
      } else {
       $23 = $13&255;
       $24 = ((($$0129)) + 1|0);
       HEAP8[$$0129>>0] = $23;
       $25 = (($$2428) + -1)|0;
       $$pre43 = HEAP32[$ws>>2]|0;
       $$1 = $24;$$35 = $25;$27 = $$pre43;
      }
      $26 = ((($27)) + 4|0);
      HEAP32[$ws>>2] = $26;
      $28 = ($$35>>>0)>(3);
      if ($28) {
       $$0129 = $$1;$$2428 = $$35;$14 = $26;
      } else {
       $$01$lcssa = $$1;$$24$lcssa = $$35;
       break L9;
      }
     }
     HEAP8[$$0129$lcssa>>0] = 0;
     HEAP32[$ws>>2] = 0;
     $18 = (($n) - ($$2428$lcssa))|0;
     $$0 = $18;
     break L1;
    } else {
     $$01$lcssa = $s;$$24$lcssa = $n;
    }
   } while(0);
   $12 = ($$24$lcssa|0)==(0);
   if ($12) {
    $$0 = $n;
   } else {
    $$pre44 = HEAP32[$ws>>2]|0;
    $$223 = $$01$lcssa;$$422 = $$24$lcssa;$30 = $$pre44;
    while(1) {
     $29 = HEAP32[$30>>2]|0;
     $31 = (($29) + -1)|0;
     $32 = ($31>>>0)>(126);
     if ($32) {
      $33 = ($29|0)==(0);
      if ($33) {
       $$223$lcssa = $$223;$$422$lcssa = $$422;
       label = 19;
       break;
      }
      $35 = (_wcrtomb($buf,$29,0)|0);
      $36 = ($35|0)==(-1);
      if ($36) {
       $$0 = -1;
       break L1;
      }
      $37 = ($$422>>>0)<($35>>>0);
      if ($37) {
       $$422$lcssa82 = $$422;
       label = 22;
       break;
      }
      $39 = HEAP32[$30>>2]|0;
      (_wcrtomb($$223,$39,0)|0);
      $40 = (($$223) + ($35)|0);
      $41 = (($$422) - ($35))|0;
      $$3 = $40;$$5 = $41;$46 = $30;
     } else {
      $42 = $29&255;
      $43 = ((($$223)) + 1|0);
      HEAP8[$$223>>0] = $42;
      $44 = (($$422) + -1)|0;
      $$pre45 = HEAP32[$ws>>2]|0;
      $$3 = $43;$$5 = $44;$46 = $$pre45;
     }
     $45 = ((($46)) + 4|0);
     HEAP32[$ws>>2] = $45;
     $47 = ($$5|0)==(0);
     if ($47) {
      $$0 = $n;
      break L1;
     } else {
      $$223 = $$3;$$422 = $$5;$30 = $45;
     }
    }
    if ((label|0) == 19) {
     HEAP8[$$223$lcssa>>0] = 0;
     HEAP32[$ws>>2] = 0;
     $34 = (($n) - ($$422$lcssa))|0;
     $$0 = $34;
     break;
    }
    else if ((label|0) == 22) {
     $38 = (($n) - ($$422$lcssa82))|0;
     $$0 = $38;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  $4 = 1;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $2 = ($1|0)==(0);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _isxdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 if ($isdigit) {
  $4 = 1;
 } else {
  $0 = $c | 32;
  $1 = (($0) + -97)|0;
  $2 = ($1>>>0)<(6);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function ___ctype_tolower_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3520|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 $1 = (($c) + -9)|0;
 $2 = ($1>>>0)<(5);
 $3 = $0 | $2;
 $4 = $3&1;
 return ($4|0);
}
function ___ctype_toupper_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3524|0);
}
function ___ctype_b_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3528|0);
}
function _strerror($e) {
 $e = $e|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while(1) {
  $1 = (15727 + ($i$03)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3|0)==($e|0);
  if ($4) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $5 = (($i$03) + 1)|0;
  $6 = ($5|0)==(87);
  if ($6) {
   $i$12 = 87;$s$01 = 15815;
   label = 5;
   break;
  } else {
   $i$03 = $5;
  }
 }
 if ((label|0) == 2) {
  $0 = ($i$03$lcssa|0)==(0);
  if ($0) {
   $s$0$lcssa = 15815;
  } else {
   $i$12 = $i$03$lcssa;$s$01 = 15815;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $s$1 = $s$01;
   while(1) {
    $7 = HEAP8[$s$1>>0]|0;
    $8 = ($7<<24>>24)==(0);
    $9 = ((($s$1)) + 1|0);
    if ($8) {
     $$lcssa = $9;
     break;
    } else {
     $s$1 = $9;
    }
   }
   $10 = (($i$12) + -1)|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $s$0$lcssa = $$lcssa;
    break;
   } else {
    $i$12 = $10;$s$01 = $$lcssa;
    label = 5;
   }
  }
 }
 return ($s$0$lcssa|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[780]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 3532;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 60|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i$33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$210$$24$i = 0, $$210$$26$i = 0, $$210$i = 0, $$23$i = 0, $$25$i = 0, $$3$i = 0.0, $$311$i = 0;
 var $$33$i = 0, $$36$i = 0.0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41279$i = 0, $$43 = 0, $$5$lcssa$i = 0, $$590$i = 0, $$a$3$188$i = 0, $$a$3$i = 0, $$a$3189$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa162$i = 0, $$lcssa321 = 0, $$lcssa322 = 0, $$lcssa326 = 0, $$lcssa328 = 0, $$lcssa329 = 0, $$lcssa330 = 0;
 var $$lcssa331 = 0, $$lcssa332 = 0, $$lcssa334 = 0, $$lcssa344 = 0, $$lcssa347 = 0.0, $$lcssa349 = 0, $$lcssa52 = 0, $$neg55$i = 0, $$neg56$i = 0, $$p$$i = 0, $$p$0 = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr50$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi187$iZ2D = 0, $$pre182$i = 0;
 var $$pre185$i = 0, $$pre186$i = 0, $$pre190 = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0.0, $365 = 0, $366 = 0, $367 = 0, $368 = 0.0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0.0, $397 = 0.0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0.0, $413 = 0, $414 = 0, $415 = 0, $416 = 0.0, $417 = 0.0;
 var $418 = 0.0, $419 = 0.0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0.0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0.0, $602 = 0.0, $603 = 0, $604 = 0.0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1150$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3137$i = 0, $a$5$lcssa$i = 0, $a$5112$i = 0, $a$6$i = 0, $a$8$i = 0;
 var $a$9$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0143$i = 0, $carry3$0131$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$142$i = 0, $d$0$i = 0, $d$0144$i = 0, $d$1130$i = 0, $d$2$lcssa$i = 0;
 var $d$2111$i = 0, $d$4$i = 0, $d$585$i = 0, $d$678$i = 0, $d$789$i = 0, $e$0126$i = 0, $e$1$i = 0, $e$2107$i = 0, $e$4$i = 0, $e$5$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$196$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0;
 var $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $fl$0103 = 0, $fl$056 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa197 = 0, $i$0108 = 0, $i$0125$i = 0, $i$03$i = 0, $i$03$i$25 = 0;
 var $i$1$lcssa$i = 0, $i$1119 = 0, $i$1119$i = 0, $i$2106$i = 0, $i$295 = 0, $i$295$lcssa = 0, $i$3102$i = 0, $i$393 = 0, $isdigit = 0, $isdigit$2$i = 0, $isdigit$2$i$23 = 0, $isdigit$i = 0, $isdigit$i$27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$1$i = 0, $isdigittmp$1$i$22 = 0, $isdigittmp$i = 0;
 var $isdigittmp$i$26 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i$24 = 0, $isdigittmp9 = 0, $j$0$118$i = 0, $j$0$i = 0, $j$0120$i = 0, $j$1103$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1107 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0;
 var $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond18$i = 0, $or$cond20 = 0, $or$cond22$i = 0, $or$cond239 = 0, $or$cond3$not$i = 0, $or$cond31$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0;
 var $p$4195 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$9$i = 0, $re$172$i = 0, $round$071$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s1$0$i = 0;
 var $s7$082$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$073$i = 0, $s9$0$i = 0, $s9$186$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa327 = 0, $storemerge = 0, $storemerge$13 = 0, $storemerge$8102 = 0, $storemerge$854 = 0, $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0;
 var $w$1 = 0, $w$2 = 0, $w$32$i = 0, $wc = 0, $ws$0109 = 0, $ws$1120 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$096 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1149$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3136$i = 0, $z$4$i = 0, $z$7$$i = 0, $z$7$i = 0;
 var $z$7$i$lcssa = 0, $z$7$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 24|0;
 $e2$i = sp + 16|0;
 $buf$i = sp + 588|0;
 $ebuf0$i = sp + 576|0;
 $arg = sp;
 $buf = sp + 536|0;
 $wc = sp + 8|0;
 $mb = sp + 528|0;
 $0 = ($f|0)!=(0|0);
 $1 = ((($buf)) + 40|0);
 $2 = $1;
 $3 = ((($buf)) + 39|0);
 $4 = ((($wc)) + 4|0);
 $5 = ((($ebuf0$i)) + 12|0);
 $6 = ((($ebuf0$i)) + 11|0);
 $7 = $buf$i;
 $8 = $5;
 $9 = (($8) - ($7))|0;
 $10 = (-2 - ($7))|0;
 $11 = (($8) + 2)|0;
 $12 = ((($big$i)) + 288|0);
 $13 = ((($buf$i)) + 9|0);
 $14 = $13;
 $15 = ((($buf$i)) + 8|0);
 $22 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$22>>0]|0;
  $23 = ($21<<24>>24)==(0);
  if ($23) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 242;
   break;
  } else {
   $24 = $21;$26 = $22;
  }
  L9: while(1) {
   switch ($24<<24>>24) {
   case 37:  {
    $28 = $26;$z$096 = $26;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$lcssa52 = $26;$z$0$lcssa = $26;
    break L9;
    break;
   }
   default: {
   }
   }
   $25 = ((($26)) + 1|0);
   $$pre = HEAP8[$25>>0]|0;
   $24 = $$pre;$26 = $25;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $27 = ((($28)) + 1|0);
     $29 = HEAP8[$27>>0]|0;
     $30 = ($29<<24>>24)==(37);
     if (!($30)) {
      $$lcssa52 = $28;$z$0$lcssa = $z$096;
      break L12;
     }
     $31 = ((($z$096)) + 1|0);
     $32 = ((($28)) + 2|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = ($33<<24>>24)==(37);
     if ($34) {
      $28 = $32;$z$096 = $31;
      label = 9;
     } else {
      $$lcssa52 = $32;$z$0$lcssa = $31;
      break;
     }
    }
   }
  } while(0);
  $35 = $z$0$lcssa;
  $36 = $22;
  $37 = (($35) - ($36))|0;
  if ($0) {
   $38 = HEAP32[$f>>2]|0;
   $39 = $38 & 32;
   $40 = ($39|0)==(0);
   if ($40) {
    (___fwritex($22,$37,$f)|0);
   }
  }
  $41 = ($z$0$lcssa|0)==($22|0);
  if (!($41)) {
   $l10n$0$phi = $l10n$0;$22 = $$lcssa52;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$0$phi;
   continue;
  }
  $42 = ((($$lcssa52)) + 1|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43 << 24 >> 24;
  $isdigittmp = (($44) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $45 = ((($$lcssa52)) + 2|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = ($46<<24>>24)==(36);
   $48 = ((($$lcssa52)) + 3|0);
   $$43 = $47 ? $48 : $42;
   $$l10n$0 = $47 ? 1 : $l10n$0;
   $isdigittmp$ = $47 ? $isdigittmp : -1;
   $$pre190 = HEAP8[$$43>>0]|0;
   $50 = $$pre190;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$43;
  } else {
   $50 = $43;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $42;
  }
  $49 = $50 << 24 >> 24;
  $51 = $49 & -32;
  $52 = ($51|0)==(32);
  L25: do {
   if ($52) {
    $54 = $49;$59 = $50;$fl$0103 = 0;$storemerge$8102 = $storemerge;
    while(1) {
     $53 = (($54) + -32)|0;
     $55 = 1 << $53;
     $56 = $55 & 75913;
     $57 = ($56|0)==(0);
     if ($57) {
      $68 = $59;$fl$056 = $fl$0103;$storemerge$854 = $storemerge$8102;
      break L25;
     }
     $58 = $59 << 24 >> 24;
     $60 = (($58) + -32)|0;
     $61 = 1 << $60;
     $62 = $61 | $fl$0103;
     $63 = ((($storemerge$8102)) + 1|0);
     $64 = HEAP8[$63>>0]|0;
     $65 = $64 << 24 >> 24;
     $66 = $65 & -32;
     $67 = ($66|0)==(32);
     if ($67) {
      $54 = $65;$59 = $64;$fl$0103 = $62;$storemerge$8102 = $63;
     } else {
      $68 = $64;$fl$056 = $62;$storemerge$854 = $63;
      break;
     }
    }
   } else {
    $68 = $50;$fl$056 = 0;$storemerge$854 = $storemerge;
   }
  } while(0);
  $69 = ($68<<24>>24)==(42);
  do {
   if ($69) {
    $70 = ((($storemerge$854)) + 1|0);
    $71 = HEAP8[$70>>0]|0;
    $72 = $71 << 24 >> 24;
    $isdigittmp11 = (($72) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $73 = ((($storemerge$854)) + 2|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = ($74<<24>>24)==(36);
     if ($75) {
      $76 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$76>>2] = 10;
      $77 = HEAP8[$70>>0]|0;
      $78 = $77 << 24 >> 24;
      $79 = (($78) + -48)|0;
      $80 = (($nl_arg) + ($79<<3)|0);
      $81 = $80;
      $82 = $81;
      $83 = HEAP32[$82>>2]|0;
      $84 = (($81) + 4)|0;
      $85 = $84;
      $86 = HEAP32[$85>>2]|0;
      $87 = ((($storemerge$854)) + 3|0);
      $l10n$2 = 1;$storemerge$13 = $87;$w$0 = $83;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $88 = ($l10n$1|0)==(0);
     if (!($88)) {
      $$0 = -1;
      break L1;
     }
     if (!($0)) {
      $108 = $70;$fl$1 = $fl$056;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $89 = $arglist_current;
     $90 = ((0) + 4|0);
     $expanded4 = $90;
     $expanded = (($expanded4) - 1)|0;
     $91 = (($89) + ($expanded))|0;
     $92 = ((0) + 4|0);
     $expanded8 = $92;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $93 = $91 & $expanded6;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge$13 = $70;$w$0 = $95;
    }
    $96 = ($w$0|0)<(0);
    if ($96) {
     $97 = $fl$056 | 8192;
     $98 = (0 - ($w$0))|0;
     $108 = $storemerge$13;$fl$1 = $97;$l10n$3 = $l10n$2;$w$1 = $98;
    } else {
     $108 = $storemerge$13;$fl$1 = $fl$056;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $99 = $68 << 24 >> 24;
    $isdigittmp$1$i = (($99) + -48)|0;
    $isdigit$2$i = ($isdigittmp$1$i>>>0)<(10);
    if ($isdigit$2$i) {
     $103 = $storemerge$854;$i$03$i = 0;$isdigittmp4$i = $isdigittmp$1$i;
     while(1) {
      $100 = ($i$03$i*10)|0;
      $101 = (($100) + ($isdigittmp4$i))|0;
      $102 = ((($103)) + 1|0);
      $104 = HEAP8[$102>>0]|0;
      $105 = $104 << 24 >> 24;
      $isdigittmp$i = (($105) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $103 = $102;$i$03$i = $101;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa321 = $101;$$lcssa322 = $102;
       break;
      }
     }
     $106 = ($$lcssa321|0)<(0);
     if ($106) {
      $$0 = -1;
      break L1;
     } else {
      $108 = $$lcssa322;$fl$1 = $fl$056;$l10n$3 = $l10n$1;$w$1 = $$lcssa321;
     }
    } else {
     $108 = $storemerge$854;$fl$1 = $fl$056;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $107 = HEAP8[$108>>0]|0;
  $109 = ($107<<24>>24)==(46);
  L46: do {
   if ($109) {
    $110 = ((($108)) + 1|0);
    $111 = HEAP8[$110>>0]|0;
    $112 = ($111<<24>>24)==(42);
    if (!($112)) {
     $139 = $111 << 24 >> 24;
     $isdigittmp$1$i$22 = (($139) + -48)|0;
     $isdigit$2$i$23 = ($isdigittmp$1$i$22>>>0)<(10);
     if ($isdigit$2$i$23) {
      $143 = $110;$i$03$i$25 = 0;$isdigittmp4$i$24 = $isdigittmp$1$i$22;
     } else {
      $802 = $110;$p$0 = 0;
      break;
     }
     while(1) {
      $140 = ($i$03$i$25*10)|0;
      $141 = (($140) + ($isdigittmp4$i$24))|0;
      $142 = ((($143)) + 1|0);
      $144 = HEAP8[$142>>0]|0;
      $145 = $144 << 24 >> 24;
      $isdigittmp$i$26 = (($145) + -48)|0;
      $isdigit$i$27 = ($isdigittmp$i$26>>>0)<(10);
      if ($isdigit$i$27) {
       $143 = $142;$i$03$i$25 = $141;$isdigittmp4$i$24 = $isdigittmp$i$26;
      } else {
       $802 = $142;$p$0 = $141;
       break L46;
      }
     }
    }
    $113 = ((($108)) + 2|0);
    $114 = HEAP8[$113>>0]|0;
    $115 = $114 << 24 >> 24;
    $isdigittmp9 = (($115) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $116 = ((($108)) + 3|0);
     $117 = HEAP8[$116>>0]|0;
     $118 = ($117<<24>>24)==(36);
     if ($118) {
      $119 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$119>>2] = 10;
      $120 = HEAP8[$113>>0]|0;
      $121 = $120 << 24 >> 24;
      $122 = (($121) + -48)|0;
      $123 = (($nl_arg) + ($122<<3)|0);
      $124 = $123;
      $125 = $124;
      $126 = HEAP32[$125>>2]|0;
      $127 = (($124) + 4)|0;
      $128 = $127;
      $129 = HEAP32[$128>>2]|0;
      $130 = ((($108)) + 4|0);
      $802 = $130;$p$0 = $126;
      break;
     }
    }
    $131 = ($l10n$3|0)==(0);
    if (!($131)) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $132 = $arglist_current2;
     $133 = ((0) + 4|0);
     $expanded11 = $133;
     $expanded10 = (($expanded11) - 1)|0;
     $134 = (($132) + ($expanded10))|0;
     $135 = ((0) + 4|0);
     $expanded15 = $135;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $136 = $134 & $expanded13;
     $137 = $136;
     $138 = HEAP32[$137>>2]|0;
     $arglist_next3 = ((($137)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $802 = $113;$p$0 = $138;
    } else {
     $802 = $113;$p$0 = 0;
    }
   } else {
    $802 = $108;$p$0 = -1;
   }
  } while(0);
  $147 = $802;$st$0 = 0;
  while(1) {
   $146 = HEAP8[$147>>0]|0;
   $148 = $146 << 24 >> 24;
   $149 = (($148) + -65)|0;
   $150 = ($149>>>0)>(57);
   if ($150) {
    $$0 = -1;
    break L1;
   }
   $151 = ((($147)) + 1|0);
   $152 = ((18659 + (($st$0*58)|0)|0) + ($149)|0);
   $153 = HEAP8[$152>>0]|0;
   $154 = $153&255;
   $155 = (($154) + -1)|0;
   $156 = ($155>>>0)<(8);
   if ($156) {
    $147 = $151;$st$0 = $154;
   } else {
    $$lcssa326 = $147;$$lcssa328 = $151;$$lcssa329 = $153;$$lcssa330 = $154;$st$0$lcssa327 = $st$0;
    break;
   }
  }
  $157 = ($$lcssa329<<24>>24)==(0);
  if ($157) {
   $$0 = -1;
   break;
  }
  $158 = ($$lcssa329<<24>>24)==(19);
  $159 = ($argpos$0|0)>(-1);
  do {
   if ($158) {
    if ($159) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($159) {
     $160 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$160>>2] = $$lcssa330;
     $161 = (($nl_arg) + ($argpos$0<<3)|0);
     $162 = $161;
     $163 = $162;
     $164 = HEAP32[$163>>2]|0;
     $165 = (($162) + 4)|0;
     $166 = $165;
     $167 = HEAP32[$166>>2]|0;
     $168 = $arg;
     $169 = $168;
     HEAP32[$169>>2] = $164;
     $170 = (($168) + 4)|0;
     $171 = $170;
     HEAP32[$171>>2] = $167;
     label = 52;
     break;
    }
    if (!($0)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($arg,$$lcssa330,$ap);
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   if (!($0)) {
    $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
    continue;
   }
  }
  $172 = HEAP8[$$lcssa326>>0]|0;
  $173 = $172 << 24 >> 24;
  $174 = ($st$0$lcssa327|0)!=(0);
  $175 = $173 & 15;
  $176 = ($175|0)==(3);
  $or$cond15 = $174 & $176;
  $177 = $173 & -33;
  $t$0 = $or$cond15 ? $177 : $173;
  $178 = $fl$1 & 8192;
  $179 = ($178|0)==(0);
  $180 = $fl$1 & -65537;
  $fl$1$ = $179 ? $fl$1 : $180;
  L75: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0$lcssa327|0) {
    case 0:  {
     $187 = HEAP32[$arg>>2]|0;
     HEAP32[$187>>2] = $cnt$1;
     $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $188 = HEAP32[$arg>>2]|0;
     HEAP32[$188>>2] = $cnt$1;
     $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $189 = ($cnt$1|0)<(0);
     $190 = $189 << 31 >> 31;
     $191 = HEAP32[$arg>>2]|0;
     $192 = $191;
     $193 = $192;
     HEAP32[$193>>2] = $cnt$1;
     $194 = (($192) + 4)|0;
     $195 = $194;
     HEAP32[$195>>2] = $190;
     $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $196 = $cnt$1&65535;
     $197 = HEAP32[$arg>>2]|0;
     HEAP16[$197>>1] = $196;
     $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $198 = $cnt$1&255;
     $199 = HEAP32[$arg>>2]|0;
     HEAP8[$199>>0] = $198;
     $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $200 = HEAP32[$arg>>2]|0;
     HEAP32[$200>>2] = $cnt$1;
     $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $201 = ($cnt$1|0)<(0);
     $202 = $201 << 31 >> 31;
     $203 = HEAP32[$arg>>2]|0;
     $204 = $203;
     $205 = $204;
     HEAP32[$205>>2] = $cnt$1;
     $206 = (($204) + 4)|0;
     $207 = $206;
     HEAP32[$207>>2] = $202;
     $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $208 = ($p$0>>>0)>(8);
    $209 = $208 ? $p$0 : 8;
    $210 = $fl$1$ | 8;
    $fl$3 = $210;$p$1 = $209;$t$1 = 120;
    label = 64;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 64;
    break;
   }
   case 111:  {
    $248 = $arg;
    $249 = $248;
    $250 = HEAP32[$249>>2]|0;
    $251 = (($248) + 4)|0;
    $252 = $251;
    $253 = HEAP32[$252>>2]|0;
    $254 = ($250|0)==(0);
    $255 = ($253|0)==(0);
    $256 = $254 & $255;
    if ($256) {
     $$0$lcssa$i = $1;
    } else {
     $$03$i$33 = $1;$258 = $250;$262 = $253;
     while(1) {
      $257 = $258 & 7;
      $259 = $257 | 48;
      $260 = $259&255;
      $261 = ((($$03$i$33)) + -1|0);
      HEAP8[$261>>0] = $260;
      $263 = (_bitshift64Lshr(($258|0),($262|0),3)|0);
      $264 = tempRet0;
      $265 = ($263|0)==(0);
      $266 = ($264|0)==(0);
      $267 = $265 & $266;
      if ($267) {
       $$0$lcssa$i = $261;
       break;
      } else {
       $$03$i$33 = $261;$258 = $263;$262 = $264;
      }
     }
    }
    $268 = $fl$1$ & 8;
    $269 = ($268|0)==(0);
    if ($269) {
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 19139;
     label = 77;
    } else {
     $270 = $$0$lcssa$i;
     $271 = (($2) - ($270))|0;
     $272 = (($271) + 1)|0;
     $273 = ($p$0|0)<($272|0);
     $$p$0 = $273 ? $272 : $p$0;
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $$p$0;$pl$1 = 0;$prefix$1 = 19139;
     label = 77;
    }
    break;
   }
   case 105: case 100:  {
    $274 = $arg;
    $275 = $274;
    $276 = HEAP32[$275>>2]|0;
    $277 = (($274) + 4)|0;
    $278 = $277;
    $279 = HEAP32[$278>>2]|0;
    $280 = ($279|0)<(0);
    if ($280) {
     $281 = (_i64Subtract(0,0,($276|0),($279|0))|0);
     $282 = tempRet0;
     $283 = $arg;
     $284 = $283;
     HEAP32[$284>>2] = $281;
     $285 = (($283) + 4)|0;
     $286 = $285;
     HEAP32[$286>>2] = $282;
     $291 = $281;$292 = $282;$pl$0 = 1;$prefix$0 = 19139;
     label = 76;
     break L75;
    }
    $287 = $fl$1$ & 2048;
    $288 = ($287|0)==(0);
    if ($288) {
     $289 = $fl$1$ & 1;
     $290 = ($289|0)==(0);
     $$ = $290 ? 19139 : (19141);
     $291 = $276;$292 = $279;$pl$0 = $289;$prefix$0 = $$;
     label = 76;
    } else {
     $291 = $276;$292 = $279;$pl$0 = 1;$prefix$0 = (19140);
     label = 76;
    }
    break;
   }
   case 117:  {
    $181 = $arg;
    $182 = $181;
    $183 = HEAP32[$182>>2]|0;
    $184 = (($181) + 4)|0;
    $185 = $184;
    $186 = HEAP32[$185>>2]|0;
    $291 = $183;$292 = $186;$pl$0 = 0;$prefix$0 = 19139;
    label = 76;
    break;
   }
   case 99:  {
    $312 = $arg;
    $313 = $312;
    $314 = HEAP32[$313>>2]|0;
    $315 = (($312) + 4)|0;
    $316 = $315;
    $317 = HEAP32[$316>>2]|0;
    $318 = $314&255;
    HEAP8[$3>>0] = $318;
    $a$2 = $3;$fl$6 = $180;$p$5 = 1;$pl$2 = 0;$prefix$2 = 19139;$z$2 = $1;
    break;
   }
   case 109:  {
    $319 = (___errno_location()|0);
    $320 = HEAP32[$319>>2]|0;
    $321 = (_strerror($320)|0);
    $a$1 = $321;
    label = 82;
    break;
   }
   case 115:  {
    $322 = HEAP32[$arg>>2]|0;
    $323 = ($322|0)!=(0|0);
    $324 = $323 ? $322 : 19149;
    $a$1 = $324;
    label = 82;
    break;
   }
   case 67:  {
    $331 = $arg;
    $332 = $331;
    $333 = HEAP32[$332>>2]|0;
    $334 = (($331) + 4)|0;
    $335 = $334;
    $336 = HEAP32[$335>>2]|0;
    HEAP32[$wc>>2] = $333;
    HEAP32[$4>>2] = 0;
    HEAP32[$arg>>2] = $wc;
    $p$4195 = -1;
    label = 86;
    break;
   }
   case 83:  {
    $337 = ($p$0|0)==(0);
    if ($337) {
     _pad($f,32,$w$1,0,$fl$1$);
     $i$0$lcssa197 = 0;
     label = 98;
    } else {
     $p$4195 = $p$0;
     label = 86;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $364 = +HEAPF64[$arg>>3];
    HEAP32[$e2$i>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $364;$365 = HEAP32[tempDoublePtr>>2]|0;
    $366 = HEAP32[tempDoublePtr+4>>2]|0;
    $367 = ($366|0)<(0);
    if ($367) {
     $368 = -$364;
     $$07$i = $368;$pl$0$i = 1;$prefix$0$i = 19156;
    } else {
     $369 = $fl$1$ & 2048;
     $370 = ($369|0)==(0);
     if ($370) {
      $371 = $fl$1$ & 1;
      $372 = ($371|0)==(0);
      $$$i = $372 ? (19157) : (19162);
      $$07$i = $364;$pl$0$i = $371;$prefix$0$i = $$$i;
     } else {
      $$07$i = $364;$pl$0$i = 1;$prefix$0$i = (19159);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$373 = HEAP32[tempDoublePtr>>2]|0;
    $374 = HEAP32[tempDoublePtr+4>>2]|0;
    $375 = $374 & 2146435072;
    $376 = ($375>>>0)<(2146435072);
    $377 = (0)<(0);
    $378 = ($375|0)==(2146435072);
    $379 = $378 & $377;
    $380 = $376 | $379;
    do {
     if ($380) {
      $396 = (+_frexpl($$07$i,$e2$i));
      $397 = $396 * 2.0;
      $398 = $397 != 0.0;
      if ($398) {
       $399 = HEAP32[$e2$i>>2]|0;
       $400 = (($399) + -1)|0;
       HEAP32[$e2$i>>2] = $400;
      }
      $401 = $t$0 | 32;
      $402 = ($401|0)==(97);
      if ($402) {
       $403 = $t$0 & 32;
       $404 = ($403|0)==(0);
       $405 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $404 ? $prefix$0$i : $405;
       $406 = $pl$0$i | 2;
       $407 = ($p$0>>>0)>(11);
       $408 = (12 - ($p$0))|0;
       $409 = ($408|0)==(0);
       $410 = $407 | $409;
       do {
        if ($410) {
         $$1$i = $397;
        } else {
         $re$172$i = $408;$round$071$i = 8.0;
         while(1) {
          $411 = (($re$172$i) + -1)|0;
          $412 = $round$071$i * 16.0;
          $413 = ($411|0)==(0);
          if ($413) {
           $$lcssa347 = $412;
           break;
          } else {
           $re$172$i = $411;$round$071$i = $412;
          }
         }
         $414 = HEAP8[$prefix$0$$i>>0]|0;
         $415 = ($414<<24>>24)==(45);
         if ($415) {
          $416 = -$397;
          $417 = $416 - $$lcssa347;
          $418 = $$lcssa347 + $417;
          $419 = -$418;
          $$1$i = $419;
          break;
         } else {
          $420 = $397 + $$lcssa347;
          $421 = $420 - $$lcssa347;
          $$1$i = $421;
          break;
         }
        }
       } while(0);
       $422 = HEAP32[$e2$i>>2]|0;
       $423 = ($422|0)<(0);
       $424 = (0 - ($422))|0;
       $425 = $423 ? $424 : $422;
       $426 = ($425|0)<(0);
       $427 = $426 << 31 >> 31;
       $428 = (_fmt_u($425,$427,$5)|0);
       $429 = ($428|0)==($5|0);
       if ($429) {
        HEAP8[$6>>0] = 48;
        $estr$0$i = $6;
       } else {
        $estr$0$i = $428;
       }
       $430 = $422 >> 31;
       $431 = $430 & 2;
       $432 = (($431) + 43)|0;
       $433 = $432&255;
       $434 = ((($estr$0$i)) + -1|0);
       HEAP8[$434>>0] = $433;
       $435 = (($t$0) + 15)|0;
       $436 = $435&255;
       $437 = ((($estr$0$i)) + -2|0);
       HEAP8[$437>>0] = $436;
       $notrhs$i = ($p$0|0)<(1);
       $438 = $fl$1$ & 8;
       $439 = ($438|0)==(0);
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $440 = (~~(($$2$i)));
        $441 = (19123 + ($440)|0);
        $442 = HEAP8[$441>>0]|0;
        $443 = $442&255;
        $444 = $443 | $403;
        $445 = $444&255;
        $446 = ((($s$0$i)) + 1|0);
        HEAP8[$s$0$i>>0] = $445;
        $447 = (+($440|0));
        $448 = $$2$i - $447;
        $449 = $448 * 16.0;
        $450 = $446;
        $451 = (($450) - ($7))|0;
        $452 = ($451|0)==(1);
        do {
         if ($452) {
          $notlhs$i = $449 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $439 & $or$cond3$not$i;
          if ($or$cond$i) {
           $s$1$i = $446;
           break;
          }
          $453 = ((($s$0$i)) + 2|0);
          HEAP8[$446>>0] = 46;
          $s$1$i = $453;
         } else {
          $s$1$i = $446;
         }
        } while(0);
        $454 = $449 != 0.0;
        if ($454) {
         $$2$i = $449;$s$0$i = $s$1$i;
        } else {
         $s$1$i$lcssa = $s$1$i;
         break;
        }
       }
       $455 = ($p$0|0)!=(0);
       $$pre185$i = $s$1$i$lcssa;
       $456 = (($10) + ($$pre185$i))|0;
       $457 = ($456|0)<($p$0|0);
       $or$cond239 = $455 & $457;
       $458 = $437;
       $459 = (($11) + ($p$0))|0;
       $460 = (($459) - ($458))|0;
       $461 = $437;
       $462 = (($9) - ($461))|0;
       $463 = (($462) + ($$pre185$i))|0;
       $l$0$i = $or$cond239 ? $460 : $463;
       $464 = (($l$0$i) + ($406))|0;
       _pad($f,32,$w$1,$464,$fl$1$);
       $465 = HEAP32[$f>>2]|0;
       $466 = $465 & 32;
       $467 = ($466|0)==(0);
       if ($467) {
        (___fwritex($prefix$0$$i,$406,$f)|0);
       }
       $468 = $fl$1$ ^ 65536;
       _pad($f,48,$w$1,$464,$468);
       $469 = (($$pre185$i) - ($7))|0;
       $470 = HEAP32[$f>>2]|0;
       $471 = $470 & 32;
       $472 = ($471|0)==(0);
       if ($472) {
        (___fwritex($buf$i,$469,$f)|0);
       }
       $473 = $437;
       $474 = (($8) - ($473))|0;
       $sum = (($469) + ($474))|0;
       $475 = (($l$0$i) - ($sum))|0;
       _pad($f,48,$475,0,0);
       $476 = HEAP32[$f>>2]|0;
       $477 = $476 & 32;
       $478 = ($477|0)==(0);
       if ($478) {
        (___fwritex($437,$474,$f)|0);
       }
       $479 = $fl$1$ ^ 8192;
       _pad($f,32,$w$1,$464,$479);
       $480 = ($464|0)<($w$1|0);
       $w$$i = $480 ? $w$1 : $464;
       $$0$i = $w$$i;
       break;
      }
      $481 = ($p$0|0)<(0);
      $$p$i = $481 ? 6 : $p$0;
      if ($398) {
       $482 = $397 * 268435456.0;
       $483 = HEAP32[$e2$i>>2]|0;
       $484 = (($483) + -28)|0;
       HEAP32[$e2$i>>2] = $484;
       $$3$i = $482;$485 = $484;
      } else {
       $$pre182$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $397;$485 = $$pre182$i;
      }
      $486 = ($485|0)<(0);
      $$33$i = $486 ? $big$i : $12;
      $487 = $$33$i;
      $$4$i = $$3$i;$z$0$i = $$33$i;
      while(1) {
       $488 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $488;
       $489 = ((($z$0$i)) + 4|0);
       $490 = (+($488>>>0));
       $491 = $$4$i - $490;
       $492 = $491 * 1.0E+9;
       $493 = $492 != 0.0;
       if ($493) {
        $$4$i = $492;$z$0$i = $489;
       } else {
        $$lcssa331 = $489;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $494 = ($$pr$i|0)>(0);
      if ($494) {
       $495 = $$pr$i;$a$1150$i = $$33$i;$z$1149$i = $$lcssa331;
       while(1) {
        $496 = ($495|0)>(29);
        $497 = $496 ? 29 : $495;
        $d$0$142$i = ((($z$1149$i)) + -4|0);
        $498 = ($d$0$142$i>>>0)<($a$1150$i>>>0);
        do {
         if ($498) {
          $a$2$ph$i = $a$1150$i;
         } else {
          $carry$0143$i = 0;$d$0144$i = $d$0$142$i;
          while(1) {
           $499 = HEAP32[$d$0144$i>>2]|0;
           $500 = (_bitshift64Shl(($499|0),0,($497|0))|0);
           $501 = tempRet0;
           $502 = (_i64Add(($500|0),($501|0),($carry$0143$i|0),0)|0);
           $503 = tempRet0;
           $504 = (___uremdi3(($502|0),($503|0),1000000000,0)|0);
           $505 = tempRet0;
           HEAP32[$d$0144$i>>2] = $504;
           $506 = (___udivdi3(($502|0),($503|0),1000000000,0)|0);
           $507 = tempRet0;
           $d$0$i = ((($d$0144$i)) + -4|0);
           $508 = ($d$0$i>>>0)<($a$1150$i>>>0);
           if ($508) {
            $$lcssa332 = $506;
            break;
           } else {
            $carry$0143$i = $506;$d$0144$i = $d$0$i;
           }
          }
          $509 = ($$lcssa332|0)==(0);
          if ($509) {
           $a$2$ph$i = $a$1150$i;
           break;
          }
          $510 = ((($a$1150$i)) + -4|0);
          HEAP32[$510>>2] = $$lcssa332;
          $a$2$ph$i = $510;
         }
        } while(0);
        $z$2$i = $z$1149$i;
        while(1) {
         $511 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($511)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $512 = ((($z$2$i)) + -4|0);
         $513 = HEAP32[$512>>2]|0;
         $514 = ($513|0)==(0);
         if ($514) {
          $z$2$i = $512;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $515 = HEAP32[$e2$i>>2]|0;
        $516 = (($515) - ($497))|0;
        HEAP32[$e2$i>>2] = $516;
        $517 = ($516|0)>(0);
        if ($517) {
         $495 = $516;$a$1150$i = $a$2$ph$i;$z$1149$i = $z$2$i$lcssa;
        } else {
         $$pr50$i = $516;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr50$i = $$pr$i;$a$1$lcssa$i = $$33$i;$z$1$lcssa$i = $$lcssa331;
      }
      $518 = ($$pr50$i|0)<(0);
      if ($518) {
       $519 = (($$p$i) + 25)|0;
       $520 = (($519|0) / 9)&-1;
       $521 = (($520) + 1)|0;
       $522 = ($401|0)==(102);
       $524 = $$pr50$i;$a$3137$i = $a$1$lcssa$i;$z$3136$i = $z$1$lcssa$i;
       while(1) {
        $523 = (0 - ($524))|0;
        $525 = ($523|0)>(9);
        $526 = $525 ? 9 : $523;
        $527 = ($a$3137$i>>>0)<($z$3136$i>>>0);
        do {
         if ($527) {
          $531 = 1 << $526;
          $532 = (($531) + -1)|0;
          $533 = 1000000000 >>> $526;
          $carry3$0131$i = 0;$d$1130$i = $a$3137$i;
          while(1) {
           $534 = HEAP32[$d$1130$i>>2]|0;
           $535 = $534 & $532;
           $536 = $534 >>> $526;
           $537 = (($536) + ($carry3$0131$i))|0;
           HEAP32[$d$1130$i>>2] = $537;
           $538 = Math_imul($535, $533)|0;
           $539 = ((($d$1130$i)) + 4|0);
           $540 = ($539>>>0)<($z$3136$i>>>0);
           if ($540) {
            $carry3$0131$i = $538;$d$1130$i = $539;
           } else {
            $$lcssa334 = $538;
            break;
           }
          }
          $541 = HEAP32[$a$3137$i>>2]|0;
          $542 = ($541|0)==(0);
          $543 = ((($a$3137$i)) + 4|0);
          $$a$3$i = $542 ? $543 : $a$3137$i;
          $544 = ($$lcssa334|0)==(0);
          if ($544) {
           $$a$3189$i = $$a$3$i;$z$4$i = $z$3136$i;
           break;
          }
          $545 = ((($z$3136$i)) + 4|0);
          HEAP32[$z$3136$i>>2] = $$lcssa334;
          $$a$3189$i = $$a$3$i;$z$4$i = $545;
         } else {
          $528 = HEAP32[$a$3137$i>>2]|0;
          $529 = ($528|0)==(0);
          $530 = ((($a$3137$i)) + 4|0);
          $$a$3$188$i = $529 ? $530 : $a$3137$i;
          $$a$3189$i = $$a$3$188$i;$z$4$i = $z$3136$i;
         }
        } while(0);
        $546 = $522 ? $$33$i : $$a$3189$i;
        $547 = $z$4$i;
        $548 = $546;
        $549 = (($547) - ($548))|0;
        $550 = $549 >> 2;
        $551 = ($550|0)>($521|0);
        $552 = (($546) + ($521<<2)|0);
        $$z$4$i = $551 ? $552 : $z$4$i;
        $553 = HEAP32[$e2$i>>2]|0;
        $554 = (($553) + ($526))|0;
        HEAP32[$e2$i>>2] = $554;
        $555 = ($554|0)<(0);
        if ($555) {
         $524 = $554;$a$3137$i = $$a$3189$i;$z$3136$i = $$z$4$i;
        } else {
         $a$3$lcssa$i = $$a$3189$i;$z$3$lcssa$i = $$z$4$i;
         break;
        }
       }
      } else {
       $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
      }
      $556 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($556) {
        $557 = $a$3$lcssa$i;
        $558 = (($487) - ($557))|0;
        $559 = $558 >> 2;
        $560 = ($559*9)|0;
        $561 = HEAP32[$a$3$lcssa$i>>2]|0;
        $562 = ($561>>>0)<(10);
        if ($562) {
         $e$1$i = $560;
         break;
        } else {
         $e$0126$i = $560;$i$0125$i = 10;
        }
        while(1) {
         $563 = ($i$0125$i*10)|0;
         $564 = (($e$0126$i) + 1)|0;
         $565 = ($561>>>0)<($563>>>0);
         if ($565) {
          $e$1$i = $564;
          break;
         } else {
          $e$0126$i = $564;$i$0125$i = $563;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $566 = ($401|0)!=(102);
      $567 = $566 ? $e$1$i : 0;
      $568 = (($$p$i) - ($567))|0;
      $569 = ($401|0)==(103);
      $570 = ($$p$i|0)!=(0);
      $571 = $570 & $569;
      $$neg55$i = $571 << 31 >> 31;
      $572 = (($568) + ($$neg55$i))|0;
      $573 = $z$3$lcssa$i;
      $574 = (($573) - ($487))|0;
      $575 = $574 >> 2;
      $576 = ($575*9)|0;
      $577 = (($576) + -9)|0;
      $578 = ($572|0)<($577|0);
      if ($578) {
       $579 = ((($$33$i)) + 4|0);
       $580 = (($572) + 9216)|0;
       $581 = (($580|0) / 9)&-1;
       $582 = (($581) + -1024)|0;
       $583 = (($579) + ($582<<2)|0);
       $584 = (($580|0) % 9)&-1;
       $j$0$118$i = (($584) + 1)|0;
       $585 = ($j$0$118$i|0)<(9);
       if ($585) {
        $i$1119$i = 10;$j$0120$i = $j$0$118$i;
        while(1) {
         $586 = ($i$1119$i*10)|0;
         $j$0$i = (($j$0120$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $586;
          break;
         } else {
          $i$1119$i = $586;$j$0120$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $587 = HEAP32[$583>>2]|0;
       $588 = (($587>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $589 = ($588|0)==(0);
       $590 = ((($583)) + 4|0);
       $591 = ($590|0)==($z$3$lcssa$i|0);
       $or$cond18$i = $591 & $589;
       do {
        if ($or$cond18$i) {
         $a$8$i = $a$3$lcssa$i;$d$4$i = $583;$e$4$i = $e$1$i;
        } else {
         $592 = (($587>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $593 = $592 & 1;
         $594 = ($593|0)==(0);
         $$20$i = $594 ? 9007199254740992.0 : 9007199254740994.0;
         $595 = (($i$1$lcssa$i|0) / 2)&-1;
         $596 = ($588>>>0)<($595>>>0);
         if ($596) {
          $small$0$i = 0.5;
         } else {
          $597 = ($588|0)==($595|0);
          $or$cond22$i = $591 & $597;
          $$36$i = $or$cond22$i ? 1.0 : 1.5;
          $small$0$i = $$36$i;
         }
         $598 = ($pl$0$i|0)==(0);
         do {
          if ($598) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $599 = HEAP8[$prefix$0$i>>0]|0;
           $600 = ($599<<24>>24)==(45);
           if (!($600)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $601 = -$$20$i;
           $602 = -$small$0$i;
           $round6$1$i = $601;$small$1$i = $602;
          }
         } while(0);
         $603 = (($587) - ($588))|0;
         HEAP32[$583>>2] = $603;
         $604 = $round6$1$i + $small$1$i;
         $605 = $604 != $round6$1$i;
         if (!($605)) {
          $a$8$i = $a$3$lcssa$i;$d$4$i = $583;$e$4$i = $e$1$i;
          break;
         }
         $606 = (($603) + ($i$1$lcssa$i))|0;
         HEAP32[$583>>2] = $606;
         $607 = ($606>>>0)>(999999999);
         if ($607) {
          $a$5112$i = $a$3$lcssa$i;$d$2111$i = $583;
          while(1) {
           $608 = ((($d$2111$i)) + -4|0);
           HEAP32[$d$2111$i>>2] = 0;
           $609 = ($608>>>0)<($a$5112$i>>>0);
           if ($609) {
            $610 = ((($a$5112$i)) + -4|0);
            HEAP32[$610>>2] = 0;
            $a$6$i = $610;
           } else {
            $a$6$i = $a$5112$i;
           }
           $611 = HEAP32[$608>>2]|0;
           $612 = (($611) + 1)|0;
           HEAP32[$608>>2] = $612;
           $613 = ($612>>>0)>(999999999);
           if ($613) {
            $a$5112$i = $a$6$i;$d$2111$i = $608;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $608;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $583;
         }
         $614 = $a$5$lcssa$i;
         $615 = (($487) - ($614))|0;
         $616 = $615 >> 2;
         $617 = ($616*9)|0;
         $618 = HEAP32[$a$5$lcssa$i>>2]|0;
         $619 = ($618>>>0)<(10);
         if ($619) {
          $a$8$i = $a$5$lcssa$i;$d$4$i = $d$2$lcssa$i;$e$4$i = $617;
          break;
         } else {
          $e$2107$i = $617;$i$2106$i = 10;
         }
         while(1) {
          $620 = ($i$2106$i*10)|0;
          $621 = (($e$2107$i) + 1)|0;
          $622 = ($618>>>0)<($620>>>0);
          if ($622) {
           $a$8$i = $a$5$lcssa$i;$d$4$i = $d$2$lcssa$i;$e$4$i = $621;
           break;
          } else {
           $e$2107$i = $621;$i$2106$i = $620;
          }
         }
        }
       } while(0);
       $623 = ((($d$4$i)) + 4|0);
       $624 = ($z$3$lcssa$i>>>0)>($623>>>0);
       $$z$3$i = $624 ? $623 : $z$3$lcssa$i;
       $a$9$ph$i = $a$8$i;$e$5$ph$i = $e$4$i;$z$7$ph$i = $$z$3$i;
      } else {
       $a$9$ph$i = $a$3$lcssa$i;$e$5$ph$i = $e$1$i;$z$7$ph$i = $z$3$lcssa$i;
      }
      $625 = (0 - ($e$5$ph$i))|0;
      $z$7$i = $z$7$ph$i;
      while(1) {
       $626 = ($z$7$i>>>0)>($a$9$ph$i>>>0);
       if (!($626)) {
        $$lcssa162$i = 0;$z$7$i$lcssa = $z$7$i;
        break;
       }
       $627 = ((($z$7$i)) + -4|0);
       $628 = HEAP32[$627>>2]|0;
       $629 = ($628|0)==(0);
       if ($629) {
        $z$7$i = $627;
       } else {
        $$lcssa162$i = 1;$z$7$i$lcssa = $z$7$i;
        break;
       }
      }
      do {
       if ($569) {
        $630 = $570&1;
        $631 = $630 ^ 1;
        $$p$$i = (($631) + ($$p$i))|0;
        $632 = ($$p$$i|0)>($e$5$ph$i|0);
        $633 = ($e$5$ph$i|0)>(-5);
        $or$cond6$i = $632 & $633;
        if ($or$cond6$i) {
         $634 = (($t$0) + -1)|0;
         $$neg56$i = (($$p$$i) + -1)|0;
         $635 = (($$neg56$i) - ($e$5$ph$i))|0;
         $$013$i = $634;$$210$i = $635;
        } else {
         $636 = (($t$0) + -2)|0;
         $637 = (($$p$$i) + -1)|0;
         $$013$i = $636;$$210$i = $637;
        }
        $638 = $fl$1$ & 8;
        $639 = ($638|0)==(0);
        if (!($639)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi187$iZ2D = $638;
         break;
        }
        do {
         if ($$lcssa162$i) {
          $640 = ((($z$7$i$lcssa)) + -4|0);
          $641 = HEAP32[$640>>2]|0;
          $642 = ($641|0)==(0);
          if ($642) {
           $j$2$i = 9;
           break;
          }
          $643 = (($641>>>0) % 10)&-1;
          $644 = ($643|0)==(0);
          if ($644) {
           $i$3102$i = 10;$j$1103$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $645 = ($i$3102$i*10)|0;
           $646 = (($j$1103$i) + 1)|0;
           $647 = (($641>>>0) % ($645>>>0))&-1;
           $648 = ($647|0)==(0);
           if ($648) {
            $i$3102$i = $645;$j$1103$i = $646;
           } else {
            $j$2$i = $646;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $649 = $$013$i | 32;
        $650 = ($649|0)==(102);
        $651 = $z$7$i$lcssa;
        $652 = (($651) - ($487))|0;
        $653 = $652 >> 2;
        $654 = ($653*9)|0;
        $655 = (($654) + -9)|0;
        if ($650) {
         $656 = (($655) - ($j$2$i))|0;
         $657 = ($656|0)<(0);
         $$23$i = $657 ? 0 : $656;
         $658 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $658 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi187$iZ2D = 0;
         break;
        } else {
         $659 = (($655) + ($e$5$ph$i))|0;
         $660 = (($659) - ($j$2$i))|0;
         $661 = ($660|0)<(0);
         $$25$i = $661 ? 0 : $660;
         $662 = ($$210$i|0)<($$25$i|0);
         $$210$$26$i = $662 ? $$210$i : $$25$i;
         $$114$i = $$013$i;$$311$i = $$210$$26$i;$$pre$phi187$iZ2D = 0;
         break;
        }
       } else {
        $$pre186$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi187$iZ2D = $$pre186$i;
       }
      } while(0);
      $663 = $$311$i | $$pre$phi187$iZ2D;
      $664 = ($663|0)!=(0);
      $665 = $664&1;
      $666 = $$114$i | 32;
      $667 = ($666|0)==(102);
      if ($667) {
       $668 = ($e$5$ph$i|0)>(0);
       $669 = $668 ? $e$5$ph$i : 0;
       $$pn$i = $669;$estr$2$i = 0;
      } else {
       $670 = ($e$5$ph$i|0)<(0);
       $671 = $670 ? $625 : $e$5$ph$i;
       $672 = ($671|0)<(0);
       $673 = $672 << 31 >> 31;
       $674 = (_fmt_u($671,$673,$5)|0);
       $675 = $674;
       $676 = (($8) - ($675))|0;
       $677 = ($676|0)<(2);
       if ($677) {
        $estr$196$i = $674;
        while(1) {
         $678 = ((($estr$196$i)) + -1|0);
         HEAP8[$678>>0] = 48;
         $679 = $678;
         $680 = (($8) - ($679))|0;
         $681 = ($680|0)<(2);
         if ($681) {
          $estr$196$i = $678;
         } else {
          $estr$1$lcssa$i = $678;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $674;
       }
       $682 = $e$5$ph$i >> 31;
       $683 = $682 & 2;
       $684 = (($683) + 43)|0;
       $685 = $684&255;
       $686 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$686>>0] = $685;
       $687 = $$114$i&255;
       $688 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$688>>0] = $687;
       $689 = $688;
       $690 = (($8) - ($689))|0;
       $$pn$i = $690;$estr$2$i = $688;
      }
      $691 = (($pl$0$i) + 1)|0;
      $692 = (($691) + ($$311$i))|0;
      $l$1$i = (($692) + ($665))|0;
      $693 = (($l$1$i) + ($$pn$i))|0;
      _pad($f,32,$w$1,$693,$fl$1$);
      $694 = HEAP32[$f>>2]|0;
      $695 = $694 & 32;
      $696 = ($695|0)==(0);
      if ($696) {
       (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      }
      $697 = $fl$1$ ^ 65536;
      _pad($f,48,$w$1,$693,$697);
      do {
       if ($667) {
        $698 = ($a$9$ph$i>>>0)>($$33$i>>>0);
        $r$0$a$9$i = $698 ? $$33$i : $a$9$ph$i;
        $d$585$i = $r$0$a$9$i;
        while(1) {
         $699 = HEAP32[$d$585$i>>2]|0;
         $700 = (_fmt_u($699,0,$13)|0);
         $701 = ($d$585$i|0)==($r$0$a$9$i|0);
         do {
          if ($701) {
           $705 = ($700|0)==($13|0);
           if (!($705)) {
            $s7$1$i = $700;
            break;
           }
           HEAP8[$15>>0] = 48;
           $s7$1$i = $15;
          } else {
           $702 = ($700>>>0)>($buf$i>>>0);
           if ($702) {
            $s7$082$i = $700;
           } else {
            $s7$1$i = $700;
            break;
           }
           while(1) {
            $703 = ((($s7$082$i)) + -1|0);
            HEAP8[$703>>0] = 48;
            $704 = ($703>>>0)>($buf$i>>>0);
            if ($704) {
             $s7$082$i = $703;
            } else {
             $s7$1$i = $703;
             break;
            }
           }
          }
         } while(0);
         $706 = HEAP32[$f>>2]|0;
         $707 = $706 & 32;
         $708 = ($707|0)==(0);
         if ($708) {
          $709 = $s7$1$i;
          $710 = (($14) - ($709))|0;
          (___fwritex($s7$1$i,$710,$f)|0);
         }
         $711 = ((($d$585$i)) + 4|0);
         $712 = ($711>>>0)>($$33$i>>>0);
         if ($712) {
          $$lcssa344 = $711;
          break;
         } else {
          $d$585$i = $711;
         }
        }
        $713 = ($663|0)==(0);
        do {
         if (!($713)) {
          $714 = HEAP32[$f>>2]|0;
          $715 = $714 & 32;
          $716 = ($715|0)==(0);
          if (!($716)) {
           break;
          }
          (___fwritex(19191,1,$f)|0);
         }
        } while(0);
        $717 = ($$lcssa344>>>0)<($z$7$i$lcssa>>>0);
        $718 = ($$311$i|0)>(0);
        $719 = $718 & $717;
        if ($719) {
         $$41279$i = $$311$i;$d$678$i = $$lcssa344;
         while(1) {
          $720 = HEAP32[$d$678$i>>2]|0;
          $721 = (_fmt_u($720,0,$13)|0);
          $722 = ($721>>>0)>($buf$i>>>0);
          if ($722) {
           $s8$073$i = $721;
           while(1) {
            $723 = ((($s8$073$i)) + -1|0);
            HEAP8[$723>>0] = 48;
            $724 = ($723>>>0)>($buf$i>>>0);
            if ($724) {
             $s8$073$i = $723;
            } else {
             $s8$0$lcssa$i = $723;
             break;
            }
           }
          } else {
           $s8$0$lcssa$i = $721;
          }
          $725 = HEAP32[$f>>2]|0;
          $726 = $725 & 32;
          $727 = ($726|0)==(0);
          if ($727) {
           $728 = ($$41279$i|0)>(9);
           $729 = $728 ? 9 : $$41279$i;
           (___fwritex($s8$0$lcssa$i,$729,$f)|0);
          }
          $730 = ((($d$678$i)) + 4|0);
          $731 = (($$41279$i) + -9)|0;
          $732 = ($730>>>0)<($z$7$i$lcssa>>>0);
          $733 = ($$41279$i|0)>(9);
          $734 = $733 & $732;
          if ($734) {
           $$41279$i = $731;$d$678$i = $730;
          } else {
           $$412$lcssa$i = $731;
           break;
          }
         }
        } else {
         $$412$lcssa$i = $$311$i;
        }
        $735 = (($$412$lcssa$i) + 9)|0;
        _pad($f,48,$735,9,0);
       } else {
        $736 = ((($a$9$ph$i)) + 4|0);
        $z$7$$i = $$lcssa162$i ? $z$7$i$lcssa : $736;
        $737 = ($$311$i|0)>(-1);
        if ($737) {
         $738 = ($$pre$phi187$iZ2D|0)==(0);
         $$590$i = $$311$i;$d$789$i = $a$9$ph$i;
         while(1) {
          $739 = HEAP32[$d$789$i>>2]|0;
          $740 = (_fmt_u($739,0,$13)|0);
          $741 = ($740|0)==($13|0);
          if ($741) {
           HEAP8[$15>>0] = 48;
           $s9$0$i = $15;
          } else {
           $s9$0$i = $740;
          }
          $742 = ($d$789$i|0)==($a$9$ph$i|0);
          do {
           if ($742) {
            $746 = ((($s9$0$i)) + 1|0);
            $747 = HEAP32[$f>>2]|0;
            $748 = $747 & 32;
            $749 = ($748|0)==(0);
            if ($749) {
             (___fwritex($s9$0$i,1,$f)|0);
            }
            $750 = ($$590$i|0)<(1);
            $or$cond31$i = $738 & $750;
            if ($or$cond31$i) {
             $s9$2$i = $746;
             break;
            }
            $751 = HEAP32[$f>>2]|0;
            $752 = $751 & 32;
            $753 = ($752|0)==(0);
            if (!($753)) {
             $s9$2$i = $746;
             break;
            }
            (___fwritex(19191,1,$f)|0);
            $s9$2$i = $746;
           } else {
            $743 = ($s9$0$i>>>0)>($buf$i>>>0);
            if ($743) {
             $s9$186$i = $s9$0$i;
            } else {
             $s9$2$i = $s9$0$i;
             break;
            }
            while(1) {
             $744 = ((($s9$186$i)) + -1|0);
             HEAP8[$744>>0] = 48;
             $745 = ($744>>>0)>($buf$i>>>0);
             if ($745) {
              $s9$186$i = $744;
             } else {
              $s9$2$i = $744;
              break;
             }
            }
           }
          } while(0);
          $754 = $s9$2$i;
          $755 = (($14) - ($754))|0;
          $756 = HEAP32[$f>>2]|0;
          $757 = $756 & 32;
          $758 = ($757|0)==(0);
          if ($758) {
           $759 = ($$590$i|0)>($755|0);
           $760 = $759 ? $755 : $$590$i;
           (___fwritex($s9$2$i,$760,$f)|0);
          }
          $761 = (($$590$i) - ($755))|0;
          $762 = ((($d$789$i)) + 4|0);
          $763 = ($762>>>0)<($z$7$$i>>>0);
          $764 = ($761|0)>(-1);
          $765 = $763 & $764;
          if ($765) {
           $$590$i = $761;$d$789$i = $762;
          } else {
           $$5$lcssa$i = $761;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$311$i;
        }
        $766 = (($$5$lcssa$i) + 18)|0;
        _pad($f,48,$766,18,0);
        $767 = HEAP32[$f>>2]|0;
        $768 = $767 & 32;
        $769 = ($768|0)==(0);
        if (!($769)) {
         break;
        }
        $770 = $estr$2$i;
        $771 = (($8) - ($770))|0;
        (___fwritex($estr$2$i,$771,$f)|0);
       }
      } while(0);
      $772 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$693,$772);
      $773 = ($693|0)<($w$1|0);
      $w$32$i = $773 ? $w$1 : $693;
      $$0$i = $w$32$i;
     } else {
      $381 = $t$0 & 32;
      $382 = ($381|0)!=(0);
      $383 = $382 ? 19175 : 19179;
      $384 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $385 = $382 ? 19183 : 19187;
      $pl$1$i = $384 ? 0 : $pl$0$i;
      $s1$0$i = $384 ? $385 : $383;
      $386 = (($pl$1$i) + 3)|0;
      _pad($f,32,$w$1,$386,$180);
      $387 = HEAP32[$f>>2]|0;
      $388 = $387 & 32;
      $389 = ($388|0)==(0);
      if ($389) {
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       $$pre$i = HEAP32[$f>>2]|0;
       $391 = $$pre$i;
      } else {
       $391 = $387;
      }
      $390 = $391 & 32;
      $392 = ($390|0)==(0);
      if ($392) {
       (___fwritex($s1$0$i,3,$f)|0);
      }
      $393 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$386,$393);
      $394 = ($386|0)<($w$1|0);
      $395 = $394 ? $w$1 : $386;
      $$0$i = $395;
     }
    } while(0);
    $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $$0$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $a$2 = $22;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 19139;$z$2 = $1;
   }
   }
  } while(0);
  L308: do {
   if ((label|0) == 64) {
    label = 0;
    $211 = $arg;
    $212 = $211;
    $213 = HEAP32[$212>>2]|0;
    $214 = (($211) + 4)|0;
    $215 = $214;
    $216 = HEAP32[$215>>2]|0;
    $217 = $t$1 & 32;
    $218 = ($213|0)==(0);
    $219 = ($216|0)==(0);
    $220 = $218 & $219;
    if ($220) {
     $a$0 = $1;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 19139;
     label = 77;
    } else {
     $$012$i = $1;$222 = $213;$229 = $216;
     while(1) {
      $221 = $222 & 15;
      $223 = (19123 + ($221)|0);
      $224 = HEAP8[$223>>0]|0;
      $225 = $224&255;
      $226 = $225 | $217;
      $227 = $226&255;
      $228 = ((($$012$i)) + -1|0);
      HEAP8[$228>>0] = $227;
      $230 = (_bitshift64Lshr(($222|0),($229|0),4)|0);
      $231 = tempRet0;
      $232 = ($230|0)==(0);
      $233 = ($231|0)==(0);
      $234 = $232 & $233;
      if ($234) {
       $$lcssa349 = $228;
       break;
      } else {
       $$012$i = $228;$222 = $230;$229 = $231;
      }
     }
     $235 = $arg;
     $236 = $235;
     $237 = HEAP32[$236>>2]|0;
     $238 = (($235) + 4)|0;
     $239 = $238;
     $240 = HEAP32[$239>>2]|0;
     $241 = ($237|0)==(0);
     $242 = ($240|0)==(0);
     $243 = $241 & $242;
     $244 = $fl$3 & 8;
     $245 = ($244|0)==(0);
     $or$cond17 = $245 | $243;
     if ($or$cond17) {
      $a$0 = $$lcssa349;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 19139;
      label = 77;
     } else {
      $246 = $t$1 >> 4;
      $247 = (19139 + ($246)|0);
      $a$0 = $$lcssa349;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $247;
      label = 77;
     }
    }
   }
   else if ((label|0) == 76) {
    label = 0;
    $293 = (_fmt_u($291,$292,$1)|0);
    $a$0 = $293;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 77;
   }
   else if ((label|0) == 82) {
    label = 0;
    $325 = (_memchr($a$1,0,$p$0)|0);
    $326 = ($325|0)==(0|0);
    $327 = $325;
    $328 = $a$1;
    $329 = (($327) - ($328))|0;
    $330 = (($a$1) + ($p$0)|0);
    $z$1 = $326 ? $330 : $325;
    $p$3 = $326 ? $p$0 : $329;
    $a$2 = $a$1;$fl$6 = $180;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 19139;$z$2 = $z$1;
   }
   else if ((label|0) == 86) {
    label = 0;
    $338 = HEAP32[$arg>>2]|0;
    $i$0108 = 0;$l$1107 = 0;$ws$0109 = $338;
    while(1) {
     $339 = HEAP32[$ws$0109>>2]|0;
     $340 = ($339|0)==(0);
     if ($340) {
      $i$0$lcssa = $i$0108;$l$2 = $l$1107;
      break;
     }
     $341 = (_wctomb($mb,$339)|0);
     $342 = ($341|0)<(0);
     $343 = (($p$4195) - ($i$0108))|0;
     $344 = ($341>>>0)>($343>>>0);
     $or$cond20 = $342 | $344;
     if ($or$cond20) {
      $i$0$lcssa = $i$0108;$l$2 = $341;
      break;
     }
     $345 = ((($ws$0109)) + 4|0);
     $346 = (($341) + ($i$0108))|0;
     $347 = ($p$4195>>>0)>($346>>>0);
     if ($347) {
      $i$0108 = $346;$l$1107 = $341;$ws$0109 = $345;
     } else {
      $i$0$lcssa = $346;$l$2 = $341;
      break;
     }
    }
    $348 = ($l$2|0)<(0);
    if ($348) {
     $$0 = -1;
     break L1;
    }
    _pad($f,32,$w$1,$i$0$lcssa,$fl$1$);
    $349 = ($i$0$lcssa|0)==(0);
    if ($349) {
     $i$0$lcssa197 = 0;
     label = 98;
    } else {
     $350 = HEAP32[$arg>>2]|0;
     $i$1119 = 0;$ws$1120 = $350;
     while(1) {
      $351 = HEAP32[$ws$1120>>2]|0;
      $352 = ($351|0)==(0);
      if ($352) {
       $i$0$lcssa197 = $i$0$lcssa;
       label = 98;
       break L308;
      }
      $353 = ((($ws$1120)) + 4|0);
      $354 = (_wctomb($mb,$351)|0);
      $355 = (($354) + ($i$1119))|0;
      $356 = ($355|0)>($i$0$lcssa|0);
      if ($356) {
       $i$0$lcssa197 = $i$0$lcssa;
       label = 98;
       break L308;
      }
      $357 = HEAP32[$f>>2]|0;
      $358 = $357 & 32;
      $359 = ($358|0)==(0);
      if ($359) {
       (___fwritex($mb,$354,$f)|0);
      }
      $360 = ($355>>>0)<($i$0$lcssa>>>0);
      if ($360) {
       $i$1119 = $355;$ws$1120 = $353;
      } else {
       $i$0$lcssa197 = $i$0$lcssa;
       label = 98;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 98) {
   label = 0;
   $361 = $fl$1$ ^ 8192;
   _pad($f,32,$w$1,$i$0$lcssa197,$361);
   $362 = ($w$1|0)>($i$0$lcssa197|0);
   $363 = $362 ? $w$1 : $i$0$lcssa197;
   $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $363;$l10n$0 = $l10n$3;
   continue;
  }
  if ((label|0) == 77) {
   label = 0;
   $294 = ($p$2|0)>(-1);
   $295 = $fl$4 & -65537;
   $$fl$4 = $294 ? $295 : $fl$4;
   $296 = $arg;
   $297 = $296;
   $298 = HEAP32[$297>>2]|0;
   $299 = (($296) + 4)|0;
   $300 = $299;
   $301 = HEAP32[$300>>2]|0;
   $302 = ($298|0)!=(0);
   $303 = ($301|0)!=(0);
   $304 = $302 | $303;
   $305 = ($p$2|0)!=(0);
   $or$cond = $305 | $304;
   if ($or$cond) {
    $306 = $a$0;
    $307 = (($2) - ($306))|0;
    $308 = $304&1;
    $309 = $308 ^ 1;
    $310 = (($309) + ($307))|0;
    $311 = ($p$2|0)>($310|0);
    $p$2$ = $311 ? $p$2 : $310;
    $a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   } else {
    $a$2 = $1;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   }
  }
  $774 = $z$2;
  $775 = $a$2;
  $776 = (($774) - ($775))|0;
  $777 = ($p$5|0)<($776|0);
  $$p$5 = $777 ? $776 : $p$5;
  $778 = (($pl$2) + ($$p$5))|0;
  $779 = ($w$1|0)<($778|0);
  $w$2 = $779 ? $778 : $w$1;
  _pad($f,32,$w$2,$778,$fl$6);
  $780 = HEAP32[$f>>2]|0;
  $781 = $780 & 32;
  $782 = ($781|0)==(0);
  if ($782) {
   (___fwritex($prefix$2,$pl$2,$f)|0);
  }
  $783 = $fl$6 ^ 65536;
  _pad($f,48,$w$2,$778,$783);
  _pad($f,48,$$p$5,$776,0);
  $784 = HEAP32[$f>>2]|0;
  $785 = $784 & 32;
  $786 = ($785|0)==(0);
  if ($786) {
   (___fwritex($a$2,$776,$f)|0);
  }
  $787 = $fl$6 ^ 8192;
  _pad($f,32,$w$2,$778,$787);
  $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 L343: do {
  if ((label|0) == 242) {
   $788 = ($f|0)==(0|0);
   if ($788) {
    $789 = ($l10n$0$lcssa|0)==(0);
    if ($789) {
     $$0 = 0;
    } else {
     $i$295 = 1;
     while(1) {
      $790 = (($nl_type) + ($i$295<<2)|0);
      $791 = HEAP32[$790>>2]|0;
      $792 = ($791|0)==(0);
      if ($792) {
       $i$295$lcssa = $i$295;
       break;
      }
      $794 = (($nl_arg) + ($i$295<<3)|0);
      _pop_arg($794,$791,$ap);
      $795 = (($i$295) + 1)|0;
      $796 = ($795|0)<(10);
      if ($796) {
       $i$295 = $795;
      } else {
       $$0 = 1;
       break L343;
      }
     }
     $793 = ($i$295$lcssa|0)<(10);
     if ($793) {
      $i$393 = $i$295$lcssa;
      while(1) {
       $799 = (($nl_type) + ($i$393<<2)|0);
       $800 = HEAP32[$799>>2]|0;
       $801 = ($800|0)==(0);
       $797 = (($i$393) + 1)|0;
       if (!($801)) {
        $$0 = -1;
        break L343;
       }
       $798 = ($797|0)<(10);
       if ($798) {
        $i$393 = $797;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $cnt$1$lcssa;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _cleanup($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___string_read($f,$buf,$len)|0);
 return ($0|0);
}
function _cleanup_410($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 if ($4) {
  $5 = ((($f)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  (FUNCTION_TABLE_iiii[$6 & 1023]($f,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = ((($f)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($f)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($f)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $10;
   $17 = $12;
   $18 = (($16) - ($17))|0;
   (FUNCTION_TABLE_iiii[$15 & 1023]($f,$18,1)|0);
  }
  $19 = ((($f)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$2>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _strtox($s,$p,$prec) {
 $s = $s|0;
 $p = $p|0;
 $prec = $prec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f)) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = ((($f)) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = ((($f)) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = ((($f)) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f,0);
 $4 = (+___floatscan($f,$prec,1));
 $5 = ((($f)) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = (($7) - ($8))|0;
 $10 = (($9) + ($6))|0;
 $11 = ($p|0)==(0|0);
 if (!($11)) {
  $12 = ($10|0)!=(0);
  $13 = (($s) + ($10)|0);
  $14 = $12 ? $13 : $s;
  HEAP32[$p>>2] = $14;
 }
 STACKTOP = sp;return (+$4);
}
function _strtox_456($s,$p,$base,$0,$1) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 HEAP32[$f>>2] = 0;
 $2 = ((($f)) + 4|0);
 HEAP32[$2>>2] = $s;
 $3 = ((($f)) + 44|0);
 HEAP32[$3>>2] = $s;
 $4 = ($s|0)<(0|0);
 $5 = ((($s)) + 2147483647|0);
 $$sink = $4 ? (-1) : $5;
 $6 = ((($f)) + 8|0);
 HEAP32[$6>>2] = $$sink;
 $7 = ((($f)) + 76|0);
 HEAP32[$7>>2] = -1;
 ___shlim($f,0);
 $8 = (___intscan($f,$base,1,$0,$1)|0);
 $9 = tempRet0;
 $10 = ($p|0)==(0|0);
 if (!($10)) {
  $11 = ((($f)) + 108|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = HEAP32[$6>>2]|0;
  $15 = (($13) + ($12))|0;
  $16 = (($15) - ($14))|0;
  $17 = (($s) + ($16)|0);
  HEAP32[$p>>2] = $17;
 }
 tempRet0 = ($9);
 STACKTOP = sp;return ($8|0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$lcssa22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$112 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $x$013 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = ((($1)) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $9 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $9 = $8;
 }
 $10 = ($9|0)==(45);
 switch ($9|0) {
 case 43: case 45:  {
  $11 = $10&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($12)) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $22 & $21;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = ((($25)) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  } else {
   $c$0 = $20;$neg$0 = $11;
  }
  break;
 }
 default: {
  $c$0 = $9;$neg$0 = 0;
 }
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $98 = -2147483648;$99 = 0;
  } else {
   $31 = HEAP32[$0>>2]|0;
   $32 = ((($31)) + -1|0);
   HEAP32[$0>>2] = $32;
   $98 = -2147483648;$99 = 0;
  }
 } else {
  $c$112 = $c$0;$x$013 = 0;
  while(1) {
   $33 = ($x$013*10)|0;
   $34 = (($c$112) + -48)|0;
   $35 = (($34) + ($33))|0;
   $36 = HEAP32[$0>>2]|0;
   $37 = HEAP32[$2>>2]|0;
   $38 = ($36>>>0)<($37>>>0);
   if ($38) {
    $39 = ((($36)) + 1|0);
    HEAP32[$0>>2] = $39;
    $40 = HEAP8[$36>>0]|0;
    $41 = $40&255;
    $c$1$be = $41;
   } else {
    $42 = (___shgetc($f)|0);
    $c$1$be = $42;
   }
   $43 = (($c$1$be) + -48)|0;
   $44 = ($43>>>0)<(10);
   $45 = ($35|0)<(214748364);
   $46 = $44 & $45;
   if ($46) {
    $c$112 = $c$1$be;$x$013 = $35;
   } else {
    $$lcssa22 = $35;$c$1$be$lcssa = $c$1$be;
    break;
   }
  }
  $47 = ($$lcssa22|0)<(0);
  $48 = $47 << 31 >> 31;
  $49 = (($c$1$be$lcssa) + -48)|0;
  $50 = ($49>>>0)<(10);
  if ($50) {
   $53 = $$lcssa22;$54 = $48;$c$27 = $c$1$be$lcssa;
   while(1) {
    $55 = (___muldi3(($53|0),($54|0),10,0)|0);
    $56 = tempRet0;
    $57 = ($c$27|0)<(0);
    $58 = $57 << 31 >> 31;
    $59 = (_i64Add(($c$27|0),($58|0),-48,-1)|0);
    $60 = tempRet0;
    $61 = (_i64Add(($59|0),($60|0),($55|0),($56|0))|0);
    $62 = tempRet0;
    $63 = HEAP32[$0>>2]|0;
    $64 = HEAP32[$2>>2]|0;
    $65 = ($63>>>0)<($64>>>0);
    if ($65) {
     $66 = ((($63)) + 1|0);
     HEAP32[$0>>2] = $66;
     $67 = HEAP8[$63>>0]|0;
     $68 = $67&255;
     $c$2$be = $68;
    } else {
     $69 = (___shgetc($f)|0);
     $c$2$be = $69;
    }
    $70 = (($c$2$be) + -48)|0;
    $71 = ($70>>>0)<(10);
    $72 = ($62|0)<(21474836);
    $73 = ($61>>>0)<(2061584302);
    $74 = ($62|0)==(21474836);
    $75 = $74 & $73;
    $76 = $72 | $75;
    $77 = $71 & $76;
    if ($77) {
     $53 = $61;$54 = $62;$c$27 = $c$2$be;
    } else {
     $92 = $61;$93 = $62;$c$2$lcssa = $c$2$be;
     break;
    }
   }
  } else {
   $92 = $$lcssa22;$93 = $48;$c$2$lcssa = $c$1$be$lcssa;
  }
  $51 = (($c$2$lcssa) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   while(1) {
    $78 = HEAP32[$0>>2]|0;
    $79 = HEAP32[$2>>2]|0;
    $80 = ($78>>>0)<($79>>>0);
    if ($80) {
     $81 = ((($78)) + 1|0);
     HEAP32[$0>>2] = $81;
     $82 = HEAP8[$78>>0]|0;
     $83 = $82&255;
     $c$3$be = $83;
    } else {
     $84 = (___shgetc($f)|0);
     $c$3$be = $84;
    }
    $85 = (($c$3$be) + -48)|0;
    $86 = ($85>>>0)<(10);
    if (!($86)) {
     break;
    }
   }
  }
  $87 = HEAP32[$2>>2]|0;
  $88 = ($87|0)==(0|0);
  if (!($88)) {
   $89 = HEAP32[$0>>2]|0;
   $90 = ((($89)) + -1|0);
   HEAP32[$0>>2] = $90;
  }
  $91 = ($neg$0|0)!=(0);
  $94 = (_i64Subtract(0,0,($92|0),($93|0))|0);
  $95 = tempRet0;
  $96 = $91 ? $94 : $92;
  $97 = $91 ? $95 : $93;
  $98 = $97;$99 = $96;
 }
 tempRet0 = ($98);
 return ($99|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 $5 = ($4>>>0)>($l>>>0);
 $l$ = $5 ? $l : $4;
 $$cast = $3;
 _memcpy(($$cast|0),($s|0),($l$|0))|0;
 $6 = HEAP32[$2>>2]|0;
 $7 = (($6) + ($l$)|0);
 HEAP32[$2>>2] = $7;
 return ($l|0);
}
function _pop_arg($arg,$type,$ap) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type>>>0)>(20);
 L1: do {
  if (!($0)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $1 = $arglist_current;
     $2 = ((0) + 4|0);
     $expanded28 = $2;
     $expanded = (($expanded28) - 1)|0;
     $3 = (($1) + ($expanded))|0;
     $4 = ((0) + 4|0);
     $expanded32 = $4;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $5 = $3 & $expanded30;
     $6 = $5;
     $7 = HEAP32[$6>>2]|0;
     $arglist_next = ((($6)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $7;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $8 = $arglist_current2;
     $9 = ((0) + 4|0);
     $expanded35 = $9;
     $expanded34 = (($expanded35) - 1)|0;
     $10 = (($8) + ($expanded34))|0;
     $11 = ((0) + 4|0);
     $expanded39 = $11;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $12 = $10 & $expanded37;
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $arglist_next3 = ((($13)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $15 = ($14|0)<(0);
     $16 = $15 << 31 >> 31;
     $17 = $arg;
     $18 = $17;
     HEAP32[$18>>2] = $14;
     $19 = (($17) + 4)|0;
     $20 = $19;
     HEAP32[$20>>2] = $16;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $21 = $arglist_current5;
     $22 = ((0) + 4|0);
     $expanded42 = $22;
     $expanded41 = (($expanded42) - 1)|0;
     $23 = (($21) + ($expanded41))|0;
     $24 = ((0) + 4|0);
     $expanded46 = $24;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $25 = $23 & $expanded44;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $arglist_next6 = ((($26)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $28 = $arg;
     $29 = $28;
     HEAP32[$29>>2] = $27;
     $30 = (($28) + 4)|0;
     $31 = $30;
     HEAP32[$31>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $32 = $arglist_current8;
     $33 = ((0) + 8|0);
     $expanded49 = $33;
     $expanded48 = (($expanded49) - 1)|0;
     $34 = (($32) + ($expanded48))|0;
     $35 = ((0) + 8|0);
     $expanded53 = $35;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $36 = $34 & $expanded51;
     $37 = $36;
     $38 = $37;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $arglist_next9 = ((($37)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $44 = $arg;
     $45 = $44;
     HEAP32[$45>>2] = $40;
     $46 = (($44) + 4)|0;
     $47 = $46;
     HEAP32[$47>>2] = $43;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $48 = $arglist_current11;
     $49 = ((0) + 4|0);
     $expanded56 = $49;
     $expanded55 = (($expanded56) - 1)|0;
     $50 = (($48) + ($expanded55))|0;
     $51 = ((0) + 4|0);
     $expanded60 = $51;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $52 = $50 & $expanded58;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $arglist_next12 = ((($53)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $55 = $54&65535;
     $56 = $55 << 16 >> 16;
     $57 = ($56|0)<(0);
     $58 = $57 << 31 >> 31;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $63 = $arglist_current14;
     $64 = ((0) + 4|0);
     $expanded63 = $64;
     $expanded62 = (($expanded63) - 1)|0;
     $65 = (($63) + ($expanded62))|0;
     $66 = ((0) + 4|0);
     $expanded67 = $66;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $67 = $65 & $expanded65;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $arglist_next15 = ((($68)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $$mask1 = $69 & 65535;
     $70 = $arg;
     $71 = $70;
     HEAP32[$71>>2] = $$mask1;
     $72 = (($70) + 4)|0;
     $73 = $72;
     HEAP32[$73>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $74 = $arglist_current17;
     $75 = ((0) + 4|0);
     $expanded70 = $75;
     $expanded69 = (($expanded70) - 1)|0;
     $76 = (($74) + ($expanded69))|0;
     $77 = ((0) + 4|0);
     $expanded74 = $77;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $78 = $76 & $expanded72;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $arglist_next18 = ((($79)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $81 = $80&255;
     $82 = $81 << 24 >> 24;
     $83 = ($82|0)<(0);
     $84 = $83 << 31 >> 31;
     $85 = $arg;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $89 = $arglist_current20;
     $90 = ((0) + 4|0);
     $expanded77 = $90;
     $expanded76 = (($expanded77) - 1)|0;
     $91 = (($89) + ($expanded76))|0;
     $92 = ((0) + 4|0);
     $expanded81 = $92;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $93 = $91 & $expanded79;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next21 = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $$mask = $95 & 255;
     $96 = $arg;
     $97 = $96;
     HEAP32[$97>>2] = $$mask;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $100 = $arglist_current23;
     $101 = ((0) + 8|0);
     $expanded84 = $101;
     $expanded83 = (($expanded84) - 1)|0;
     $102 = (($100) + ($expanded83))|0;
     $103 = ((0) + 8|0);
     $expanded88 = $103;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $104 = $102 & $expanded86;
     $105 = $104;
     $106 = +HEAPF64[$105>>3];
     $arglist_next24 = ((($105)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $106;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $107 = $arglist_current26;
     $108 = ((0) + 8|0);
     $expanded91 = $108;
     $expanded90 = (($expanded91) - 1)|0;
     $109 = (($107) + ($expanded90))|0;
     $110 = ((0) + 8|0);
     $expanded95 = $110;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $111 = $109 & $expanded93;
     $112 = $111;
     $113 = +HEAPF64[$112>>3];
     $arglist_next27 = ((($112)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next27;
     HEAPF64[$arg>>3] = $113;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa20 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $$05 = $s;$7 = $0;$8 = $1;
  while(1) {
   $9 = (___uremdi3(($7|0),($8|0),10,0)|0);
   $10 = tempRet0;
   $11 = $9 | 48;
   $12 = $11&255;
   $13 = ((($$05)) + -1|0);
   HEAP8[$13>>0] = $12;
   $14 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $15 = tempRet0;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $$05 = $13;$7 = $14;$8 = $15;
   } else {
    $$lcssa20 = $13;$28 = $14;$29 = $15;
    break;
   }
  }
  $$0$lcssa = $$lcssa20;$$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;$$01$lcssa$off0 = $0;
 }
 $21 = ($$01$lcssa$off0|0)==(0);
 if ($21) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$12 = $$0$lcssa;$y$03 = $$01$lcssa$off0;
  while(1) {
   $22 = (($y$03>>>0) % 10)&-1;
   $23 = $22 | 48;
   $24 = $23&255;
   $25 = ((($$12)) + -1|0);
   HEAP8[$25>>0] = $24;
   $26 = (($y$03>>>0) / 10)&-1;
   $27 = ($y$03>>>0)<(10);
   if ($27) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;$y$03 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _pad($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pad = sp;
 $0 = $fl & 73728;
 $1 = ($0|0)==(0);
 $2 = ($w|0)>($l|0);
 $or$cond = $2 & $1;
 do {
  if ($or$cond) {
   $3 = (($w) - ($l))|0;
   $4 = ($3>>>0)>(256);
   $5 = $4 ? 256 : $3;
   _memset(($pad|0),($c|0),($5|0))|0;
   $6 = ($3>>>0)>(255);
   $7 = HEAP32[$f>>2]|0;
   $8 = $7 & 32;
   $9 = ($8|0)==(0);
   if ($6) {
    $10 = (($w) - ($l))|0;
    $$02 = $3;$17 = $7;$18 = $9;
    while(1) {
     if ($18) {
      (___fwritex($pad,256,$f)|0);
      $$pre = HEAP32[$f>>2]|0;
      $14 = $$pre;
     } else {
      $14 = $17;
     }
     $11 = (($$02) + -256)|0;
     $12 = ($11>>>0)>(255);
     $13 = $14 & 32;
     $15 = ($13|0)==(0);
     if ($12) {
      $$02 = $11;$17 = $14;$18 = $15;
     } else {
      break;
     }
    }
    $16 = $10 & 255;
    if ($15) {
     $$0$lcssa6 = $16;
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3;
    } else {
     break;
    }
   }
   (___fwritex($pad,$$0$lcssa6,$f)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa141 = 0, $$lcssa142 = 0, $$lcssa144 = 0, $$lcssa147 = 0, $$lcssa149 = 0, $$lcssa151 = 0, $$lcssa153 = 0, $$lcssa155 = 0, $$lcssa157 = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$13 = 0, $$pre$i$16$i = 0, $$pre$i$i = 0, $$pre$phi$i$14Z2D = 0, $$pre$phi$i$17$iZ2D = 0, $$pre$phi$i$iZ2D = 0;
 var $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre71 = 0, $$pre9$i$i = 0, $$rsize$0$i = 0, $$rsize$4$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0;
 var $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0;
 var $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0;
 var $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0;
 var $1062 = 0, $1063 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0;
 var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0;
 var $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0;
 var $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0;
 var $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0;
 var $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0;
 var $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0;
 var $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0;
 var $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0;
 var $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0;
 var $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0;
 var $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0;
 var $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0;
 var $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0;
 var $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0;
 var $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0;
 var $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0;
 var $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0;
 var $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0;
 var $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0;
 var $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0;
 var $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0;
 var $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0;
 var $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0;
 var $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0;
 var $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0;
 var $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0;
 var $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0;
 var $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0;
 var $K12$0$i = 0, $K2$0$i$i = 0, $K8$0$i$i = 0, $R$1$i = 0, $R$1$i$9 = 0, $R$1$i$9$lcssa = 0, $R$1$i$i = 0, $R$1$i$i$lcssa = 0, $R$1$i$lcssa = 0, $R$3$i = 0, $R$3$i$11 = 0, $R$3$i$i = 0, $RP$1$i = 0, $RP$1$i$8 = 0, $RP$1$i$8$lcssa = 0, $RP$1$i$i = 0, $RP$1$i$i$lcssa = 0, $RP$1$i$lcssa = 0, $T$0$i = 0, $T$0$i$18$i = 0;
 var $T$0$i$18$i$lcssa = 0, $T$0$i$18$i$lcssa139 = 0, $T$0$i$i = 0, $T$0$i$i$lcssa = 0, $T$0$i$i$lcssa140 = 0, $T$0$i$lcssa = 0, $T$0$i$lcssa156 = 0, $br$2$ph$i = 0, $cond$i = 0, $cond$i$12 = 0, $cond$i$i = 0, $exitcond$i$i = 0, $i$01$i$i = 0, $idx$0$i = 0, $nb$0 = 0, $not$$i$20$i = 0, $not$$i$i = 0, $not$7$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0;
 var $or$cond$i$17 = 0, $or$cond1$i = 0, $or$cond1$i$16 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond2$i = 0, $or$cond49$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $p$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$5 = 0, $rsize$0$i$lcssa = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$412$i = 0, $rst$0$i = 0;
 var $rst$1$i = 0, $sizebits$0$$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$069$i = 0, $sp$069$i$lcssa = 0, $sp$168$i = 0, $sp$168$i$lcssa = 0, $ssize$0$i = 0, $ssize$2$ph$i = 0, $ssize$5$i = 0, $t$0$i = 0, $t$0$i$4 = 0, $t$2$i = 0, $t$4$ph$i = 0, $t$4$v$4$i = 0, $t$411$i = 0, $tbase$747$i = 0, $tsize$746$i = 0;
 var $v$0$i = 0, $v$0$i$6 = 0, $v$0$i$lcssa = 0, $v$1$i = 0, $v$3$i = 0, $v$4$lcssa$i = 0, $v$413$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[1708]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (6872 + ($13<<2)|0);
    $15 = ((($14)) + 8|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[1708] = $22;
     } else {
      $23 = HEAP32[(6848)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $31 = (($16) + ($28)|0);
    $32 = ((($31)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $33 | 1;
    HEAP32[$32>>2] = $34;
    $$0 = $17;
    return ($$0|0);
   }
   $35 = HEAP32[(6840)>>2]|0;
   $36 = ($4>>>0)>($35>>>0);
   if ($36) {
    $37 = ($7|0)==(0);
    if (!($37)) {
     $38 = $7 << $5;
     $39 = 2 << $5;
     $40 = (0 - ($39))|0;
     $41 = $39 | $40;
     $42 = $38 & $41;
     $43 = (0 - ($42))|0;
     $44 = $42 & $43;
     $45 = (($44) + -1)|0;
     $46 = $45 >>> 12;
     $47 = $46 & 16;
     $48 = $45 >>> $47;
     $49 = $48 >>> 5;
     $50 = $49 & 8;
     $51 = $50 | $47;
     $52 = $48 >>> $50;
     $53 = $52 >>> 2;
     $54 = $53 & 4;
     $55 = $51 | $54;
     $56 = $52 >>> $54;
     $57 = $56 >>> 1;
     $58 = $57 & 2;
     $59 = $55 | $58;
     $60 = $56 >>> $58;
     $61 = $60 >>> 1;
     $62 = $61 & 1;
     $63 = $59 | $62;
     $64 = $60 >>> $62;
     $65 = (($63) + ($64))|0;
     $66 = $65 << 1;
     $67 = (6872 + ($66<<2)|0);
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ($67|0)==($71|0);
     do {
      if ($72) {
       $73 = 1 << $65;
       $74 = $73 ^ -1;
       $75 = $6 & $74;
       HEAP32[1708] = $75;
       $89 = $35;
      } else {
       $76 = HEAP32[(6848)>>2]|0;
       $77 = ($71>>>0)<($76>>>0);
       if ($77) {
        _abort();
        // unreachable;
       }
       $78 = ((($71)) + 12|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = ($79|0)==($69|0);
       if ($80) {
        HEAP32[$78>>2] = $67;
        HEAP32[$68>>2] = $71;
        $$pre = HEAP32[(6840)>>2]|0;
        $89 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $81 = $65 << 3;
     $82 = (($81) - ($4))|0;
     $83 = $4 | 3;
     $84 = ((($69)) + 4|0);
     HEAP32[$84>>2] = $83;
     $85 = (($69) + ($4)|0);
     $86 = $82 | 1;
     $87 = ((($85)) + 4|0);
     HEAP32[$87>>2] = $86;
     $88 = (($85) + ($82)|0);
     HEAP32[$88>>2] = $82;
     $90 = ($89|0)==(0);
     if (!($90)) {
      $91 = HEAP32[(6852)>>2]|0;
      $92 = $89 >>> 3;
      $93 = $92 << 1;
      $94 = (6872 + ($93<<2)|0);
      $95 = HEAP32[1708]|0;
      $96 = 1 << $92;
      $97 = $95 & $96;
      $98 = ($97|0)==(0);
      if ($98) {
       $99 = $95 | $96;
       HEAP32[1708] = $99;
       $$pre71 = ((($94)) + 8|0);
       $$pre$phiZ2D = $$pre71;$F4$0 = $94;
      } else {
       $100 = ((($94)) + 8|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = HEAP32[(6848)>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $100;$F4$0 = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $91;
      $104 = ((($F4$0)) + 12|0);
      HEAP32[$104>>2] = $91;
      $105 = ((($91)) + 8|0);
      HEAP32[$105>>2] = $F4$0;
      $106 = ((($91)) + 12|0);
      HEAP32[$106>>2] = $94;
     }
     HEAP32[(6840)>>2] = $82;
     HEAP32[(6852)>>2] = $85;
     $$0 = $70;
     return ($$0|0);
    }
    $107 = HEAP32[(6836)>>2]|0;
    $108 = ($107|0)==(0);
    if ($108) {
     $nb$0 = $4;
    } else {
     $109 = (0 - ($107))|0;
     $110 = $107 & $109;
     $111 = (($110) + -1)|0;
     $112 = $111 >>> 12;
     $113 = $112 & 16;
     $114 = $111 >>> $113;
     $115 = $114 >>> 5;
     $116 = $115 & 8;
     $117 = $116 | $113;
     $118 = $114 >>> $116;
     $119 = $118 >>> 2;
     $120 = $119 & 4;
     $121 = $117 | $120;
     $122 = $118 >>> $120;
     $123 = $122 >>> 1;
     $124 = $123 & 2;
     $125 = $121 | $124;
     $126 = $122 >>> $124;
     $127 = $126 >>> 1;
     $128 = $127 & 1;
     $129 = $125 | $128;
     $130 = $126 >>> $128;
     $131 = (($129) + ($130))|0;
     $132 = (7136 + ($131<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ((($133)) + 4|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = $135 & -8;
     $137 = (($136) - ($4))|0;
     $rsize$0$i = $137;$t$0$i = $133;$v$0$i = $133;
     while(1) {
      $138 = ((($t$0$i)) + 16|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($139|0)==(0|0);
      if ($140) {
       $141 = ((($t$0$i)) + 20|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       if ($143) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $145 = $142;
       }
      } else {
       $145 = $139;
      }
      $144 = ((($145)) + 4|0);
      $146 = HEAP32[$144>>2]|0;
      $147 = $146 & -8;
      $148 = (($147) - ($4))|0;
      $149 = ($148>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $149 ? $148 : $rsize$0$i;
      $$v$0$i = $149 ? $145 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $145;$v$0$i = $$v$0$i;
     }
     $150 = HEAP32[(6848)>>2]|0;
     $151 = ($v$0$i$lcssa>>>0)<($150>>>0);
     if ($151) {
      _abort();
      // unreachable;
     }
     $152 = (($v$0$i$lcssa) + ($4)|0);
     $153 = ($v$0$i$lcssa>>>0)<($152>>>0);
     if (!($153)) {
      _abort();
      // unreachable;
     }
     $154 = ((($v$0$i$lcssa)) + 24|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = ((($v$0$i$lcssa)) + 12|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($v$0$i$lcssa|0);
     do {
      if ($158) {
       $168 = ((($v$0$i$lcssa)) + 20|0);
       $169 = HEAP32[$168>>2]|0;
       $170 = ($169|0)==(0|0);
       if ($170) {
        $171 = ((($v$0$i$lcssa)) + 16|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ($172|0)==(0|0);
        if ($173) {
         $R$3$i = 0;
         break;
        } else {
         $R$1$i = $172;$RP$1$i = $171;
        }
       } else {
        $R$1$i = $169;$RP$1$i = $168;
       }
       while(1) {
        $174 = ((($R$1$i)) + 20|0);
        $175 = HEAP32[$174>>2]|0;
        $176 = ($175|0)==(0|0);
        if (!($176)) {
         $R$1$i = $175;$RP$1$i = $174;
         continue;
        }
        $177 = ((($R$1$i)) + 16|0);
        $178 = HEAP32[$177>>2]|0;
        $179 = ($178|0)==(0|0);
        if ($179) {
         $R$1$i$lcssa = $R$1$i;$RP$1$i$lcssa = $RP$1$i;
         break;
        } else {
         $R$1$i = $178;$RP$1$i = $177;
        }
       }
       $180 = ($RP$1$i$lcssa>>>0)<($150>>>0);
       if ($180) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$1$i$lcssa>>2] = 0;
        $R$3$i = $R$1$i$lcssa;
        break;
       }
      } else {
       $159 = ((($v$0$i$lcssa)) + 8|0);
       $160 = HEAP32[$159>>2]|0;
       $161 = ($160>>>0)<($150>>>0);
       if ($161) {
        _abort();
        // unreachable;
       }
       $162 = ((($160)) + 12|0);
       $163 = HEAP32[$162>>2]|0;
       $164 = ($163|0)==($v$0$i$lcssa|0);
       if (!($164)) {
        _abort();
        // unreachable;
       }
       $165 = ((($157)) + 8|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = ($166|0)==($v$0$i$lcssa|0);
       if ($167) {
        HEAP32[$162>>2] = $157;
        HEAP32[$165>>2] = $160;
        $R$3$i = $157;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $181 = ($155|0)==(0|0);
     do {
      if (!($181)) {
       $182 = ((($v$0$i$lcssa)) + 28|0);
       $183 = HEAP32[$182>>2]|0;
       $184 = (7136 + ($183<<2)|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($v$0$i$lcssa|0)==($185|0);
       if ($186) {
        HEAP32[$184>>2] = $R$3$i;
        $cond$i = ($R$3$i|0)==(0|0);
        if ($cond$i) {
         $187 = 1 << $183;
         $188 = $187 ^ -1;
         $189 = HEAP32[(6836)>>2]|0;
         $190 = $189 & $188;
         HEAP32[(6836)>>2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[(6848)>>2]|0;
        $192 = ($155>>>0)<($191>>>0);
        if ($192) {
         _abort();
         // unreachable;
        }
        $193 = ((($155)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)==($v$0$i$lcssa|0);
        if ($195) {
         HEAP32[$193>>2] = $R$3$i;
        } else {
         $196 = ((($155)) + 20|0);
         HEAP32[$196>>2] = $R$3$i;
        }
        $197 = ($R$3$i|0)==(0|0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[(6848)>>2]|0;
       $199 = ($R$3$i>>>0)<($198>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($R$3$i)) + 24|0);
       HEAP32[$200>>2] = $155;
       $201 = ((($v$0$i$lcssa)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($202>>>0)<($198>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($R$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $R$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($v$0$i$lcssa)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(6848)>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($R$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $R$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i$lcssa) + ($4))|0;
      $216 = $215 | 3;
      $217 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($v$0$i$lcssa) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $4 | 3;
      $223 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $rsize$0$i$lcssa | 1;
      $225 = ((($152)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($152) + ($rsize$0$i$lcssa)|0);
      HEAP32[$226>>2] = $rsize$0$i$lcssa;
      $227 = HEAP32[(6840)>>2]|0;
      $228 = ($227|0)==(0);
      if (!($228)) {
       $229 = HEAP32[(6852)>>2]|0;
       $230 = $227 >>> 3;
       $231 = $230 << 1;
       $232 = (6872 + ($231<<2)|0);
       $233 = HEAP32[1708]|0;
       $234 = 1 << $230;
       $235 = $233 & $234;
       $236 = ($235|0)==(0);
       if ($236) {
        $237 = $233 | $234;
        HEAP32[1708] = $237;
        $$pre$i = ((($232)) + 8|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $232;
       } else {
        $238 = ((($232)) + 8|0);
        $239 = HEAP32[$238>>2]|0;
        $240 = HEAP32[(6848)>>2]|0;
        $241 = ($239>>>0)<($240>>>0);
        if ($241) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $238;$F1$0$i = $239;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $229;
       $242 = ((($F1$0$i)) + 12|0);
       HEAP32[$242>>2] = $229;
       $243 = ((($229)) + 8|0);
       HEAP32[$243>>2] = $F1$0$i;
       $244 = ((($229)) + 12|0);
       HEAP32[$244>>2] = $232;
      }
      HEAP32[(6840)>>2] = $rsize$0$i$lcssa;
      HEAP32[(6852)>>2] = $152;
     }
     $245 = ((($v$0$i$lcssa)) + 8|0);
     $$0 = $245;
     return ($$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $246 = ($bytes>>>0)>(4294967231);
   if ($246) {
    $nb$0 = -1;
   } else {
    $247 = (($bytes) + 11)|0;
    $248 = $247 & -8;
    $249 = HEAP32[(6836)>>2]|0;
    $250 = ($249|0)==(0);
    if ($250) {
     $nb$0 = $248;
    } else {
     $251 = (0 - ($248))|0;
     $252 = $247 >>> 8;
     $253 = ($252|0)==(0);
     if ($253) {
      $idx$0$i = 0;
     } else {
      $254 = ($248>>>0)>(16777215);
      if ($254) {
       $idx$0$i = 31;
      } else {
       $255 = (($252) + 1048320)|0;
       $256 = $255 >>> 16;
       $257 = $256 & 8;
       $258 = $252 << $257;
       $259 = (($258) + 520192)|0;
       $260 = $259 >>> 16;
       $261 = $260 & 4;
       $262 = $261 | $257;
       $263 = $258 << $261;
       $264 = (($263) + 245760)|0;
       $265 = $264 >>> 16;
       $266 = $265 & 2;
       $267 = $262 | $266;
       $268 = (14 - ($267))|0;
       $269 = $263 << $266;
       $270 = $269 >>> 15;
       $271 = (($268) + ($270))|0;
       $272 = $271 << 1;
       $273 = (($271) + 7)|0;
       $274 = $248 >>> $273;
       $275 = $274 & 1;
       $276 = $275 | $272;
       $idx$0$i = $276;
      }
     }
     $277 = (7136 + ($idx$0$i<<2)|0);
     $278 = HEAP32[$277>>2]|0;
     $279 = ($278|0)==(0|0);
     L123: do {
      if ($279) {
       $rsize$3$i = $251;$t$2$i = 0;$v$3$i = 0;
       label = 86;
      } else {
       $280 = ($idx$0$i|0)==(31);
       $281 = $idx$0$i >>> 1;
       $282 = (25 - ($281))|0;
       $283 = $280 ? 0 : $282;
       $284 = $248 << $283;
       $rsize$0$i$5 = $251;$rst$0$i = 0;$sizebits$0$i = $284;$t$0$i$4 = $278;$v$0$i$6 = 0;
       while(1) {
        $285 = ((($t$0$i$4)) + 4|0);
        $286 = HEAP32[$285>>2]|0;
        $287 = $286 & -8;
        $288 = (($287) - ($248))|0;
        $289 = ($288>>>0)<($rsize$0$i$5>>>0);
        if ($289) {
         $290 = ($287|0)==($248|0);
         if ($290) {
          $rsize$412$i = $288;$t$411$i = $t$0$i$4;$v$413$i = $t$0$i$4;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $288;$v$1$i = $t$0$i$4;
         }
        } else {
         $rsize$1$i = $rsize$0$i$5;$v$1$i = $v$0$i$6;
        }
        $291 = ((($t$0$i$4)) + 20|0);
        $292 = HEAP32[$291>>2]|0;
        $293 = $sizebits$0$i >>> 31;
        $294 = (((($t$0$i$4)) + 16|0) + ($293<<2)|0);
        $295 = HEAP32[$294>>2]|0;
        $296 = ($292|0)==(0|0);
        $297 = ($292|0)==($295|0);
        $or$cond1$i = $296 | $297;
        $rst$1$i = $or$cond1$i ? $rst$0$i : $292;
        $298 = ($295|0)==(0|0);
        $299 = $298&1;
        $300 = $299 ^ 1;
        $sizebits$0$$i = $sizebits$0$i << $300;
        if ($298) {
         $rsize$3$i = $rsize$1$i;$t$2$i = $rst$1$i;$v$3$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i$5 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $sizebits$0$$i;$t$0$i$4 = $295;$v$0$i$6 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $301 = ($t$2$i|0)==(0|0);
      $302 = ($v$3$i|0)==(0|0);
      $or$cond$i = $301 & $302;
      if ($or$cond$i) {
       $303 = 2 << $idx$0$i;
       $304 = (0 - ($303))|0;
       $305 = $303 | $304;
       $306 = $249 & $305;
       $307 = ($306|0)==(0);
       if ($307) {
        $nb$0 = $248;
        break;
       }
       $308 = (0 - ($306))|0;
       $309 = $306 & $308;
       $310 = (($309) + -1)|0;
       $311 = $310 >>> 12;
       $312 = $311 & 16;
       $313 = $310 >>> $312;
       $314 = $313 >>> 5;
       $315 = $314 & 8;
       $316 = $315 | $312;
       $317 = $313 >>> $315;
       $318 = $317 >>> 2;
       $319 = $318 & 4;
       $320 = $316 | $319;
       $321 = $317 >>> $319;
       $322 = $321 >>> 1;
       $323 = $322 & 2;
       $324 = $320 | $323;
       $325 = $321 >>> $323;
       $326 = $325 >>> 1;
       $327 = $326 & 1;
       $328 = $324 | $327;
       $329 = $325 >>> $327;
       $330 = (($328) + ($329))|0;
       $331 = (7136 + ($330<<2)|0);
       $332 = HEAP32[$331>>2]|0;
       $t$4$ph$i = $332;
      } else {
       $t$4$ph$i = $t$2$i;
      }
      $333 = ($t$4$ph$i|0)==(0|0);
      if ($333) {
       $rsize$4$lcssa$i = $rsize$3$i;$v$4$lcssa$i = $v$3$i;
      } else {
       $rsize$412$i = $rsize$3$i;$t$411$i = $t$4$ph$i;$v$413$i = $v$3$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $334 = ((($t$411$i)) + 4|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = $335 & -8;
       $337 = (($336) - ($248))|0;
       $338 = ($337>>>0)<($rsize$412$i>>>0);
       $$rsize$4$i = $338 ? $337 : $rsize$412$i;
       $t$4$v$4$i = $338 ? $t$411$i : $v$413$i;
       $339 = ((($t$411$i)) + 16|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if (!($341)) {
        $rsize$412$i = $$rsize$4$i;$t$411$i = $340;$v$413$i = $t$4$v$4$i;
        label = 90;
        continue;
       }
       $342 = ((($t$411$i)) + 20|0);
       $343 = HEAP32[$342>>2]|0;
       $344 = ($343|0)==(0|0);
       if ($344) {
        $rsize$4$lcssa$i = $$rsize$4$i;$v$4$lcssa$i = $t$4$v$4$i;
        break;
       } else {
        $rsize$412$i = $$rsize$4$i;$t$411$i = $343;$v$413$i = $t$4$v$4$i;
        label = 90;
       }
      }
     }
     $345 = ($v$4$lcssa$i|0)==(0|0);
     if ($345) {
      $nb$0 = $248;
     } else {
      $346 = HEAP32[(6840)>>2]|0;
      $347 = (($346) - ($248))|0;
      $348 = ($rsize$4$lcssa$i>>>0)<($347>>>0);
      if ($348) {
       $349 = HEAP32[(6848)>>2]|0;
       $350 = ($v$4$lcssa$i>>>0)<($349>>>0);
       if ($350) {
        _abort();
        // unreachable;
       }
       $351 = (($v$4$lcssa$i) + ($248)|0);
       $352 = ($v$4$lcssa$i>>>0)<($351>>>0);
       if (!($352)) {
        _abort();
        // unreachable;
       }
       $353 = ((($v$4$lcssa$i)) + 24|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ((($v$4$lcssa$i)) + 12|0);
       $356 = HEAP32[$355>>2]|0;
       $357 = ($356|0)==($v$4$lcssa$i|0);
       do {
        if ($357) {
         $367 = ((($v$4$lcssa$i)) + 20|0);
         $368 = HEAP32[$367>>2]|0;
         $369 = ($368|0)==(0|0);
         if ($369) {
          $370 = ((($v$4$lcssa$i)) + 16|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if ($372) {
           $R$3$i$11 = 0;
           break;
          } else {
           $R$1$i$9 = $371;$RP$1$i$8 = $370;
          }
         } else {
          $R$1$i$9 = $368;$RP$1$i$8 = $367;
         }
         while(1) {
          $373 = ((($R$1$i$9)) + 20|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if (!($375)) {
           $R$1$i$9 = $374;$RP$1$i$8 = $373;
           continue;
          }
          $376 = ((($R$1$i$9)) + 16|0);
          $377 = HEAP32[$376>>2]|0;
          $378 = ($377|0)==(0|0);
          if ($378) {
           $R$1$i$9$lcssa = $R$1$i$9;$RP$1$i$8$lcssa = $RP$1$i$8;
           break;
          } else {
           $R$1$i$9 = $377;$RP$1$i$8 = $376;
          }
         }
         $379 = ($RP$1$i$8$lcssa>>>0)<($349>>>0);
         if ($379) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$1$i$8$lcssa>>2] = 0;
          $R$3$i$11 = $R$1$i$9$lcssa;
          break;
         }
        } else {
         $358 = ((($v$4$lcssa$i)) + 8|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359>>>0)<($349>>>0);
         if ($360) {
          _abort();
          // unreachable;
         }
         $361 = ((($359)) + 12|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$4$lcssa$i|0);
         if (!($363)) {
          _abort();
          // unreachable;
         }
         $364 = ((($356)) + 8|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==($v$4$lcssa$i|0);
         if ($366) {
          HEAP32[$361>>2] = $356;
          HEAP32[$364>>2] = $359;
          $R$3$i$11 = $356;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $380 = ($354|0)==(0|0);
       do {
        if (!($380)) {
         $381 = ((($v$4$lcssa$i)) + 28|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = (7136 + ($382<<2)|0);
         $384 = HEAP32[$383>>2]|0;
         $385 = ($v$4$lcssa$i|0)==($384|0);
         if ($385) {
          HEAP32[$383>>2] = $R$3$i$11;
          $cond$i$12 = ($R$3$i$11|0)==(0|0);
          if ($cond$i$12) {
           $386 = 1 << $382;
           $387 = $386 ^ -1;
           $388 = HEAP32[(6836)>>2]|0;
           $389 = $388 & $387;
           HEAP32[(6836)>>2] = $389;
           break;
          }
         } else {
          $390 = HEAP32[(6848)>>2]|0;
          $391 = ($354>>>0)<($390>>>0);
          if ($391) {
           _abort();
           // unreachable;
          }
          $392 = ((($354)) + 16|0);
          $393 = HEAP32[$392>>2]|0;
          $394 = ($393|0)==($v$4$lcssa$i|0);
          if ($394) {
           HEAP32[$392>>2] = $R$3$i$11;
          } else {
           $395 = ((($354)) + 20|0);
           HEAP32[$395>>2] = $R$3$i$11;
          }
          $396 = ($R$3$i$11|0)==(0|0);
          if ($396) {
           break;
          }
         }
         $397 = HEAP32[(6848)>>2]|0;
         $398 = ($R$3$i$11>>>0)<($397>>>0);
         if ($398) {
          _abort();
          // unreachable;
         }
         $399 = ((($R$3$i$11)) + 24|0);
         HEAP32[$399>>2] = $354;
         $400 = ((($v$4$lcssa$i)) + 16|0);
         $401 = HEAP32[$400>>2]|0;
         $402 = ($401|0)==(0|0);
         do {
          if (!($402)) {
           $403 = ($401>>>0)<($397>>>0);
           if ($403) {
            _abort();
            // unreachable;
           } else {
            $404 = ((($R$3$i$11)) + 16|0);
            HEAP32[$404>>2] = $401;
            $405 = ((($401)) + 24|0);
            HEAP32[$405>>2] = $R$3$i$11;
            break;
           }
          }
         } while(0);
         $406 = ((($v$4$lcssa$i)) + 20|0);
         $407 = HEAP32[$406>>2]|0;
         $408 = ($407|0)==(0|0);
         if (!($408)) {
          $409 = HEAP32[(6848)>>2]|0;
          $410 = ($407>>>0)<($409>>>0);
          if ($410) {
           _abort();
           // unreachable;
          } else {
           $411 = ((($R$3$i$11)) + 20|0);
           HEAP32[$411>>2] = $407;
           $412 = ((($407)) + 24|0);
           HEAP32[$412>>2] = $R$3$i$11;
           break;
          }
         }
        }
       } while(0);
       $413 = ($rsize$4$lcssa$i>>>0)<(16);
       do {
        if ($413) {
         $414 = (($rsize$4$lcssa$i) + ($248))|0;
         $415 = $414 | 3;
         $416 = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$416>>2] = $415;
         $417 = (($v$4$lcssa$i) + ($414)|0);
         $418 = ((($417)) + 4|0);
         $419 = HEAP32[$418>>2]|0;
         $420 = $419 | 1;
         HEAP32[$418>>2] = $420;
        } else {
         $421 = $248 | 3;
         $422 = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$422>>2] = $421;
         $423 = $rsize$4$lcssa$i | 1;
         $424 = ((($351)) + 4|0);
         HEAP32[$424>>2] = $423;
         $425 = (($351) + ($rsize$4$lcssa$i)|0);
         HEAP32[$425>>2] = $rsize$4$lcssa$i;
         $426 = $rsize$4$lcssa$i >>> 3;
         $427 = ($rsize$4$lcssa$i>>>0)<(256);
         if ($427) {
          $428 = $426 << 1;
          $429 = (6872 + ($428<<2)|0);
          $430 = HEAP32[1708]|0;
          $431 = 1 << $426;
          $432 = $430 & $431;
          $433 = ($432|0)==(0);
          if ($433) {
           $434 = $430 | $431;
           HEAP32[1708] = $434;
           $$pre$i$13 = ((($429)) + 8|0);
           $$pre$phi$i$14Z2D = $$pre$i$13;$F5$0$i = $429;
          } else {
           $435 = ((($429)) + 8|0);
           $436 = HEAP32[$435>>2]|0;
           $437 = HEAP32[(6848)>>2]|0;
           $438 = ($436>>>0)<($437>>>0);
           if ($438) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i$14Z2D = $435;$F5$0$i = $436;
           }
          }
          HEAP32[$$pre$phi$i$14Z2D>>2] = $351;
          $439 = ((($F5$0$i)) + 12|0);
          HEAP32[$439>>2] = $351;
          $440 = ((($351)) + 8|0);
          HEAP32[$440>>2] = $F5$0$i;
          $441 = ((($351)) + 12|0);
          HEAP32[$441>>2] = $429;
          break;
         }
         $442 = $rsize$4$lcssa$i >>> 8;
         $443 = ($442|0)==(0);
         if ($443) {
          $I7$0$i = 0;
         } else {
          $444 = ($rsize$4$lcssa$i>>>0)>(16777215);
          if ($444) {
           $I7$0$i = 31;
          } else {
           $445 = (($442) + 1048320)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 8;
           $448 = $442 << $447;
           $449 = (($448) + 520192)|0;
           $450 = $449 >>> 16;
           $451 = $450 & 4;
           $452 = $451 | $447;
           $453 = $448 << $451;
           $454 = (($453) + 245760)|0;
           $455 = $454 >>> 16;
           $456 = $455 & 2;
           $457 = $452 | $456;
           $458 = (14 - ($457))|0;
           $459 = $453 << $456;
           $460 = $459 >>> 15;
           $461 = (($458) + ($460))|0;
           $462 = $461 << 1;
           $463 = (($461) + 7)|0;
           $464 = $rsize$4$lcssa$i >>> $463;
           $465 = $464 & 1;
           $466 = $465 | $462;
           $I7$0$i = $466;
          }
         }
         $467 = (7136 + ($I7$0$i<<2)|0);
         $468 = ((($351)) + 28|0);
         HEAP32[$468>>2] = $I7$0$i;
         $469 = ((($351)) + 16|0);
         $470 = ((($469)) + 4|0);
         HEAP32[$470>>2] = 0;
         HEAP32[$469>>2] = 0;
         $471 = HEAP32[(6836)>>2]|0;
         $472 = 1 << $I7$0$i;
         $473 = $471 & $472;
         $474 = ($473|0)==(0);
         if ($474) {
          $475 = $471 | $472;
          HEAP32[(6836)>>2] = $475;
          HEAP32[$467>>2] = $351;
          $476 = ((($351)) + 24|0);
          HEAP32[$476>>2] = $467;
          $477 = ((($351)) + 12|0);
          HEAP32[$477>>2] = $351;
          $478 = ((($351)) + 8|0);
          HEAP32[$478>>2] = $351;
          break;
         }
         $479 = HEAP32[$467>>2]|0;
         $480 = ($I7$0$i|0)==(31);
         $481 = $I7$0$i >>> 1;
         $482 = (25 - ($481))|0;
         $483 = $480 ? 0 : $482;
         $484 = $rsize$4$lcssa$i << $483;
         $K12$0$i = $484;$T$0$i = $479;
         while(1) {
          $485 = ((($T$0$i)) + 4|0);
          $486 = HEAP32[$485>>2]|0;
          $487 = $486 & -8;
          $488 = ($487|0)==($rsize$4$lcssa$i|0);
          if ($488) {
           $T$0$i$lcssa = $T$0$i;
           label = 148;
           break;
          }
          $489 = $K12$0$i >>> 31;
          $490 = (((($T$0$i)) + 16|0) + ($489<<2)|0);
          $491 = $K12$0$i << 1;
          $492 = HEAP32[$490>>2]|0;
          $493 = ($492|0)==(0|0);
          if ($493) {
           $$lcssa157 = $490;$T$0$i$lcssa156 = $T$0$i;
           label = 145;
           break;
          } else {
           $K12$0$i = $491;$T$0$i = $492;
          }
         }
         if ((label|0) == 145) {
          $494 = HEAP32[(6848)>>2]|0;
          $495 = ($$lcssa157>>>0)<($494>>>0);
          if ($495) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa157>>2] = $351;
           $496 = ((($351)) + 24|0);
           HEAP32[$496>>2] = $T$0$i$lcssa156;
           $497 = ((($351)) + 12|0);
           HEAP32[$497>>2] = $351;
           $498 = ((($351)) + 8|0);
           HEAP32[$498>>2] = $351;
           break;
          }
         }
         else if ((label|0) == 148) {
          $499 = ((($T$0$i$lcssa)) + 8|0);
          $500 = HEAP32[$499>>2]|0;
          $501 = HEAP32[(6848)>>2]|0;
          $502 = ($500>>>0)>=($501>>>0);
          $not$7$i = ($T$0$i$lcssa>>>0)>=($501>>>0);
          $503 = $502 & $not$7$i;
          if ($503) {
           $504 = ((($500)) + 12|0);
           HEAP32[$504>>2] = $351;
           HEAP32[$499>>2] = $351;
           $505 = ((($351)) + 8|0);
           HEAP32[$505>>2] = $500;
           $506 = ((($351)) + 12|0);
           HEAP32[$506>>2] = $T$0$i$lcssa;
           $507 = ((($351)) + 24|0);
           HEAP32[$507>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $508 = ((($v$4$lcssa$i)) + 8|0);
       $$0 = $508;
       return ($$0|0);
      } else {
       $nb$0 = $248;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(6840)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(6852)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(6852)>>2] = $514;
   HEAP32[(6840)>>2] = $511;
   $515 = $511 | 1;
   $516 = ((($514)) + 4|0);
   HEAP32[$516>>2] = $515;
   $517 = (($514) + ($511)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(6840)>>2] = 0;
   HEAP32[(6852)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $522 = (($512) + ($509)|0);
   $523 = ((($522)) + 4|0);
   $524 = HEAP32[$523>>2]|0;
   $525 = $524 | 1;
   HEAP32[$523>>2] = $525;
  }
  $526 = ((($512)) + 8|0);
  $$0 = $526;
  return ($$0|0);
 }
 $527 = HEAP32[(6844)>>2]|0;
 $528 = ($527>>>0)>($nb$0>>>0);
 if ($528) {
  $529 = (($527) - ($nb$0))|0;
  HEAP32[(6844)>>2] = $529;
  $530 = HEAP32[(6856)>>2]|0;
  $531 = (($530) + ($nb$0)|0);
  HEAP32[(6856)>>2] = $531;
  $532 = $529 | 1;
  $533 = ((($531)) + 4|0);
  HEAP32[$533>>2] = $532;
  $534 = $nb$0 | 3;
  $535 = ((($530)) + 4|0);
  HEAP32[$535>>2] = $534;
  $536 = ((($530)) + 8|0);
  $$0 = $536;
  return ($$0|0);
 }
 $537 = HEAP32[1826]|0;
 $538 = ($537|0)==(0);
 do {
  if ($538) {
   $539 = (_sysconf(30)|0);
   $540 = (($539) + -1)|0;
   $541 = $540 & $539;
   $542 = ($541|0)==(0);
   if ($542) {
    HEAP32[(7312)>>2] = $539;
    HEAP32[(7308)>>2] = $539;
    HEAP32[(7316)>>2] = -1;
    HEAP32[(7320)>>2] = -1;
    HEAP32[(7324)>>2] = 0;
    HEAP32[(7276)>>2] = 0;
    $543 = (_time((0|0))|0);
    $544 = $543 & -16;
    $545 = $544 ^ 1431655768;
    HEAP32[1826] = $545;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $546 = (($nb$0) + 48)|0;
 $547 = HEAP32[(7312)>>2]|0;
 $548 = (($nb$0) + 47)|0;
 $549 = (($547) + ($548))|0;
 $550 = (0 - ($547))|0;
 $551 = $549 & $550;
 $552 = ($551>>>0)>($nb$0>>>0);
 if (!($552)) {
  $$0 = 0;
  return ($$0|0);
 }
 $553 = HEAP32[(7272)>>2]|0;
 $554 = ($553|0)==(0);
 if (!($554)) {
  $555 = HEAP32[(7264)>>2]|0;
  $556 = (($555) + ($551))|0;
  $557 = ($556>>>0)<=($555>>>0);
  $558 = ($556>>>0)>($553>>>0);
  $or$cond1$i$16 = $557 | $558;
  if ($or$cond1$i$16) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $559 = HEAP32[(7276)>>2]|0;
 $560 = $559 & 4;
 $561 = ($560|0)==(0);
 L257: do {
  if ($561) {
   $562 = HEAP32[(6856)>>2]|0;
   $563 = ($562|0)==(0|0);
   L259: do {
    if ($563) {
     label = 173;
    } else {
     $sp$0$i$i = (7280);
     while(1) {
      $564 = HEAP32[$sp$0$i$i>>2]|0;
      $565 = ($564>>>0)>($562>>>0);
      if (!($565)) {
       $566 = ((($sp$0$i$i)) + 4|0);
       $567 = HEAP32[$566>>2]|0;
       $568 = (($564) + ($567)|0);
       $569 = ($568>>>0)>($562>>>0);
       if ($569) {
        $$lcssa153 = $sp$0$i$i;$$lcssa155 = $566;
        break;
       }
      }
      $570 = ((($sp$0$i$i)) + 8|0);
      $571 = HEAP32[$570>>2]|0;
      $572 = ($571|0)==(0|0);
      if ($572) {
       label = 173;
       break L259;
      } else {
       $sp$0$i$i = $571;
      }
     }
     $595 = HEAP32[(6844)>>2]|0;
     $596 = (($549) - ($595))|0;
     $597 = $596 & $550;
     $598 = ($597>>>0)<(2147483647);
     if ($598) {
      $599 = (_sbrk(($597|0))|0);
      $600 = HEAP32[$$lcssa153>>2]|0;
      $601 = HEAP32[$$lcssa155>>2]|0;
      $602 = (($600) + ($601)|0);
      $603 = ($599|0)==($602|0);
      if ($603) {
       $604 = ($599|0)==((-1)|0);
       if (!($604)) {
        $tbase$747$i = $599;$tsize$746$i = $597;
        label = 193;
        break L257;
       }
      } else {
       $br$2$ph$i = $599;$ssize$2$ph$i = $597;
       label = 183;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 173) {
     $573 = (_sbrk(0)|0);
     $574 = ($573|0)==((-1)|0);
     if (!($574)) {
      $575 = $573;
      $576 = HEAP32[(7308)>>2]|0;
      $577 = (($576) + -1)|0;
      $578 = $577 & $575;
      $579 = ($578|0)==(0);
      if ($579) {
       $ssize$0$i = $551;
      } else {
       $580 = (($577) + ($575))|0;
       $581 = (0 - ($576))|0;
       $582 = $580 & $581;
       $583 = (($551) - ($575))|0;
       $584 = (($583) + ($582))|0;
       $ssize$0$i = $584;
      }
      $585 = HEAP32[(7264)>>2]|0;
      $586 = (($585) + ($ssize$0$i))|0;
      $587 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $588 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i$17 = $587 & $588;
      if ($or$cond$i$17) {
       $589 = HEAP32[(7272)>>2]|0;
       $590 = ($589|0)==(0);
       if (!($590)) {
        $591 = ($586>>>0)<=($585>>>0);
        $592 = ($586>>>0)>($589>>>0);
        $or$cond2$i = $591 | $592;
        if ($or$cond2$i) {
         break;
        }
       }
       $593 = (_sbrk(($ssize$0$i|0))|0);
       $594 = ($593|0)==($573|0);
       if ($594) {
        $tbase$747$i = $573;$tsize$746$i = $ssize$0$i;
        label = 193;
        break L257;
       } else {
        $br$2$ph$i = $593;$ssize$2$ph$i = $ssize$0$i;
        label = 183;
       }
      }
     }
    }
   } while(0);
   L279: do {
    if ((label|0) == 183) {
     $605 = (0 - ($ssize$2$ph$i))|0;
     $606 = ($br$2$ph$i|0)!=((-1)|0);
     $607 = ($ssize$2$ph$i>>>0)<(2147483647);
     $or$cond7$i = $607 & $606;
     $608 = ($546>>>0)>($ssize$2$ph$i>>>0);
     $or$cond8$i = $608 & $or$cond7$i;
     do {
      if ($or$cond8$i) {
       $609 = HEAP32[(7312)>>2]|0;
       $610 = (($548) - ($ssize$2$ph$i))|0;
       $611 = (($610) + ($609))|0;
       $612 = (0 - ($609))|0;
       $613 = $611 & $612;
       $614 = ($613>>>0)<(2147483647);
       if ($614) {
        $615 = (_sbrk(($613|0))|0);
        $616 = ($615|0)==((-1)|0);
        if ($616) {
         (_sbrk(($605|0))|0);
         break L279;
        } else {
         $617 = (($613) + ($ssize$2$ph$i))|0;
         $ssize$5$i = $617;
         break;
        }
       } else {
        $ssize$5$i = $ssize$2$ph$i;
       }
      } else {
       $ssize$5$i = $ssize$2$ph$i;
      }
     } while(0);
     $618 = ($br$2$ph$i|0)==((-1)|0);
     if (!($618)) {
      $tbase$747$i = $br$2$ph$i;$tsize$746$i = $ssize$5$i;
      label = 193;
      break L257;
     }
    }
   } while(0);
   $619 = HEAP32[(7276)>>2]|0;
   $620 = $619 | 4;
   HEAP32[(7276)>>2] = $620;
   label = 190;
  } else {
   label = 190;
  }
 } while(0);
 if ((label|0) == 190) {
  $621 = ($551>>>0)<(2147483647);
  if ($621) {
   $622 = (_sbrk(($551|0))|0);
   $623 = (_sbrk(0)|0);
   $624 = ($622|0)!=((-1)|0);
   $625 = ($623|0)!=((-1)|0);
   $or$cond5$i = $624 & $625;
   $626 = ($622>>>0)<($623>>>0);
   $or$cond10$i = $626 & $or$cond5$i;
   if ($or$cond10$i) {
    $627 = $623;
    $628 = $622;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $$not$i = ($629>>>0)>($630>>>0);
    if ($$not$i) {
     $tbase$747$i = $622;$tsize$746$i = $629;
     label = 193;
    }
   }
  }
 }
 if ((label|0) == 193) {
  $631 = HEAP32[(7264)>>2]|0;
  $632 = (($631) + ($tsize$746$i))|0;
  HEAP32[(7264)>>2] = $632;
  $633 = HEAP32[(7268)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(7268)>>2] = $632;
  }
  $635 = HEAP32[(6856)>>2]|0;
  $636 = ($635|0)==(0|0);
  do {
   if ($636) {
    $637 = HEAP32[(6848)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$747$i>>>0)<($637>>>0);
    $or$cond11$i = $638 | $639;
    if ($or$cond11$i) {
     HEAP32[(6848)>>2] = $tbase$747$i;
    }
    HEAP32[(7280)>>2] = $tbase$747$i;
    HEAP32[(7284)>>2] = $tsize$746$i;
    HEAP32[(7292)>>2] = 0;
    $640 = HEAP32[1826]|0;
    HEAP32[(6868)>>2] = $640;
    HEAP32[(6864)>>2] = -1;
    $i$01$i$i = 0;
    while(1) {
     $641 = $i$01$i$i << 1;
     $642 = (6872 + ($641<<2)|0);
     $643 = ((($642)) + 12|0);
     HEAP32[$643>>2] = $642;
     $644 = ((($642)) + 8|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$01$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$01$i$i = $645;
     }
    }
    $646 = (($tsize$746$i) + -40)|0;
    $647 = ((($tbase$747$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$747$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(6856)>>2] = $654;
    HEAP32[(6844)>>2] = $655;
    $656 = $655 | 1;
    $657 = ((($654)) + 4|0);
    HEAP32[$657>>2] = $656;
    $658 = (($654) + ($655)|0);
    $659 = ((($658)) + 4|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[(7320)>>2]|0;
    HEAP32[(6860)>>2] = $660;
   } else {
    $sp$069$i = (7280);
    while(1) {
     $661 = HEAP32[$sp$069$i>>2]|0;
     $662 = ((($sp$069$i)) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$747$i|0)==($664|0);
     if ($665) {
      $$lcssa147 = $661;$$lcssa149 = $662;$$lcssa151 = $663;$sp$069$i$lcssa = $sp$069$i;
      label = 203;
      break;
     }
     $666 = ((($sp$069$i)) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$069$i = $667;
     }
    }
    if ((label|0) == 203) {
     $669 = ((($sp$069$i$lcssa)) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($635>>>0)>=($$lcssa147>>>0);
      $674 = ($635>>>0)<($tbase$747$i>>>0);
      $or$cond49$i = $674 & $673;
      if ($or$cond49$i) {
       $675 = (($$lcssa151) + ($tsize$746$i))|0;
       HEAP32[$$lcssa149>>2] = $675;
       $676 = HEAP32[(6844)>>2]|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($tsize$746$i) - ($683))|0;
       $686 = (($685) + ($676))|0;
       HEAP32[(6856)>>2] = $684;
       HEAP32[(6844)>>2] = $686;
       $687 = $686 | 1;
       $688 = ((($684)) + 4|0);
       HEAP32[$688>>2] = $687;
       $689 = (($684) + ($686)|0);
       $690 = ((($689)) + 4|0);
       HEAP32[$690>>2] = 40;
       $691 = HEAP32[(7320)>>2]|0;
       HEAP32[(6860)>>2] = $691;
       break;
      }
     }
    }
    $692 = HEAP32[(6848)>>2]|0;
    $693 = ($tbase$747$i>>>0)<($692>>>0);
    if ($693) {
     HEAP32[(6848)>>2] = $tbase$747$i;
     $757 = $tbase$747$i;
    } else {
     $757 = $692;
    }
    $694 = (($tbase$747$i) + ($tsize$746$i)|0);
    $sp$168$i = (7280);
    while(1) {
     $695 = HEAP32[$sp$168$i>>2]|0;
     $696 = ($695|0)==($694|0);
     if ($696) {
      $$lcssa144 = $sp$168$i;$sp$168$i$lcssa = $sp$168$i;
      label = 211;
      break;
     }
     $697 = ((($sp$168$i)) + 8|0);
     $698 = HEAP32[$697>>2]|0;
     $699 = ($698|0)==(0|0);
     if ($699) {
      $sp$0$i$i$i = (7280);
      break;
     } else {
      $sp$168$i = $698;
     }
    }
    if ((label|0) == 211) {
     $700 = ((($sp$168$i$lcssa)) + 12|0);
     $701 = HEAP32[$700>>2]|0;
     $702 = $701 & 8;
     $703 = ($702|0)==(0);
     if ($703) {
      HEAP32[$$lcssa144>>2] = $tbase$747$i;
      $704 = ((($sp$168$i$lcssa)) + 4|0);
      $705 = HEAP32[$704>>2]|0;
      $706 = (($705) + ($tsize$746$i))|0;
      HEAP32[$704>>2] = $706;
      $707 = ((($tbase$747$i)) + 8|0);
      $708 = $707;
      $709 = $708 & 7;
      $710 = ($709|0)==(0);
      $711 = (0 - ($708))|0;
      $712 = $711 & 7;
      $713 = $710 ? 0 : $712;
      $714 = (($tbase$747$i) + ($713)|0);
      $715 = ((($694)) + 8|0);
      $716 = $715;
      $717 = $716 & 7;
      $718 = ($717|0)==(0);
      $719 = (0 - ($716))|0;
      $720 = $719 & 7;
      $721 = $718 ? 0 : $720;
      $722 = (($694) + ($721)|0);
      $723 = $722;
      $724 = $714;
      $725 = (($723) - ($724))|0;
      $726 = (($714) + ($nb$0)|0);
      $727 = (($725) - ($nb$0))|0;
      $728 = $nb$0 | 3;
      $729 = ((($714)) + 4|0);
      HEAP32[$729>>2] = $728;
      $730 = ($722|0)==($635|0);
      do {
       if ($730) {
        $731 = HEAP32[(6844)>>2]|0;
        $732 = (($731) + ($727))|0;
        HEAP32[(6844)>>2] = $732;
        HEAP32[(6856)>>2] = $726;
        $733 = $732 | 1;
        $734 = ((($726)) + 4|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[(6852)>>2]|0;
        $736 = ($722|0)==($735|0);
        if ($736) {
         $737 = HEAP32[(6840)>>2]|0;
         $738 = (($737) + ($727))|0;
         HEAP32[(6840)>>2] = $738;
         HEAP32[(6852)>>2] = $726;
         $739 = $738 | 1;
         $740 = ((($726)) + 4|0);
         HEAP32[$740>>2] = $739;
         $741 = (($726) + ($738)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $742 = ((($722)) + 4|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         L331: do {
          if ($748) {
           $749 = ((($722)) + 8|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = ((($722)) + 12|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = (6872 + ($753<<2)|0);
           $755 = ($750|0)==($754|0);
           do {
            if (!($755)) {
             $756 = ($750>>>0)<($757>>>0);
             if ($756) {
              _abort();
              // unreachable;
             }
             $758 = ((($750)) + 12|0);
             $759 = HEAP32[$758>>2]|0;
             $760 = ($759|0)==($722|0);
             if ($760) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[1708]|0;
            $765 = $764 & $763;
            HEAP32[1708] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           do {
            if ($766) {
             $$pre9$i$i = ((($752)) + 8|0);
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $767 = ($752>>>0)<($757>>>0);
             if ($767) {
              _abort();
              // unreachable;
             }
             $768 = ((($752)) + 8|0);
             $769 = HEAP32[$768>>2]|0;
             $770 = ($769|0)==($722|0);
             if ($770) {
              $$pre$phi10$i$iZ2D = $768;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $771 = ((($750)) + 12|0);
           HEAP32[$771>>2] = $752;
           HEAP32[$$pre$phi10$i$iZ2D>>2] = $750;
          } else {
           $772 = ((($722)) + 24|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ((($722)) + 12|0);
           $775 = HEAP32[$774>>2]|0;
           $776 = ($775|0)==($722|0);
           do {
            if ($776) {
             $786 = ((($722)) + 16|0);
             $787 = ((($786)) + 4|0);
             $788 = HEAP32[$787>>2]|0;
             $789 = ($788|0)==(0|0);
             if ($789) {
              $790 = HEAP32[$786>>2]|0;
              $791 = ($790|0)==(0|0);
              if ($791) {
               $R$3$i$i = 0;
               break;
              } else {
               $R$1$i$i = $790;$RP$1$i$i = $786;
              }
             } else {
              $R$1$i$i = $788;$RP$1$i$i = $787;
             }
             while(1) {
              $792 = ((($R$1$i$i)) + 20|0);
              $793 = HEAP32[$792>>2]|0;
              $794 = ($793|0)==(0|0);
              if (!($794)) {
               $R$1$i$i = $793;$RP$1$i$i = $792;
               continue;
              }
              $795 = ((($R$1$i$i)) + 16|0);
              $796 = HEAP32[$795>>2]|0;
              $797 = ($796|0)==(0|0);
              if ($797) {
               $R$1$i$i$lcssa = $R$1$i$i;$RP$1$i$i$lcssa = $RP$1$i$i;
               break;
              } else {
               $R$1$i$i = $796;$RP$1$i$i = $795;
              }
             }
             $798 = ($RP$1$i$i$lcssa>>>0)<($757>>>0);
             if ($798) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$1$i$i$lcssa>>2] = 0;
              $R$3$i$i = $R$1$i$i$lcssa;
              break;
             }
            } else {
             $777 = ((($722)) + 8|0);
             $778 = HEAP32[$777>>2]|0;
             $779 = ($778>>>0)<($757>>>0);
             if ($779) {
              _abort();
              // unreachable;
             }
             $780 = ((($778)) + 12|0);
             $781 = HEAP32[$780>>2]|0;
             $782 = ($781|0)==($722|0);
             if (!($782)) {
              _abort();
              // unreachable;
             }
             $783 = ((($775)) + 8|0);
             $784 = HEAP32[$783>>2]|0;
             $785 = ($784|0)==($722|0);
             if ($785) {
              HEAP32[$780>>2] = $775;
              HEAP32[$783>>2] = $778;
              $R$3$i$i = $775;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $799 = ($773|0)==(0|0);
           if ($799) {
            break;
           }
           $800 = ((($722)) + 28|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = (7136 + ($801<<2)|0);
           $803 = HEAP32[$802>>2]|0;
           $804 = ($722|0)==($803|0);
           do {
            if ($804) {
             HEAP32[$802>>2] = $R$3$i$i;
             $cond$i$i = ($R$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $805 = 1 << $801;
             $806 = $805 ^ -1;
             $807 = HEAP32[(6836)>>2]|0;
             $808 = $807 & $806;
             HEAP32[(6836)>>2] = $808;
             break L331;
            } else {
             $809 = HEAP32[(6848)>>2]|0;
             $810 = ($773>>>0)<($809>>>0);
             if ($810) {
              _abort();
              // unreachable;
             }
             $811 = ((($773)) + 16|0);
             $812 = HEAP32[$811>>2]|0;
             $813 = ($812|0)==($722|0);
             if ($813) {
              HEAP32[$811>>2] = $R$3$i$i;
             } else {
              $814 = ((($773)) + 20|0);
              HEAP32[$814>>2] = $R$3$i$i;
             }
             $815 = ($R$3$i$i|0)==(0|0);
             if ($815) {
              break L331;
             }
            }
           } while(0);
           $816 = HEAP32[(6848)>>2]|0;
           $817 = ($R$3$i$i>>>0)<($816>>>0);
           if ($817) {
            _abort();
            // unreachable;
           }
           $818 = ((($R$3$i$i)) + 24|0);
           HEAP32[$818>>2] = $773;
           $819 = ((($722)) + 16|0);
           $820 = HEAP32[$819>>2]|0;
           $821 = ($820|0)==(0|0);
           do {
            if (!($821)) {
             $822 = ($820>>>0)<($816>>>0);
             if ($822) {
              _abort();
              // unreachable;
             } else {
              $823 = ((($R$3$i$i)) + 16|0);
              HEAP32[$823>>2] = $820;
              $824 = ((($820)) + 24|0);
              HEAP32[$824>>2] = $R$3$i$i;
              break;
             }
            }
           } while(0);
           $825 = ((($819)) + 4|0);
           $826 = HEAP32[$825>>2]|0;
           $827 = ($826|0)==(0|0);
           if ($827) {
            break;
           }
           $828 = HEAP32[(6848)>>2]|0;
           $829 = ($826>>>0)<($828>>>0);
           if ($829) {
            _abort();
            // unreachable;
           } else {
            $830 = ((($R$3$i$i)) + 20|0);
            HEAP32[$830>>2] = $826;
            $831 = ((($826)) + 24|0);
            HEAP32[$831>>2] = $R$3$i$i;
            break;
           }
          }
         } while(0);
         $832 = (($722) + ($746)|0);
         $833 = (($746) + ($727))|0;
         $oldfirst$0$i$i = $832;$qsize$0$i$i = $833;
        } else {
         $oldfirst$0$i$i = $722;$qsize$0$i$i = $727;
        }
        $834 = ((($oldfirst$0$i$i)) + 4|0);
        $835 = HEAP32[$834>>2]|0;
        $836 = $835 & -2;
        HEAP32[$834>>2] = $836;
        $837 = $qsize$0$i$i | 1;
        $838 = ((($726)) + 4|0);
        HEAP32[$838>>2] = $837;
        $839 = (($726) + ($qsize$0$i$i)|0);
        HEAP32[$839>>2] = $qsize$0$i$i;
        $840 = $qsize$0$i$i >>> 3;
        $841 = ($qsize$0$i$i>>>0)<(256);
        if ($841) {
         $842 = $840 << 1;
         $843 = (6872 + ($842<<2)|0);
         $844 = HEAP32[1708]|0;
         $845 = 1 << $840;
         $846 = $844 & $845;
         $847 = ($846|0)==(0);
         do {
          if ($847) {
           $848 = $844 | $845;
           HEAP32[1708] = $848;
           $$pre$i$16$i = ((($843)) + 8|0);
           $$pre$phi$i$17$iZ2D = $$pre$i$16$i;$F4$0$i$i = $843;
          } else {
           $849 = ((($843)) + 8|0);
           $850 = HEAP32[$849>>2]|0;
           $851 = HEAP32[(6848)>>2]|0;
           $852 = ($850>>>0)<($851>>>0);
           if (!($852)) {
            $$pre$phi$i$17$iZ2D = $849;$F4$0$i$i = $850;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i$17$iZ2D>>2] = $726;
         $853 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$853>>2] = $726;
         $854 = ((($726)) + 8|0);
         HEAP32[$854>>2] = $F4$0$i$i;
         $855 = ((($726)) + 12|0);
         HEAP32[$855>>2] = $843;
         break;
        }
        $856 = $qsize$0$i$i >>> 8;
        $857 = ($856|0)==(0);
        do {
         if ($857) {
          $I7$0$i$i = 0;
         } else {
          $858 = ($qsize$0$i$i>>>0)>(16777215);
          if ($858) {
           $I7$0$i$i = 31;
           break;
          }
          $859 = (($856) + 1048320)|0;
          $860 = $859 >>> 16;
          $861 = $860 & 8;
          $862 = $856 << $861;
          $863 = (($862) + 520192)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 4;
          $866 = $865 | $861;
          $867 = $862 << $865;
          $868 = (($867) + 245760)|0;
          $869 = $868 >>> 16;
          $870 = $869 & 2;
          $871 = $866 | $870;
          $872 = (14 - ($871))|0;
          $873 = $867 << $870;
          $874 = $873 >>> 15;
          $875 = (($872) + ($874))|0;
          $876 = $875 << 1;
          $877 = (($875) + 7)|0;
          $878 = $qsize$0$i$i >>> $877;
          $879 = $878 & 1;
          $880 = $879 | $876;
          $I7$0$i$i = $880;
         }
        } while(0);
        $881 = (7136 + ($I7$0$i$i<<2)|0);
        $882 = ((($726)) + 28|0);
        HEAP32[$882>>2] = $I7$0$i$i;
        $883 = ((($726)) + 16|0);
        $884 = ((($883)) + 4|0);
        HEAP32[$884>>2] = 0;
        HEAP32[$883>>2] = 0;
        $885 = HEAP32[(6836)>>2]|0;
        $886 = 1 << $I7$0$i$i;
        $887 = $885 & $886;
        $888 = ($887|0)==(0);
        if ($888) {
         $889 = $885 | $886;
         HEAP32[(6836)>>2] = $889;
         HEAP32[$881>>2] = $726;
         $890 = ((($726)) + 24|0);
         HEAP32[$890>>2] = $881;
         $891 = ((($726)) + 12|0);
         HEAP32[$891>>2] = $726;
         $892 = ((($726)) + 8|0);
         HEAP32[$892>>2] = $726;
         break;
        }
        $893 = HEAP32[$881>>2]|0;
        $894 = ($I7$0$i$i|0)==(31);
        $895 = $I7$0$i$i >>> 1;
        $896 = (25 - ($895))|0;
        $897 = $894 ? 0 : $896;
        $898 = $qsize$0$i$i << $897;
        $K8$0$i$i = $898;$T$0$i$18$i = $893;
        while(1) {
         $899 = ((($T$0$i$18$i)) + 4|0);
         $900 = HEAP32[$899>>2]|0;
         $901 = $900 & -8;
         $902 = ($901|0)==($qsize$0$i$i|0);
         if ($902) {
          $T$0$i$18$i$lcssa = $T$0$i$18$i;
          label = 281;
          break;
         }
         $903 = $K8$0$i$i >>> 31;
         $904 = (((($T$0$i$18$i)) + 16|0) + ($903<<2)|0);
         $905 = $K8$0$i$i << 1;
         $906 = HEAP32[$904>>2]|0;
         $907 = ($906|0)==(0|0);
         if ($907) {
          $$lcssa = $904;$T$0$i$18$i$lcssa139 = $T$0$i$18$i;
          label = 278;
          break;
         } else {
          $K8$0$i$i = $905;$T$0$i$18$i = $906;
         }
        }
        if ((label|0) == 278) {
         $908 = HEAP32[(6848)>>2]|0;
         $909 = ($$lcssa>>>0)<($908>>>0);
         if ($909) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$lcssa>>2] = $726;
          $910 = ((($726)) + 24|0);
          HEAP32[$910>>2] = $T$0$i$18$i$lcssa139;
          $911 = ((($726)) + 12|0);
          HEAP32[$911>>2] = $726;
          $912 = ((($726)) + 8|0);
          HEAP32[$912>>2] = $726;
          break;
         }
        }
        else if ((label|0) == 281) {
         $913 = ((($T$0$i$18$i$lcssa)) + 8|0);
         $914 = HEAP32[$913>>2]|0;
         $915 = HEAP32[(6848)>>2]|0;
         $916 = ($914>>>0)>=($915>>>0);
         $not$$i$20$i = ($T$0$i$18$i$lcssa>>>0)>=($915>>>0);
         $917 = $916 & $not$$i$20$i;
         if ($917) {
          $918 = ((($914)) + 12|0);
          HEAP32[$918>>2] = $726;
          HEAP32[$913>>2] = $726;
          $919 = ((($726)) + 8|0);
          HEAP32[$919>>2] = $914;
          $920 = ((($726)) + 12|0);
          HEAP32[$920>>2] = $T$0$i$18$i$lcssa;
          $921 = ((($726)) + 24|0);
          HEAP32[$921>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1052 = ((($714)) + 8|0);
      $$0 = $1052;
      return ($$0|0);
     } else {
      $sp$0$i$i$i = (7280);
     }
    }
    while(1) {
     $922 = HEAP32[$sp$0$i$i$i>>2]|0;
     $923 = ($922>>>0)>($635>>>0);
     if (!($923)) {
      $924 = ((($sp$0$i$i$i)) + 4|0);
      $925 = HEAP32[$924>>2]|0;
      $926 = (($922) + ($925)|0);
      $927 = ($926>>>0)>($635>>>0);
      if ($927) {
       $$lcssa142 = $926;
       break;
      }
     }
     $928 = ((($sp$0$i$i$i)) + 8|0);
     $929 = HEAP32[$928>>2]|0;
     $sp$0$i$i$i = $929;
    }
    $930 = ((($$lcssa142)) + -47|0);
    $931 = ((($930)) + 8|0);
    $932 = $931;
    $933 = $932 & 7;
    $934 = ($933|0)==(0);
    $935 = (0 - ($932))|0;
    $936 = $935 & 7;
    $937 = $934 ? 0 : $936;
    $938 = (($930) + ($937)|0);
    $939 = ((($635)) + 16|0);
    $940 = ($938>>>0)<($939>>>0);
    $941 = $940 ? $635 : $938;
    $942 = ((($941)) + 8|0);
    $943 = ((($941)) + 24|0);
    $944 = (($tsize$746$i) + -40)|0;
    $945 = ((($tbase$747$i)) + 8|0);
    $946 = $945;
    $947 = $946 & 7;
    $948 = ($947|0)==(0);
    $949 = (0 - ($946))|0;
    $950 = $949 & 7;
    $951 = $948 ? 0 : $950;
    $952 = (($tbase$747$i) + ($951)|0);
    $953 = (($944) - ($951))|0;
    HEAP32[(6856)>>2] = $952;
    HEAP32[(6844)>>2] = $953;
    $954 = $953 | 1;
    $955 = ((($952)) + 4|0);
    HEAP32[$955>>2] = $954;
    $956 = (($952) + ($953)|0);
    $957 = ((($956)) + 4|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(7320)>>2]|0;
    HEAP32[(6860)>>2] = $958;
    $959 = ((($941)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$942>>2]=HEAP32[(7280)>>2]|0;HEAP32[$942+4>>2]=HEAP32[(7280)+4>>2]|0;HEAP32[$942+8>>2]=HEAP32[(7280)+8>>2]|0;HEAP32[$942+12>>2]=HEAP32[(7280)+12>>2]|0;
    HEAP32[(7280)>>2] = $tbase$747$i;
    HEAP32[(7284)>>2] = $tsize$746$i;
    HEAP32[(7292)>>2] = 0;
    HEAP32[(7288)>>2] = $942;
    $p$0$i$i = $943;
    while(1) {
     $960 = ((($p$0$i$i)) + 4|0);
     HEAP32[$960>>2] = 7;
     $961 = ((($960)) + 4|0);
     $962 = ($961>>>0)<($$lcssa142>>>0);
     if ($962) {
      $p$0$i$i = $960;
     } else {
      break;
     }
    }
    $963 = ($941|0)==($635|0);
    if (!($963)) {
     $964 = $941;
     $965 = $635;
     $966 = (($964) - ($965))|0;
     $967 = HEAP32[$959>>2]|0;
     $968 = $967 & -2;
     HEAP32[$959>>2] = $968;
     $969 = $966 | 1;
     $970 = ((($635)) + 4|0);
     HEAP32[$970>>2] = $969;
     HEAP32[$941>>2] = $966;
     $971 = $966 >>> 3;
     $972 = ($966>>>0)<(256);
     if ($972) {
      $973 = $971 << 1;
      $974 = (6872 + ($973<<2)|0);
      $975 = HEAP32[1708]|0;
      $976 = 1 << $971;
      $977 = $975 & $976;
      $978 = ($977|0)==(0);
      if ($978) {
       $979 = $975 | $976;
       HEAP32[1708] = $979;
       $$pre$i$i = ((($974)) + 8|0);
       $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $974;
      } else {
       $980 = ((($974)) + 8|0);
       $981 = HEAP32[$980>>2]|0;
       $982 = HEAP32[(6848)>>2]|0;
       $983 = ($981>>>0)<($982>>>0);
       if ($983) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $980;$F$0$i$i = $981;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $984 = ((($F$0$i$i)) + 12|0);
      HEAP32[$984>>2] = $635;
      $985 = ((($635)) + 8|0);
      HEAP32[$985>>2] = $F$0$i$i;
      $986 = ((($635)) + 12|0);
      HEAP32[$986>>2] = $974;
      break;
     }
     $987 = $966 >>> 8;
     $988 = ($987|0)==(0);
     if ($988) {
      $I1$0$i$i = 0;
     } else {
      $989 = ($966>>>0)>(16777215);
      if ($989) {
       $I1$0$i$i = 31;
      } else {
       $990 = (($987) + 1048320)|0;
       $991 = $990 >>> 16;
       $992 = $991 & 8;
       $993 = $987 << $992;
       $994 = (($993) + 520192)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 4;
       $997 = $996 | $992;
       $998 = $993 << $996;
       $999 = (($998) + 245760)|0;
       $1000 = $999 >>> 16;
       $1001 = $1000 & 2;
       $1002 = $997 | $1001;
       $1003 = (14 - ($1002))|0;
       $1004 = $998 << $1001;
       $1005 = $1004 >>> 15;
       $1006 = (($1003) + ($1005))|0;
       $1007 = $1006 << 1;
       $1008 = (($1006) + 7)|0;
       $1009 = $966 >>> $1008;
       $1010 = $1009 & 1;
       $1011 = $1010 | $1007;
       $I1$0$i$i = $1011;
      }
     }
     $1012 = (7136 + ($I1$0$i$i<<2)|0);
     $1013 = ((($635)) + 28|0);
     HEAP32[$1013>>2] = $I1$0$i$i;
     $1014 = ((($635)) + 20|0);
     HEAP32[$1014>>2] = 0;
     HEAP32[$939>>2] = 0;
     $1015 = HEAP32[(6836)>>2]|0;
     $1016 = 1 << $I1$0$i$i;
     $1017 = $1015 & $1016;
     $1018 = ($1017|0)==(0);
     if ($1018) {
      $1019 = $1015 | $1016;
      HEAP32[(6836)>>2] = $1019;
      HEAP32[$1012>>2] = $635;
      $1020 = ((($635)) + 24|0);
      HEAP32[$1020>>2] = $1012;
      $1021 = ((($635)) + 12|0);
      HEAP32[$1021>>2] = $635;
      $1022 = ((($635)) + 8|0);
      HEAP32[$1022>>2] = $635;
      break;
     }
     $1023 = HEAP32[$1012>>2]|0;
     $1024 = ($I1$0$i$i|0)==(31);
     $1025 = $I1$0$i$i >>> 1;
     $1026 = (25 - ($1025))|0;
     $1027 = $1024 ? 0 : $1026;
     $1028 = $966 << $1027;
     $K2$0$i$i = $1028;$T$0$i$i = $1023;
     while(1) {
      $1029 = ((($T$0$i$i)) + 4|0);
      $1030 = HEAP32[$1029>>2]|0;
      $1031 = $1030 & -8;
      $1032 = ($1031|0)==($966|0);
      if ($1032) {
       $T$0$i$i$lcssa = $T$0$i$i;
       label = 307;
       break;
      }
      $1033 = $K2$0$i$i >>> 31;
      $1034 = (((($T$0$i$i)) + 16|0) + ($1033<<2)|0);
      $1035 = $K2$0$i$i << 1;
      $1036 = HEAP32[$1034>>2]|0;
      $1037 = ($1036|0)==(0|0);
      if ($1037) {
       $$lcssa141 = $1034;$T$0$i$i$lcssa140 = $T$0$i$i;
       label = 304;
       break;
      } else {
       $K2$0$i$i = $1035;$T$0$i$i = $1036;
      }
     }
     if ((label|0) == 304) {
      $1038 = HEAP32[(6848)>>2]|0;
      $1039 = ($$lcssa141>>>0)<($1038>>>0);
      if ($1039) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$lcssa141>>2] = $635;
       $1040 = ((($635)) + 24|0);
       HEAP32[$1040>>2] = $T$0$i$i$lcssa140;
       $1041 = ((($635)) + 12|0);
       HEAP32[$1041>>2] = $635;
       $1042 = ((($635)) + 8|0);
       HEAP32[$1042>>2] = $635;
       break;
      }
     }
     else if ((label|0) == 307) {
      $1043 = ((($T$0$i$i$lcssa)) + 8|0);
      $1044 = HEAP32[$1043>>2]|0;
      $1045 = HEAP32[(6848)>>2]|0;
      $1046 = ($1044>>>0)>=($1045>>>0);
      $not$$i$i = ($T$0$i$i$lcssa>>>0)>=($1045>>>0);
      $1047 = $1046 & $not$$i$i;
      if ($1047) {
       $1048 = ((($1044)) + 12|0);
       HEAP32[$1048>>2] = $635;
       HEAP32[$1043>>2] = $635;
       $1049 = ((($635)) + 8|0);
       HEAP32[$1049>>2] = $1044;
       $1050 = ((($635)) + 12|0);
       HEAP32[$1050>>2] = $T$0$i$i$lcssa;
       $1051 = ((($635)) + 24|0);
       HEAP32[$1051>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1053 = HEAP32[(6844)>>2]|0;
  $1054 = ($1053>>>0)>($nb$0>>>0);
  if ($1054) {
   $1055 = (($1053) - ($nb$0))|0;
   HEAP32[(6844)>>2] = $1055;
   $1056 = HEAP32[(6856)>>2]|0;
   $1057 = (($1056) + ($nb$0)|0);
   HEAP32[(6856)>>2] = $1057;
   $1058 = $1055 | 1;
   $1059 = ((($1057)) + 4|0);
   HEAP32[$1059>>2] = $1058;
   $1060 = $nb$0 | 3;
   $1061 = ((($1056)) + 4|0);
   HEAP32[$1061>>2] = $1060;
   $1062 = ((($1056)) + 8|0);
   $$0 = $1062;
   return ($$0|0);
  }
 }
 $1063 = (___errno_location()|0);
 HEAP32[$1063>>2] = 12;
 $$0 = 0;
 return ($$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi46Z2D = 0, $$pre$phi48Z2D = 0, $$pre$phiZ2D = 0, $$pre45 = 0, $$pre47 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F18$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0, $R$3 = 0, $R8$1 = 0, $R8$1$lcssa = 0, $R8$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP10$1 = 0, $RP10$1$lcssa = 0;
 var $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa53 = 0, $cond20 = 0, $cond21 = 0, $not$ = 0, $p$1 = 0, $psize$1 = 0, $psize$2 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(6848)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $9 = (($1) + ($8)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $14 = (0 - ($12))|0;
   $15 = (($1) + ($14)|0);
   $16 = (($12) + ($8))|0;
   $17 = ($15>>>0)<($2>>>0);
   if ($17) {
    _abort();
    // unreachable;
   }
   $18 = HEAP32[(6852)>>2]|0;
   $19 = ($15|0)==($18|0);
   if ($19) {
    $104 = ((($9)) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$1 = $15;$psize$1 = $16;
     break;
    }
    HEAP32[(6840)>>2] = $16;
    $108 = $105 & -2;
    HEAP32[$104>>2] = $108;
    $109 = $16 | 1;
    $110 = ((($15)) + 4|0);
    HEAP32[$110>>2] = $109;
    $111 = (($15) + ($16)|0);
    HEAP32[$111>>2] = $16;
    return;
   }
   $20 = $12 >>> 3;
   $21 = ($12>>>0)<(256);
   if ($21) {
    $22 = ((($15)) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($15)) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $20 << 1;
    $27 = (6872 + ($26<<2)|0);
    $28 = ($23|0)==($27|0);
    if (!($28)) {
     $29 = ($23>>>0)<($2>>>0);
     if ($29) {
      _abort();
      // unreachable;
     }
     $30 = ((($23)) + 12|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ($31|0)==($15|0);
     if (!($32)) {
      _abort();
      // unreachable;
     }
    }
    $33 = ($25|0)==($23|0);
    if ($33) {
     $34 = 1 << $20;
     $35 = $34 ^ -1;
     $36 = HEAP32[1708]|0;
     $37 = $36 & $35;
     HEAP32[1708] = $37;
     $p$1 = $15;$psize$1 = $16;
     break;
    }
    $38 = ($25|0)==($27|0);
    if ($38) {
     $$pre47 = ((($25)) + 8|0);
     $$pre$phi48Z2D = $$pre47;
    } else {
     $39 = ($25>>>0)<($2>>>0);
     if ($39) {
      _abort();
      // unreachable;
     }
     $40 = ((($25)) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)==($15|0);
     if ($42) {
      $$pre$phi48Z2D = $40;
     } else {
      _abort();
      // unreachable;
     }
    }
    $43 = ((($23)) + 12|0);
    HEAP32[$43>>2] = $25;
    HEAP32[$$pre$phi48Z2D>>2] = $23;
    $p$1 = $15;$psize$1 = $16;
    break;
   }
   $44 = ((($15)) + 24|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($15)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==($15|0);
   do {
    if ($48) {
     $58 = ((($15)) + 16|0);
     $59 = ((($58)) + 4|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==(0|0);
     if ($61) {
      $62 = HEAP32[$58>>2]|0;
      $63 = ($62|0)==(0|0);
      if ($63) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $62;$RP$1 = $58;
      }
     } else {
      $R$1 = $60;$RP$1 = $59;
     }
     while(1) {
      $64 = ((($R$1)) + 20|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if (!($66)) {
       $R$1 = $65;$RP$1 = $64;
       continue;
      }
      $67 = ((($R$1)) + 16|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ($68|0)==(0|0);
      if ($69) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $68;$RP$1 = $67;
      }
     }
     $70 = ($RP$1$lcssa>>>0)<($2>>>0);
     if ($70) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $49 = ((($15)) + 8|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50>>>0)<($2>>>0);
     if ($51) {
      _abort();
      // unreachable;
     }
     $52 = ((($50)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($15|0);
     if (!($54)) {
      _abort();
      // unreachable;
     }
     $55 = ((($47)) + 8|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($56|0)==($15|0);
     if ($57) {
      HEAP32[$52>>2] = $47;
      HEAP32[$55>>2] = $50;
      $R$3 = $47;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $71 = ($45|0)==(0|0);
   if ($71) {
    $p$1 = $15;$psize$1 = $16;
   } else {
    $72 = ((($15)) + 28|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (7136 + ($73<<2)|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($15|0)==($75|0);
    if ($76) {
     HEAP32[$74>>2] = $R$3;
     $cond20 = ($R$3|0)==(0|0);
     if ($cond20) {
      $77 = 1 << $73;
      $78 = $77 ^ -1;
      $79 = HEAP32[(6836)>>2]|0;
      $80 = $79 & $78;
      HEAP32[(6836)>>2] = $80;
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    } else {
     $81 = HEAP32[(6848)>>2]|0;
     $82 = ($45>>>0)<($81>>>0);
     if ($82) {
      _abort();
      // unreachable;
     }
     $83 = ((($45)) + 16|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($84|0)==($15|0);
     if ($85) {
      HEAP32[$83>>2] = $R$3;
     } else {
      $86 = ((($45)) + 20|0);
      HEAP32[$86>>2] = $R$3;
     }
     $87 = ($R$3|0)==(0|0);
     if ($87) {
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    }
    $88 = HEAP32[(6848)>>2]|0;
    $89 = ($R$3>>>0)<($88>>>0);
    if ($89) {
     _abort();
     // unreachable;
    }
    $90 = ((($R$3)) + 24|0);
    HEAP32[$90>>2] = $45;
    $91 = ((($15)) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==(0|0);
    do {
     if (!($93)) {
      $94 = ($92>>>0)<($88>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = ((($R$3)) + 16|0);
       HEAP32[$95>>2] = $92;
       $96 = ((($92)) + 24|0);
       HEAP32[$96>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $97 = ((($91)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$1 = $15;$psize$1 = $16;
    } else {
     $100 = HEAP32[(6848)>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = ((($R$3)) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = ((($98)) + 24|0);
      HEAP32[$103>>2] = $R$3;
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    }
   }
  } else {
   $p$1 = $1;$psize$1 = $8;
  }
 } while(0);
 $112 = ($p$1>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $113 = ((($9)) + 4|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[(6856)>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[(6844)>>2]|0;
   $122 = (($121) + ($psize$1))|0;
   HEAP32[(6844)>>2] = $122;
   HEAP32[(6856)>>2] = $p$1;
   $123 = $122 | 1;
   $124 = ((($p$1)) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[(6852)>>2]|0;
   $126 = ($p$1|0)==($125|0);
   if (!($126)) {
    return;
   }
   HEAP32[(6852)>>2] = 0;
   HEAP32[(6840)>>2] = 0;
   return;
  }
  $127 = HEAP32[(6852)>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[(6840)>>2]|0;
   $130 = (($129) + ($psize$1))|0;
   HEAP32[(6840)>>2] = $130;
   HEAP32[(6852)>>2] = $p$1;
   $131 = $130 | 1;
   $132 = ((($p$1)) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$1) + ($130)|0);
   HEAP32[$133>>2] = $130;
   return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$1))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = ((($9)) + 8|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ((($9)) + 12|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = (6872 + ($142<<2)|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[(6848)>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = ((($139)) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[1708]|0;
     $154 = $153 & $152;
     HEAP32[1708] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre45 = ((($141)) + 8|0);
     $$pre$phi46Z2D = $$pre45;
    } else {
     $156 = HEAP32[(6848)>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = ((($141)) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi46Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = ((($139)) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi46Z2D>>2] = $139;
   } else {
    $162 = ((($9)) + 24|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ((($9)) + 12|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $177 = ((($9)) + 16|0);
      $178 = ((($177)) + 4|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = ($179|0)==(0|0);
      if ($180) {
       $181 = HEAP32[$177>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R8$3 = 0;
        break;
       } else {
        $R8$1 = $181;$RP10$1 = $177;
       }
      } else {
       $R8$1 = $179;$RP10$1 = $178;
      }
      while(1) {
       $183 = ((($R8$1)) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R8$1 = $184;$RP10$1 = $183;
        continue;
       }
       $186 = ((($R8$1)) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        $R8$1$lcssa = $R8$1;$RP10$1$lcssa = $RP10$1;
        break;
       } else {
        $R8$1 = $187;$RP10$1 = $186;
       }
      }
      $189 = HEAP32[(6848)>>2]|0;
      $190 = ($RP10$1$lcssa>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP10$1$lcssa>>2] = 0;
       $R8$3 = $R8$1$lcssa;
       break;
      }
     } else {
      $167 = ((($9)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[(6848)>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = ((($168)) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = ((($165)) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R8$3 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $192 = ((($9)) + 28|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (7136 + ($193<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R8$3;
      $cond21 = ($R8$3|0)==(0|0);
      if ($cond21) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[(6836)>>2]|0;
       $200 = $199 & $198;
       HEAP32[(6836)>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[(6848)>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = ((($163)) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R8$3;
      } else {
       $206 = ((($163)) + 20|0);
       HEAP32[$206>>2] = $R8$3;
      }
      $207 = ($R8$3|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[(6848)>>2]|0;
     $209 = ($R8$3>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = ((($R8$3)) + 24|0);
     HEAP32[$210>>2] = $163;
     $211 = ((($9)) + 16|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = ($212>>>0)<($208>>>0);
       if ($214) {
        _abort();
        // unreachable;
       } else {
        $215 = ((($R8$3)) + 16|0);
        HEAP32[$215>>2] = $212;
        $216 = ((($212)) + 24|0);
        HEAP32[$216>>2] = $R8$3;
        break;
       }
      }
     } while(0);
     $217 = ((($211)) + 4|0);
     $218 = HEAP32[$217>>2]|0;
     $219 = ($218|0)==(0|0);
     if (!($219)) {
      $220 = HEAP32[(6848)>>2]|0;
      $221 = ($218>>>0)<($220>>>0);
      if ($221) {
       _abort();
       // unreachable;
      } else {
       $222 = ((($R8$3)) + 20|0);
       HEAP32[$222>>2] = $218;
       $223 = ((($218)) + 24|0);
       HEAP32[$223>>2] = $R8$3;
       break;
      }
     }
    }
   }
  } while(0);
  $224 = $135 | 1;
  $225 = ((($p$1)) + 4|0);
  HEAP32[$225>>2] = $224;
  $226 = (($p$1) + ($135)|0);
  HEAP32[$226>>2] = $135;
  $227 = HEAP32[(6852)>>2]|0;
  $228 = ($p$1|0)==($227|0);
  if ($228) {
   HEAP32[(6840)>>2] = $135;
   return;
  } else {
   $psize$2 = $135;
  }
 } else {
  $229 = $114 & -2;
  HEAP32[$113>>2] = $229;
  $230 = $psize$1 | 1;
  $231 = ((($p$1)) + 4|0);
  HEAP32[$231>>2] = $230;
  $232 = (($p$1) + ($psize$1)|0);
  HEAP32[$232>>2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $233 = $psize$2 >>> 3;
 $234 = ($psize$2>>>0)<(256);
 if ($234) {
  $235 = $233 << 1;
  $236 = (6872 + ($235<<2)|0);
  $237 = HEAP32[1708]|0;
  $238 = 1 << $233;
  $239 = $237 & $238;
  $240 = ($239|0)==(0);
  if ($240) {
   $241 = $237 | $238;
   HEAP32[1708] = $241;
   $$pre = ((($236)) + 8|0);
   $$pre$phiZ2D = $$pre;$F18$0 = $236;
  } else {
   $242 = ((($236)) + 8|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = HEAP32[(6848)>>2]|0;
   $245 = ($243>>>0)<($244>>>0);
   if ($245) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $242;$F18$0 = $243;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$1;
  $246 = ((($F18$0)) + 12|0);
  HEAP32[$246>>2] = $p$1;
  $247 = ((($p$1)) + 8|0);
  HEAP32[$247>>2] = $F18$0;
  $248 = ((($p$1)) + 12|0);
  HEAP32[$248>>2] = $236;
  return;
 }
 $249 = $psize$2 >>> 8;
 $250 = ($249|0)==(0);
 if ($250) {
  $I20$0 = 0;
 } else {
  $251 = ($psize$2>>>0)>(16777215);
  if ($251) {
   $I20$0 = 31;
  } else {
   $252 = (($249) + 1048320)|0;
   $253 = $252 >>> 16;
   $254 = $253 & 8;
   $255 = $249 << $254;
   $256 = (($255) + 520192)|0;
   $257 = $256 >>> 16;
   $258 = $257 & 4;
   $259 = $258 | $254;
   $260 = $255 << $258;
   $261 = (($260) + 245760)|0;
   $262 = $261 >>> 16;
   $263 = $262 & 2;
   $264 = $259 | $263;
   $265 = (14 - ($264))|0;
   $266 = $260 << $263;
   $267 = $266 >>> 15;
   $268 = (($265) + ($267))|0;
   $269 = $268 << 1;
   $270 = (($268) + 7)|0;
   $271 = $psize$2 >>> $270;
   $272 = $271 & 1;
   $273 = $272 | $269;
   $I20$0 = $273;
  }
 }
 $274 = (7136 + ($I20$0<<2)|0);
 $275 = ((($p$1)) + 28|0);
 HEAP32[$275>>2] = $I20$0;
 $276 = ((($p$1)) + 16|0);
 $277 = ((($p$1)) + 20|0);
 HEAP32[$277>>2] = 0;
 HEAP32[$276>>2] = 0;
 $278 = HEAP32[(6836)>>2]|0;
 $279 = 1 << $I20$0;
 $280 = $278 & $279;
 $281 = ($280|0)==(0);
 do {
  if ($281) {
   $282 = $278 | $279;
   HEAP32[(6836)>>2] = $282;
   HEAP32[$274>>2] = $p$1;
   $283 = ((($p$1)) + 24|0);
   HEAP32[$283>>2] = $274;
   $284 = ((($p$1)) + 12|0);
   HEAP32[$284>>2] = $p$1;
   $285 = ((($p$1)) + 8|0);
   HEAP32[$285>>2] = $p$1;
  } else {
   $286 = HEAP32[$274>>2]|0;
   $287 = ($I20$0|0)==(31);
   $288 = $I20$0 >>> 1;
   $289 = (25 - ($288))|0;
   $290 = $287 ? 0 : $289;
   $291 = $psize$2 << $290;
   $K21$0 = $291;$T$0 = $286;
   while(1) {
    $292 = ((($T$0)) + 4|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = $293 & -8;
    $295 = ($294|0)==($psize$2|0);
    if ($295) {
     $T$0$lcssa = $T$0;
     label = 130;
     break;
    }
    $296 = $K21$0 >>> 31;
    $297 = (((($T$0)) + 16|0) + ($296<<2)|0);
    $298 = $K21$0 << 1;
    $299 = HEAP32[$297>>2]|0;
    $300 = ($299|0)==(0|0);
    if ($300) {
     $$lcssa = $297;$T$0$lcssa53 = $T$0;
     label = 127;
     break;
    } else {
     $K21$0 = $298;$T$0 = $299;
    }
   }
   if ((label|0) == 127) {
    $301 = HEAP32[(6848)>>2]|0;
    $302 = ($$lcssa>>>0)<($301>>>0);
    if ($302) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$$lcssa>>2] = $p$1;
     $303 = ((($p$1)) + 24|0);
     HEAP32[$303>>2] = $T$0$lcssa53;
     $304 = ((($p$1)) + 12|0);
     HEAP32[$304>>2] = $p$1;
     $305 = ((($p$1)) + 8|0);
     HEAP32[$305>>2] = $p$1;
     break;
    }
   }
   else if ((label|0) == 130) {
    $306 = ((($T$0$lcssa)) + 8|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = HEAP32[(6848)>>2]|0;
    $309 = ($307>>>0)>=($308>>>0);
    $not$ = ($T$0$lcssa>>>0)>=($308>>>0);
    $310 = $309 & $not$;
    if ($310) {
     $311 = ((($307)) + 12|0);
     HEAP32[$311>>2] = $p$1;
     HEAP32[$306>>2] = $p$1;
     $312 = ((($p$1)) + 8|0);
     HEAP32[$312>>2] = $307;
     $313 = ((($p$1)) + 12|0);
     HEAP32[$313>>2] = $T$0$lcssa;
     $314 = ((($p$1)) + 24|0);
     HEAP32[$314>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $315 = HEAP32[(6864)>>2]|0;
 $316 = (($315) + -1)|0;
 HEAP32[(6864)>>2] = $316;
 $317 = ($316|0)==(0);
 if ($317) {
  $sp$0$in$i = (7288);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $318 = ($sp$0$i|0)==(0|0);
  $319 = ((($sp$0$i)) + 8|0);
  if ($318) {
   break;
  } else {
   $sp$0$in$i = $319;
  }
 }
 HEAP32[(6864)>>2] = -1;
 return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements|0)==(0);
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements)|0;
  $2 = $elem_size | $n_elements;
  $3 = ($2>>>0)>(65535);
  if ($3) {
   $4 = (($1>>>0) / ($n_elements>>>0))&-1;
   $5 = ($4|0)==($elem_size|0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (_malloc($req$0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  return ($6|0);
 }
 $8 = ((($6)) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 3;
 $11 = ($10|0)==(0);
 if ($11) {
  return ($6|0);
 }
 _memset(($6|0),0,($req$0|0))|0;
 return ($6|0);
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$1 = $1;
  return ($mem$1|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $4 = ($bytes>>>0)<(11);
 $5 = (($bytes) + 11)|0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = ((($oldmem)) + -8|0);
 $9 = (_try_realloc_chunk($8,$7)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 8|0);
  $mem$1 = $11;
  return ($mem$1|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $14 = ((($oldmem)) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$1 = $12;
 return ($mem$1|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$1 = 0, $R$1$lcssa = 0;
 var $R$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $cond = 0, $newp$2 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[(6848)>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond3 = $or$cond$not & $6;
 if (!($or$cond3)) {
  _abort();
  // unreachable;
 }
 $7 = ((($3)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[(7312)>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$2 = $p;
    return ($newp$2|0);
   }
  }
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$2 = $p;
   return ($newp$2|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $26 = ((($22)) + 4|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = (($22) + ($20)|0);
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30 | 1;
  HEAP32[$29>>2] = $31;
  _dispose_chunk($22,$20);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $32 = HEAP32[(6856)>>2]|0;
 $33 = ($3|0)==($32|0);
 if ($33) {
  $34 = HEAP32[(6844)>>2]|0;
  $35 = (($34) + ($2))|0;
  $36 = ($35>>>0)>($nb>>>0);
  if (!($36)) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $37 = (($35) - ($nb))|0;
  $38 = (($p) + ($nb)|0);
  $39 = $1 & 1;
  $40 = $39 | $nb;
  $41 = $40 | 2;
  HEAP32[$0>>2] = $41;
  $42 = ((($38)) + 4|0);
  $43 = $37 | 1;
  HEAP32[$42>>2] = $43;
  HEAP32[(6856)>>2] = $38;
  HEAP32[(6844)>>2] = $37;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $44 = HEAP32[(6852)>>2]|0;
 $45 = ($3|0)==($44|0);
 if ($45) {
  $46 = HEAP32[(6840)>>2]|0;
  $47 = (($46) + ($2))|0;
  $48 = ($47>>>0)<($nb>>>0);
  if ($48) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $49 = (($47) - ($nb))|0;
  $50 = ($49>>>0)>(15);
  if ($50) {
   $51 = (($p) + ($nb)|0);
   $52 = (($51) + ($49)|0);
   $53 = $1 & 1;
   $54 = $53 | $nb;
   $55 = $54 | 2;
   HEAP32[$0>>2] = $55;
   $56 = ((($51)) + 4|0);
   $57 = $49 | 1;
   HEAP32[$56>>2] = $57;
   HEAP32[$52>>2] = $49;
   $58 = ((($52)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & -2;
   HEAP32[$58>>2] = $60;
   $storemerge = $51;$storemerge$1 = $49;
  } else {
   $61 = $1 & 1;
   $62 = $61 | $47;
   $63 = $62 | 2;
   HEAP32[$0>>2] = $63;
   $64 = (($p) + ($47)|0);
   $65 = ((($64)) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $66 | 1;
   HEAP32[$65>>2] = $67;
   $storemerge = 0;$storemerge$1 = 0;
  }
  HEAP32[(6840)>>2] = $storemerge$1;
  HEAP32[(6852)>>2] = $storemerge;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $68 = $8 & 2;
 $69 = ($68|0)==(0);
 if (!($69)) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $70 = $8 & -8;
 $71 = (($70) + ($2))|0;
 $72 = ($71>>>0)<($nb>>>0);
 if ($72) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $73 = (($71) - ($nb))|0;
 $74 = $8 >>> 3;
 $75 = ($8>>>0)<(256);
 do {
  if ($75) {
   $76 = ((($3)) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ((($3)) + 12|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $74 << 1;
   $81 = (6872 + ($80<<2)|0);
   $82 = ($77|0)==($81|0);
   if (!($82)) {
    $83 = ($77>>>0)<($4>>>0);
    if ($83) {
     _abort();
     // unreachable;
    }
    $84 = ((($77)) + 12|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($85|0)==($3|0);
    if (!($86)) {
     _abort();
     // unreachable;
    }
   }
   $87 = ($79|0)==($77|0);
   if ($87) {
    $88 = 1 << $74;
    $89 = $88 ^ -1;
    $90 = HEAP32[1708]|0;
    $91 = $90 & $89;
    HEAP32[1708] = $91;
    break;
   }
   $92 = ($79|0)==($81|0);
   if ($92) {
    $$pre = ((($79)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $93 = ($79>>>0)<($4>>>0);
    if ($93) {
     _abort();
     // unreachable;
    }
    $94 = ((($79)) + 8|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==($3|0);
    if ($96) {
     $$pre$phiZ2D = $94;
    } else {
     _abort();
     // unreachable;
    }
   }
   $97 = ((($77)) + 12|0);
   HEAP32[$97>>2] = $79;
   HEAP32[$$pre$phiZ2D>>2] = $77;
  } else {
   $98 = ((($3)) + 24|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = ((($3)) + 12|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ($101|0)==($3|0);
   do {
    if ($102) {
     $112 = ((($3)) + 16|0);
     $113 = ((($112)) + 4|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = ($114|0)==(0|0);
     if ($115) {
      $116 = HEAP32[$112>>2]|0;
      $117 = ($116|0)==(0|0);
      if ($117) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $116;$RP$1 = $112;
      }
     } else {
      $R$1 = $114;$RP$1 = $113;
     }
     while(1) {
      $118 = ((($R$1)) + 20|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if (!($120)) {
       $R$1 = $119;$RP$1 = $118;
       continue;
      }
      $121 = ((($R$1)) + 16|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ($122|0)==(0|0);
      if ($123) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $122;$RP$1 = $121;
      }
     }
     $124 = ($RP$1$lcssa>>>0)<($4>>>0);
     if ($124) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $103 = ((($3)) + 8|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104>>>0)<($4>>>0);
     if ($105) {
      _abort();
      // unreachable;
     }
     $106 = ((($104)) + 12|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if (!($108)) {
      _abort();
      // unreachable;
     }
     $109 = ((($101)) + 8|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==($3|0);
     if ($111) {
      HEAP32[$106>>2] = $101;
      HEAP32[$109>>2] = $104;
      $R$3 = $101;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $125 = ($99|0)==(0|0);
   if (!($125)) {
    $126 = ((($3)) + 28|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = (7136 + ($127<<2)|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = ($3|0)==($129|0);
    if ($130) {
     HEAP32[$128>>2] = $R$3;
     $cond = ($R$3|0)==(0|0);
     if ($cond) {
      $131 = 1 << $127;
      $132 = $131 ^ -1;
      $133 = HEAP32[(6836)>>2]|0;
      $134 = $133 & $132;
      HEAP32[(6836)>>2] = $134;
      break;
     }
    } else {
     $135 = HEAP32[(6848)>>2]|0;
     $136 = ($99>>>0)<($135>>>0);
     if ($136) {
      _abort();
      // unreachable;
     }
     $137 = ((($99)) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($138|0)==($3|0);
     if ($139) {
      HEAP32[$137>>2] = $R$3;
     } else {
      $140 = ((($99)) + 20|0);
      HEAP32[$140>>2] = $R$3;
     }
     $141 = ($R$3|0)==(0|0);
     if ($141) {
      break;
     }
    }
    $142 = HEAP32[(6848)>>2]|0;
    $143 = ($R$3>>>0)<($142>>>0);
    if ($143) {
     _abort();
     // unreachable;
    }
    $144 = ((($R$3)) + 24|0);
    HEAP32[$144>>2] = $99;
    $145 = ((($3)) + 16|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = ($146|0)==(0|0);
    do {
     if (!($147)) {
      $148 = ($146>>>0)<($142>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = ((($R$3)) + 16|0);
       HEAP32[$149>>2] = $146;
       $150 = ((($146)) + 24|0);
       HEAP32[$150>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $151 = ((($145)) + 4|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[(6848)>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = ((($R$3)) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = ((($152)) + 24|0);
      HEAP32[$157>>2] = $R$3;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($73>>>0)<(16);
 if ($158) {
  $159 = $1 & 1;
  $160 = $71 | $159;
  $161 = $160 | 2;
  HEAP32[$0>>2] = $161;
  $162 = (($p) + ($71)|0);
  $163 = ((($162)) + 4|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $newp$2 = $p;
  return ($newp$2|0);
 } else {
  $166 = (($p) + ($nb)|0);
  $167 = $1 & 1;
  $168 = $167 | $nb;
  $169 = $168 | 2;
  HEAP32[$0>>2] = $169;
  $170 = ((($166)) + 4|0);
  $171 = $73 | 3;
  HEAP32[$170>>2] = $171;
  $172 = (($166) + ($73)|0);
  $173 = ((($172)) + 4|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $174 | 1;
  HEAP32[$173>>2] = $175;
  _dispose_chunk($166,$73);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$1 = 0, $$14 = 0, $$2 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $$pre21 = 0, $$pre23 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F17$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0;
 var $R$3 = 0, $R7$1 = 0, $R7$1$lcssa = 0, $R7$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP9$1 = 0, $RP9$1$lcssa = 0, $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa30 = 0, $cond = 0, $cond16 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(6848)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(6852)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $99 = ((($0)) + 4|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$1 = $9;$$14 = $10;
     break;
    }
    HEAP32[(6840)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $105 = ((($9)) + 4|0);
    HEAP32[$105>>2] = $104;
    $106 = (($9) + ($10)|0);
    HEAP32[$106>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $17 = ((($9)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($9)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (6872 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[1708]|0;
     $32 = $31 & $30;
     HEAP32[1708] = $32;
     $$1 = $9;$$14 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre23 = ((($20)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi24Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi24Z2D>>2] = $18;
    $$1 = $9;$$14 = $10;
    break;
   }
   $39 = ((($9)) + 24|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($9)) + 12|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $53 = ((($9)) + 16|0);
     $54 = ((($53)) + 4|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==(0|0);
     if ($56) {
      $57 = HEAP32[$53>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $57;$RP$1 = $53;
      }
     } else {
      $R$1 = $55;$RP$1 = $54;
     }
     while(1) {
      $59 = ((($R$1)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$1 = $60;$RP$1 = $59;
       continue;
      }
      $62 = ((($R$1)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $63;$RP$1 = $62;
      }
     }
     $65 = ($RP$1$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $44 = ((($9)) + 8|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$3 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$1 = $9;$$14 = $10;
   } else {
    $67 = ((($9)) + 28|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (7136 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$3;
     $cond = ($R$3|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(6836)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(6836)>>2] = $75;
      $$1 = $9;$$14 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(6848)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$3;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$3;
     }
     $82 = ($R$3|0)==(0|0);
     if ($82) {
      $$1 = $9;$$14 = $10;
      break;
     }
    }
    $83 = HEAP32[(6848)>>2]|0;
    $84 = ($R$3>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$3)) + 24|0);
    HEAP32[$85>>2] = $40;
    $86 = ((($9)) + 16|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$3)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $92 = ((($86)) + 4|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$1 = $9;$$14 = $10;
    } else {
     $95 = HEAP32[(6848)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$3)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$3;
      $$1 = $9;$$14 = $10;
      break;
     }
    }
   }
  } else {
   $$1 = $p;$$14 = $psize;
  }
 } while(0);
 $107 = HEAP32[(6848)>>2]|0;
 $108 = ($0>>>0)<($107>>>0);
 if ($108) {
  _abort();
  // unreachable;
 }
 $109 = ((($0)) + 4|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $110 & 2;
 $112 = ($111|0)==(0);
 if ($112) {
  $113 = HEAP32[(6856)>>2]|0;
  $114 = ($0|0)==($113|0);
  if ($114) {
   $115 = HEAP32[(6844)>>2]|0;
   $116 = (($115) + ($$14))|0;
   HEAP32[(6844)>>2] = $116;
   HEAP32[(6856)>>2] = $$1;
   $117 = $116 | 1;
   $118 = ((($$1)) + 4|0);
   HEAP32[$118>>2] = $117;
   $119 = HEAP32[(6852)>>2]|0;
   $120 = ($$1|0)==($119|0);
   if (!($120)) {
    return;
   }
   HEAP32[(6852)>>2] = 0;
   HEAP32[(6840)>>2] = 0;
   return;
  }
  $121 = HEAP32[(6852)>>2]|0;
  $122 = ($0|0)==($121|0);
  if ($122) {
   $123 = HEAP32[(6840)>>2]|0;
   $124 = (($123) + ($$14))|0;
   HEAP32[(6840)>>2] = $124;
   HEAP32[(6852)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = (($$1) + ($124)|0);
   HEAP32[$127>>2] = $124;
   return;
  }
  $128 = $110 & -8;
  $129 = (($128) + ($$14))|0;
  $130 = $110 >>> 3;
  $131 = ($110>>>0)<(256);
  do {
   if ($131) {
    $132 = ((($0)) + 8|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ((($0)) + 12|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $130 << 1;
    $137 = (6872 + ($136<<2)|0);
    $138 = ($133|0)==($137|0);
    if (!($138)) {
     $139 = ($133>>>0)<($107>>>0);
     if ($139) {
      _abort();
      // unreachable;
     }
     $140 = ((($133)) + 12|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($0|0);
     if (!($142)) {
      _abort();
      // unreachable;
     }
    }
    $143 = ($135|0)==($133|0);
    if ($143) {
     $144 = 1 << $130;
     $145 = $144 ^ -1;
     $146 = HEAP32[1708]|0;
     $147 = $146 & $145;
     HEAP32[1708] = $147;
     break;
    }
    $148 = ($135|0)==($137|0);
    if ($148) {
     $$pre21 = ((($135)) + 8|0);
     $$pre$phi22Z2D = $$pre21;
    } else {
     $149 = ($135>>>0)<($107>>>0);
     if ($149) {
      _abort();
      // unreachable;
     }
     $150 = ((($135)) + 8|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ($151|0)==($0|0);
     if ($152) {
      $$pre$phi22Z2D = $150;
     } else {
      _abort();
      // unreachable;
     }
    }
    $153 = ((($133)) + 12|0);
    HEAP32[$153>>2] = $135;
    HEAP32[$$pre$phi22Z2D>>2] = $133;
   } else {
    $154 = ((($0)) + 24|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ((($0)) + 12|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ($157|0)==($0|0);
    do {
     if ($158) {
      $168 = ((($0)) + 16|0);
      $169 = ((($168)) + 4|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $172 = HEAP32[$168>>2]|0;
       $173 = ($172|0)==(0|0);
       if ($173) {
        $R7$3 = 0;
        break;
       } else {
        $R7$1 = $172;$RP9$1 = $168;
       }
      } else {
       $R7$1 = $170;$RP9$1 = $169;
      }
      while(1) {
       $174 = ((($R7$1)) + 20|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = ($175|0)==(0|0);
       if (!($176)) {
        $R7$1 = $175;$RP9$1 = $174;
        continue;
       }
       $177 = ((($R7$1)) + 16|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = ($178|0)==(0|0);
       if ($179) {
        $R7$1$lcssa = $R7$1;$RP9$1$lcssa = $RP9$1;
        break;
       } else {
        $R7$1 = $178;$RP9$1 = $177;
       }
      }
      $180 = ($RP9$1$lcssa>>>0)<($107>>>0);
      if ($180) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$1$lcssa>>2] = 0;
       $R7$3 = $R7$1$lcssa;
       break;
      }
     } else {
      $159 = ((($0)) + 8|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = ($160>>>0)<($107>>>0);
      if ($161) {
       _abort();
       // unreachable;
      }
      $162 = ((($160)) + 12|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = ($163|0)==($0|0);
      if (!($164)) {
       _abort();
       // unreachable;
      }
      $165 = ((($157)) + 8|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = ($166|0)==($0|0);
      if ($167) {
       HEAP32[$162>>2] = $157;
       HEAP32[$165>>2] = $160;
       $R7$3 = $157;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $181 = ($155|0)==(0|0);
    if (!($181)) {
     $182 = ((($0)) + 28|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = (7136 + ($183<<2)|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = ($0|0)==($185|0);
     if ($186) {
      HEAP32[$184>>2] = $R7$3;
      $cond16 = ($R7$3|0)==(0|0);
      if ($cond16) {
       $187 = 1 << $183;
       $188 = $187 ^ -1;
       $189 = HEAP32[(6836)>>2]|0;
       $190 = $189 & $188;
       HEAP32[(6836)>>2] = $190;
       break;
      }
     } else {
      $191 = HEAP32[(6848)>>2]|0;
      $192 = ($155>>>0)<($191>>>0);
      if ($192) {
       _abort();
       // unreachable;
      }
      $193 = ((($155)) + 16|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = ($194|0)==($0|0);
      if ($195) {
       HEAP32[$193>>2] = $R7$3;
      } else {
       $196 = ((($155)) + 20|0);
       HEAP32[$196>>2] = $R7$3;
      }
      $197 = ($R7$3|0)==(0|0);
      if ($197) {
       break;
      }
     }
     $198 = HEAP32[(6848)>>2]|0;
     $199 = ($R7$3>>>0)<($198>>>0);
     if ($199) {
      _abort();
      // unreachable;
     }
     $200 = ((($R7$3)) + 24|0);
     HEAP32[$200>>2] = $155;
     $201 = ((($0)) + 16|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = ($202|0)==(0|0);
     do {
      if (!($203)) {
       $204 = ($202>>>0)<($198>>>0);
       if ($204) {
        _abort();
        // unreachable;
       } else {
        $205 = ((($R7$3)) + 16|0);
        HEAP32[$205>>2] = $202;
        $206 = ((($202)) + 24|0);
        HEAP32[$206>>2] = $R7$3;
        break;
       }
      }
     } while(0);
     $207 = ((($201)) + 4|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = ($208|0)==(0|0);
     if (!($209)) {
      $210 = HEAP32[(6848)>>2]|0;
      $211 = ($208>>>0)<($210>>>0);
      if ($211) {
       _abort();
       // unreachable;
      } else {
       $212 = ((($R7$3)) + 20|0);
       HEAP32[$212>>2] = $208;
       $213 = ((($208)) + 24|0);
       HEAP32[$213>>2] = $R7$3;
       break;
      }
     }
    }
   }
  } while(0);
  $214 = $129 | 1;
  $215 = ((($$1)) + 4|0);
  HEAP32[$215>>2] = $214;
  $216 = (($$1) + ($129)|0);
  HEAP32[$216>>2] = $129;
  $217 = HEAP32[(6852)>>2]|0;
  $218 = ($$1|0)==($217|0);
  if ($218) {
   HEAP32[(6840)>>2] = $129;
   return;
  } else {
   $$2 = $129;
  }
 } else {
  $219 = $110 & -2;
  HEAP32[$109>>2] = $219;
  $220 = $$14 | 1;
  $221 = ((($$1)) + 4|0);
  HEAP32[$221>>2] = $220;
  $222 = (($$1) + ($$14)|0);
  HEAP32[$222>>2] = $$14;
  $$2 = $$14;
 }
 $223 = $$2 >>> 3;
 $224 = ($$2>>>0)<(256);
 if ($224) {
  $225 = $223 << 1;
  $226 = (6872 + ($225<<2)|0);
  $227 = HEAP32[1708]|0;
  $228 = 1 << $223;
  $229 = $227 & $228;
  $230 = ($229|0)==(0);
  if ($230) {
   $231 = $227 | $228;
   HEAP32[1708] = $231;
   $$pre = ((($226)) + 8|0);
   $$pre$phiZ2D = $$pre;$F17$0 = $226;
  } else {
   $232 = ((($226)) + 8|0);
   $233 = HEAP32[$232>>2]|0;
   $234 = HEAP32[(6848)>>2]|0;
   $235 = ($233>>>0)<($234>>>0);
   if ($235) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $232;$F17$0 = $233;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $236 = ((($F17$0)) + 12|0);
  HEAP32[$236>>2] = $$1;
  $237 = ((($$1)) + 8|0);
  HEAP32[$237>>2] = $F17$0;
  $238 = ((($$1)) + 12|0);
  HEAP32[$238>>2] = $226;
  return;
 }
 $239 = $$2 >>> 8;
 $240 = ($239|0)==(0);
 if ($240) {
  $I20$0 = 0;
 } else {
  $241 = ($$2>>>0)>(16777215);
  if ($241) {
   $I20$0 = 31;
  } else {
   $242 = (($239) + 1048320)|0;
   $243 = $242 >>> 16;
   $244 = $243 & 8;
   $245 = $239 << $244;
   $246 = (($245) + 520192)|0;
   $247 = $246 >>> 16;
   $248 = $247 & 4;
   $249 = $248 | $244;
   $250 = $245 << $248;
   $251 = (($250) + 245760)|0;
   $252 = $251 >>> 16;
   $253 = $252 & 2;
   $254 = $249 | $253;
   $255 = (14 - ($254))|0;
   $256 = $250 << $253;
   $257 = $256 >>> 15;
   $258 = (($255) + ($257))|0;
   $259 = $258 << 1;
   $260 = (($258) + 7)|0;
   $261 = $$2 >>> $260;
   $262 = $261 & 1;
   $263 = $262 | $259;
   $I20$0 = $263;
  }
 }
 $264 = (7136 + ($I20$0<<2)|0);
 $265 = ((($$1)) + 28|0);
 HEAP32[$265>>2] = $I20$0;
 $266 = ((($$1)) + 16|0);
 $267 = ((($$1)) + 20|0);
 HEAP32[$267>>2] = 0;
 HEAP32[$266>>2] = 0;
 $268 = HEAP32[(6836)>>2]|0;
 $269 = 1 << $I20$0;
 $270 = $268 & $269;
 $271 = ($270|0)==(0);
 if ($271) {
  $272 = $268 | $269;
  HEAP32[(6836)>>2] = $272;
  HEAP32[$264>>2] = $$1;
  $273 = ((($$1)) + 24|0);
  HEAP32[$273>>2] = $264;
  $274 = ((($$1)) + 12|0);
  HEAP32[$274>>2] = $$1;
  $275 = ((($$1)) + 8|0);
  HEAP32[$275>>2] = $$1;
  return;
 }
 $276 = HEAP32[$264>>2]|0;
 $277 = ($I20$0|0)==(31);
 $278 = $I20$0 >>> 1;
 $279 = (25 - ($278))|0;
 $280 = $277 ? 0 : $279;
 $281 = $$2 << $280;
 $K21$0 = $281;$T$0 = $276;
 while(1) {
  $282 = ((($T$0)) + 4|0);
  $283 = HEAP32[$282>>2]|0;
  $284 = $283 & -8;
  $285 = ($284|0)==($$2|0);
  if ($285) {
   $T$0$lcssa = $T$0;
   label = 127;
   break;
  }
  $286 = $K21$0 >>> 31;
  $287 = (((($T$0)) + 16|0) + ($286<<2)|0);
  $288 = $K21$0 << 1;
  $289 = HEAP32[$287>>2]|0;
  $290 = ($289|0)==(0|0);
  if ($290) {
   $$lcssa = $287;$T$0$lcssa30 = $T$0;
   label = 124;
   break;
  } else {
   $K21$0 = $288;$T$0 = $289;
  }
 }
 if ((label|0) == 124) {
  $291 = HEAP32[(6848)>>2]|0;
  $292 = ($$lcssa>>>0)<($291>>>0);
  if ($292) {
   _abort();
   // unreachable;
  }
  HEAP32[$$lcssa>>2] = $$1;
  $293 = ((($$1)) + 24|0);
  HEAP32[$293>>2] = $T$0$lcssa30;
  $294 = ((($$1)) + 12|0);
  HEAP32[$294>>2] = $$1;
  $295 = ((($$1)) + 8|0);
  HEAP32[$295>>2] = $$1;
  return;
 }
 else if ((label|0) == 127) {
  $296 = ((($T$0$lcssa)) + 8|0);
  $297 = HEAP32[$296>>2]|0;
  $298 = HEAP32[(6848)>>2]|0;
  $299 = ($297>>>0)>=($298>>>0);
  $not$ = ($T$0$lcssa>>>0)>=($298>>>0);
  $300 = $299 & $not$;
  if (!($300)) {
   _abort();
   // unreachable;
  }
  $301 = ((($297)) + 12|0);
  HEAP32[$301>>2] = $$1;
  HEAP32[$296>>2] = $$1;
  $302 = ((($$1)) + 8|0);
  HEAP32[$302>>2] = $297;
  $303 = ((($$1)) + 12|0);
  HEAP32[$303>>2] = $T$0$lcssa;
  $304 = ((($$1)) + 24|0);
  HEAP32[$304>>2] = 0;
  return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  ;HEAP32[$this>>2]=HEAP32[$__str>>2]|0;HEAP32[$this+4>>2]=HEAP32[$__str+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$__str+8>>2]|0;
 } else {
  $3 = ((($__str)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($__str)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$4,$6);
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = ((($this)) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = ((($this)) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__n>>>0)<(11);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = ((($this)) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = ((($this)) + 4|0);
  HEAP32[$10>>2] = $__n;
  $__p$0 = $7;
 }
 _memset(($__p$0|0),($__c|0),($__n|0))|0;
 $11 = (($__p$0) + ($__n)|0);
 HEAP8[$11>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($this,$__str,$__pos,$__n,$__a) {
 $this = $this|0;
 $__str = $__str|0;
 $__pos = $__pos|0;
 $__n = $__n|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 $3 = ((($__str)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0&255;
 $6 = $5 >>> 1;
 $7 = $2 ? $6 : $4;
 $8 = ($7>>>0)<($__pos>>>0);
 if ($8) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this);
  // unreachable;
 } else {
  $9 = ((($__str)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($__str)) + 1|0);
  $12 = $2 ? $11 : $10;
  $13 = (($12) + ($__pos)|0);
  $14 = (($7) - ($__pos))|0;
  $15 = ($14>>>0)<($__n>>>0);
  $16 = $15 ? $14 : $__n;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$13,$16);
  return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $6 = 10;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $6 = $phitmp$i;$9 = $5;
 }
 $7 = ($6>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 do {
  if ($7) {
   if ($10) {
    $24 = $9&255;
    $25 = $24 >>> 1;
    $27 = $25;
   } else {
    $22 = ((($this)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $27 = $23;
   }
   $26 = (($__n) - ($6))|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$6,$26,$27,0,$27,$__n,$__s);
  } else {
   if ($10) {
    $13 = ((($this)) + 1|0);
    $14 = $13;
   } else {
    $11 = ((($this)) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $14 = $12;
   }
   _memmove(($14|0),($__s|0),($__n|0))|0;
   $15 = (($14) + ($__n)|0);
   HEAP8[$15>>0] = 0;
   $16 = HEAP8[$this>>0]|0;
   $17 = $16 & 1;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $20 = $__n << 1;
    $21 = $20&255;
    HEAP8[$this>>0] = $21;
    break;
   } else {
    $19 = ((($this)) + 4|0);
    HEAP32[$19>>2] = $__n;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $7 = $6;
 } else {
  $3 = ((($this)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $7 = $4;
 }
 $8 = ($7>>>0)<($__n>>>0);
 do {
  if ($8) {
   $9 = (($__n) - ($7))|0;
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$9,$__c)|0);
  } else {
   if ($2) {
    $14 = (((($this)) + 1|0) + ($__n)|0);
    HEAP8[$14>>0] = 0;
    $15 = $__n << 1;
    $16 = $15&255;
    HEAP8[$this>>0] = $16;
    break;
   } else {
    $10 = ((($this)) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($11) + ($__n)|0);
    HEAP8[$12>>0] = 0;
    $13 = ((($this)) + 4|0);
    HEAP32[$13>>2] = $__n;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)==(0);
 if (!($0)) {
  $1 = HEAP8[$this>>0]|0;
  $2 = $1 & 1;
  $3 = ($2<<24>>24)==(0);
  if ($3) {
   $16 = 10;$8 = $1;
  } else {
   $4 = HEAP32[$this>>2]|0;
   $5 = $4 & -2;
   $phitmp$i = (($5) + -1)|0;
   $6 = $4&255;
   $16 = $phitmp$i;$8 = $6;
  }
  $7 = $8 & 1;
  $9 = ($7<<24>>24)==(0);
  if ($9) {
   $12 = $8&255;
   $13 = $12 >>> 1;
   $15 = $13;
  } else {
   $10 = ((($this)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $15 = $11;
  }
  $14 = (($16) - ($15))|0;
  $17 = ($14>>>0)<($__n>>>0);
  if ($17) {
   $18 = (($__n) - ($16))|0;
   $19 = (($18) + ($15))|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$16,$19,$15,$15,0,0);
   $$pre = HEAP8[$this>>0]|0;
   $21 = $$pre;
  } else {
   $21 = $8;
  }
  $20 = $21 & 1;
  $22 = ($20<<24>>24)==(0);
  if ($22) {
   $25 = ((($this)) + 1|0);
   $27 = $25;
  } else {
   $23 = ((($this)) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $27 = $24;
  }
  $26 = (($27) + ($15)|0);
  _memset(($26|0),($__c|0),($__n|0))|0;
  $28 = (($15) + ($__n))|0;
  $29 = HEAP8[$this>>0]|0;
  $30 = $29 & 1;
  $31 = ($30<<24>>24)==(0);
  if ($31) {
   $33 = $28 << 1;
   $34 = $33&255;
   HEAP8[$this>>0] = $34;
  } else {
   $32 = ((($this)) + 4|0);
   HEAP32[$32>>2] = $28;
  }
  $35 = (($27) + ($28)|0);
  HEAP8[$35>>0] = 0;
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$0 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0, $phitmp$i = 0;
 var $phitmp$i$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 10;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $14 = $13;
 } else {
  $10 = ((($this)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $15 = ($14>>>0)>($__res_arg>>>0);
 $16 = $15 ? $14 : $__res_arg;
 $17 = ($16>>>0)<(11);
 if ($17) {
  $20 = 10;
 } else {
  $18 = (($16) + 16)|0;
  $19 = $18 & -16;
  $phitmp$i$2 = (($19) + -1)|0;
  $20 = $phitmp$i$2;
 }
 $21 = ($20|0)==($22|0);
 L14: do {
  if (!($21)) {
   $23 = ($20|0)==(10);
   do {
    if ($23) {
     $24 = ((($this)) + 1|0);
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
    } else {
     $27 = ($20>>>0)>($22>>>0);
     $28 = (($20) + 1)|0;
     if ($27) {
      $29 = (__Znwj($28)|0);
      $__new_data$0 = $29;
     } else {
      __THREW__ = 0;
      $30 = (invoke_ii(387,($28|0))|0);
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       $33 = ___cxa_find_matching_catch(0|0)|0;
       $34 = tempRet0;
       (___cxa_begin_catch(($33|0))|0);
       ___cxa_end_catch();
       break L14;
      } else {
       $__new_data$0 = $30;
      }
     }
     $35 = $8 & 1;
     $36 = ($35<<24>>24)==(0);
     if ($36) {
      $39 = ((($this)) + 1|0);
      $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $39;$__was_long$0$off0 = 0;
      break;
     } else {
      $37 = ((($this)) + 8|0);
      $38 = HEAP32[$37>>2]|0;
      $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $38;$__was_long$0$off0 = 1;
      break;
     }
    }
   } while(0);
   $40 = $8 & 1;
   $41 = ($40<<24>>24)==(0);
   if ($41) {
    $44 = $8&255;
    $45 = $44 >>> 1;
    $47 = $45;
   } else {
    $42 = ((($this)) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $47 = $43;
   }
   $46 = (($47) + 1)|0;
   _memcpy(($__new_data$1|0),($__p$0|0),($46|0))|0;
   if ($__was_long$0$off0) {
    __ZdlPv($__p$0);
   }
   if ($__now_long$0$off0) {
    $48 = (($20) + 1)|0;
    $49 = $48 | 1;
    HEAP32[$this>>2] = $49;
    $50 = ((($this)) + 4|0);
    HEAP32[$50>>2] = $14;
    $51 = ((($this)) + 8|0);
    HEAP32[$51>>2] = $__new_data$1;
    break;
   } else {
    $52 = $14 << 1;
    $53 = $52&255;
    HEAP8[$this>>0] = $53;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = ((($this)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 10;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = ((($this)) + 1|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $$pn = $14;
 }
 else if ((label|0) == 8) {
  $18 = ((($this)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = ((($this)) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;
 }
 $__p$0 = (($$pn) + ($__sz$0)|0);
 HEAP8[$__p$0>>0] = $__c;
 $22 = ((($__p$0)) + 1|0);
 HEAP8[$22>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $15 = 10;$7 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $15 = $phitmp$i;$7 = $5;
 }
 $6 = $7 & 1;
 $8 = ($6<<24>>24)==(0);
 if ($8) {
  $11 = $7&255;
  $12 = $11 >>> 1;
  $14 = $12;
 } else {
  $9 = ((($this)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $14 = $10;
 }
 $13 = (($15) - ($14))|0;
 $16 = ($13>>>0)<($__n>>>0);
 if ($16) {
  $33 = (($__n) - ($15))|0;
  $34 = (($33) + ($14))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$15,$34,$14,$14,0,$__n,$__s);
 } else {
  $17 = ($__n|0)==(0);
  if (!($17)) {
   $18 = $7 & 1;
   $19 = ($18<<24>>24)==(0);
   if ($19) {
    $22 = ((($this)) + 1|0);
    $24 = $22;
   } else {
    $20 = ((($this)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $24 = $21;
   }
   $23 = (($24) + ($14)|0);
   _memcpy(($23|0),($__s|0),($__n|0))|0;
   $25 = (($14) + ($__n))|0;
   $26 = HEAP8[$this>>0]|0;
   $27 = $26 & 1;
   $28 = ($27<<24>>24)==(0);
   if ($28) {
    $30 = $25 << 1;
    $31 = $30&255;
    HEAP8[$this>>0] = $31;
   } else {
    $29 = ((($this)) + 4|0);
    HEAP32[$29>>2] = $25;
   }
   $32 = (($24) + ($25)|0);
   HEAP8[$32>>0] = 0;
  }
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-18 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 1|0);
  $20 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  $14 = (($12) + 16)|0;
  $15 = $14 & -16;
  $16 = $13 ? 11 : $15;
  $17 = $16;
 } else {
  $17 = -17;
 }
 $18 = (__Znwj($17)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  _memcpy(($18|0),($20|0),($__n_copy|0))|0;
 }
 $21 = ($__n_add|0)==(0);
 if (!($21)) {
  $22 = (($18) + ($__n_copy)|0);
  _memcpy(($22|0),($__p_new_stuff|0),($__n_add|0))|0;
 }
 $23 = (($__old_sz) - ($__n_del))|0;
 $24 = ($23|0)==($__n_copy|0);
 if (!($24)) {
  $25 = (($23) - ($__n_copy))|0;
  $26 = (($18) + ($__n_copy)|0);
  $27 = (($26) + ($__n_add)|0);
  $28 = (($20) + ($__n_copy)|0);
  $29 = (($28) + ($__n_del)|0);
  _memcpy(($27|0),($29|0),($25|0))|0;
 }
 $30 = ($__old_cap|0)==(10);
 if (!($30)) {
  __ZdlPv($20);
 }
 $31 = ((($this)) + 8|0);
 HEAP32[$31>>2] = $18;
 $32 = $17 | 1;
 HEAP32[$this>>2] = $32;
 $33 = (($23) + ($__n_add))|0;
 $34 = ((($this)) + 4|0);
 HEAP32[$34>>2] = $33;
 $35 = (($18) + ($33)|0);
 HEAP8[$35>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-17 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 1|0);
  $20 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  $14 = (($12) + 16)|0;
  $15 = $14 & -16;
  $16 = $13 ? 11 : $15;
  $17 = $16;
 } else {
  $17 = -17;
 }
 $18 = (__Znwj($17)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  _memcpy(($18|0),($20|0),($__n_copy|0))|0;
 }
 $21 = (($__old_sz) - ($__n_del))|0;
 $22 = ($21|0)==($__n_copy|0);
 if (!($22)) {
  $23 = (($21) - ($__n_copy))|0;
  $24 = (($18) + ($__n_copy)|0);
  $25 = (($24) + ($__n_add)|0);
  $26 = (($20) + ($__n_copy)|0);
  $27 = (($26) + ($__n_del)|0);
  _memcpy(($25|0),($27|0),($23|0))|0;
 }
 $28 = ($__old_cap|0)==(10);
 if (!($28)) {
  __ZdlPv($20);
 }
 $29 = ((($this)) + 8|0);
 HEAP32[$29>>2] = $18;
 $30 = $17 | 1;
 HEAP32[$this>>2] = $30;
 return;
}
function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj($this,$__pos1,$__n1,$__s,$__n2) {
 $this = $this|0;
 $__pos1 = $__pos1|0;
 $__n1 = $__n1|0;
 $__s = $__s|0;
 $__n2 = $__n2|0;
 var $$ = 0, $$$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $7 = $6;
 } else {
  $3 = ((($this)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $7 = $4;
 }
 $8 = ($7>>>0)<($__pos1>>>0);
 $9 = ($__n2|0)==(-1);
 $or$cond = $9 | $8;
 if ($or$cond) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this);
  // unreachable;
 }
 $10 = (($7) - ($__pos1))|0;
 $11 = ($10>>>0)<($__n1>>>0);
 $12 = $11 ? $10 : $__n1;
 if ($2) {
  $15 = ((($this)) + 1|0);
  $17 = $15;
 } else {
  $13 = ((($this)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $17 = $14;
 }
 $16 = (($17) + ($__pos1)|0);
 $18 = ($12>>>0)>($__n2>>>0);
 $19 = $18 ? $__n2 : $12;
 $20 = (_memcmp($16,$__s,$19)|0);
 $21 = ($20|0)==(0);
 if ($21) {
  $22 = ($12>>>0)<($__n2>>>0);
  $$ = $18&1;
  $$$ = $22 ? -1 : $$;
  return ($$$|0);
 } else {
  return ($20|0);
 }
 return (0)|0;
}
function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($__s)|0);
 __THREW__ = 0;
 $1 = (invoke_iiiiii(411,($this|0),0,-1,($__s|0),($0|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  return ($1|0);
 }
 return (0)|0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcjj($this,$__s,$__sz,$__reserve) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 $__reserve = $__reserve|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__reserve>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__reserve>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__reserve) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = ((($this)) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = ((($this)) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(2);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = ((($this)) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = ((($this)) + 4|0);
  HEAP32[$11>>2] = $__sz;
  $__p$0 = $8;
 }
 (_wmemcpy($__p$0,$__s,$__sz)|0);
 $12 = (($__p$0) + ($__sz<<2)|0);
 HEAP32[$12>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__n>>>0)<(2);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = ((($this)) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = ((($this)) + 4|0);
  HEAP32[$11>>2] = $__n;
  $__p$0 = $8;
 }
 (_wmemset($__p$0,$__c,$__n)|0);
 $12 = (($__p$0) + ($__n<<2)|0);
 HEAP32[$12>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $6 = 1;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $6 = $phitmp$i;$9 = $5;
 }
 $7 = ($6>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 do {
  if ($7) {
   if ($10) {
    $24 = $9&255;
    $25 = $24 >>> 1;
    $27 = $25;
   } else {
    $22 = ((($this)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $27 = $23;
   }
   $26 = (($__n) - ($6))|0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$6,$26,$27,0,$27,$__n,$__s);
  } else {
   if ($10) {
    $13 = ((($this)) + 4|0);
    $14 = $13;
   } else {
    $11 = ((($this)) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $14 = $12;
   }
   (_wmemmove($14,$__s,$__n)|0);
   $15 = (($14) + ($__n<<2)|0);
   HEAP32[$15>>2] = 0;
   $16 = HEAP8[$this>>0]|0;
   $17 = $16 & 1;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $20 = $__n << 1;
    $21 = $20&255;
    HEAP8[$this>>0] = $21;
    break;
   } else {
    $19 = ((($this)) + 4|0);
    HEAP32[$19>>2] = $__n;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0;
 var $phitmp$i = 0, $phitmp$i$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 1;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $14 = $13;
 } else {
  $10 = ((($this)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $15 = ($14>>>0)>($__res_arg>>>0);
 $16 = $15 ? $14 : $__res_arg;
 $17 = ($16>>>0)<(2);
 if ($17) {
  $20 = 1;
 } else {
  $18 = (($16) + 4)|0;
  $19 = $18 & -4;
  $phitmp$i$2 = (($19) + -1)|0;
  $20 = $phitmp$i$2;
 }
 $21 = ($20|0)==($22|0);
 L14: do {
  if (!($21)) {
   $23 = ($20|0)==(1);
   do {
    if ($23) {
     $24 = ((($this)) + 4|0);
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
    } else {
     $27 = ($20>>>0)>($22>>>0);
     $28 = $20 << 2;
     $29 = (($28) + 4)|0;
     if ($27) {
      $30 = (__Znwj($29)|0);
      $$sink = $30;
     } else {
      __THREW__ = 0;
      $31 = (invoke_ii(387,($29|0))|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       $34 = ___cxa_find_matching_catch(0|0)|0;
       $35 = tempRet0;
       (___cxa_begin_catch(($34|0))|0);
       ___cxa_end_catch();
       break L14;
      } else {
       $$sink = $31;
      }
     }
     $36 = $8 & 1;
     $37 = ($36<<24>>24)==(0);
     if ($37) {
      $40 = ((($this)) + 4|0);
      $__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $40;$__was_long$0$off0 = 0;
      break;
     } else {
      $38 = ((($this)) + 8|0);
      $39 = HEAP32[$38>>2]|0;
      $__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $39;$__was_long$0$off0 = 1;
      break;
     }
    }
   } while(0);
   $41 = $8 & 1;
   $42 = ($41<<24>>24)==(0);
   if ($42) {
    $45 = $8&255;
    $46 = $45 >>> 1;
    $48 = $46;
   } else {
    $43 = ((($this)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $48 = $44;
   }
   $47 = (($48) + 1)|0;
   (_wmemcpy($__new_data$1,$__p$0,$47)|0);
   if ($__was_long$0$off0) {
    __ZdlPv($__p$0);
   }
   if ($__now_long$0$off0) {
    $49 = (($20) + 1)|0;
    $50 = $49 | 1;
    HEAP32[$this>>2] = $50;
    $51 = ((($this)) + 4|0);
    HEAP32[$51>>2] = $14;
    $52 = ((($this)) + 8|0);
    HEAP32[$52>>2] = $__new_data$1;
    break;
   } else {
    $53 = $14 << 1;
    $54 = $53&255;
    HEAP8[$this>>0] = $54;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = ((($this)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 1;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = ((($this)) + 4|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $$pn = $14;
 }
 else if ((label|0) == 8) {
  $18 = ((($this)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = ((($this)) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;
 }
 $__p$0 = (($$pn) + ($__sz$0<<2)|0);
 HEAP32[$__p$0>>2] = $__c;
 $22 = ((($__p$0)) + 4|0);
 HEAP32[$22>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741806 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 4|0);
  $21 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $21 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  $14 = (($12) + 4)|0;
  $15 = $14 & -4;
  $16 = $13 ? 2 : $15;
  $18 = $16;
 } else {
  $18 = 1073741807;
 }
 $17 = $18 << 2;
 $19 = (__Znwj($17)|0);
 $20 = ($__n_copy|0)==(0);
 if (!($20)) {
  (_wmemcpy($19,$21,$__n_copy)|0);
 }
 $22 = ($__n_add|0)==(0);
 if (!($22)) {
  $23 = (($19) + ($__n_copy<<2)|0);
  (_wmemcpy($23,$__p_new_stuff,$__n_add)|0);
 }
 $24 = (($__old_sz) - ($__n_del))|0;
 $25 = ($24|0)==($__n_copy|0);
 if (!($25)) {
  $26 = (($24) - ($__n_copy))|0;
  $27 = (($19) + ($__n_copy<<2)|0);
  $28 = (($27) + ($__n_add<<2)|0);
  $29 = (($21) + ($__n_copy<<2)|0);
  $30 = (($29) + ($__n_del<<2)|0);
  (_wmemcpy($28,$30,$26)|0);
 }
 $31 = ($__old_cap|0)==(1);
 if (!($31)) {
  __ZdlPv($21);
 }
 $32 = ((($this)) + 8|0);
 HEAP32[$32>>2] = $19;
 $33 = $18 | 1;
 HEAP32[$this>>2] = $33;
 $34 = (($24) + ($__n_add))|0;
 $35 = ((($this)) + 4|0);
 HEAP32[$35>>2] = $34;
 $36 = (($19) + ($34<<2)|0);
 HEAP32[$36>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741807 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 4|0);
  $21 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $21 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  $14 = (($12) + 4)|0;
  $15 = $14 & -4;
  $16 = $13 ? 2 : $15;
  $18 = $16;
 } else {
  $18 = 1073741807;
 }
 $17 = $18 << 2;
 $19 = (__Znwj($17)|0);
 $20 = ($__n_copy|0)==(0);
 if (!($20)) {
  (_wmemcpy($19,$21,$__n_copy)|0);
 }
 $22 = (($__old_sz) - ($__n_del))|0;
 $23 = ($22|0)==($__n_copy|0);
 if (!($23)) {
  $24 = (($22) - ($__n_copy))|0;
  $25 = (($19) + ($__n_copy<<2)|0);
  $26 = (($25) + ($__n_add<<2)|0);
  $27 = (($21) + ($__n_copy<<2)|0);
  $28 = (($27) + ($__n_del<<2)|0);
  (_wmemcpy($26,$28,$24)|0);
 }
 $29 = ($__old_cap|0)==(1);
 if (!($29)) {
  __ZdlPv($21);
 }
 $30 = ((($this)) + 8|0);
 HEAP32[$30>>2] = $19;
 $31 = $18 | 1;
 HEAP32[$this>>2] = $31;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__p$0 = 0, $__p$0$ph = 0, $scevgep2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = $__last;
 $2 = (($1) - ($0))|0;
 $3 = ($2>>>0)>(4294967279);
 if ($3) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $4 = ($2>>>0)<(11);
 if ($4) {
  $5 = $2 << 1;
  $6 = $5&255;
  HEAP8[$this>>0] = $6;
  $7 = ((($this)) + 1|0);
  $__p$0$ph = $7;
 } else {
  $8 = (($2) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwj($9)|0);
  $11 = ((($this)) + 8|0);
  HEAP32[$11>>2] = $10;
  $12 = $9 | 1;
  HEAP32[$this>>2] = $12;
  $13 = ((($this)) + 4|0);
  HEAP32[$13>>2] = $2;
  $__p$0$ph = $10;
 }
 $14 = $__last;
 $15 = (($14) - ($0))|0;
 $$0 = $__first;$__p$0 = $__p$0$ph;
 while(1) {
  $16 = ($$0|0)==($__last|0);
  if ($16) {
   break;
  }
  $17 = HEAP8[$$0>>0]|0;
  HEAP8[$__p$0>>0] = $17;
  $18 = ((($$0)) + 1|0);
  $19 = ((($__p$0)) + 1|0);
  $$0 = $18;$__p$0 = $19;
 }
 $scevgep2 = (($__p$0$ph) + ($15)|0);
 HEAP8[$scevgep2>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, $__p$0$ph = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = $__last;
 $2 = (($1) - ($0))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)>(1073741807);
 if ($4) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $5 = ($3>>>0)<(2);
 if ($5) {
  $6 = $2 >>> 1;
  $7 = $6&255;
  HEAP8[$this>>0] = $7;
  $8 = ((($this)) + 4|0);
  $__p$0$ph = $8;
 } else {
  $9 = (($3) + 4)|0;
  $10 = $9 & -4;
  $11 = $10 << 2;
  $12 = (__Znwj($11)|0);
  $13 = ((($this)) + 8|0);
  HEAP32[$13>>2] = $12;
  $14 = $10 | 1;
  HEAP32[$this>>2] = $14;
  $15 = ((($this)) + 4|0);
  HEAP32[$15>>2] = $3;
  $__p$0$ph = $12;
 }
 $16 = $__last;
 $17 = (($16) - ($0))|0;
 $18 = $17 >>> 2;
 $$0 = $__first;$__p$0 = $__p$0$ph;
 while(1) {
  $19 = ($$0|0)==($__last|0);
  if ($19) {
   break;
  }
  $20 = HEAP32[$$0>>2]|0;
  HEAP32[$__p$0>>2] = $20;
  $21 = ((($$0)) + 4|0);
  $22 = ((($__p$0)) + 4|0);
  $$0 = $21;$__p$0 = $22;
 }
 $scevgep = (($__p$0$ph) + ($18<<2)|0);
 HEAP32[$scevgep>>2] = 0;
 return;
}
function __ZNSt3__18ios_base5clearEj($this,$state) {
 $this = $this|0;
 $state = $state|0;
 var $$state = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = ((($this)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 $4 = $3&1;
 $$state = $4 | $state;
 $5 = ((($this)) + 16|0);
 HEAP32[$5>>2] = $$state;
 $6 = $3&1;
 $7 = $6 | $state;
 $8 = ((($this)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $7 & $9;
 $11 = ($10|0)==(0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = (___cxa_allocate_exception(16)|0);
 (__ZNSt3__117iostream_categoryEv()|0);
 HEAP32[$0>>2] = 1;
 $13 = ((($0)) + 4|0);
 HEAP32[$13>>2] = (7480);
 __THREW__ = 0;
 invoke_viii(412,($12|0),(19405|0),($0|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  ___cxa_free_exception(($12|0));
  ___resumeException($16|0);
  // unreachable;
 } else {
  ___cxa_throw(($12|0),(400|0),(74|0));
  // unreachable;
 }
}
function __ZNSt3__18ios_baseD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (7436);
 __THREW__ = 0;
 invoke_vii(413,($this|0),0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $11 = ___cxa_find_matching_catch(0|0)|0;
  $12 = tempRet0;
  ___clang_call_terminate($11);
  // unreachable;
 } else {
  $2 = ((($this)) + 28|0);
  __ZNSt3__16localeD2Ev($2);
  $3 = ((($this)) + 32|0);
  $4 = HEAP32[$3>>2]|0;
  _free($4);
  $5 = ((($this)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  _free($6);
  $7 = ((($this)) + 48|0);
  $8 = HEAP32[$7>>2]|0;
  _free($8);
  $9 = ((($this)) + 60|0);
  $10 = HEAP32[$9>>2]|0;
  _free($10);
  return;
 }
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 return;
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__18ios_base16__call_callbacksENS0_5eventE($this,$ev) {
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 32|0);
 $3 = ((($this)) + 36|0);
 $i$0 = $1;
 while(1) {
  $4 = ($i$0|0)==(0);
  if ($4) {
   break;
  }
  $5 = (($i$0) + -1)|0;
  $6 = HEAP32[$2>>2]|0;
  $7 = (($6) + ($5<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$3>>2]|0;
  $10 = (($9) + ($5<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viii[$8 & 1023]($ev,$this,$11);
  $i$0 = $5;
 }
 return;
}
function __ZNKSt3__18ios_base6getlocEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = ((($this)) + 28|0);
 __ZNSt3__16localeC2ERKS0_($0,$1);
 $2 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__18ios_base4initEPv($this,$sb) {
 $this = $this|0;
 $sb = $sb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $not$ = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 24|0);
 HEAP32[$0>>2] = $sb;
 $not$ = ($sb|0)==(0|0);
 $1 = $not$&1;
 $2 = ((($this)) + 16|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($this)) + 20|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($this)) + 4|0);
 HEAP32[$4>>2] = 4098;
 $5 = ((($this)) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($this)) + 8|0);
 HEAP32[$6>>2] = 6;
 $7 = ((($this)) + 32|0);
 $8 = ((($this)) + 28|0);
 dest=$7; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZNSt3__16localeC2Ev($8);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (7352);
 $0 = ((($this)) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (7352);
 $0 = ((($this)) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (7352);
 $0 = ((($this)) + 4|0);
 __ZNSt3__16localeC2Ev($0);
 $1 = ((($this)) + 8|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($this|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($agg$result)) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($agg$result)) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0 = 0, $__i$0$lcssa = 0, $storemerge = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 $1 = ((($this)) + 16|0);
 $$0 = $__s;$__i$0 = 0;
 while(1) {
  $2 = ($__i$0|0)<($__n|0);
  if (!($2)) {
   $__i$0$lcssa = $__i$0;
   break;
  }
  $3 = HEAP32[$0>>2]|0;
  $4 = HEAP32[$1>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = ((($3)) + 1|0);
   HEAP32[$0>>2] = $6;
   $7 = HEAP8[$3>>0]|0;
   $storemerge = $7;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = ((($8)) + 40|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (FUNCTION_TABLE_ii[$10 & 1023]($this)|0);
   $12 = ($11|0)==(-1);
   if ($12) {
    $__i$0$lcssa = $__i$0;
    break;
   }
   $13 = $11&255;
   $storemerge = $13;
  }
  HEAP8[$$0>>0] = $storemerge;
  $14 = (($__i$0) + 1)|0;
  $15 = ((($$0)) + 1|0);
  $$0 = $15;$__i$0 = $14;
 }
 return ($__i$0$lcssa|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
 } else {
  $5 = ((($this)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 1|0);
  HEAP32[$5>>2] = $7;
  $8 = HEAP8[$6>>0]|0;
  $9 = $8&255;
  $$0 = $9;
 }
 return ($$0|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0 = 0, $__i$0$lcssa = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 24|0);
 $1 = ((($this)) + 28|0);
 $$0 = $__s;$__i$0 = 0;
 while(1) {
  $2 = ($__i$0|0)<($__n|0);
  if (!($2)) {
   $__i$0$lcssa = $__i$0;
   break;
  }
  $3 = HEAP32[$0>>2]|0;
  $4 = HEAP32[$1>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = HEAP8[$$0>>0]|0;
   $7 = ((($3)) + 1|0);
   HEAP32[$0>>2] = $7;
   HEAP8[$3>>0] = $6;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = ((($8)) + 52|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP8[$$0>>0]|0;
   $12 = $11&255;
   $13 = (FUNCTION_TABLE_iii[$10 & 511]($this,$12)|0);
   $14 = ($13|0)==(-1);
   if ($14) {
    $__i$0$lcssa = $__i$0;
    break;
   }
  }
  $15 = ((($$0)) + 1|0);
  $16 = (($__i$0) + 1)|0;
  $$0 = $15;$__i$0 = $16;
 }
 return ($__i$0$lcssa|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $4 = ((($3)) + 8|0);
 __ZNSt3__18ios_baseD2Ev($4);
 return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($3);
 return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b($this,$__is,$__noskipws) {
 $this = $this|0;
 $__is = $__is|0;
 $__noskipws = $__noskipws|0;
 var $$0$i$i = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $isascii1$i = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP8[$this>>0] = 0;
 $1 = HEAP32[$__is>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($__is) + ($3)|0);
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($4)) + 72|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($9)|0);
  }
  do {
   if (!($__noskipws)) {
    $11 = HEAP32[$__is>>2]|0;
    $12 = ((($11)) + -12|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (($__is) + ($13)|0);
    $15 = ((($14)) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = $16 & 4096;
    $18 = ($17|0)==(0);
    if (!($18)) {
     $19 = (__ZNKSt3__18ios_base6getlocEv($14)|0);
     HEAP32[$0>>2] = $19;
     __THREW__ = 0;
     $20 = (invoke_iii(354,($0|0),(8588|0))|0);
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if ($22) {
      $64 = ___cxa_find_matching_catch()|0;
      $65 = tempRet0;
      __ZNSt3__16localeD2Ev($0);
      ___resumeException($64|0);
      // unreachable;
     }
     __ZNSt3__16localeD2Ev($0);
     $23 = HEAP32[$__is>>2]|0;
     $24 = ((($23)) + -12|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = (($__is) + ($25)|0);
     $27 = ((($26)) + 24|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ((($20)) + 8|0);
     $30 = $28;
     $31 = ($28|0)==(0);
     $32 = ((($30)) + 12|0);
     $33 = ((($30)) + 16|0);
     $34 = $28;
     $35 = $28;
     $36 = ((($35)) + 12|0);
     $37 = ((($35)) + 16|0);
     $38 = $28;
     $39 = $28;
     while(1) {
      if ($31) {
       $$pre$phiZ2D = 0;$73 = 0;
       break;
      }
      $40 = HEAP32[$32>>2]|0;
      $41 = HEAP32[$33>>2]|0;
      $42 = ($40|0)==($41|0);
      if ($42) {
       $43 = HEAP32[$34>>2]|0;
       $44 = ((($43)) + 36|0);
       $45 = HEAP32[$44>>2]|0;
       $46 = (FUNCTION_TABLE_ii[$45 & 1023]($30)|0);
       $47 = ($46|0)==(-1);
       if ($47) {
        $$pre$phiZ2D = 0;$73 = 0;
        break;
       }
      }
      $48 = HEAP32[$36>>2]|0;
      $49 = HEAP32[$37>>2]|0;
      $50 = ($48|0)==($49|0);
      if ($50) {
       $51 = HEAP32[$38>>2]|0;
       $52 = ((($51)) + 36|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = (FUNCTION_TABLE_ii[$53 & 1023]($35)|0);
       $$0$i$i = $54;
      } else {
       $55 = HEAP8[$48>>0]|0;
       $56 = $55&255;
       $$0$i$i = $56;
      }
      $57 = $$0$i$i&255;
      $isascii1$i = ($57<<24>>24)>(-1);
      if (!($isascii1$i)) {
       $$pre$phiZ2D = $35;$73 = $28;
       break;
      }
      $sext = $$0$i$i << 24;
      $58 = $sext >> 24;
      $59 = HEAP32[$29>>2]|0;
      $60 = (($59) + ($58<<1)|0);
      $61 = HEAP16[$60>>1]|0;
      $62 = $61 & 8192;
      $63 = ($62<<16>>16)==(0);
      if ($63) {
       $$pre$phiZ2D = $35;$73 = $28;
       break;
      }
      $66 = HEAP32[$36>>2]|0;
      $67 = HEAP32[$37>>2]|0;
      $68 = ($66|0)==($67|0);
      if ($68) {
       $69 = HEAP32[$39>>2]|0;
       $70 = ((($69)) + 40|0);
       $71 = HEAP32[$70>>2]|0;
       (FUNCTION_TABLE_ii[$71 & 1023]($35)|0);
       continue;
      } else {
       $72 = ((($66)) + 1|0);
       HEAP32[$36>>2] = $72;
       continue;
      }
     }
     $74 = ($73|0)==(0);
     if (!($74)) {
      $75 = ((($$pre$phiZ2D)) + 12|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ((($$pre$phiZ2D)) + 16|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = ($76|0)==($78|0);
      if (!($79)) {
       break;
      }
      $80 = $73;
      $81 = HEAP32[$80>>2]|0;
      $82 = ((($81)) + 36|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = (FUNCTION_TABLE_ii[$83 & 1023]($$pre$phiZ2D)|0);
      $85 = ($84|0)==(-1);
      if (!($85)) {
       break;
      }
     }
     $86 = HEAP32[$__is>>2]|0;
     $87 = ((($86)) + -12|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = (($__is) + ($88)|0);
     $90 = ((($89)) + 16|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = $91 | 6;
     __ZNSt3__18ios_base5clearEj($89,$92);
    }
   }
  } while(0);
  $93 = HEAP32[$__is>>2]|0;
  $94 = ((($93)) + -12|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (($__is) + ($95)|0);
  $97 = ((($96)) + 16|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = ($98|0)==(0);
  $100 = $99&1;
  HEAP8[$this>>0] = $100;
 } else {
  $101 = $6 | 4;
  __ZNSt3__18ios_base5clearEj($4,$101);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $4 = ((($3)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 L1: do {
  if (!($6)) {
   __THREW__ = 0;
   invoke_vii(414,($__s|0),($this|0));
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   L3: do {
    if ($8) {
     $33 = ___cxa_find_matching_catch(0|0)|0;
     $34 = tempRet0;
     $$0 = $33;
    } else {
     $9 = HEAP8[$__s>>0]|0;
     $10 = ($9<<24>>24)==(0);
     do {
      if (!($10)) {
       $11 = HEAP32[$this>>2]|0;
       $12 = ((($11)) + -12|0);
       $13 = HEAP32[$12>>2]|0;
       $14 = (($this) + ($13)|0);
       $15 = ((($14)) + 24|0);
       $16 = HEAP32[$15>>2]|0;
       $17 = HEAP32[$16>>2]|0;
       $18 = ((($17)) + 24|0);
       $19 = HEAP32[$18>>2]|0;
       __THREW__ = 0;
       $20 = (invoke_ii($19|0,($16|0))|0);
       $21 = __THREW__; __THREW__ = 0;
       $22 = $21&1;
       if (!($22)) {
        $23 = ($20|0)==(-1);
        if (!($23)) {
         break;
        }
        $24 = HEAP32[$this>>2]|0;
        $25 = ((($24)) + -12|0);
        $26 = HEAP32[$25>>2]|0;
        $27 = (($this) + ($26)|0);
        $28 = ((($27)) + 16|0);
        $29 = HEAP32[$28>>2]|0;
        $30 = $29 | 1;
        __THREW__ = 0;
        invoke_vii(352,($27|0),($30|0));
        $31 = __THREW__; __THREW__ = 0;
        $32 = $31&1;
        if (!($32)) {
         break;
        }
       }
       $35 = ___cxa_find_matching_catch(0|0)|0;
       $36 = tempRet0;
       __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
       $$0 = $35;
       break L3;
      }
     } while(0);
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
     break L1;
    }
   } while(0);
   (___cxa_begin_catch(($$0|0))|0);
   $37 = HEAP32[$this>>2]|0;
   $38 = ((($37)) + -12|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($this) + ($39)|0);
   __THREW__ = 0;
   invoke_vi(374,($40|0));
   $41 = __THREW__; __THREW__ = 0;
   $42 = $41&1;
   if (!($42)) {
    ___cxa_end_catch();
    break;
   }
   $43 = ___cxa_find_matching_catch()|0;
   $44 = tempRet0;
   __THREW__ = 0;
   invoke_v(372);
   $45 = __THREW__; __THREW__ = 0;
   $46 = $45&1;
   if ($46) {
    $47 = ___cxa_find_matching_catch(0|0)|0;
    $48 = tempRet0;
    ___clang_call_terminate($47);
    // unreachable;
   } else {
    ___resumeException($43|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 | 1;
 HEAP32[$0>>2] = $2;
 $3 = ((($this)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  return;
 } else {
  ___cxa_rethrow();
  // unreachable;
 }
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 0;
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = $__os;
 $1 = HEAP32[$__os>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($__os) + ($3)|0);
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($4)) + 72|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($9)|0);
  }
  HEAP8[$this>>0] = 1;
 }
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 do {
  if (!($8)) {
   $9 = ((($5)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $12 = ((($5)) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $13 & 8192;
    $15 = ($14|0)==(0);
    if (!($15)) {
     $16 = (__ZSt18uncaught_exceptionv()|0);
     if (!($16)) {
      $17 = HEAP32[$0>>2]|0;
      $18 = HEAP32[$17>>2]|0;
      $19 = ((($18)) + -12|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = (($17) + ($20)|0);
      $22 = ((($21)) + 24|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = HEAP32[$23>>2]|0;
      $25 = ((($24)) + 24|0);
      $26 = HEAP32[$25>>2]|0;
      __THREW__ = 0;
      $27 = (invoke_ii($26|0,($23|0))|0);
      $28 = __THREW__; __THREW__ = 0;
      $29 = $28&1;
      if (!($29)) {
       $30 = ($27|0)==(-1);
       if (!($30)) {
        break;
       }
       $31 = HEAP32[$0>>2]|0;
       $32 = HEAP32[$31>>2]|0;
       $33 = ((($32)) + -12|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($31) + ($34)|0);
       $36 = ((($35)) + 16|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = $37 | 1;
       __THREW__ = 0;
       invoke_vii(352,($35|0),($38|0));
       $39 = __THREW__; __THREW__ = 0;
       $40 = $39&1;
       if (!($40)) {
        break;
       }
      }
      $41 = ___cxa_find_matching_catch(0|0)|0;
      $42 = tempRet0;
      (___cxa_begin_catch(($41|0))|0);
      __THREW__ = 0;
      invoke_v(372);
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if ($44) {
       $45 = ___cxa_find_matching_catch(0|0)|0;
       $46 = tempRet0;
       ___clang_call_terminate($45);
       // unreachable;
      }
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNKSt3__119__iostream_category4nameEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (19421|0);
}
function __ZNKSt3__119__iostream_category7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ev|0)!=(1);
 $1 = ($ev|0)<(257);
 $or$cond = $0 & $1;
 if ($or$cond) {
  __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev);
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,19430,35);
 }
 return;
}
function __ZNSt3__117iostream_categoryEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[488]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((488|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   HEAP32[1870] = (7452);
   (___cxa_atexit((78|0),(7480|0),(___dso_handle|0))|0);
   ___cxa_guard_release((488|0));
  }
 }
 return (7480|0);
}
function __ZNSt3__18ios_base7failureC2EPKcRKNS_10error_codeE($this,$msg,$ec) {
 $this = $this|0;
 $msg = $msg|0;
 $ec = $ec|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmpcast$byval_copy = sp + 8|0;
 $0 = sp;
 $1 = $ec;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$0>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;
 __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$tmpcast$byval_copy,$msg);
 HEAP32[$this>>2] = (7416);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 return;
}
function __ZNSt3__18ios_base7failureD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__18ios_baseD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__119__iostream_categoryD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__17collateIcED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__16locale5facetD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17collateIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$02$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$01 = $__lo2;$$02 = $__lo1;
 while(1) {
  $0 = ($$01|0)==($__hi2|0);
  if ($0) {
   $$02$lcssa = $$02;
   label = 7;
   break;
  }
  $1 = ($$02|0)==($__hi1|0);
  if ($1) {
   $$0 = -1;
   break;
  }
  $2 = HEAP8[$$02>>0]|0;
  $3 = HEAP8[$$01>>0]|0;
  $4 = ($2<<24>>24)<($3<<24>>24);
  if ($4) {
   $$0 = -1;
   break;
  }
  $5 = ($3<<24>>24)<($2<<24>>24);
  if ($5) {
   $$0 = 1;
   break;
  }
  $6 = ((($$02)) + 1|0);
  $7 = ((($$01)) + 1|0);
  $$01 = $7;$$02 = $6;
 }
 if ((label|0) == 7) {
  $8 = ($$02$lcssa|0)!=($__hi1|0);
  $9 = $8&1;
  $$0 = $9;
 }
 return ($$0|0);
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 return;
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0 = 0, $__h$0$lcssa = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__h$0 = 0;$__p$0 = $__lo;
 while(1) {
  $0 = ($__p$0|0)==($__hi|0);
  if ($0) {
   $__h$0$lcssa = $__h$0;
   break;
  }
  $1 = $__h$0 << 4;
  $2 = HEAP8[$__p$0>>0]|0;
  $3 = $2 << 24 >> 24;
  $4 = (($3) + ($1))|0;
  $5 = $4 & -268435456;
  $6 = $5 >>> 24;
  $7 = $6 | $5;
  $8 = $7 ^ $4;
  $9 = ((($__p$0)) + 1|0);
  $__h$0 = $8;$__p$0 = $9;
 }
 return ($__h$0$lcssa|0);
}
function __ZNSt3__17collateIwED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17collateIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$02$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$01 = $__lo2;$$02 = $__lo1;
 while(1) {
  $0 = ($$01|0)==($__hi2|0);
  if ($0) {
   $$02$lcssa = $$02;
   label = 7;
   break;
  }
  $1 = ($$02|0)==($__hi1|0);
  if ($1) {
   $$0 = -1;
   break;
  }
  $2 = HEAP32[$$02>>2]|0;
  $3 = HEAP32[$$01>>2]|0;
  $4 = ($2|0)<($3|0);
  if ($4) {
   $$0 = -1;
   break;
  }
  $5 = ($3|0)<($2|0);
  if ($5) {
   $$0 = 1;
   break;
  }
  $6 = ((($$02)) + 4|0);
  $7 = ((($$01)) + 4|0);
  $$01 = $7;$$02 = $6;
 }
 if ((label|0) == 7) {
  $8 = ($$02$lcssa|0)!=($__hi1|0);
  $9 = $8&1;
  $$0 = $9;
 }
 return ($$0|0);
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 return;
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__h$0 = 0, $__h$0$lcssa = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__h$0 = 0;$__p$0 = $__lo;
 while(1) {
  $0 = ($__p$0|0)==($__hi|0);
  if ($0) {
   $__h$0$lcssa = $__h$0;
   break;
  }
  $1 = $__h$0 << 4;
  $2 = HEAP32[$__p$0>>2]|0;
  $3 = (($2) + ($1))|0;
  $4 = $3 & -268435456;
  $5 = $4 >>> 24;
  $6 = $5 | $4;
  $7 = $6 ^ $3;
  $8 = ((($__p$0)) + 4|0);
  $__h$0 = $7;$__p$0 = $8;
 }
 return ($__h$0$lcssa|0);
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$02 = 0, $$03 = 0, $$byval_copy = 0, $$byval_copy$1 = 0, $$byval_copy$2 = 0, $$sroa$01$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__lv = 0, $__names = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy$2 = sp + 60|0;
 $$byval_copy$1 = sp + 56|0;
 $$byval_copy = sp + 52|0;
 $__lv = sp + 48|0;
 $0 = sp + 44|0;
 $1 = sp + 40|0;
 $2 = sp + 36|0;
 $3 = sp + 32|0;
 $__names = sp + 8|0;
 $4 = sp;
 $5 = ((($__iob)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 1;
 $8 = ($7|0)==(0);
 L1: do {
  if ($8) {
   HEAP32[$__lv>>2] = -1;
   $9 = HEAP32[$this>>2]|0;
   $10 = ((($9)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP32[$__b>>2]|0;
   HEAP32[$0>>2] = $12;
   $13 = HEAP32[$__e>>2]|0;
   HEAP32[$1>>2] = $13;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   ;HEAP32[$$byval_copy$1>>2]=HEAP32[$1>>2]|0;
   $14 = (FUNCTION_TABLE_iiiiiii[$11 & 511]($this,$$byval_copy,$$byval_copy$1,$__iob,$__err,$__lv)|0);
   HEAP32[$__b>>2] = $14;
   $15 = HEAP32[$__lv>>2]|0;
   switch ($15|0) {
   case 0:  {
    HEAP8[$__v>>0] = 0;
    break;
   }
   case 1:  {
    HEAP8[$__v>>0] = 1;
    break;
   }
   default: {
    HEAP8[$__v>>0] = 1;
    HEAP32[$__err>>2] = 4;
   }
   }
   $$sroa$01$0 = $14;
  } else {
   $16 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
   HEAP32[$2>>2] = $16;
   __THREW__ = 0;
   $17 = (invoke_iii(354,($2|0),(8588|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   do {
    if ($19) {
     $44 = ___cxa_find_matching_catch()|0;
     $45 = tempRet0;
     (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
     $$02 = $44;$$03 = $45;
    } else {
     (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
     $20 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
     HEAP32[$3>>2] = $20;
     __THREW__ = 0;
     $21 = (invoke_iii(354,($3|0),(8728|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      $46 = ___cxa_find_matching_catch()|0;
      $47 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
      $$02 = $46;$$03 = $47;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
     $24 = HEAP32[$21>>2]|0;
     $25 = ((($24)) + 24|0);
     $26 = HEAP32[$25>>2]|0;
     __THREW__ = 0;
     invoke_vii($26|0,($__names|0),($21|0));
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      $$0 = $__names;
     } else {
      $29 = ((($__names)) + 12|0);
      $30 = HEAP32[$21>>2]|0;
      $31 = ((($30)) + 28|0);
      $32 = HEAP32[$31>>2]|0;
      __THREW__ = 0;
      invoke_vii($32|0,($29|0),($21|0));
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       $$0 = $29;
      } else {
       $35 = HEAP32[$__e>>2]|0;
       HEAP32[$4>>2] = $35;
       $36 = ((($__names)) + 24|0);
       __THREW__ = 0;
       ;HEAP32[$$byval_copy$2>>2]=HEAP32[$4>>2]|0;
       $37 = (invoke_iiiiiiii(415,($__b|0),($$byval_copy$2|0),($__names|0),($36|0),($17|0),($__err|0),1)|0);
       $38 = __THREW__; __THREW__ = 0;
       $39 = $38&1;
       if ($39) {
        $54 = ___cxa_find_matching_catch()|0;
        $55 = tempRet0;
        $56 = ((($__names)) + 12|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($56);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__names);
        $$02 = $54;$$03 = $55;
        break;
       } else {
        $40 = ($37|0)==($__names|0);
        $41 = $40&1;
        HEAP8[$__v>>0] = $41;
        $42 = HEAP32[$__b>>2]|0;
        $43 = ((($__names)) + 12|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($43);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__names);
        $$sroa$01$0 = $42;
        break L1;
       }
      }
     }
     $48 = ___cxa_find_matching_catch()|0;
     $49 = tempRet0;
     $50 = ($__names|0)==($$0|0);
     if ($50) {
      $$02 = $48;$$03 = $49;
     } else {
      $52 = $$0;
      while(1) {
       $51 = ((($52)) + -12|0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($51);
       $53 = ($51|0)==($__names|0);
       if ($53) {
        $$02 = $48;$$03 = $49;
        break;
       } else {
        $52 = $51;
       }
      }
     }
    }
   } while(0);
   ___resumeException($$02|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$01$0|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy$1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy$1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy$1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy$1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy$1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy$1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy$1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy$1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy$1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy$1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy$1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy$1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy$1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy$1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy$1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy$1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy$1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy$1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy$1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy$1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy$1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy$1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy$1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy$1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy$1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy$1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy$1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$pre = 0, $$pre$i$2$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$10 = 0, $$pre$i$i$i$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0;
 var $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__i$0$i$i$5 = 0, $exitcond$i$i = 0, $exitcond$i$i$6 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i$26 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__atoms = sp + 208|0;
 $__grouping = sp + 196|0;
 $0 = sp + 192|0;
 $__buf = sp + 180|0;
 $__a_end = sp + 176|0;
 $__g = sp + 16|0;
 $__g_end = sp + 8|0;
 $__dc = sp + 4|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($__grouping) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 __THREW__ = 0;
 $3 = (invoke_ii(353,($__iob|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 do {
  if ($5) {
   $87 = ___cxa_find_matching_catch()|0;
   $88 = tempRet0;
   $$0 = $87;$$01 = $88;
  } else {
   HEAP32[$0>>2] = $3;
   __THREW__ = 0;
   $6 = (invoke_iii(354,($0|0),(8588|0))|0);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if (!($8)) {
    $9 = HEAP32[$6>>2]|0;
    $10 = ((($9)) + 32|0);
    $11 = HEAP32[$10>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($11|0,($6|0),(19466|0),((19492)|0),($__atoms|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
     $__i$0$i$i$5 = 0;
     while(1) {
      $exitcond$i$i$6 = ($__i$0$i$i$5|0)==(3);
      if ($exitcond$i$i$6) {
       break;
      }
      $14 = (($__buf) + ($__i$0$i$i$5<<2)|0);
      HEAP32[$14>>2] = 0;
      $15 = (($__i$0$i$i$5) + 1)|0;
      $__i$0$i$i$5 = $15;
     }
     $16 = HEAP8[$__buf>>0]|0;
     $17 = $16 & 1;
     $18 = ($17<<24>>24)==(0);
     if ($18) {
      $21 = 10;
     } else {
      $19 = HEAP32[$__buf>>2]|0;
      $20 = $19 & -2;
      $phitmp$i = (($20) + -1)|0;
      $21 = $phitmp$i;
     }
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($21|0),0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     L18: do {
      if ($23) {
       label = 36;
      } else {
       $24 = HEAP8[$__buf>>0]|0;
       $25 = $24 & 1;
       $26 = ($25<<24>>24)==(0);
       $27 = ((($__buf)) + 8|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = ((($__buf)) + 1|0);
       $30 = $26 ? $29 : $28;
       HEAP32[$__a_end>>2] = $30;
       HEAP32[$__g_end>>2] = $__g;
       HEAP32[$__dc>>2] = 0;
       $31 = ((($__buf)) + 4|0);
       $$pre = HEAP32[$__b>>2]|0;
       $$pre$i$i$i$10 = $$pre;$__a$0 = $30;
       L20: while(1) {
        $32 = ($$pre$i$i$i$10|0)==(0|0);
        if ($32) {
         $$pre$i$i$i = 0;
        } else {
         $33 = ((($$pre$i$i$i$10)) + 12|0);
         $34 = HEAP32[$33>>2]|0;
         $35 = ((($$pre$i$i$i$10)) + 16|0);
         $36 = HEAP32[$35>>2]|0;
         $37 = ($34|0)==($36|0);
         if ($37) {
          $38 = HEAP32[$$pre$i$i$i$10>>2]|0;
          $39 = ((($38)) + 36|0);
          $40 = HEAP32[$39>>2]|0;
          __THREW__ = 0;
          $41 = (invoke_ii($40|0,($$pre$i$i$i$10|0))|0);
          $42 = __THREW__; __THREW__ = 0;
          $43 = $42&1;
          if ($43) {
           label = 35;
           break;
          }
          $44 = ($41|0)==(-1);
          if ($44) {
           HEAP32[$__b>>2] = 0;
           $$pre$i$i$i = 0;
          } else {
           $$pre$i$i$i = $$pre$i$i$i$10;
          }
         } else {
          $$pre$i$i$i = $$pre$i$i$i$10;
         }
        }
        $45 = ($$pre$i$i$i|0)==(0|0);
        $46 = HEAP32[$__e>>2]|0;
        $47 = ($46|0)==(0|0);
        do {
         if ($47) {
          label = 25;
         } else {
          $48 = ((($46)) + 12|0);
          $49 = HEAP32[$48>>2]|0;
          $50 = ((($46)) + 16|0);
          $51 = HEAP32[$50>>2]|0;
          $52 = ($49|0)==($51|0);
          if (!($52)) {
           if ($45) {
            $168 = $46;
            break;
           } else {
            $$pre$i$2$i$i = $46;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
            break L20;
           }
          }
          $53 = HEAP32[$46>>2]|0;
          $54 = ((($53)) + 36|0);
          $55 = HEAP32[$54>>2]|0;
          __THREW__ = 0;
          $56 = (invoke_ii($55|0,($46|0))|0);
          $57 = __THREW__; __THREW__ = 0;
          $58 = $57&1;
          if ($58) {
           label = 35;
           break L20;
          }
          $59 = ($56|0)==(-1);
          if ($59) {
           HEAP32[$__e>>2] = 0;
           label = 25;
           break;
          } else {
           if ($45) {
            $168 = $46;
            break;
           } else {
            $$pre$i$2$i$i = $46;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
            break L20;
           }
          }
         }
        } while(0);
        if ((label|0) == 25) {
         label = 0;
         if ($45) {
          $$pre$i$2$i$i = 0;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
          break;
         } else {
          $168 = 0;
         }
        }
        $60 = HEAP32[$__a_end>>2]|0;
        $61 = HEAP8[$__buf>>0]|0;
        $62 = $61 & 1;
        $63 = ($62<<24>>24)==(0);
        $64 = HEAP32[$31>>2]|0;
        $65 = $61&255;
        $66 = $65 >>> 1;
        $67 = $63 ? $66 : $64;
        $68 = (($__a$0) + ($67)|0);
        $69 = ($60|0)==($68|0);
        if ($69) {
         $70 = $67 << 1;
         __THREW__ = 0;
         invoke_viii(416,($__buf|0),($70|0),0);
         $71 = __THREW__; __THREW__ = 0;
         $72 = $71&1;
         if ($72) {
          label = 35;
          break;
         }
         $73 = HEAP8[$__buf>>0]|0;
         $74 = $73 & 1;
         $75 = ($74<<24>>24)==(0);
         if ($75) {
          $78 = 10;
         } else {
          $76 = HEAP32[$__buf>>2]|0;
          $77 = $76 & -2;
          $phitmp$i$26 = (($77) + -1)|0;
          $78 = $phitmp$i$26;
         }
         __THREW__ = 0;
         invoke_viii(416,($__buf|0),($78|0),0);
         $79 = __THREW__; __THREW__ = 0;
         $80 = $79&1;
         if ($80) {
          label = 35;
          break;
         }
         $81 = HEAP8[$__buf>>0]|0;
         $82 = $81 & 1;
         $83 = ($82<<24>>24)==(0);
         $84 = HEAP32[$27>>2]|0;
         $85 = $83 ? $29 : $84;
         $86 = (($85) + ($67)|0);
         HEAP32[$__a_end>>2] = $86;
         $__a$1 = $85;
        } else {
         $__a$1 = $__a$0;
        }
        $95 = ((($$pre$i$i$i)) + 12|0);
        $96 = HEAP32[$95>>2]|0;
        $97 = ((($$pre$i$i$i)) + 16|0);
        $98 = HEAP32[$97>>2]|0;
        $99 = ($96|0)==($98|0);
        if ($99) {
         $100 = HEAP32[$$pre$i$i$i>>2]|0;
         $101 = ((($100)) + 36|0);
         $102 = HEAP32[$101>>2]|0;
         __THREW__ = 0;
         $103 = (invoke_ii($102|0,($$pre$i$i$i|0))|0);
         $104 = __THREW__; __THREW__ = 0;
         $105 = $104&1;
         if ($105) {
          label = 35;
          break;
         } else {
          $$0$i$i = $103;
         }
        } else {
         $106 = HEAP8[$96>>0]|0;
         $107 = $106&255;
         $$0$i$i = $107;
        }
        $108 = $$0$i$i&255;
        $109 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($108,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
        $110 = ($109|0)==(0);
        if (!($110)) {
         $$pre$i$2$i$i = $168;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$1;
         break;
        }
        $111 = HEAP32[$95>>2]|0;
        $112 = HEAP32[$97>>2]|0;
        $113 = ($111|0)==($112|0);
        if ($113) {
         $114 = HEAP32[$$pre$i$i$i>>2]|0;
         $115 = ((($114)) + 40|0);
         $116 = HEAP32[$115>>2]|0;
         __THREW__ = 0;
         (invoke_ii($116|0,($$pre$i$i$i|0))|0);
         $117 = __THREW__; __THREW__ = 0;
         $118 = $117&1;
         if ($118) {
          label = 35;
          break;
         } else {
          $$pre$i$i$i$10 = $$pre$i$i$i;$__a$0 = $__a$1;
          continue;
         }
        } else {
         $119 = ((($111)) + 1|0);
         HEAP32[$95>>2] = $119;
         $$pre$i$i$i$10 = $$pre$i$i$i;$__a$0 = $__a$1;
         continue;
        }
       }
       if ((label|0) == 35) {
        $91 = ___cxa_find_matching_catch()|0;
        $92 = tempRet0;
        $lpad$phi$index = $91;$lpad$phi$index2 = $92;
        break;
       }
       $120 = HEAP32[$__a_end>>2]|0;
       $121 = $__a$2;
       $122 = (($120) - ($121))|0;
       __THREW__ = 0;
       invoke_viii(416,($__buf|0),($122|0),0);
       $123 = __THREW__; __THREW__ = 0;
       $124 = $123&1;
       if ($124) {
        label = 36;
       } else {
        $125 = HEAP8[$__buf>>0]|0;
        $126 = HEAP32[$27>>2]|0;
        __THREW__ = 0;
        $127 = (invoke_i(417)|0);
        $128 = __THREW__; __THREW__ = 0;
        $129 = $128&1;
        if ($129) {
         label = 36;
        } else {
         $130 = $125 & 1;
         $131 = ($130<<24>>24)==(0);
         $132 = $131 ? $29 : $126;
         __THREW__ = 0;
         HEAP32[$vararg_buffer>>2] = $__v;
         $133 = (invoke_iiiii(418,($132|0),($127|0),(20850|0),($vararg_buffer|0))|0);
         $134 = __THREW__; __THREW__ = 0;
         $135 = $134&1;
         if ($135) {
          label = 36;
         } else {
          $136 = ($133|0)==(1);
          if (!($136)) {
           HEAP32[$__err>>2] = 4;
          }
          $137 = ($$pre$i$i$i$lcssa|0)==(0|0);
          if ($137) {
           $150 = 0;
          } else {
           $138 = ((($$pre$i$i$i$lcssa)) + 12|0);
           $139 = HEAP32[$138>>2]|0;
           $140 = ((($$pre$i$i$i$lcssa)) + 16|0);
           $141 = HEAP32[$140>>2]|0;
           $142 = ($139|0)==($141|0);
           if ($142) {
            $143 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
            $144 = ((($143)) + 36|0);
            $145 = HEAP32[$144>>2]|0;
            __THREW__ = 0;
            $146 = (invoke_ii($145|0,($$pre$i$i$i$lcssa|0))|0);
            $147 = __THREW__; __THREW__ = 0;
            $148 = $147&1;
            if ($148) {
             label = 36;
             break;
            }
            $149 = ($146|0)==(-1);
            if ($149) {
             HEAP32[$__b>>2] = 0;
             $150 = 0;
            } else {
             $150 = $$pre$i$i$i$lcssa;
            }
           } else {
            $150 = $$pre$i$i$i$lcssa;
           }
          }
          $151 = ($150|0)==(0|0);
          $152 = ($$pre$i$2$i$i|0)==(0|0);
          do {
           if ($152) {
            label = 61;
           } else {
            $153 = ((($$pre$i$2$i$i)) + 12|0);
            $154 = HEAP32[$153>>2]|0;
            $155 = ((($$pre$i$2$i$i)) + 16|0);
            $156 = HEAP32[$155>>2]|0;
            $157 = ($154|0)==($156|0);
            if ($157) {
             $158 = HEAP32[$$pre$i$2$i$i>>2]|0;
             $159 = ((($158)) + 36|0);
             $160 = HEAP32[$159>>2]|0;
             __THREW__ = 0;
             $161 = (invoke_ii($160|0,($$pre$i$2$i$i|0))|0);
             $162 = __THREW__; __THREW__ = 0;
             $163 = $162&1;
             if ($163) {
              label = 36;
              break L18;
             }
             $164 = ($161|0)==(-1);
             if ($164) {
              HEAP32[$__e>>2] = 0;
              label = 61;
              break;
             }
            }
            if (!($151)) {
             label = 62;
            }
           }
          } while(0);
          if ((label|0) == 61) {
           if ($151) {
            label = 62;
           }
          }
          if ((label|0) == 62) {
           $165 = HEAP32[$__err>>2]|0;
           $166 = $165 | 2;
           HEAP32[$__err>>2] = $166;
          }
          $167 = HEAP32[$__b>>2]|0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
          STACKTOP = sp;return ($167|0);
         }
        }
       }
      }
     } while(0);
     if ((label|0) == 36) {
      $93 = ___cxa_find_matching_catch()|0;
      $94 = tempRet0;
      $lpad$phi$index = $93;$lpad$phi$index2 = $94;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
     $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
     break;
    }
   }
   $89 = ___cxa_find_matching_catch()|0;
   $90 = tempRet0;
   (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
   $$0 = $89;$$01 = $90;
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($$0|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0$i = 0, $$0$lcssa$i = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = ((($__atoms)) + 24|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==($__ct<<24>>24);
   if (!($4)) {
    $5 = ((($__atoms)) + 25|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==($__ct<<24>>24);
    if (!($7)) {
     label = 5;
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = ((($__a)) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$1 = 0;
  } else {
   label = 5;
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $10 = HEAP8[$__grouping>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__grouping)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $10&255;
   $16 = $15 >>> 1;
   $17 = $12 ? $16 : $14;
   $18 = ($17|0)!=(0);
   $19 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
   $or$cond = $19 & $18;
   if ($or$cond) {
    $20 = HEAP32[$__g_end>>2]|0;
    $21 = $20;
    $22 = $__g;
    $23 = (($21) - ($22))|0;
    $24 = ($23|0)<(160);
    if (!($24)) {
     $$1 = 0;
     break;
    }
    $25 = HEAP32[$__dc>>2]|0;
    $26 = ((($20)) + 4|0);
    HEAP32[$__g_end>>2] = $26;
    HEAP32[$20>>2] = $25;
    HEAP32[$__dc>>2] = 0;
    $$1 = 0;
    break;
   }
   $27 = ((($__atoms)) + 26|0);
   $$0$i = $__atoms;
   while(1) {
    $28 = ($$0$i|0)==($27|0);
    if ($28) {
     $$0$lcssa$i = $27;
     break;
    }
    $29 = HEAP8[$$0$i>>0]|0;
    $30 = ($29<<24>>24)==($__ct<<24>>24);
    if ($30) {
     $$0$lcssa$i = $$0$i;
     break;
    }
    $31 = ((($$0$i)) + 1|0);
    $$0$i = $31;
   }
   $32 = $$0$lcssa$i;
   $33 = $__atoms;
   $34 = (($32) - ($33))|0;
   $35 = ($34|0)>(23);
   if ($35) {
    $$1 = -1;
   } else {
    switch ($__base|0) {
    case 10: case 8:  {
     $36 = ($34|0)<($__base|0);
     if (!($36)) {
      $$1 = -1;
      break L6;
     }
     break;
    }
    case 16:  {
     $37 = ($34|0)<(22);
     if (!($37)) {
      if ($1) {
       $$1 = -1;
       break L6;
      }
      $38 = $0;
      $39 = $__a;
      $40 = (($38) - ($39))|0;
      $41 = ($40|0)<(3);
      if (!($41)) {
       $$1 = -1;
       break L6;
      }
      $42 = ((($0)) + -1|0);
      $43 = HEAP8[$42>>0]|0;
      $44 = ($43<<24>>24)==(48);
      if (!($44)) {
       $$1 = -1;
       break L6;
      }
      HEAP32[$__dc>>2] = 0;
      $45 = (19466 + ($34)|0);
      $46 = HEAP8[$45>>0]|0;
      $47 = ((($0)) + 1|0);
      HEAP32[$__a_end>>2] = $47;
      HEAP8[$0>>0] = $46;
      $$1 = 0;
      break L6;
     }
     break;
    }
    default: {
    }
    }
    $48 = (19466 + ($34)|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = ((($0)) + 1|0);
    HEAP32[$__a_end>>2] = $50;
    HEAP8[$0>>0] = $49;
    $51 = HEAP32[$__dc>>2]|0;
    $52 = (($51) + 1)|0;
    HEAP32[$__dc>>2] = $52;
    $$1 = 0;
   }
  }
 } while(0);
 return ($$1|0);
}
function __ZNSt3__16__clocEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[1408]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((1408|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_iiii(419,2147483647,(20853|0),(0|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $8 = ___cxa_find_matching_catch()|0;
     $9 = tempRet0;
     ___cxa_guard_abort((1408|0));
     ___resumeException($8|0);
     // unreachable;
    } else {
     HEAP32[2288] = $4;
     ___cxa_guard_release((1408|0));
     break;
    }
   }
  }
 } while(0);
 $7 = HEAP32[2288]|0;
 return ($7|0);
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$02 = 0, $$03 = 0, $$byval_copy = 0, $$byval_copy$1 = 0, $$byval_copy$2 = 0, $$sroa$01$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__lv = 0, $__names = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy$2 = sp + 60|0;
 $$byval_copy$1 = sp + 56|0;
 $$byval_copy = sp + 52|0;
 $__lv = sp + 48|0;
 $0 = sp + 44|0;
 $1 = sp + 40|0;
 $2 = sp + 36|0;
 $3 = sp + 32|0;
 $__names = sp + 8|0;
 $4 = sp;
 $5 = ((($__iob)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 1;
 $8 = ($7|0)==(0);
 L1: do {
  if ($8) {
   HEAP32[$__lv>>2] = -1;
   $9 = HEAP32[$this>>2]|0;
   $10 = ((($9)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP32[$__b>>2]|0;
   HEAP32[$0>>2] = $12;
   $13 = HEAP32[$__e>>2]|0;
   HEAP32[$1>>2] = $13;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   ;HEAP32[$$byval_copy$1>>2]=HEAP32[$1>>2]|0;
   $14 = (FUNCTION_TABLE_iiiiiii[$11 & 511]($this,$$byval_copy,$$byval_copy$1,$__iob,$__err,$__lv)|0);
   HEAP32[$__b>>2] = $14;
   $15 = HEAP32[$__lv>>2]|0;
   switch ($15|0) {
   case 0:  {
    HEAP8[$__v>>0] = 0;
    break;
   }
   case 1:  {
    HEAP8[$__v>>0] = 1;
    break;
   }
   default: {
    HEAP8[$__v>>0] = 1;
    HEAP32[$__err>>2] = 4;
   }
   }
   $$sroa$01$0 = $14;
  } else {
   $16 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
   HEAP32[$2>>2] = $16;
   __THREW__ = 0;
   $17 = (invoke_iii(354,($2|0),(8580|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   do {
    if ($19) {
     $44 = ___cxa_find_matching_catch()|0;
     $45 = tempRet0;
     (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
     $$02 = $44;$$03 = $45;
    } else {
     (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
     $20 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
     HEAP32[$3>>2] = $20;
     __THREW__ = 0;
     $21 = (invoke_iii(354,($3|0),(8736|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      $46 = ___cxa_find_matching_catch()|0;
      $47 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
      $$02 = $46;$$03 = $47;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
     $24 = HEAP32[$21>>2]|0;
     $25 = ((($24)) + 24|0);
     $26 = HEAP32[$25>>2]|0;
     __THREW__ = 0;
     invoke_vii($26|0,($__names|0),($21|0));
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      $$0 = $__names;
     } else {
      $29 = ((($__names)) + 12|0);
      $30 = HEAP32[$21>>2]|0;
      $31 = ((($30)) + 28|0);
      $32 = HEAP32[$31>>2]|0;
      __THREW__ = 0;
      invoke_vii($32|0,($29|0),($21|0));
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       $$0 = $29;
      } else {
       $35 = HEAP32[$__e>>2]|0;
       HEAP32[$4>>2] = $35;
       $36 = ((($__names)) + 24|0);
       __THREW__ = 0;
       ;HEAP32[$$byval_copy$2>>2]=HEAP32[$4>>2]|0;
       $37 = (invoke_iiiiiiii(420,($__b|0),($$byval_copy$2|0),($__names|0),($36|0),($17|0),($__err|0),1)|0);
       $38 = __THREW__; __THREW__ = 0;
       $39 = $38&1;
       if ($39) {
        $54 = ___cxa_find_matching_catch()|0;
        $55 = tempRet0;
        $56 = ((($__names)) + 12|0);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($56);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__names);
        $$02 = $54;$$03 = $55;
        break;
       } else {
        $40 = ($37|0)==($__names|0);
        $41 = $40&1;
        HEAP8[$__v>>0] = $41;
        $42 = HEAP32[$__b>>2]|0;
        $43 = ((($__names)) + 12|0);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($43);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__names);
        $$sroa$01$0 = $42;
        break L1;
       }
      }
     }
     $48 = ___cxa_find_matching_catch()|0;
     $49 = tempRet0;
     $50 = ($__names|0)==($$0|0);
     if ($50) {
      $$02 = $48;$$03 = $49;
     } else {
      $52 = $$0;
      while(1) {
       $51 = ((($52)) + -12|0);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($51);
       $53 = ($51|0)==($__names|0);
       if ($53) {
        $$02 = $48;$$03 = $49;
        break;
       } else {
        $52 = $51;
       }
      }
     }
    }
   } while(0);
   ___resumeException($$02|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$01$0|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy$1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy$1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy$1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy$1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy$1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy$1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy$1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy$1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy$1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy$1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy$1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy$1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy$1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy$1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy$1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy$1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy$1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy$1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy$1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy$1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy$1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy$1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy$1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy$1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy$1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy$1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy$1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$1$i$i = 0, $$0$i$i$1$i$i$15 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$9 = 0, $$01 = 0, $$pre = 0, $$pre$i$3$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$11 = 0, $$pre$i$i$i$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__i$0$i$i$5 = 0, $exitcond$i$i = 0, $exitcond$i$i$6 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i$30 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__atoms = sp + 208|0;
 $__grouping = sp + 196|0;
 $0 = sp + 192|0;
 $__buf = sp + 180|0;
 $__a_end = sp + 176|0;
 $__g = sp + 16|0;
 $__g_end = sp + 8|0;
 $__dc = sp + 4|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($__grouping) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 __THREW__ = 0;
 $3 = (invoke_ii(353,($__iob|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 do {
  if ($5) {
   $88 = ___cxa_find_matching_catch()|0;
   $89 = tempRet0;
   $$0 = $88;$$01 = $89;
  } else {
   HEAP32[$0>>2] = $3;
   __THREW__ = 0;
   $6 = (invoke_iii(354,($0|0),(8580|0))|0);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if (!($8)) {
    $9 = HEAP32[$6>>2]|0;
    $10 = ((($9)) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($11|0,($6|0),(19466|0),((19492)|0),($__atoms|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
     $__i$0$i$i$5 = 0;
     while(1) {
      $exitcond$i$i$6 = ($__i$0$i$i$5|0)==(3);
      if ($exitcond$i$i$6) {
       break;
      }
      $14 = (($__buf) + ($__i$0$i$i$5<<2)|0);
      HEAP32[$14>>2] = 0;
      $15 = (($__i$0$i$i$5) + 1)|0;
      $__i$0$i$i$5 = $15;
     }
     $16 = HEAP8[$__buf>>0]|0;
     $17 = $16 & 1;
     $18 = ($17<<24>>24)==(0);
     if ($18) {
      $21 = 10;
     } else {
      $19 = HEAP32[$__buf>>2]|0;
      $20 = $19 & -2;
      $phitmp$i = (($20) + -1)|0;
      $21 = $phitmp$i;
     }
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($21|0),0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     L18: do {
      if ($23) {
       label = 37;
      } else {
       $24 = HEAP8[$__buf>>0]|0;
       $25 = $24 & 1;
       $26 = ($25<<24>>24)==(0);
       $27 = ((($__buf)) + 8|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = ((($__buf)) + 1|0);
       $30 = $26 ? $29 : $28;
       HEAP32[$__a_end>>2] = $30;
       HEAP32[$__g_end>>2] = $__g;
       HEAP32[$__dc>>2] = 0;
       $31 = ((($__buf)) + 4|0);
       $$pre = HEAP32[$__b>>2]|0;
       $$pre$i$i$i$11 = $$pre;$__a$0 = $30;
       L20: while(1) {
        $32 = ($$pre$i$i$i$11|0)==(0|0);
        if ($32) {
         $$pre$i$i$i = 0;$167 = 1;
        } else {
         $33 = ((($$pre$i$i$i$11)) + 12|0);
         $34 = HEAP32[$33>>2]|0;
         $35 = ((($$pre$i$i$i$11)) + 16|0);
         $36 = HEAP32[$35>>2]|0;
         $37 = ($34|0)==($36|0);
         if ($37) {
          $38 = HEAP32[$$pre$i$i$i$11>>2]|0;
          $39 = ((($38)) + 36|0);
          $40 = HEAP32[$39>>2]|0;
          __THREW__ = 0;
          $41 = (invoke_ii($40|0,($$pre$i$i$i$11|0))|0);
          $42 = __THREW__; __THREW__ = 0;
          $43 = $42&1;
          if ($43) {
           label = 36;
           break;
          } else {
           $$0$i$i$i$i$9 = $41;
          }
         } else {
          $44 = HEAP32[$34>>2]|0;
          $$0$i$i$i$i$9 = $44;
         }
         $45 = ($$0$i$i$i$i$9|0)==(-1);
         if ($45) {
          HEAP32[$__b>>2] = 0;
          $$pre$i$i$i = 0;$167 = 1;
         } else {
          $$pre$i$i$i = $$pre$i$i$i$11;$167 = 0;
         }
        }
        $46 = HEAP32[$__e>>2]|0;
        $47 = ($46|0)==(0|0);
        do {
         if ($47) {
          label = 26;
         } else {
          $48 = ((($46)) + 12|0);
          $49 = HEAP32[$48>>2]|0;
          $50 = ((($46)) + 16|0);
          $51 = HEAP32[$50>>2]|0;
          $52 = ($49|0)==($51|0);
          if ($52) {
           $53 = HEAP32[$46>>2]|0;
           $54 = ((($53)) + 36|0);
           $55 = HEAP32[$54>>2]|0;
           __THREW__ = 0;
           $56 = (invoke_ii($55|0,($46|0))|0);
           $57 = __THREW__; __THREW__ = 0;
           $58 = $57&1;
           if ($58) {
            label = 36;
            break L20;
           } else {
            $$0$i$i$1$i$i$15 = $56;
           }
          } else {
           $59 = HEAP32[$49>>2]|0;
           $$0$i$i$1$i$i$15 = $59;
          }
          $60 = ($$0$i$i$1$i$i$15|0)==(-1);
          if ($60) {
           HEAP32[$__e>>2] = 0;
           label = 26;
           break;
          } else {
           if ($167) {
            $168 = $46;
            break;
           } else {
            $$pre$i$3$i$i = $46;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
            break L20;
           }
          }
         }
        } while(0);
        if ((label|0) == 26) {
         label = 0;
         if ($167) {
          $$pre$i$3$i$i = 0;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
          break;
         } else {
          $168 = 0;
         }
        }
        $61 = HEAP32[$__a_end>>2]|0;
        $62 = HEAP8[$__buf>>0]|0;
        $63 = $62 & 1;
        $64 = ($63<<24>>24)==(0);
        $65 = HEAP32[$31>>2]|0;
        $66 = $62&255;
        $67 = $66 >>> 1;
        $68 = $64 ? $67 : $65;
        $69 = (($__a$0) + ($68)|0);
        $70 = ($61|0)==($69|0);
        if ($70) {
         $71 = $68 << 1;
         __THREW__ = 0;
         invoke_viii(416,($__buf|0),($71|0),0);
         $72 = __THREW__; __THREW__ = 0;
         $73 = $72&1;
         if ($73) {
          label = 36;
          break;
         }
         $74 = HEAP8[$__buf>>0]|0;
         $75 = $74 & 1;
         $76 = ($75<<24>>24)==(0);
         if ($76) {
          $79 = 10;
         } else {
          $77 = HEAP32[$__buf>>2]|0;
          $78 = $77 & -2;
          $phitmp$i$30 = (($78) + -1)|0;
          $79 = $phitmp$i$30;
         }
         __THREW__ = 0;
         invoke_viii(416,($__buf|0),($79|0),0);
         $80 = __THREW__; __THREW__ = 0;
         $81 = $80&1;
         if ($81) {
          label = 36;
          break;
         }
         $82 = HEAP8[$__buf>>0]|0;
         $83 = $82 & 1;
         $84 = ($83<<24>>24)==(0);
         $85 = HEAP32[$27>>2]|0;
         $86 = $84 ? $29 : $85;
         $87 = (($86) + ($68)|0);
         HEAP32[$__a_end>>2] = $87;
         $__a$1 = $86;
        } else {
         $__a$1 = $__a$0;
        }
        $96 = ((($$pre$i$i$i)) + 12|0);
        $97 = HEAP32[$96>>2]|0;
        $98 = ((($$pre$i$i$i)) + 16|0);
        $99 = HEAP32[$98>>2]|0;
        $100 = ($97|0)==($99|0);
        if ($100) {
         $101 = HEAP32[$$pre$i$i$i>>2]|0;
         $102 = ((($101)) + 36|0);
         $103 = HEAP32[$102>>2]|0;
         __THREW__ = 0;
         $104 = (invoke_ii($103|0,($$pre$i$i$i|0))|0);
         $105 = __THREW__; __THREW__ = 0;
         $106 = $105&1;
         if ($106) {
          label = 36;
          break;
         } else {
          $$0$i$i = $104;
         }
        } else {
         $107 = HEAP32[$97>>2]|0;
         $$0$i$i = $107;
        }
        $108 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
        $109 = ($108|0)==(0);
        if (!($109)) {
         $$pre$i$3$i$i = $168;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$1;
         break;
        }
        $110 = HEAP32[$96>>2]|0;
        $111 = HEAP32[$98>>2]|0;
        $112 = ($110|0)==($111|0);
        if ($112) {
         $113 = HEAP32[$$pre$i$i$i>>2]|0;
         $114 = ((($113)) + 40|0);
         $115 = HEAP32[$114>>2]|0;
         __THREW__ = 0;
         (invoke_ii($115|0,($$pre$i$i$i|0))|0);
         $116 = __THREW__; __THREW__ = 0;
         $117 = $116&1;
         if ($117) {
          label = 36;
          break;
         } else {
          $$pre$i$i$i$11 = $$pre$i$i$i;$__a$0 = $__a$1;
          continue;
         }
        } else {
         $118 = ((($110)) + 4|0);
         HEAP32[$96>>2] = $118;
         $$pre$i$i$i$11 = $$pre$i$i$i;$__a$0 = $__a$1;
         continue;
        }
       }
       if ((label|0) == 36) {
        $92 = ___cxa_find_matching_catch()|0;
        $93 = tempRet0;
        $lpad$phi$index = $92;$lpad$phi$index2 = $93;
        break;
       }
       $119 = HEAP32[$__a_end>>2]|0;
       $120 = $__a$2;
       $121 = (($119) - ($120))|0;
       __THREW__ = 0;
       invoke_viii(416,($__buf|0),($121|0),0);
       $122 = __THREW__; __THREW__ = 0;
       $123 = $122&1;
       if ($123) {
        label = 37;
       } else {
        $124 = HEAP8[$__buf>>0]|0;
        $125 = HEAP32[$27>>2]|0;
        __THREW__ = 0;
        $126 = (invoke_i(417)|0);
        $127 = __THREW__; __THREW__ = 0;
        $128 = $127&1;
        if ($128) {
         label = 37;
        } else {
         $129 = $124 & 1;
         $130 = ($129<<24>>24)==(0);
         $131 = $130 ? $29 : $125;
         __THREW__ = 0;
         HEAP32[$vararg_buffer>>2] = $__v;
         $132 = (invoke_iiiii(418,($131|0),($126|0),(20850|0),($vararg_buffer|0))|0);
         $133 = __THREW__; __THREW__ = 0;
         $134 = $133&1;
         if ($134) {
          label = 37;
         } else {
          $135 = ($132|0)==(1);
          if (!($135)) {
           HEAP32[$__err>>2] = 4;
          }
          $136 = ($$pre$i$i$i$lcssa|0)==(0|0);
          if ($136) {
           $169 = 1;
          } else {
           $137 = ((($$pre$i$i$i$lcssa)) + 12|0);
           $138 = HEAP32[$137>>2]|0;
           $139 = ((($$pre$i$i$i$lcssa)) + 16|0);
           $140 = HEAP32[$139>>2]|0;
           $141 = ($138|0)==($140|0);
           if ($141) {
            $142 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
            $143 = ((($142)) + 36|0);
            $144 = HEAP32[$143>>2]|0;
            __THREW__ = 0;
            $145 = (invoke_ii($144|0,($$pre$i$i$i$lcssa|0))|0);
            $146 = __THREW__; __THREW__ = 0;
            $147 = $146&1;
            if ($147) {
             label = 37;
             break;
            } else {
             $$0$i$i$i$i = $145;
            }
           } else {
            $148 = HEAP32[$138>>2]|0;
            $$0$i$i$i$i = $148;
           }
           $149 = ($$0$i$i$i$i|0)==(-1);
           if ($149) {
            HEAP32[$__b>>2] = 0;
            $169 = 1;
           } else {
            $169 = 0;
           }
          }
          $150 = ($$pre$i$3$i$i|0)==(0|0);
          do {
           if ($150) {
            label = 63;
           } else {
            $151 = ((($$pre$i$3$i$i)) + 12|0);
            $152 = HEAP32[$151>>2]|0;
            $153 = ((($$pre$i$3$i$i)) + 16|0);
            $154 = HEAP32[$153>>2]|0;
            $155 = ($152|0)==($154|0);
            if ($155) {
             $156 = HEAP32[$$pre$i$3$i$i>>2]|0;
             $157 = ((($156)) + 36|0);
             $158 = HEAP32[$157>>2]|0;
             __THREW__ = 0;
             $159 = (invoke_ii($158|0,($$pre$i$3$i$i|0))|0);
             $160 = __THREW__; __THREW__ = 0;
             $161 = $160&1;
             if ($161) {
              label = 37;
              break L18;
             } else {
              $$0$i$i$1$i$i = $159;
             }
            } else {
             $162 = HEAP32[$152>>2]|0;
             $$0$i$i$1$i$i = $162;
            }
            $163 = ($$0$i$i$1$i$i|0)==(-1);
            if ($163) {
             HEAP32[$__e>>2] = 0;
             label = 63;
             break;
            } else {
             if ($169) {
              break;
             } else {
              label = 65;
              break;
             }
            }
           }
          } while(0);
          if ((label|0) == 63) {
           if ($169) {
            label = 65;
           }
          }
          if ((label|0) == 65) {
           $164 = HEAP32[$__err>>2]|0;
           $165 = $164 | 2;
           HEAP32[$__err>>2] = $165;
          }
          $166 = HEAP32[$__b>>2]|0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
          STACKTOP = sp;return ($166|0);
         }
        }
       }
      }
     } while(0);
     if ((label|0) == 37) {
      $94 = ___cxa_find_matching_catch()|0;
      $95 = tempRet0;
      $lpad$phi$index = $94;$lpad$phi$index2 = $95;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
     $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
     break;
    }
   }
   $90 = ___cxa_find_matching_catch()|0;
   $91 = tempRet0;
   (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
   $$0 = $90;$$01 = $91;
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($$0|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0$i = 0, $$0$lcssa$i = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = ((($__atoms)) + 96|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==($__ct|0);
   if (!($4)) {
    $5 = ((($__atoms)) + 100|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==($__ct|0);
    if (!($7)) {
     label = 5;
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = ((($__a)) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$1 = 0;
  } else {
   label = 5;
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $10 = HEAP8[$__grouping>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__grouping)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $10&255;
   $16 = $15 >>> 1;
   $17 = $12 ? $16 : $14;
   $18 = ($17|0)!=(0);
   $19 = ($__ct|0)==($__thousands_sep|0);
   $or$cond = $19 & $18;
   if ($or$cond) {
    $20 = HEAP32[$__g_end>>2]|0;
    $21 = $20;
    $22 = $__g;
    $23 = (($21) - ($22))|0;
    $24 = ($23|0)<(160);
    if (!($24)) {
     $$1 = 0;
     break;
    }
    $25 = HEAP32[$__dc>>2]|0;
    $26 = ((($20)) + 4|0);
    HEAP32[$__g_end>>2] = $26;
    HEAP32[$20>>2] = $25;
    HEAP32[$__dc>>2] = 0;
    $$1 = 0;
    break;
   }
   $27 = ((($__atoms)) + 104|0);
   $$0$i = $__atoms;
   while(1) {
    $28 = ($$0$i|0)==($27|0);
    if ($28) {
     $$0$lcssa$i = $27;
     break;
    }
    $29 = HEAP32[$$0$i>>2]|0;
    $30 = ($29|0)==($__ct|0);
    if ($30) {
     $$0$lcssa$i = $$0$i;
     break;
    }
    $31 = ((($$0$i)) + 4|0);
    $$0$i = $31;
   }
   $32 = $$0$lcssa$i;
   $33 = $__atoms;
   $34 = (($32) - ($33))|0;
   $35 = $34 >> 2;
   $36 = ($34|0)>(92);
   if ($36) {
    $$1 = -1;
   } else {
    switch ($__base|0) {
    case 10: case 8:  {
     $37 = ($35|0)<($__base|0);
     if (!($37)) {
      $$1 = -1;
      break L6;
     }
     break;
    }
    case 16:  {
     $38 = ($34|0)<(88);
     if (!($38)) {
      if ($1) {
       $$1 = -1;
       break L6;
      }
      $39 = $0;
      $40 = $__a;
      $41 = (($39) - ($40))|0;
      $42 = ($41|0)<(3);
      if (!($42)) {
       $$1 = -1;
       break L6;
      }
      $43 = ((($0)) + -1|0);
      $44 = HEAP8[$43>>0]|0;
      $45 = ($44<<24>>24)==(48);
      if (!($45)) {
       $$1 = -1;
       break L6;
      }
      HEAP32[$__dc>>2] = 0;
      $46 = (19466 + ($35)|0);
      $47 = HEAP8[$46>>0]|0;
      $48 = ((($0)) + 1|0);
      HEAP32[$__a_end>>2] = $48;
      HEAP8[$0>>0] = $47;
      $$1 = 0;
      break L6;
     }
     break;
    }
    default: {
    }
    }
    $49 = (19466 + ($35)|0);
    $50 = HEAP8[$49>>0]|0;
    $51 = ((($0)) + 1|0);
    HEAP32[$__a_end>>2] = $51;
    HEAP8[$0>>0] = $50;
    $52 = HEAP32[$__dc>>2]|0;
    $53 = (($52) + 1)|0;
    HEAP32[$__dc>>2] = $53;
    $$1 = 0;
   }
  }
 } while(0);
 return ($$1|0);
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 $0 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $0;
 __THREW__ = 0;
 $1 = (invoke_iii(354,($__loc|0),(8588|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ((($4)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($6|0,($1|0),(19466|0),((19492)|0),($__atoms|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   __THREW__ = 0;
   $9 = (invoke_iii(354,($__loc|0),(8728|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $12 = HEAP32[$9>>2]|0;
    $13 = ((($12)) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_ii($14|0,($9|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     HEAP8[$__thousands_sep>>0] = $15;
     $18 = HEAP32[$9>>2]|0;
     $19 = ((($18)) + 20|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     invoke_vii($20|0,($agg$result|0),($9|0));
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if (!($22)) {
      (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 ___resumeException($23|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 $0 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $0;
 __THREW__ = 0;
 $1 = (invoke_iii(354,($__loc|0),(8588|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ((($4)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($6|0,($1|0),(19466|0),((19498)|0),($__atoms|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   __THREW__ = 0;
   $9 = (invoke_iii(354,($__loc|0),(8728|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $12 = HEAP32[$9>>2]|0;
    $13 = ((($12)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_ii($14|0,($9|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     HEAP8[$__decimal_point>>0] = $15;
     $18 = HEAP32[$9>>2]|0;
     $19 = ((($18)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     $21 = (invoke_ii($20|0,($9|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      HEAP8[$__thousands_sep>>0] = $21;
      $24 = HEAP32[$9>>2]|0;
      $25 = ((($24)) + 20|0);
      $26 = HEAP32[$25>>2]|0;
      __THREW__ = 0;
      invoke_vii($26|0,($agg$result|0),($9|0));
      $27 = __THREW__; __THREW__ = 0;
      $28 = $27&1;
      if (!($28)) {
       (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $29 = ___cxa_find_matching_catch()|0;
 $30 = tempRet0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 ___resumeException($29|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0$i = 0, $$0$lcssa$i = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct<<24>>24)==($__decimal_point<<24>>24);
 L1: do {
  if ($0) {
   $1 = HEAP8[$__in_units>>0]|0;
   $2 = ($1<<24>>24)==(0);
   if ($2) {
    $$2 = -1;
   } else {
    HEAP8[$__in_units>>0] = 0;
    $3 = HEAP32[$__a_end>>2]|0;
    $4 = ((($3)) + 1|0);
    HEAP32[$__a_end>>2] = $4;
    HEAP8[$3>>0] = 46;
    $5 = HEAP8[$__grouping>>0]|0;
    $6 = $5 & 1;
    $7 = ($6<<24>>24)==(0);
    $8 = ((($__grouping)) + 4|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = $5&255;
    $11 = $10 >>> 1;
    $12 = $7 ? $11 : $9;
    $13 = ($12|0)==(0);
    if ($13) {
     $$2 = 0;
    } else {
     $14 = HEAP32[$__g_end>>2]|0;
     $15 = $14;
     $16 = $__g;
     $17 = (($15) - ($16))|0;
     $18 = ($17|0)<(160);
     if ($18) {
      $19 = HEAP32[$__dc>>2]|0;
      $20 = ((($14)) + 4|0);
      HEAP32[$__g_end>>2] = $20;
      HEAP32[$14>>2] = $19;
      $$2 = 0;
     } else {
      $$2 = 0;
     }
    }
   }
  } else {
   $21 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
   if ($21) {
    $22 = HEAP8[$__grouping>>0]|0;
    $23 = $22 & 1;
    $24 = ($23<<24>>24)==(0);
    $25 = ((($__grouping)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $22&255;
    $28 = $27 >>> 1;
    $29 = $24 ? $28 : $26;
    $30 = ($29|0)==(0);
    if (!($30)) {
     $31 = HEAP8[$__in_units>>0]|0;
     $32 = ($31<<24>>24)==(0);
     if ($32) {
      $$2 = -1;
      break;
     }
     $33 = HEAP32[$__g_end>>2]|0;
     $34 = $33;
     $35 = $__g;
     $36 = (($34) - ($35))|0;
     $37 = ($36|0)<(160);
     if (!($37)) {
      $$2 = 0;
      break;
     }
     $38 = HEAP32[$__dc>>2]|0;
     $39 = ((($33)) + 4|0);
     HEAP32[$__g_end>>2] = $39;
     HEAP32[$33>>2] = $38;
     HEAP32[$__dc>>2] = 0;
     $$2 = 0;
     break;
    }
   }
   $40 = ((($__atoms)) + 32|0);
   $$0$i = $__atoms;
   while(1) {
    $41 = ($$0$i|0)==($40|0);
    if ($41) {
     $$0$lcssa$i = $40;
     break;
    }
    $42 = HEAP8[$$0$i>>0]|0;
    $43 = ($42<<24>>24)==($__ct<<24>>24);
    if ($43) {
     $$0$lcssa$i = $$0$i;
     break;
    }
    $44 = ((($$0$i)) + 1|0);
    $$0$i = $44;
   }
   $45 = $$0$lcssa$i;
   $46 = $__atoms;
   $47 = (($45) - ($46))|0;
   $48 = ($47|0)>(31);
   if ($48) {
    $$2 = -1;
   } else {
    $49 = (19466 + ($47)|0);
    $50 = HEAP8[$49>>0]|0;
    switch ($47|0) {
    case 24: case 25:  {
     $51 = HEAP32[$__a_end>>2]|0;
     $52 = ($51|0)==($__a|0);
     if (!($52)) {
      $53 = ((($51)) + -1|0);
      $54 = HEAP8[$53>>0]|0;
      $55 = $54&255;
      $56 = $55 & 95;
      $57 = HEAP8[$__exp>>0]|0;
      $58 = $57&255;
      $59 = $58 & 127;
      $60 = ($56|0)==($59|0);
      if (!($60)) {
       $$2 = -1;
       break L1;
      }
     }
     $61 = ((($51)) + 1|0);
     HEAP32[$__a_end>>2] = $61;
     HEAP8[$51>>0] = $50;
     $$2 = 0;
     break L1;
     break;
    }
    case 23: case 22:  {
     HEAP8[$__exp>>0] = 80;
     $62 = HEAP32[$__a_end>>2]|0;
     $63 = ((($62)) + 1|0);
     HEAP32[$__a_end>>2] = $63;
     HEAP8[$62>>0] = $50;
     $$2 = 0;
     break L1;
     break;
    }
    default: {
     $64 = $50&255;
     $65 = $64 & 95;
     $66 = HEAP8[$__exp>>0]|0;
     $67 = $66 << 24 >> 24;
     $68 = ($65|0)==($67|0);
     if ($68) {
      $69 = $65 | 128;
      $70 = $69&255;
      HEAP8[$__exp>>0] = $70;
      $71 = HEAP8[$__in_units>>0]|0;
      $72 = ($71<<24>>24)==(0);
      if (!($72)) {
       HEAP8[$__in_units>>0] = 0;
       $73 = HEAP8[$__grouping>>0]|0;
       $74 = $73 & 1;
       $75 = ($74<<24>>24)==(0);
       $76 = ((($__grouping)) + 4|0);
       $77 = HEAP32[$76>>2]|0;
       $78 = $73&255;
       $79 = $78 >>> 1;
       $80 = $75 ? $79 : $77;
       $81 = ($80|0)==(0);
       if (!($81)) {
        $82 = HEAP32[$__g_end>>2]|0;
        $83 = $82;
        $84 = $__g;
        $85 = (($83) - ($84))|0;
        $86 = ($85|0)<(160);
        if ($86) {
         $87 = HEAP32[$__dc>>2]|0;
         $88 = ((($82)) + 4|0);
         HEAP32[$__g_end>>2] = $88;
         HEAP32[$82>>2] = $87;
        }
       }
      }
     }
     $89 = HEAP32[$__a_end>>2]|0;
     $90 = ((($89)) + 1|0);
     HEAP32[$__a_end>>2] = $90;
     HEAP8[$89>>0] = $50;
     $91 = ($47|0)>(21);
     if ($91) {
      $$2 = 0;
      break L1;
     }
     $92 = HEAP32[$__dc>>2]|0;
     $93 = (($92) + 1)|0;
     HEAP32[$__dc>>2] = $93;
     $$2 = 0;
     break L1;
    }
    }
   }
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 $0 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $0;
 __THREW__ = 0;
 $1 = (invoke_iii(354,($__loc|0),(8580|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ((($4)) + 48|0);
  $6 = HEAP32[$5>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($6|0,($1|0),(19466|0),((19492)|0),($__atoms|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   __THREW__ = 0;
   $9 = (invoke_iii(354,($__loc|0),(8736|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $12 = HEAP32[$9>>2]|0;
    $13 = ((($12)) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_ii($14|0,($9|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     HEAP32[$__thousands_sep>>2] = $15;
     $18 = HEAP32[$9>>2]|0;
     $19 = ((($18)) + 20|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     invoke_vii($20|0,($agg$result|0),($9|0));
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if (!($22)) {
      (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 ___resumeException($23|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 $0 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $0;
 __THREW__ = 0;
 $1 = (invoke_iii(354,($__loc|0),(8580|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ((($4)) + 48|0);
  $6 = HEAP32[$5>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($6|0,($1|0),(19466|0),((19498)|0),($__atoms|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   __THREW__ = 0;
   $9 = (invoke_iii(354,($__loc|0),(8736|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $12 = HEAP32[$9>>2]|0;
    $13 = ((($12)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_ii($14|0,($9|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     HEAP32[$__decimal_point>>2] = $15;
     $18 = HEAP32[$9>>2]|0;
     $19 = ((($18)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     $21 = (invoke_ii($20|0,($9|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      HEAP32[$__thousands_sep>>2] = $21;
      $24 = HEAP32[$9>>2]|0;
      $25 = ((($24)) + 20|0);
      $26 = HEAP32[$25>>2]|0;
      __THREW__ = 0;
      invoke_vii($26|0,($agg$result|0),($9|0));
      $27 = __THREW__; __THREW__ = 0;
      $28 = $27&1;
      if (!($28)) {
       (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $29 = ___cxa_find_matching_catch()|0;
 $30 = tempRet0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 ___resumeException($29|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0$i = 0, $$0$lcssa$i = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct|0)==($__decimal_point|0);
 L1: do {
  if ($0) {
   $1 = HEAP8[$__in_units>>0]|0;
   $2 = ($1<<24>>24)==(0);
   if ($2) {
    $$2 = -1;
   } else {
    HEAP8[$__in_units>>0] = 0;
    $3 = HEAP32[$__a_end>>2]|0;
    $4 = ((($3)) + 1|0);
    HEAP32[$__a_end>>2] = $4;
    HEAP8[$3>>0] = 46;
    $5 = HEAP8[$__grouping>>0]|0;
    $6 = $5 & 1;
    $7 = ($6<<24>>24)==(0);
    $8 = ((($__grouping)) + 4|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = $5&255;
    $11 = $10 >>> 1;
    $12 = $7 ? $11 : $9;
    $13 = ($12|0)==(0);
    if ($13) {
     $$2 = 0;
    } else {
     $14 = HEAP32[$__g_end>>2]|0;
     $15 = $14;
     $16 = $__g;
     $17 = (($15) - ($16))|0;
     $18 = ($17|0)<(160);
     if ($18) {
      $19 = HEAP32[$__dc>>2]|0;
      $20 = ((($14)) + 4|0);
      HEAP32[$__g_end>>2] = $20;
      HEAP32[$14>>2] = $19;
      $$2 = 0;
     } else {
      $$2 = 0;
     }
    }
   }
  } else {
   $21 = ($__ct|0)==($__thousands_sep|0);
   if ($21) {
    $22 = HEAP8[$__grouping>>0]|0;
    $23 = $22 & 1;
    $24 = ($23<<24>>24)==(0);
    $25 = ((($__grouping)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $22&255;
    $28 = $27 >>> 1;
    $29 = $24 ? $28 : $26;
    $30 = ($29|0)==(0);
    if (!($30)) {
     $31 = HEAP8[$__in_units>>0]|0;
     $32 = ($31<<24>>24)==(0);
     if ($32) {
      $$2 = -1;
      break;
     }
     $33 = HEAP32[$__g_end>>2]|0;
     $34 = $33;
     $35 = $__g;
     $36 = (($34) - ($35))|0;
     $37 = ($36|0)<(160);
     if (!($37)) {
      $$2 = 0;
      break;
     }
     $38 = HEAP32[$__dc>>2]|0;
     $39 = ((($33)) + 4|0);
     HEAP32[$__g_end>>2] = $39;
     HEAP32[$33>>2] = $38;
     HEAP32[$__dc>>2] = 0;
     $$2 = 0;
     break;
    }
   }
   $40 = ((($__atoms)) + 128|0);
   $$0$i = $__atoms;
   while(1) {
    $41 = ($$0$i|0)==($40|0);
    if ($41) {
     $$0$lcssa$i = $40;
     break;
    }
    $42 = HEAP32[$$0$i>>2]|0;
    $43 = ($42|0)==($__ct|0);
    if ($43) {
     $$0$lcssa$i = $$0$i;
     break;
    }
    $44 = ((($$0$i)) + 4|0);
    $$0$i = $44;
   }
   $45 = $$0$lcssa$i;
   $46 = $__atoms;
   $47 = (($45) - ($46))|0;
   $48 = $47 >> 2;
   $49 = ($47|0)>(124);
   if ($49) {
    $$2 = -1;
   } else {
    $50 = (19466 + ($48)|0);
    $51 = HEAP8[$50>>0]|0;
    switch ($48|0) {
    case 24: case 25:  {
     $52 = HEAP32[$__a_end>>2]|0;
     $53 = ($52|0)==($__a|0);
     if (!($53)) {
      $54 = ((($52)) + -1|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = $55&255;
      $57 = $56 & 95;
      $58 = HEAP8[$__exp>>0]|0;
      $59 = $58&255;
      $60 = $59 & 127;
      $61 = ($57|0)==($60|0);
      if (!($61)) {
       $$2 = -1;
       break L1;
      }
     }
     $62 = ((($52)) + 1|0);
     HEAP32[$__a_end>>2] = $62;
     HEAP8[$52>>0] = $51;
     $$2 = 0;
     break L1;
     break;
    }
    case 23: case 22:  {
     HEAP8[$__exp>>0] = 80;
     break;
    }
    default: {
     $63 = $51&255;
     $64 = $63 & 95;
     $65 = HEAP8[$__exp>>0]|0;
     $66 = $65 << 24 >> 24;
     $67 = ($64|0)==($66|0);
     if ($67) {
      $68 = $64 | 128;
      $69 = $68&255;
      HEAP8[$__exp>>0] = $69;
      $70 = HEAP8[$__in_units>>0]|0;
      $71 = ($70<<24>>24)==(0);
      if (!($71)) {
       HEAP8[$__in_units>>0] = 0;
       $72 = HEAP8[$__grouping>>0]|0;
       $73 = $72 & 1;
       $74 = ($73<<24>>24)==(0);
       $75 = ((($__grouping)) + 4|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = $72&255;
       $78 = $77 >>> 1;
       $79 = $74 ? $78 : $76;
       $80 = ($79|0)==(0);
       if (!($80)) {
        $81 = HEAP32[$__g_end>>2]|0;
        $82 = $81;
        $83 = $__g;
        $84 = (($82) - ($83))|0;
        $85 = ($84|0)<(160);
        if ($85) {
         $86 = HEAP32[$__dc>>2]|0;
         $87 = ((($81)) + 4|0);
         HEAP32[$__g_end>>2] = $87;
         HEAP32[$81>>2] = $86;
        }
       }
      }
     }
    }
    }
    $88 = HEAP32[$__a_end>>2]|0;
    $89 = ((($88)) + 1|0);
    HEAP32[$__a_end>>2] = $89;
    HEAP8[$88>>0] = $51;
    $90 = ($47|0)>(84);
    if ($90) {
     $$2 = 0;
    } else {
     $91 = HEAP32[$__dc>>2]|0;
     $92 = (($91) + 1)|0;
     HEAP32[$__dc>>2] = $92;
     $$2 = 0;
    }
   }
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi7Z2D = 0, $$pre3 = 0, $$pre3$val = 0, $$pre6 = 0, $$sroa$0$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $__nm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $__nm = sp;
 $2 = ((($__iob)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 L1: do {
  if ($5) {
   $6 = HEAP32[$this>>2]|0;
   $7 = ((($6)) + 24|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$__s>>2]|0;
   HEAP32[$0>>2] = $9;
   $10 = $__v&1;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   $11 = (FUNCTION_TABLE_iiiiii[$8 & 511]($this,$$byval_copy,$__iob,$__fl,$10)|0);
   $$sroa$0$0 = $11;
  } else {
   $12 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
   HEAP32[$1>>2] = $12;
   __THREW__ = 0;
   $13 = (invoke_iii(354,($1|0),(8728|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   do {
    if ($15) {
     $40 = ___cxa_find_matching_catch()|0;
     $41 = tempRet0;
     (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
     $$0 = $41;$$01 = $40;
    } else {
     (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
     $16 = HEAP32[$13>>2]|0;
     if ($__v) {
      $17 = ((($16)) + 24|0);
      $18 = HEAP32[$17>>2]|0;
      FUNCTION_TABLE_vii[$18 & 1023]($__nm,$13);
     } else {
      $19 = ((($16)) + 28|0);
      $20 = HEAP32[$19>>2]|0;
      FUNCTION_TABLE_vii[$20 & 1023]($__nm,$13);
     }
     $21 = HEAP8[$__nm>>0]|0;
     $22 = $21 & 1;
     $23 = ($22<<24>>24)==(0);
     $24 = ((($__nm)) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $$pre6 = ((($__nm)) + 1|0);
     $26 = ((($__nm)) + 1|0);
     $$pre3 = ((($__nm)) + 8|0);
     $$pre$phi7Z2D = $23 ? $26 : $$pre6;
     $$ph = $23 ? $26 : $25;
     $27 = ((($__nm)) + 4|0);
     $29 = $21;$37 = $$ph;
     L11: while(1) {
      $28 = $29 & 1;
      $30 = ($28<<24>>24)==(0);
      $$pre3$val = HEAP32[$$pre3>>2]|0;
      $31 = HEAP32[$27>>2]|0;
      $32 = $29&255;
      $33 = $32 >>> 1;
      $34 = $30 ? $$pre$phi7Z2D : $$pre3$val;
      $35 = $30 ? $33 : $31;
      $36 = (($34) + ($35)|0);
      $38 = ($37|0)==($36|0);
      if ($38) {
       label = 9;
       break;
      }
      $42 = HEAP8[$37>>0]|0;
      $43 = HEAP32[$__s>>2]|0;
      $44 = ($43|0)==(0|0);
      do {
       if (!($44)) {
        $45 = ((($43)) + 24|0);
        $46 = HEAP32[$45>>2]|0;
        $47 = ((($43)) + 28|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = ($46|0)==($48|0);
        if (!($49)) {
         $50 = ((($46)) + 1|0);
         HEAP32[$45>>2] = $50;
         HEAP8[$46>>0] = $42;
         break;
        }
        $51 = HEAP32[$43>>2]|0;
        $52 = ((($51)) + 52|0);
        $53 = HEAP32[$52>>2]|0;
        $54 = $42&255;
        __THREW__ = 0;
        $55 = (invoke_iii($53|0,($43|0),($54|0))|0);
        $56 = __THREW__; __THREW__ = 0;
        $57 = $56&1;
        if ($57) {
         label = 18;
         break L11;
        }
        $58 = ($55|0)==(-1);
        if ($58) {
         HEAP32[$__s>>2] = 0;
        }
       }
      } while(0);
      $59 = ((($37)) + 1|0);
      $$pre = HEAP8[$__nm>>0]|0;
      $29 = $$pre;$37 = $59;
     }
     if ((label|0) == 9) {
      $39 = HEAP32[$__s>>2]|0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nm);
      $$sroa$0$0 = $39;
      break L1;
     }
     else if ((label|0) == 18) {
      $60 = ___cxa_find_matching_catch()|0;
      $61 = tempRet0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nm);
      $$0 = $61;$$01 = $60;
      break;
     }
    }
   } while(0);
   ___resumeException($$01|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$0$0|0);
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 60|0;
 $__nar = sp + 48|0;
 $__o = sp + 24|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[20855>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[20855+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[20855+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[20855+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[20855+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[20855+5>>0]|0;
 $2 = ((($__fmt)) + 1|0);
 $3 = ((($__iob)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,20861,1,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 $9 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $9;
 __THREW__ = 0;
 invoke_viiiiiii(421,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  ___resumeException($16|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $15 = (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$13,$14,$__iob,$__fl)|0);
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmtp,$__len,$__signd,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__signd = $__signd|0;
 $__flags = $__flags|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$1$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__flags & 2048;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = $__fmtp;
 } else {
  $2 = ((($__fmtp)) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $$0 = $2;
 }
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 if ($4) {
  $$01 = $__len;$$1 = $$0;
 } else {
  $5 = ((($$0)) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$01 = $__len;$$1 = $5;
 }
 while(1) {
  $6 = HEAP8[$$01>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $$1$lcssa = $$1;
   break;
  }
  $8 = ((($$01)) + 1|0);
  $9 = ((($$1)) + 1|0);
  HEAP8[$$1>>0] = $6;
  $$01 = $8;$$1 = $9;
 }
 $10 = $__flags & 74;
 L10: do {
  switch ($10|0) {
  case 64:  {
   HEAP8[$$1$lcssa>>0] = 111;
   break;
  }
  case 8:  {
   $11 = $__flags & 16384;
   $12 = ($11|0)==(0);
   if ($12) {
    HEAP8[$$1$lcssa>>0] = 120;
    break L10;
   } else {
    HEAP8[$$1$lcssa>>0] = 88;
    break L10;
   }
   break;
  }
  default: {
   if ($__signd) {
    HEAP8[$$1$lcssa>>0] = 100;
    break L10;
   } else {
    HEAP8[$$1$lcssa>>0] = 117;
    break L10;
   }
  }
  }
 } while(0);
 return;
}
function __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nb,$__ne,$__iob) {
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__iob = $__iob|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__iob)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 176;
 L1: do {
  switch ($2|0) {
  case 16:  {
   $3 = HEAP8[$__nb>>0]|0;
   switch ($3<<24>>24) {
   case 43: case 45:  {
    $4 = ((($__nb)) + 1|0);
    $$0 = $4;
    break L1;
    break;
   }
   default: {
   }
   }
   $5 = $__ne;
   $6 = $__nb;
   $7 = (($5) - ($6))|0;
   $8 = ($7|0)>(1);
   $9 = ($3<<24>>24)==(48);
   $or$cond = $8 & $9;
   if ($or$cond) {
    $10 = ((($__nb)) + 1|0);
    $11 = HEAP8[$10>>0]|0;
    switch ($11<<24>>24) {
    case 88: case 120:  {
     break;
    }
    default: {
     label = 7;
     break L1;
    }
    }
    $12 = ((($__nb)) + 2|0);
    $$0 = $12;
   } else {
    label = 7;
   }
   break;
  }
  case 32:  {
   $$0 = $__ne;
   break;
  }
  default: {
   label = 7;
  }
  }
 } while(0);
 if ((label|0) == 7) {
  $$0 = $__nb;
 }
 return ($$0|0);
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$0$i$i = 0, $$0$i$i$6 = 0, $$01$i$i = 0, $$01$i$i$5 = 0, $$__dg$0 = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0;
 var $__nf$1 = 0, $__p$0 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,8588)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,8728)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 $5 = HEAP8[$__grouping>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 $8 = ((($__grouping)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $5&255;
 $11 = $10 >>> 1;
 $12 = $7 ? $11 : $9;
 $13 = ($12|0)==(0);
 L1: do {
  if ($13) {
   $14 = HEAP32[$0>>2]|0;
   $15 = ((($14)) + 32|0);
   $16 = HEAP32[$15>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($16|0,($0|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    label = 5;
   } else {
    $19 = $__ne;
    $20 = $__nb;
    $21 = (($19) - ($20))|0;
    $22 = (($__ob) + ($21)|0);
    HEAP32[$__oe>>2] = $22;
    $$pre$phiZ2D = $20;$126 = $22;
    label = 30;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $27 = HEAP8[$__nb>>0]|0;
   switch ($27<<24>>24) {
   case 43: case 45:  {
    $28 = HEAP32[$0>>2]|0;
    $29 = ((($28)) + 28|0);
    $30 = HEAP32[$29>>2]|0;
    __THREW__ = 0;
    $31 = (invoke_iii($30|0,($0|0),($27|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     label = 5;
     break L1;
    }
    $34 = ((($__nb)) + 1|0);
    $35 = HEAP32[$__oe>>2]|0;
    $36 = ((($35)) + 1|0);
    HEAP32[$__oe>>2] = $36;
    HEAP8[$35>>0] = $31;
    $__nf$0 = $34;
    break;
   }
   default: {
    $__nf$0 = $__nb;
   }
   }
   $37 = $__ne;
   $38 = $__nf$0;
   $39 = (($37) - ($38))|0;
   $40 = ($39|0)>(1);
   L9: do {
    if ($40) {
     $41 = HEAP8[$__nf$0>>0]|0;
     $42 = ($41<<24>>24)==(48);
     if ($42) {
      $43 = ((($__nf$0)) + 1|0);
      $44 = HEAP8[$43>>0]|0;
      switch ($44<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       $__nf$1 = $__nf$0;
       break L9;
      }
      }
      $45 = HEAP32[$0>>2]|0;
      $46 = ((($45)) + 28|0);
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = (invoke_iii($47|0,($0|0),48)|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 5;
       break L1;
      }
      $51 = HEAP32[$__oe>>2]|0;
      $52 = ((($51)) + 1|0);
      HEAP32[$__oe>>2] = $52;
      HEAP8[$51>>0] = $48;
      $53 = HEAP8[$43>>0]|0;
      $54 = HEAP32[$0>>2]|0;
      $55 = ((($54)) + 28|0);
      $56 = HEAP32[$55>>2]|0;
      __THREW__ = 0;
      $57 = (invoke_iii($56|0,($0|0),($53|0))|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 5;
       break L1;
      }
      $60 = ((($__nf$0)) + 2|0);
      $61 = HEAP32[$__oe>>2]|0;
      $62 = ((($61)) + 1|0);
      HEAP32[$__oe>>2] = $62;
      HEAP8[$61>>0] = $57;
      $__nf$1 = $60;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } while(0);
   $63 = ($__nf$1|0)==($__ne|0);
   L16: do {
    if (!($63)) {
     $$0$i$i = $__ne;$$01$i$i = $__nf$1;
     while(1) {
      $64 = ((($$0$i$i)) + -1|0);
      $65 = ($$01$i$i>>>0)<($64>>>0);
      if (!($65)) {
       break L16;
      }
      $66 = HEAP8[$$01$i$i>>0]|0;
      $67 = HEAP8[$64>>0]|0;
      HEAP8[$$01$i$i>>0] = $67;
      HEAP8[$64>>0] = $66;
      $68 = ((($$01$i$i)) + 1|0);
      $$0$i$i = $64;$$01$i$i = $68;
     }
    }
   } while(0);
   $69 = HEAP32[$1>>2]|0;
   $70 = ((($69)) + 16|0);
   $71 = HEAP32[$70>>2]|0;
   __THREW__ = 0;
   $72 = (invoke_ii($71|0,($1|0))|0);
   $73 = __THREW__; __THREW__ = 0;
   $74 = $73&1;
   if ($74) {
    label = 5;
   } else {
    $75 = ((($__grouping)) + 8|0);
    $76 = ((($__grouping)) + 1|0);
    $__dc$0 = 0;$__dg$0 = 0;$__p$0 = $__nf$1;
    while(1) {
     $77 = ($__p$0>>>0)<($__ne>>>0);
     if (!($77)) {
      break;
     }
     $89 = HEAP8[$__grouping>>0]|0;
     $90 = $89 & 1;
     $91 = ($90<<24>>24)==(0);
     $92 = HEAP32[$75>>2]|0;
     $93 = $91 ? $76 : $92;
     $94 = (($93) + ($__dg$0)|0);
     $95 = HEAP8[$94>>0]|0;
     $96 = ($95<<24>>24)!=(0);
     $97 = $95 << 24 >> 24;
     $98 = ($__dc$0|0)==($97|0);
     $or$cond = $96 & $98;
     if ($or$cond) {
      $99 = HEAP32[$__oe>>2]|0;
      $100 = ((($99)) + 1|0);
      HEAP32[$__oe>>2] = $100;
      HEAP8[$99>>0] = $72;
      $101 = HEAP8[$__grouping>>0]|0;
      $102 = $101 & 1;
      $103 = ($102<<24>>24)==(0);
      $104 = HEAP32[$8>>2]|0;
      $105 = $101&255;
      $106 = $105 >>> 1;
      $107 = $103 ? $106 : $104;
      $108 = (($107) + -1)|0;
      $109 = ($__dg$0>>>0)<($108>>>0);
      $110 = $109&1;
      $$__dg$0 = (($110) + ($__dg$0))|0;
      $__dc$1 = 0;$__dg$1 = $$__dg$0;
     } else {
      $__dc$1 = $__dc$0;$__dg$1 = $__dg$0;
     }
     $111 = HEAP8[$__p$0>>0]|0;
     $112 = HEAP32[$0>>2]|0;
     $113 = ((($112)) + 28|0);
     $114 = HEAP32[$113>>2]|0;
     __THREW__ = 0;
     $115 = (invoke_iii($114|0,($0|0),($111|0))|0);
     $116 = __THREW__; __THREW__ = 0;
     $117 = $116&1;
     if ($117) {
      label = 4;
      break;
     }
     $118 = HEAP32[$__oe>>2]|0;
     $119 = ((($118)) + 1|0);
     HEAP32[$__oe>>2] = $119;
     HEAP8[$118>>0] = $115;
     $120 = (($__dc$1) + 1)|0;
     $121 = ((($__p$0)) + 1|0);
     $__dc$0 = $120;$__dg$0 = $__dg$1;$__p$0 = $121;
    }
    if ((label|0) == 4) {
     $23 = ___cxa_find_matching_catch()|0;
     $24 = tempRet0;
     $lpad$phi$index = $23;$lpad$phi$index2 = $24;
     break;
    }
    $78 = $__nf$1;
    $79 = $__nb;
    $80 = (($78) - ($79))|0;
    $81 = (($__ob) + ($80)|0);
    $82 = HEAP32[$__oe>>2]|0;
    $83 = ($81|0)==($82|0);
    if ($83) {
     $$pre$phiZ2D = $79;$126 = $81;
     label = 30;
    } else {
     $$0$i$i$6 = $82;$$01$i$i$5 = $81;
     while(1) {
      $84 = ((($$0$i$i$6)) + -1|0);
      $85 = ($$01$i$i$5>>>0)<($84>>>0);
      if (!($85)) {
       break;
      }
      $86 = HEAP8[$$01$i$i$5>>0]|0;
      $87 = HEAP8[$84>>0]|0;
      HEAP8[$$01$i$i$5>>0] = $87;
      HEAP8[$84>>0] = $86;
      $88 = ((($$01$i$i$5)) + 1|0);
      $$0$i$i$6 = $84;$$01$i$i$5 = $88;
     }
     $$pre = HEAP32[$__oe>>2]|0;
     $$pre$phiZ2D = $79;$126 = $$pre;
     label = 30;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $lpad$phi$index = $25;$lpad$phi$index2 = $26;
 }
 else if ((label|0) == 30) {
  $122 = ($__np|0)==($__ne|0);
  $123 = $__np;
  $124 = (($123) - ($$pre$phiZ2D))|0;
  $125 = (($__ob) + ($124)|0);
  $storemerge = $122 ? $126 : $125;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
  STACKTOP = sp;return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($this,$__s,$__iob,$__fl,$0,$1) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 78|0;
 $__o = sp + 36|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($__fmt)) + 1|0);
 $9 = ((($__iob)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,20863,1,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 $19 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$2>>2] = $19;
 __THREW__ = 0;
 invoke_viiiiiii(421,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $26 = ___cxa_find_matching_catch()|0;
  $27 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  ___resumeException($26|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
  $25 = (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$23,$24,$__iob,$__fl)|0);
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 60|0;
 $__nar = sp + 48|0;
 $__o = sp + 24|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[20855>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[20855+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[20855+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[20855+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[20855+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[20855+5>>0]|0;
 $2 = ((($__fmt)) + 1|0);
 $3 = ((($__iob)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,20861,0,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 $9 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $9;
 __THREW__ = 0;
 invoke_viiiiiii(421,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  ___resumeException($16|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $15 = (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$13,$14,$__iob,$__fl)|0);
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($this,$__s,$__iob,$__fl,$0,$1) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 79|0;
 $__o = sp + 36|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($__fmt)) + 1|0);
 $9 = ((($__iob)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,20863,0,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 $19 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$2>>2] = $19;
 __THREW__ = 0;
 invoke_viiiiiii(421,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $26 = ___cxa_find_matching_catch()|0;
  $27 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  ___resumeException($26|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
  $25 = (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$23,$24,$__iob,$__fl)|0);
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$02 = 0, $$117 = 0, $$1316 = 0, $$byval_copy = 0, $$pre = 0, $$pre10 = 0, $$pre10$pre = 0, $$pre1012 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0;
 var $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 84|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 146|0;
 $__nb = sp + 80|0;
 $__o = sp + 88|0;
 $__op = sp + 76|0;
 $__oe = sp + 72|0;
 $0 = sp + 68|0;
 $1 = sp + 64|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($__fmt)) + 1|0);
 $7 = ((($__iob)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($6,20866,$8)|0);
 HEAP32[$__nb>>2] = $__nar;
 $10 = (__ZNSt3__16__clocEv()|0);
 if ($9) {
  $11 = ((($__iob)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $13 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $13;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $14;
 }
 $15 = ($__nc$0|0)>(29);
 do {
  if ($15) {
   __THREW__ = 0;
   $16 = (invoke_i(417)|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($9) {
    if (!($18)) {
     $19 = ((($__iob)) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $20;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $__v;
     $21 = (invoke_iiiii(422,($__nb|0),($16|0),($__fmt|0),($vararg_buffer5|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      $__nc$1 = $21;
      label = 12;
     }
    }
   } else {
    if (!($18)) {
     $26 = ((($__iob)) + 8|0);
     $27 = HEAP32[$26>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer9>>2] = $27;
     $vararg_ptr12 = ((($vararg_buffer9)) + 8|0);
     HEAPF64[$vararg_ptr12>>3] = $__v;
     $28 = (invoke_iiiii(422,($__nb|0),($16|0),($__fmt|0),($vararg_buffer9|0))|0);
     $29 = __THREW__; __THREW__ = 0;
     $30 = $29&1;
     if (!($30)) {
      $__nc$1 = $28;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $31 = HEAP32[$__nb>>2]|0;
    $32 = ($31|0)==(0|0);
    if (!($32)) {
     $33 = $31;
     $$pre1012 = $31;$63 = $33;$__nc$2 = $__nc$1;
     label = 16;
     break;
    }
    __THREW__ = 0;
    invoke_v(423);
    $34 = __THREW__; __THREW__ = 0;
    $35 = $34&1;
    if (!($35)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $36 = $$pre;
     $$pre1012 = $36;$63 = $$pre;$__nc$2 = $__nc$1;
     label = 16;
     break;
    }
   }
   $24 = ___cxa_find_matching_catch()|0;
   $25 = tempRet0;
   $$117 = $24;$$1316 = $25;
  } else {
   $$pre9 = HEAP32[$__nb>>2]|0;
   $$pre1012 = $$pre9;$63 = 0;$__nc$2 = $__nc$0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $37 = (($$pre1012) + ($__nc$2)|0);
  $38 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($$pre1012,$37,$__iob)|0);
  $39 = ($$pre1012|0)==($__nar|0);
  do {
   if ($39) {
    $51 = $__nar;$60 = 0;$__ob$0 = $__o;
    label = 22;
   } else {
    $40 = $__nc$2 << 1;
    $41 = (_malloc($40)|0);
    $42 = ($41|0)==(0|0);
    if ($42) {
     __THREW__ = 0;
     invoke_v(423);
     $43 = __THREW__; __THREW__ = 0;
     $44 = $43&1;
     if ($44) {
      $73 = 0;
      label = 20;
      break;
     }
     $$pre10$pre = HEAP32[$__nb>>2]|0;
     $$pre10 = $$pre10$pre;
    } else {
     $$pre10 = $$pre1012;
    }
    $47 = $41;
    $51 = $$pre10;$60 = $47;$__ob$0 = $41;
    label = 22;
   }
  } while(0);
  do {
   if ((label|0) == 22) {
    __THREW__ = 0;
    $48 = (invoke_ii(353,($__iob|0))|0);
    $49 = __THREW__; __THREW__ = 0;
    $50 = $49&1;
    if ($50) {
     $73 = $60;
     label = 20;
    } else {
     HEAP32[$0>>2] = $48;
     __THREW__ = 0;
     invoke_viiiiiii(424,($51|0),($38|0),($37|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
     $52 = __THREW__; __THREW__ = 0;
     $53 = $52&1;
     if ($53) {
      $66 = ___cxa_find_matching_catch()|0;
      $67 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($48)|0);
      $$0 = $66;$$02 = $67;$68 = $60;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($48)|0);
     $54 = HEAP32[$__s>>2]|0;
     HEAP32[$1>>2] = $54;
     $55 = HEAP32[$__op>>2]|0;
     $56 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
     $57 = (invoke_iiiiiii(425,($$byval_copy|0),($__ob$0|0),($55|0),($56|0),($__iob|0),($__fl|0))|0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      $73 = $60;
      label = 20;
     } else {
      HEAP32[$__s>>2] = $57;
      $61 = ($60|0)==(0);
      if (!($61)) {
       $62 = $60;
       _free($62);
      }
      $64 = ($63|0)==(0);
      if (!($64)) {
       $65 = $63;
       _free($65);
      }
      STACKTOP = sp;return ($57|0);
     }
    }
   }
  } while(0);
  if ((label|0) == 20) {
   $45 = ___cxa_find_matching_catch()|0;
   $46 = tempRet0;
   $$0 = $45;$$02 = $46;$68 = $73;
  }
  $69 = ($68|0)==(0);
  if (!($69)) {
   $70 = $68;
   _free($70);
  }
  $71 = ($63|0)==(0);
  if ($71) {
   $$117 = $$0;$$1316 = $$02;
  } else {
   $72 = $63;
   _free($72);
   $$117 = $$0;$$1316 = $$02;
  }
 }
 ___resumeException($$117|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmtp,$__len,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__flags = $__flags|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$2$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $specify_precision$0$off0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__flags & 2048;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = $__fmtp;
 } else {
  $2 = ((($__fmtp)) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $$0 = $2;
 }
 $3 = $__flags & 1024;
 $4 = ($3|0)==(0);
 if ($4) {
  $$1 = $$0;
 } else {
  $5 = ((($$0)) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$1 = $5;
 }
 $6 = $__flags & 260;
 $7 = $__flags >>> 14;
 $8 = ($6|0)==(260);
 if ($8) {
  $$2$ph = $$1;$specify_precision$0$off0$ph = 0;
 } else {
  $9 = ((($$1)) + 1|0);
  HEAP8[$$1>>0] = 46;
  $10 = ((($$1)) + 2|0);
  HEAP8[$9>>0] = 42;
  $$2$ph = $10;$specify_precision$0$off0$ph = 1;
 }
 $$01 = $__len;$$2 = $$2$ph;
 while(1) {
  $11 = HEAP8[$$01>>0]|0;
  $12 = ($11<<24>>24)==(0);
  if ($12) {
   $$2$lcssa = $$2;
   break;
  }
  $13 = ((($$01)) + 1|0);
  $14 = ((($$2)) + 1|0);
  HEAP8[$$2>>0] = $11;
  $$01 = $13;$$2 = $14;
 }
 L14: do {
  switch ($6|0) {
  case 4:  {
   $15 = $7 & 1;
   $16 = ($15|0)==(0);
   if ($16) {
    HEAP8[$$2$lcssa>>0] = 102;
    break L14;
   } else {
    HEAP8[$$2$lcssa>>0] = 70;
    break L14;
   }
   break;
  }
  case 256:  {
   $17 = $7 & 1;
   $18 = ($17|0)==(0);
   if ($18) {
    HEAP8[$$2$lcssa>>0] = 101;
    break L14;
   } else {
    HEAP8[$$2$lcssa>>0] = 69;
    break L14;
   }
   break;
  }
  default: {
   $19 = $7 & 1;
   $20 = ($19|0)!=(0);
   if ($8) {
    if ($20) {
     HEAP8[$$2$lcssa>>0] = 65;
     break L14;
    } else {
     HEAP8[$$2$lcssa>>0] = 97;
     break L14;
    }
   } else {
    if ($20) {
     HEAP8[$$2$lcssa>>0] = 71;
     break L14;
    } else {
     HEAP8[$$2$lcssa>>0] = 103;
     break L14;
    }
   }
  }
  }
 } while(0);
 return ($specify_precision$0$off0$ph|0);
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$0$i$i = 0, $$0$i$i$6 = 0, $$01$i$i = 0, $$01$i$i$5 = 0, $$__dg$0 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0;
 var $__nf$1 = 0, $__nf$2 = 0, $__nf$2$lcssa45 = 0, $__nf$3 = 0, $__ns$0 = 0, $__ns$1 = 0, $__ns$2 = 0, $__p$0 = 0, $lpad$phi$index = 0, $lpad$phi$index5 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,8588)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,8728)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 HEAP32[$__oe>>2] = $__ob;
 $5 = HEAP8[$__nb>>0]|0;
 switch ($5<<24>>24) {
 case 43: case 45:  {
  $6 = HEAP32[$0>>2]|0;
  $7 = ((($6)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  $9 = (invoke_iii($8|0,($0|0),($5|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   label = 8;
  } else {
   $12 = ((($__nb)) + 1|0);
   $13 = HEAP32[$__oe>>2]|0;
   $14 = ((($13)) + 1|0);
   HEAP32[$__oe>>2] = $14;
   HEAP8[$13>>0] = $9;
   $__nf$0 = $12;
   label = 10;
  }
  break;
 }
 default: {
  $__nf$0 = $__nb;
  label = 10;
 }
 }
 L4: do {
  if ((label|0) == 10) {
   $25 = $__ne;
   $26 = $__nf$0;
   $27 = (($25) - ($26))|0;
   $28 = ($27|0)>(1);
   L6: do {
    if ($28) {
     $29 = HEAP8[$__nf$0>>0]|0;
     $30 = ($29<<24>>24)==(48);
     if ($30) {
      $31 = ((($__nf$0)) + 1|0);
      $32 = HEAP8[$31>>0]|0;
      switch ($32<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       $__ns$1 = $__nf$0;
       label = 21;
       break L6;
      }
      }
      $33 = HEAP32[$0>>2]|0;
      $34 = ((($33)) + 28|0);
      $35 = HEAP32[$34>>2]|0;
      __THREW__ = 0;
      $36 = (invoke_iii($35|0,($0|0),48)|0);
      $37 = __THREW__; __THREW__ = 0;
      $38 = $37&1;
      if ($38) {
       label = 8;
       break L4;
      }
      $39 = HEAP32[$__oe>>2]|0;
      $40 = ((($39)) + 1|0);
      HEAP32[$__oe>>2] = $40;
      HEAP8[$39>>0] = $36;
      $41 = ((($__nf$0)) + 2|0);
      $42 = HEAP8[$31>>0]|0;
      $43 = HEAP32[$0>>2]|0;
      $44 = ((($43)) + 28|0);
      $45 = HEAP32[$44>>2]|0;
      __THREW__ = 0;
      $46 = (invoke_iii($45|0,($0|0),($42|0))|0);
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       label = 8;
       break L4;
      }
      $49 = HEAP32[$__oe>>2]|0;
      $50 = ((($49)) + 1|0);
      HEAP32[$__oe>>2] = $50;
      HEAP8[$49>>0] = $46;
      $__ns$0 = $41;
      while(1) {
       $51 = ($__ns$0>>>0)<($__ne>>>0);
       if (!($51)) {
        $__nf$1 = $41;$__ns$2 = $__ns$0;
        break L6;
       }
       $52 = HEAP8[$__ns$0>>0]|0;
       __THREW__ = 0;
       $53 = (invoke_i(417)|0);
       $54 = __THREW__; __THREW__ = 0;
       $55 = $54&1;
       if ($55) {
        break;
       }
       $56 = $52 << 24 >> 24;
       __THREW__ = 0;
       $57 = (invoke_iii(426,($56|0),($53|0))|0);
       $58 = __THREW__; __THREW__ = 0;
       $59 = $58&1;
       if ($59) {
        break;
       }
       $60 = ($57|0)==(0);
       if ($60) {
        $__nf$1 = $41;$__ns$2 = $__ns$0;
        break L6;
       }
       $61 = ((($__ns$0)) + 1|0);
       $__ns$0 = $61;
      }
      $21 = ___cxa_find_matching_catch()|0;
      $22 = tempRet0;
      $lpad$phi$index = $21;$lpad$phi$index5 = $22;
      break L4;
     } else {
      $__ns$1 = $__nf$0;
      label = 21;
     }
    } else {
     $__ns$1 = $__nf$0;
     label = 21;
    }
   } while(0);
   L19: do {
    if ((label|0) == 21) {
     while(1) {
      label = 0;
      $62 = ($__ns$1>>>0)<($__ne>>>0);
      if (!($62)) {
       $__nf$1 = $__nf$0;$__ns$2 = $__ns$1;
       break L19;
      }
      $63 = HEAP8[$__ns$1>>0]|0;
      __THREW__ = 0;
      $64 = (invoke_i(417)|0);
      $65 = __THREW__; __THREW__ = 0;
      $66 = $65&1;
      if ($66) {
       break;
      }
      $67 = $63 << 24 >> 24;
      __THREW__ = 0;
      $68 = (invoke_iii(427,($67|0),($64|0))|0);
      $69 = __THREW__; __THREW__ = 0;
      $70 = $69&1;
      if ($70) {
       break;
      }
      $71 = ($68|0)==(0);
      if ($71) {
       $__nf$1 = $__nf$0;$__ns$2 = $__ns$1;
       break L19;
      }
      $72 = ((($__ns$1)) + 1|0);
      $__ns$1 = $72;
      label = 21;
     }
     $19 = ___cxa_find_matching_catch()|0;
     $20 = tempRet0;
     $lpad$phi$index = $19;$lpad$phi$index5 = $20;
     break L4;
    }
   } while(0);
   $73 = HEAP8[$__grouping>>0]|0;
   $74 = $73 & 1;
   $75 = ($74<<24>>24)==(0);
   $76 = ((($__grouping)) + 4|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $73&255;
   $79 = $78 >>> 1;
   $80 = $75 ? $79 : $77;
   $81 = ($80|0)==(0);
   L28: do {
    if ($81) {
     $82 = HEAP32[$__oe>>2]|0;
     $83 = HEAP32[$0>>2]|0;
     $84 = ((($83)) + 32|0);
     $85 = HEAP32[$84>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($85|0,($0|0),($__nf$1|0),($__ns$2|0),($82|0))|0);
     $86 = __THREW__; __THREW__ = 0;
     $87 = $86&1;
     if ($87) {
      label = 8;
      break L4;
     }
     $88 = $__ns$2;
     $89 = $__nf$1;
     $90 = (($88) - ($89))|0;
     $91 = HEAP32[$__oe>>2]|0;
     $92 = (($91) + ($90)|0);
     HEAP32[$__oe>>2] = $92;
     $$pre$phiZ2D = $0;
    } else {
     $93 = ($__nf$1|0)==($__ns$2|0);
     L32: do {
      if (!($93)) {
       $$0$i$i = $__ns$2;$$01$i$i = $__nf$1;
       while(1) {
        $94 = ((($$0$i$i)) + -1|0);
        $95 = ($$01$i$i>>>0)<($94>>>0);
        if (!($95)) {
         break L32;
        }
        $96 = HEAP8[$$01$i$i>>0]|0;
        $97 = HEAP8[$94>>0]|0;
        HEAP8[$$01$i$i>>0] = $97;
        HEAP8[$94>>0] = $96;
        $98 = ((($$01$i$i)) + 1|0);
        $$0$i$i = $94;$$01$i$i = $98;
       }
      }
     } while(0);
     $99 = HEAP32[$1>>2]|0;
     $100 = ((($99)) + 16|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     $102 = (invoke_ii($101|0,($1|0))|0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 8;
      break L4;
     }
     $105 = ((($__grouping)) + 8|0);
     $106 = ((($__grouping)) + 1|0);
     $__dc$0 = 0;$__dg$0 = 0;$__p$0 = $__nf$1;
     while(1) {
      $107 = ($__p$0>>>0)<($__ns$2>>>0);
      if (!($107)) {
       break;
      }
      $119 = HEAP8[$__grouping>>0]|0;
      $120 = $119 & 1;
      $121 = ($120<<24>>24)==(0);
      $122 = HEAP32[$105>>2]|0;
      $123 = $121 ? $106 : $122;
      $124 = (($123) + ($__dg$0)|0);
      $125 = HEAP8[$124>>0]|0;
      $126 = ($125<<24>>24)>(0);
      $127 = $125 << 24 >> 24;
      $128 = ($__dc$0|0)==($127|0);
      $or$cond = $126 & $128;
      if ($or$cond) {
       $129 = HEAP32[$__oe>>2]|0;
       $130 = ((($129)) + 1|0);
       HEAP32[$__oe>>2] = $130;
       HEAP8[$129>>0] = $102;
       $131 = HEAP8[$__grouping>>0]|0;
       $132 = $131 & 1;
       $133 = ($132<<24>>24)==(0);
       $134 = HEAP32[$76>>2]|0;
       $135 = $131&255;
       $136 = $135 >>> 1;
       $137 = $133 ? $136 : $134;
       $138 = (($137) + -1)|0;
       $139 = ($__dg$0>>>0)<($138>>>0);
       $140 = $139&1;
       $$__dg$0 = (($140) + ($__dg$0))|0;
       $__dc$1 = 0;$__dg$1 = $$__dg$0;
      } else {
       $__dc$1 = $__dc$0;$__dg$1 = $__dg$0;
      }
      $141 = HEAP8[$__p$0>>0]|0;
      $142 = HEAP32[$0>>2]|0;
      $143 = ((($142)) + 28|0);
      $144 = HEAP32[$143>>2]|0;
      __THREW__ = 0;
      $145 = (invoke_iii($144|0,($0|0),($141|0))|0);
      $146 = __THREW__; __THREW__ = 0;
      $147 = $146&1;
      if ($147) {
       label = 5;
       break;
      }
      $148 = HEAP32[$__oe>>2]|0;
      $149 = ((($148)) + 1|0);
      HEAP32[$__oe>>2] = $149;
      HEAP8[$148>>0] = $145;
      $150 = (($__dc$1) + 1)|0;
      $151 = ((($__p$0)) + 1|0);
      $__dc$0 = $150;$__dg$0 = $__dg$1;$__p$0 = $151;
     }
     if ((label|0) == 5) {
      $17 = ___cxa_find_matching_catch()|0;
      $18 = tempRet0;
      $lpad$phi$index = $17;$lpad$phi$index5 = $18;
      break L4;
     }
     $108 = $__nf$1;
     $109 = $__nb;
     $110 = (($108) - ($109))|0;
     $111 = (($__ob) + ($110)|0);
     $112 = HEAP32[$__oe>>2]|0;
     $113 = ($111|0)==($112|0);
     if ($113) {
      $$pre$phiZ2D = $0;
     } else {
      $$0$i$i$6 = $112;$$01$i$i$5 = $111;
      while(1) {
       $114 = ((($$0$i$i$6)) + -1|0);
       $115 = ($$01$i$i$5>>>0)<($114>>>0);
       if (!($115)) {
        $$pre$phiZ2D = $0;
        break L28;
       }
       $116 = HEAP8[$$01$i$i$5>>0]|0;
       $117 = HEAP8[$114>>0]|0;
       HEAP8[$$01$i$i$5>>0] = $117;
       HEAP8[$114>>0] = $116;
       $118 = ((($$01$i$i$5)) + 1|0);
       $$0$i$i$6 = $114;$$01$i$i$5 = $118;
      }
     }
    }
   } while(0);
   $__nf$2 = $__ns$2;
   while(1) {
    $152 = ($__nf$2>>>0)<($__ne>>>0);
    if (!($152)) {
     $__nf$3 = $__nf$2;
     break;
    }
    $153 = HEAP8[$__nf$2>>0]|0;
    $154 = ($153<<24>>24)==(46);
    if ($154) {
     $__nf$2$lcssa45 = $__nf$2;
     label = 45;
     break;
    }
    $164 = HEAP32[$$pre$phiZ2D>>2]|0;
    $165 = ((($164)) + 28|0);
    $166 = HEAP32[$165>>2]|0;
    __THREW__ = 0;
    $167 = (invoke_iii($166|0,($0|0),($153|0))|0);
    $168 = __THREW__; __THREW__ = 0;
    $169 = $168&1;
    if ($169) {
     label = 4;
     break;
    }
    $170 = HEAP32[$__oe>>2]|0;
    $171 = ((($170)) + 1|0);
    HEAP32[$__oe>>2] = $171;
    HEAP8[$170>>0] = $167;
    $172 = ((($__nf$2)) + 1|0);
    $__nf$2 = $172;
   }
   if ((label|0) == 4) {
    $15 = ___cxa_find_matching_catch()|0;
    $16 = tempRet0;
    $lpad$phi$index = $15;$lpad$phi$index5 = $16;
    break;
   }
   if ((label|0) == 45) {
    $155 = HEAP32[$1>>2]|0;
    $156 = ((($155)) + 12|0);
    $157 = HEAP32[$156>>2]|0;
    __THREW__ = 0;
    $158 = (invoke_ii($157|0,($1|0))|0);
    $159 = __THREW__; __THREW__ = 0;
    $160 = $159&1;
    if ($160) {
     label = 8;
     break;
    }
    $161 = HEAP32[$__oe>>2]|0;
    $162 = ((($161)) + 1|0);
    HEAP32[$__oe>>2] = $162;
    HEAP8[$161>>0] = $158;
    $163 = ((($__nf$2$lcssa45)) + 1|0);
    $__nf$3 = $163;
   }
   $173 = HEAP32[$__oe>>2]|0;
   $174 = HEAP32[$0>>2]|0;
   $175 = ((($174)) + 32|0);
   $176 = HEAP32[$175>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($176|0,($0|0),($__nf$3|0),($__ne|0),($173|0))|0);
   $177 = __THREW__; __THREW__ = 0;
   $178 = $177&1;
   if ($178) {
    label = 8;
   } else {
    $179 = $__nf$3;
    $180 = (($25) - ($179))|0;
    $181 = HEAP32[$__oe>>2]|0;
    $182 = (($181) + ($180)|0);
    HEAP32[$__oe>>2] = $182;
    $183 = ($__np|0)==($__ne|0);
    $184 = $__np;
    $185 = $__nb;
    $186 = (($184) - ($185))|0;
    $187 = (($__ob) + ($186)|0);
    $storemerge = $183 ? $182 : $187;
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $23 = ___cxa_find_matching_catch()|0;
  $24 = tempRet0;
  $lpad$phi$index = $23;$lpad$phi$index5 = $24;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$02 = 0, $$117 = 0, $$1316 = 0, $$byval_copy = 0, $$pre = 0, $$pre10 = 0, $$pre10$pre = 0, $$pre1012 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 76|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 138|0;
 $__nb = sp + 72|0;
 $__o = sp + 80|0;
 $__op = sp + 68|0;
 $__oe = sp + 64|0;
 $0 = sp + 60|0;
 $1 = sp + 56|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($__fmt)) + 1|0);
 $7 = ((($__iob)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($6,20867,$8)|0);
 HEAP32[$__nb>>2] = $__nar;
 $10 = (__ZNSt3__16__clocEv()|0);
 if ($9) {
  $11 = ((($__iob)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $13 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $13;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $14;
 }
 $15 = ($__nc$0|0)>(29);
 do {
  if ($15) {
   __THREW__ = 0;
   $16 = (invoke_i(417)|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($9) {
    if (!($18)) {
     $19 = ((($__iob)) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $20;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $__v;
     $21 = (invoke_iiiii(422,($__nb|0),($16|0),($__fmt|0),($vararg_buffer5|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      $__nc$1 = $21;
      label = 12;
     }
    }
   } else {
    if (!($18)) {
     __THREW__ = 0;
     HEAPF64[$vararg_buffer9>>3] = $__v;
     $26 = (invoke_iiiii(422,($__nb|0),($16|0),($__fmt|0),($vararg_buffer9|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if (!($28)) {
      $__nc$1 = $26;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $29 = HEAP32[$__nb>>2]|0;
    $30 = ($29|0)==(0|0);
    if (!($30)) {
     $31 = $29;
     $$pre1012 = $29;$61 = $31;$__nc$2 = $__nc$1;
     label = 16;
     break;
    }
    __THREW__ = 0;
    invoke_v(423);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if (!($33)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $34 = $$pre;
     $$pre1012 = $34;$61 = $$pre;$__nc$2 = $__nc$1;
     label = 16;
     break;
    }
   }
   $24 = ___cxa_find_matching_catch()|0;
   $25 = tempRet0;
   $$117 = $24;$$1316 = $25;
  } else {
   $$pre9 = HEAP32[$__nb>>2]|0;
   $$pre1012 = $$pre9;$61 = 0;$__nc$2 = $__nc$0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $35 = (($$pre1012) + ($__nc$2)|0);
  $36 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($$pre1012,$35,$__iob)|0);
  $37 = ($$pre1012|0)==($__nar|0);
  do {
   if ($37) {
    $49 = $__nar;$58 = 0;$__ob$0 = $__o;
    label = 22;
   } else {
    $38 = $__nc$2 << 1;
    $39 = (_malloc($38)|0);
    $40 = ($39|0)==(0|0);
    if ($40) {
     __THREW__ = 0;
     invoke_v(423);
     $41 = __THREW__; __THREW__ = 0;
     $42 = $41&1;
     if ($42) {
      $71 = 0;
      label = 20;
      break;
     }
     $$pre10$pre = HEAP32[$__nb>>2]|0;
     $$pre10 = $$pre10$pre;
    } else {
     $$pre10 = $$pre1012;
    }
    $45 = $39;
    $49 = $$pre10;$58 = $45;$__ob$0 = $39;
    label = 22;
   }
  } while(0);
  do {
   if ((label|0) == 22) {
    __THREW__ = 0;
    $46 = (invoke_ii(353,($__iob|0))|0);
    $47 = __THREW__; __THREW__ = 0;
    $48 = $47&1;
    if ($48) {
     $71 = $58;
     label = 20;
    } else {
     HEAP32[$0>>2] = $46;
     __THREW__ = 0;
     invoke_viiiiiii(424,($49|0),($36|0),($35|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
     $50 = __THREW__; __THREW__ = 0;
     $51 = $50&1;
     if ($51) {
      $64 = ___cxa_find_matching_catch()|0;
      $65 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($46)|0);
      $$0 = $64;$$02 = $65;$66 = $58;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($46)|0);
     $52 = HEAP32[$__s>>2]|0;
     HEAP32[$1>>2] = $52;
     $53 = HEAP32[$__op>>2]|0;
     $54 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
     $55 = (invoke_iiiiiii(425,($$byval_copy|0),($__ob$0|0),($53|0),($54|0),($__iob|0),($__fl|0))|0);
     $56 = __THREW__; __THREW__ = 0;
     $57 = $56&1;
     if ($57) {
      $71 = $58;
      label = 20;
     } else {
      HEAP32[$__s>>2] = $55;
      $59 = ($58|0)==(0);
      if (!($59)) {
       $60 = $58;
       _free($60);
      }
      $62 = ($61|0)==(0);
      if (!($62)) {
       $63 = $61;
       _free($63);
      }
      STACKTOP = sp;return ($55|0);
     }
    }
   }
  } while(0);
  if ((label|0) == 20) {
   $43 = ___cxa_find_matching_catch()|0;
   $44 = tempRet0;
   $$0 = $43;$$02 = $44;$66 = $71;
  }
  $67 = ($66|0)==(0);
  if (!($67)) {
   $68 = $66;
   _free($68);
  }
  $69 = ($61|0)==(0);
  if ($69) {
   $$117 = $$0;$$1316 = $$02;
  } else {
   $70 = $61;
   _free($70);
   $$117 = $$0;$$1316 = $$02;
  }
 }
 ___resumeException($$117|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 12|0;
 $vararg_buffer = sp;
 $__fmt = sp + 76|0;
 $__nar = sp + 56|0;
 $__o = sp + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[20869>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[20869+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[20869+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[20869+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[20869+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[20869+5>>0]|0;
 $2 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $3 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$2,$__fmt,$vararg_buffer)|0);
 $4 = (($__nar) + ($3)|0);
 $5 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$4,$__iob)|0);
 $6 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $6;
 __THREW__ = 0;
 $7 = (invoke_iii(354,($0|0),(8588|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $21 = ___cxa_find_matching_catch()|0;
  $22 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($6)|0);
  ___resumeException($21|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($6)|0);
  $10 = HEAP32[$7>>2]|0;
  $11 = ((($10)) + 32|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiiii[$12 & 1023]($7,$__nar,$4,$__o)|0);
  $13 = (($__o) + ($3)|0);
  $14 = ($5|0)==($4|0);
  $15 = $__nar;
  $16 = $5;
  $17 = (($16) - ($15))|0;
  $18 = (($__o) + ($17)|0);
  $__op$0 = $14 ? $13 : $18;
  $19 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $19;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $20 = (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$__op$0,$13,$__iob,$__fl)|0);
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi5Z2D = 0, $$pre3 = 0, $$pre3$val = 0, $$pre4 = 0, $$sroa$0$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $__nm = sp;
 $2 = ((($__iob)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 L1: do {
  if ($5) {
   $6 = HEAP32[$this>>2]|0;
   $7 = ((($6)) + 24|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$__s>>2]|0;
   HEAP32[$0>>2] = $9;
   $10 = $__v&1;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   $11 = (FUNCTION_TABLE_iiiiii[$8 & 511]($this,$$byval_copy,$__iob,$__fl,$10)|0);
   $$sroa$0$0 = $11;
  } else {
   $12 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
   HEAP32[$1>>2] = $12;
   __THREW__ = 0;
   $13 = (invoke_iii(354,($1|0),(8736|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   do {
    if ($15) {
     $39 = ___cxa_find_matching_catch()|0;
     $40 = tempRet0;
     (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
     $$0 = $40;$$01 = $39;
    } else {
     (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
     $16 = HEAP32[$13>>2]|0;
     if ($__v) {
      $17 = ((($16)) + 24|0);
      $18 = HEAP32[$17>>2]|0;
      FUNCTION_TABLE_vii[$18 & 1023]($__nm,$13);
     } else {
      $19 = ((($16)) + 28|0);
      $20 = HEAP32[$19>>2]|0;
      FUNCTION_TABLE_vii[$20 & 1023]($__nm,$13);
     }
     $21 = HEAP8[$__nm>>0]|0;
     $22 = $21 & 1;
     $23 = ($22<<24>>24)==(0);
     $24 = ((($__nm)) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $$pre4 = ((($__nm)) + 4|0);
     $26 = ((($__nm)) + 4|0);
     $$pre3 = ((($__nm)) + 8|0);
     $$pre$phi5Z2D = $23 ? $26 : $$pre4;
     $$ph = $23 ? $26 : $25;
     $28 = $21;$36 = $$ph;
     while(1) {
      $27 = $28 & 1;
      $29 = ($27<<24>>24)==(0);
      $$pre3$val = HEAP32[$$pre3>>2]|0;
      $30 = HEAP32[$$pre$phi5Z2D>>2]|0;
      $31 = $28&255;
      $32 = $31 >>> 1;
      $33 = $29 ? $$pre$phi5Z2D : $$pre3$val;
      $34 = $29 ? $32 : $30;
      $35 = (($33) + ($34<<2)|0);
      $37 = ($36|0)==($35|0);
      if ($37) {
       label = 9;
       break;
      }
      $41 = HEAP32[$36>>2]|0;
      $42 = HEAP32[$__s>>2]|0;
      $43 = ($42|0)==(0|0);
      if (!($43)) {
       $44 = ((($42)) + 24|0);
       $45 = HEAP32[$44>>2]|0;
       $46 = ((($42)) + 28|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = ($45|0)==($47|0);
       if ($48) {
        $49 = HEAP32[$42>>2]|0;
        $50 = ((($49)) + 52|0);
        $51 = HEAP32[$50>>2]|0;
        __THREW__ = 0;
        $52 = (invoke_iii($51|0,($42|0),($41|0))|0);
        $53 = __THREW__; __THREW__ = 0;
        $54 = $53&1;
        if ($54) {
         label = 18;
         break;
        } else {
         $$0$i$i = $52;
        }
       } else {
        $55 = ((($45)) + 4|0);
        HEAP32[$44>>2] = $55;
        HEAP32[$45>>2] = $41;
        $$0$i$i = $41;
       }
       $56 = ($$0$i$i|0)==(-1);
       if ($56) {
        HEAP32[$__s>>2] = 0;
       }
      }
      $57 = ((($36)) + 4|0);
      $$pre = HEAP8[$__nm>>0]|0;
      $28 = $$pre;$36 = $57;
     }
     if ((label|0) == 9) {
      $38 = HEAP32[$__s>>2]|0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nm);
      $$sroa$0$0 = $38;
      break L1;
     }
     else if ((label|0) == 18) {
      $58 = ___cxa_find_matching_catch()|0;
      $59 = tempRet0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nm);
      $$0 = $59;$$01 = $58;
      break;
     }
    }
   } while(0);
   ___resumeException($$01|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$0$0|0);
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 104|0;
 $vararg_buffer = sp;
 $__fmt = sp + 120|0;
 $__nar = sp + 108|0;
 $__o = sp + 20|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[20855>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[20855+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[20855+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[20855+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[20855+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[20855+5>>0]|0;
 $2 = ((($__fmt)) + 1|0);
 $3 = ((($__iob)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,20861,1,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 $9 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $9;
 __THREW__ = 0;
 invoke_viiiiiii(428,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  ___resumeException($16|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $15 = (__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$13,$14,$__iob,$__fl)|0);
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$0$i$i = 0, $$0$i$i$6 = 0, $$01$i$i = 0, $$01$i$i$5 = 0, $$__dg$0 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0;
 var $__p$0 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,8580)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,8736)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 $5 = HEAP8[$__grouping>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 $8 = ((($__grouping)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $5&255;
 $11 = $10 >>> 1;
 $12 = $7 ? $11 : $9;
 $13 = ($12|0)==(0);
 L1: do {
  if ($13) {
   $14 = HEAP32[$0>>2]|0;
   $15 = ((($14)) + 48|0);
   $16 = HEAP32[$15>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($16|0,($0|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    label = 5;
   } else {
    $19 = $__ne;
    $20 = $__nb;
    $21 = (($19) - ($20))|0;
    $22 = (($__ob) + ($21<<2)|0);
    HEAP32[$__oe>>2] = $22;
    $$pre$phiZ2D = $20;$126 = $22;
    label = 29;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $27 = HEAP8[$__nb>>0]|0;
   switch ($27<<24>>24) {
   case 43: case 45:  {
    $28 = HEAP32[$0>>2]|0;
    $29 = ((($28)) + 44|0);
    $30 = HEAP32[$29>>2]|0;
    __THREW__ = 0;
    $31 = (invoke_iii($30|0,($0|0),($27|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     label = 5;
     break L1;
    }
    $34 = ((($__nb)) + 1|0);
    $35 = HEAP32[$__oe>>2]|0;
    $36 = ((($35)) + 4|0);
    HEAP32[$__oe>>2] = $36;
    HEAP32[$35>>2] = $31;
    $__nf$0 = $34;
    break;
   }
   default: {
    $__nf$0 = $__nb;
   }
   }
   $37 = $__ne;
   $38 = $__nf$0;
   $39 = (($37) - ($38))|0;
   $40 = ($39|0)>(1);
   L9: do {
    if ($40) {
     $41 = HEAP8[$__nf$0>>0]|0;
     $42 = ($41<<24>>24)==(48);
     if ($42) {
      $43 = ((($__nf$0)) + 1|0);
      $44 = HEAP8[$43>>0]|0;
      switch ($44<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       $__nf$1 = $__nf$0;
       break L9;
      }
      }
      $45 = HEAP32[$0>>2]|0;
      $46 = ((($45)) + 44|0);
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = (invoke_iii($47|0,($0|0),48)|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 5;
       break L1;
      }
      $51 = HEAP32[$__oe>>2]|0;
      $52 = ((($51)) + 4|0);
      HEAP32[$__oe>>2] = $52;
      HEAP32[$51>>2] = $48;
      $53 = HEAP8[$43>>0]|0;
      $54 = HEAP32[$0>>2]|0;
      $55 = ((($54)) + 44|0);
      $56 = HEAP32[$55>>2]|0;
      __THREW__ = 0;
      $57 = (invoke_iii($56|0,($0|0),($53|0))|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 5;
       break L1;
      }
      $60 = ((($__nf$0)) + 2|0);
      $61 = HEAP32[$__oe>>2]|0;
      $62 = ((($61)) + 4|0);
      HEAP32[$__oe>>2] = $62;
      HEAP32[$61>>2] = $57;
      $__nf$1 = $60;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } while(0);
   $63 = ($__nf$1|0)==($__ne|0);
   L16: do {
    if (!($63)) {
     $$0$i$i = $__ne;$$01$i$i = $__nf$1;
     while(1) {
      $64 = ((($$0$i$i)) + -1|0);
      $65 = ($$01$i$i>>>0)<($64>>>0);
      if (!($65)) {
       break L16;
      }
      $66 = HEAP8[$$01$i$i>>0]|0;
      $67 = HEAP8[$64>>0]|0;
      HEAP8[$$01$i$i>>0] = $67;
      HEAP8[$64>>0] = $66;
      $68 = ((($$01$i$i)) + 1|0);
      $$0$i$i = $64;$$01$i$i = $68;
     }
    }
   } while(0);
   $69 = HEAP32[$1>>2]|0;
   $70 = ((($69)) + 16|0);
   $71 = HEAP32[$70>>2]|0;
   __THREW__ = 0;
   $72 = (invoke_ii($71|0,($1|0))|0);
   $73 = __THREW__; __THREW__ = 0;
   $74 = $73&1;
   if ($74) {
    label = 5;
   } else {
    $75 = ((($__grouping)) + 8|0);
    $76 = ((($__grouping)) + 1|0);
    $__dc$0 = 0;$__dg$0 = 0;$__p$0 = $__nf$1;
    while(1) {
     $77 = ($__p$0>>>0)<($__ne>>>0);
     if (!($77)) {
      break;
     }
     $89 = HEAP8[$__grouping>>0]|0;
     $90 = $89 & 1;
     $91 = ($90<<24>>24)==(0);
     $92 = HEAP32[$75>>2]|0;
     $93 = $91 ? $76 : $92;
     $94 = (($93) + ($__dg$0)|0);
     $95 = HEAP8[$94>>0]|0;
     $96 = ($95<<24>>24)!=(0);
     $97 = $95 << 24 >> 24;
     $98 = ($__dc$0|0)==($97|0);
     $or$cond = $96 & $98;
     if ($or$cond) {
      $99 = HEAP32[$__oe>>2]|0;
      $100 = ((($99)) + 4|0);
      HEAP32[$__oe>>2] = $100;
      HEAP32[$99>>2] = $72;
      $101 = HEAP8[$__grouping>>0]|0;
      $102 = $101 & 1;
      $103 = ($102<<24>>24)==(0);
      $104 = HEAP32[$8>>2]|0;
      $105 = $101&255;
      $106 = $105 >>> 1;
      $107 = $103 ? $106 : $104;
      $108 = (($107) + -1)|0;
      $109 = ($__dg$0>>>0)<($108>>>0);
      $110 = $109&1;
      $$__dg$0 = (($110) + ($__dg$0))|0;
      $__dc$1 = 0;$__dg$1 = $$__dg$0;
     } else {
      $__dc$1 = $__dc$0;$__dg$1 = $__dg$0;
     }
     $111 = HEAP8[$__p$0>>0]|0;
     $112 = HEAP32[$0>>2]|0;
     $113 = ((($112)) + 44|0);
     $114 = HEAP32[$113>>2]|0;
     __THREW__ = 0;
     $115 = (invoke_iii($114|0,($0|0),($111|0))|0);
     $116 = __THREW__; __THREW__ = 0;
     $117 = $116&1;
     if ($117) {
      label = 4;
      break;
     }
     $118 = HEAP32[$__oe>>2]|0;
     $119 = ((($118)) + 4|0);
     HEAP32[$__oe>>2] = $119;
     HEAP32[$118>>2] = $115;
     $120 = (($__dc$1) + 1)|0;
     $121 = ((($__p$0)) + 1|0);
     $__dc$0 = $120;$__dg$0 = $__dg$1;$__p$0 = $121;
    }
    if ((label|0) == 4) {
     $23 = ___cxa_find_matching_catch()|0;
     $24 = tempRet0;
     $lpad$phi$index = $23;$lpad$phi$index2 = $24;
     break;
    }
    $78 = $__nf$1;
    $79 = $__nb;
    $80 = (($78) - ($79))|0;
    $81 = (($__ob) + ($80<<2)|0);
    $82 = HEAP32[$__oe>>2]|0;
    $83 = ($81|0)==($82|0);
    if ($83) {
     $$pre$phiZ2D = $79;$126 = $81;
     label = 29;
    } else {
     $$0$i$i$6 = $82;$$01$i$i$5 = $81;
     while(1) {
      $84 = ((($$0$i$i$6)) + -4|0);
      $85 = ($$01$i$i$5>>>0)<($84>>>0);
      if (!($85)) {
       $$pre$phiZ2D = $79;$126 = $82;
       label = 29;
       break L1;
      }
      $86 = HEAP32[$$01$i$i$5>>2]|0;
      $87 = HEAP32[$84>>2]|0;
      HEAP32[$$01$i$i$5>>2] = $87;
      HEAP32[$84>>2] = $86;
      $88 = ((($$01$i$i$5)) + 4|0);
      $$0$i$i$6 = $84;$$01$i$i$5 = $88;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $lpad$phi$index = $25;$lpad$phi$index2 = $26;
 }
 else if ((label|0) == 29) {
  $122 = ($__np|0)==($__ne|0);
  $123 = $__np;
  $124 = (($123) - ($$pre$phiZ2D))|0;
  $125 = (($__ob) + ($124<<2)|0);
  $storemerge = $122 ? $126 : $125;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
  STACKTOP = sp;return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($this,$__s,$__iob,$__fl,$0,$1) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 196|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 200|0;
 $__o = sp + 32|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($__fmt)) + 1|0);
 $9 = ((($__iob)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,20863,1,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 $19 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$2>>2] = $19;
 __THREW__ = 0;
 invoke_viiiiiii(428,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $26 = ___cxa_find_matching_catch()|0;
  $27 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  ___resumeException($26|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
  $25 = (__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$23,$24,$__iob,$__fl)|0);
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 104|0;
 $vararg_buffer = sp;
 $__fmt = sp + 120|0;
 $__nar = sp + 108|0;
 $__o = sp + 20|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[20855>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[20855+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[20855+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[20855+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[20855+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[20855+5>>0]|0;
 $2 = ((($__fmt)) + 1|0);
 $3 = ((($__iob)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,20861,0,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 $9 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $9;
 __THREW__ = 0;
 invoke_viiiiiii(428,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  ___resumeException($16|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $15 = (__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$13,$14,$__iob,$__fl)|0);
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($this,$__s,$__iob,$__fl,$0,$1) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 204|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 208|0;
 $__o = sp + 32|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($__fmt)) + 1|0);
 $9 = ((($__iob)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,20863,0,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 $19 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$2>>2] = $19;
 __THREW__ = 0;
 invoke_viiiiiii(428,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $26 = ___cxa_find_matching_catch()|0;
  $27 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  ___resumeException($26|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
  $25 = (__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$23,$24,$__iob,$__fl)|0);
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$02 = 0, $$115 = 0, $$1314 = 0, $$byval_copy = 0, $$pre = 0, $$pre7 = 0, $$pre8 = 0, $$pre8$pre = 0, $$pre810 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0;
 var $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 312|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 316|0;
 $__nb = sp + 308|0;
 $__o = sp + 80|0;
 $__op = sp + 76|0;
 $__oe = sp + 72|0;
 $0 = sp + 68|0;
 $1 = sp + 64|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($__fmt)) + 1|0);
 $7 = ((($__iob)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($6,20866,$8)|0);
 HEAP32[$__nb>>2] = $__nar;
 $10 = (__ZNSt3__16__clocEv()|0);
 if ($9) {
  $11 = ((($__iob)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $13 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $13;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $14;
 }
 $15 = ($__nc$0|0)>(29);
 do {
  if ($15) {
   __THREW__ = 0;
   $16 = (invoke_i(417)|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($9) {
    if (!($18)) {
     $19 = ((($__iob)) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $20;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $__v;
     $21 = (invoke_iiiii(422,($__nb|0),($16|0),($__fmt|0),($vararg_buffer5|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      $__nc$1 = $21;
      label = 12;
     }
    }
   } else {
    if (!($18)) {
     $26 = ((($__iob)) + 8|0);
     $27 = HEAP32[$26>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer9>>2] = $27;
     $vararg_ptr12 = ((($vararg_buffer9)) + 8|0);
     HEAPF64[$vararg_ptr12>>3] = $__v;
     $28 = (invoke_iiiii(422,($__nb|0),($16|0),($__fmt|0),($vararg_buffer9|0))|0);
     $29 = __THREW__; __THREW__ = 0;
     $30 = $29&1;
     if (!($30)) {
      $__nc$1 = $28;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $31 = HEAP32[$__nb>>2]|0;
    $32 = ($31|0)==(0|0);
    if (!($32)) {
     $33 = $31;
     $$pre810 = $31;$63 = $33;$__nc$2 = $__nc$1;
     label = 16;
     break;
    }
    __THREW__ = 0;
    invoke_v(423);
    $34 = __THREW__; __THREW__ = 0;
    $35 = $34&1;
    if (!($35)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $36 = $$pre;
     $$pre810 = $36;$63 = $$pre;$__nc$2 = $__nc$1;
     label = 16;
     break;
    }
   }
   $24 = ___cxa_find_matching_catch()|0;
   $25 = tempRet0;
   $$115 = $24;$$1314 = $25;
  } else {
   $$pre7 = HEAP32[$__nb>>2]|0;
   $$pre810 = $$pre7;$63 = 0;$__nc$2 = $__nc$0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $37 = (($$pre810) + ($__nc$2)|0);
  $38 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($$pre810,$37,$__iob)|0);
  $39 = ($$pre810|0)==($__nar|0);
  do {
   if ($39) {
    $51 = $__nar;$60 = 0;$__ob$0 = $__o;
    label = 22;
   } else {
    $40 = $__nc$2 << 3;
    $41 = (_malloc($40)|0);
    $42 = ($41|0)==(0|0);
    if ($42) {
     __THREW__ = 0;
     invoke_v(423);
     $43 = __THREW__; __THREW__ = 0;
     $44 = $43&1;
     if ($44) {
      $73 = 0;
      label = 20;
      break;
     }
     $$pre8$pre = HEAP32[$__nb>>2]|0;
     $$pre8 = $$pre8$pre;
    } else {
     $$pre8 = $$pre810;
    }
    $47 = $41;
    $51 = $$pre8;$60 = $47;$__ob$0 = $41;
    label = 22;
   }
  } while(0);
  do {
   if ((label|0) == 22) {
    __THREW__ = 0;
    $48 = (invoke_ii(353,($__iob|0))|0);
    $49 = __THREW__; __THREW__ = 0;
    $50 = $49&1;
    if ($50) {
     $73 = $60;
     label = 20;
    } else {
     HEAP32[$0>>2] = $48;
     __THREW__ = 0;
     invoke_viiiiiii(429,($51|0),($38|0),($37|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
     $52 = __THREW__; __THREW__ = 0;
     $53 = $52&1;
     if ($53) {
      $66 = ___cxa_find_matching_catch()|0;
      $67 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($48)|0);
      $$0 = $66;$$02 = $67;$68 = $60;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($48)|0);
     $54 = HEAP32[$__s>>2]|0;
     HEAP32[$1>>2] = $54;
     $55 = HEAP32[$__op>>2]|0;
     $56 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
     $57 = (invoke_iiiiiii(430,($$byval_copy|0),($__ob$0|0),($55|0),($56|0),($__iob|0),($__fl|0))|0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      $73 = $60;
      label = 20;
     } else {
      HEAP32[$__s>>2] = $57;
      $61 = ($60|0)==(0);
      if (!($61)) {
       $62 = $60;
       _free($62);
      }
      $64 = ($63|0)==(0);
      if (!($64)) {
       $65 = $63;
       _free($65);
      }
      STACKTOP = sp;return ($57|0);
     }
    }
   }
  } while(0);
  if ((label|0) == 20) {
   $45 = ___cxa_find_matching_catch()|0;
   $46 = tempRet0;
   $$0 = $45;$$02 = $46;$68 = $73;
  }
  $69 = ($68|0)==(0);
  if (!($69)) {
   $70 = $68;
   _free($70);
  }
  $71 = ($63|0)==(0);
  if ($71) {
   $$115 = $$0;$$1314 = $$02;
  } else {
   $72 = $63;
   _free($72);
   $$115 = $$0;$$1314 = $$02;
  }
 }
 ___resumeException($$115|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$0$i$i = 0, $$0$i$i$6 = 0, $$01$i$i = 0, $$01$i$i$5 = 0, $$__dg$0 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0;
 var $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$2 = 0, $__nf$2$lcssa52 = 0, $__nf$3 = 0, $__ns$0 = 0, $__ns$1 = 0, $__ns$2 = 0, $__p$0 = 0, $lpad$phi$index = 0, $lpad$phi$index5 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,8580)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,8736)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 HEAP32[$__oe>>2] = $__ob;
 $5 = HEAP8[$__nb>>0]|0;
 switch ($5<<24>>24) {
 case 43: case 45:  {
  $6 = HEAP32[$0>>2]|0;
  $7 = ((($6)) + 44|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  $9 = (invoke_iii($8|0,($0|0),($5|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   label = 8;
  } else {
   $12 = ((($__nb)) + 1|0);
   $13 = HEAP32[$__oe>>2]|0;
   $14 = ((($13)) + 4|0);
   HEAP32[$__oe>>2] = $14;
   HEAP32[$13>>2] = $9;
   $__nf$0 = $12;
   label = 10;
  }
  break;
 }
 default: {
  $__nf$0 = $__nb;
  label = 10;
 }
 }
 L4: do {
  if ((label|0) == 10) {
   $25 = $__ne;
   $26 = $__nf$0;
   $27 = (($25) - ($26))|0;
   $28 = ($27|0)>(1);
   L6: do {
    if ($28) {
     $29 = HEAP8[$__nf$0>>0]|0;
     $30 = ($29<<24>>24)==(48);
     if ($30) {
      $31 = ((($__nf$0)) + 1|0);
      $32 = HEAP8[$31>>0]|0;
      switch ($32<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       $__ns$1 = $__nf$0;
       label = 21;
       break L6;
      }
      }
      $33 = HEAP32[$0>>2]|0;
      $34 = ((($33)) + 44|0);
      $35 = HEAP32[$34>>2]|0;
      __THREW__ = 0;
      $36 = (invoke_iii($35|0,($0|0),48)|0);
      $37 = __THREW__; __THREW__ = 0;
      $38 = $37&1;
      if ($38) {
       label = 8;
       break L4;
      }
      $39 = HEAP32[$__oe>>2]|0;
      $40 = ((($39)) + 4|0);
      HEAP32[$__oe>>2] = $40;
      HEAP32[$39>>2] = $36;
      $41 = ((($__nf$0)) + 2|0);
      $42 = HEAP8[$31>>0]|0;
      $43 = HEAP32[$0>>2]|0;
      $44 = ((($43)) + 44|0);
      $45 = HEAP32[$44>>2]|0;
      __THREW__ = 0;
      $46 = (invoke_iii($45|0,($0|0),($42|0))|0);
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       label = 8;
       break L4;
      }
      $49 = HEAP32[$__oe>>2]|0;
      $50 = ((($49)) + 4|0);
      HEAP32[$__oe>>2] = $50;
      HEAP32[$49>>2] = $46;
      $__ns$0 = $41;
      while(1) {
       $51 = ($__ns$0>>>0)<($__ne>>>0);
       if (!($51)) {
        $__nf$1 = $41;$__ns$2 = $__ns$0;
        break L6;
       }
       $52 = HEAP8[$__ns$0>>0]|0;
       __THREW__ = 0;
       $53 = (invoke_i(417)|0);
       $54 = __THREW__; __THREW__ = 0;
       $55 = $54&1;
       if ($55) {
        break;
       }
       $56 = $52 << 24 >> 24;
       __THREW__ = 0;
       $57 = (invoke_iii(426,($56|0),($53|0))|0);
       $58 = __THREW__; __THREW__ = 0;
       $59 = $58&1;
       if ($59) {
        break;
       }
       $60 = ($57|0)==(0);
       if ($60) {
        $__nf$1 = $41;$__ns$2 = $__ns$0;
        break L6;
       }
       $61 = ((($__ns$0)) + 1|0);
       $__ns$0 = $61;
      }
      $21 = ___cxa_find_matching_catch()|0;
      $22 = tempRet0;
      $lpad$phi$index = $21;$lpad$phi$index5 = $22;
      break L4;
     } else {
      $__ns$1 = $__nf$0;
      label = 21;
     }
    } else {
     $__ns$1 = $__nf$0;
     label = 21;
    }
   } while(0);
   L19: do {
    if ((label|0) == 21) {
     while(1) {
      label = 0;
      $62 = ($__ns$1>>>0)<($__ne>>>0);
      if (!($62)) {
       $__nf$1 = $__nf$0;$__ns$2 = $__ns$1;
       break L19;
      }
      $63 = HEAP8[$__ns$1>>0]|0;
      __THREW__ = 0;
      $64 = (invoke_i(417)|0);
      $65 = __THREW__; __THREW__ = 0;
      $66 = $65&1;
      if ($66) {
       break;
      }
      $67 = $63 << 24 >> 24;
      __THREW__ = 0;
      $68 = (invoke_iii(427,($67|0),($64|0))|0);
      $69 = __THREW__; __THREW__ = 0;
      $70 = $69&1;
      if ($70) {
       break;
      }
      $71 = ($68|0)==(0);
      if ($71) {
       $__nf$1 = $__nf$0;$__ns$2 = $__ns$1;
       break L19;
      }
      $72 = ((($__ns$1)) + 1|0);
      $__ns$1 = $72;
      label = 21;
     }
     $19 = ___cxa_find_matching_catch()|0;
     $20 = tempRet0;
     $lpad$phi$index = $19;$lpad$phi$index5 = $20;
     break L4;
    }
   } while(0);
   $73 = HEAP8[$__grouping>>0]|0;
   $74 = $73 & 1;
   $75 = ($74<<24>>24)==(0);
   $76 = ((($__grouping)) + 4|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $73&255;
   $79 = $78 >>> 1;
   $80 = $75 ? $79 : $77;
   $81 = ($80|0)==(0);
   L28: do {
    if ($81) {
     $82 = HEAP32[$__oe>>2]|0;
     $83 = HEAP32[$0>>2]|0;
     $84 = ((($83)) + 48|0);
     $85 = HEAP32[$84>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($85|0,($0|0),($__nf$1|0),($__ns$2|0),($82|0))|0);
     $86 = __THREW__; __THREW__ = 0;
     $87 = $86&1;
     if ($87) {
      label = 8;
      break L4;
     }
     $88 = $__ns$2;
     $89 = $__nf$1;
     $90 = (($88) - ($89))|0;
     $91 = HEAP32[$__oe>>2]|0;
     $92 = (($91) + ($90<<2)|0);
     HEAP32[$__oe>>2] = $92;
     $$pre$phiZ2D = $0;$188 = $92;
    } else {
     $93 = ($__nf$1|0)==($__ns$2|0);
     L32: do {
      if (!($93)) {
       $$0$i$i = $__ns$2;$$01$i$i = $__nf$1;
       while(1) {
        $94 = ((($$0$i$i)) + -1|0);
        $95 = ($$01$i$i>>>0)<($94>>>0);
        if (!($95)) {
         break L32;
        }
        $96 = HEAP8[$$01$i$i>>0]|0;
        $97 = HEAP8[$94>>0]|0;
        HEAP8[$$01$i$i>>0] = $97;
        HEAP8[$94>>0] = $96;
        $98 = ((($$01$i$i)) + 1|0);
        $$0$i$i = $94;$$01$i$i = $98;
       }
      }
     } while(0);
     $99 = HEAP32[$1>>2]|0;
     $100 = ((($99)) + 16|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     $102 = (invoke_ii($101|0,($1|0))|0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 8;
      break L4;
     }
     $105 = ((($__grouping)) + 8|0);
     $106 = ((($__grouping)) + 1|0);
     $__dc$0 = 0;$__dg$0 = 0;$__p$0 = $__nf$1;
     while(1) {
      $107 = ($__p$0>>>0)<($__ns$2>>>0);
      if (!($107)) {
       break;
      }
      $119 = HEAP8[$__grouping>>0]|0;
      $120 = $119 & 1;
      $121 = ($120<<24>>24)==(0);
      $122 = HEAP32[$105>>2]|0;
      $123 = $121 ? $106 : $122;
      $124 = (($123) + ($__dg$0)|0);
      $125 = HEAP8[$124>>0]|0;
      $126 = ($125<<24>>24)>(0);
      $127 = $125 << 24 >> 24;
      $128 = ($__dc$0|0)==($127|0);
      $or$cond = $126 & $128;
      if ($or$cond) {
       $129 = HEAP32[$__oe>>2]|0;
       $130 = ((($129)) + 4|0);
       HEAP32[$__oe>>2] = $130;
       HEAP32[$129>>2] = $102;
       $131 = HEAP8[$__grouping>>0]|0;
       $132 = $131 & 1;
       $133 = ($132<<24>>24)==(0);
       $134 = HEAP32[$76>>2]|0;
       $135 = $131&255;
       $136 = $135 >>> 1;
       $137 = $133 ? $136 : $134;
       $138 = (($137) + -1)|0;
       $139 = ($__dg$0>>>0)<($138>>>0);
       $140 = $139&1;
       $$__dg$0 = (($140) + ($__dg$0))|0;
       $__dc$1 = 0;$__dg$1 = $$__dg$0;
      } else {
       $__dc$1 = $__dc$0;$__dg$1 = $__dg$0;
      }
      $141 = HEAP8[$__p$0>>0]|0;
      $142 = HEAP32[$0>>2]|0;
      $143 = ((($142)) + 44|0);
      $144 = HEAP32[$143>>2]|0;
      __THREW__ = 0;
      $145 = (invoke_iii($144|0,($0|0),($141|0))|0);
      $146 = __THREW__; __THREW__ = 0;
      $147 = $146&1;
      if ($147) {
       label = 5;
       break;
      }
      $148 = HEAP32[$__oe>>2]|0;
      $149 = ((($148)) + 4|0);
      HEAP32[$__oe>>2] = $149;
      HEAP32[$148>>2] = $145;
      $150 = (($__dc$1) + 1)|0;
      $151 = ((($__p$0)) + 1|0);
      $__dc$0 = $150;$__dg$0 = $__dg$1;$__p$0 = $151;
     }
     if ((label|0) == 5) {
      $17 = ___cxa_find_matching_catch()|0;
      $18 = tempRet0;
      $lpad$phi$index = $17;$lpad$phi$index5 = $18;
      break L4;
     }
     $108 = $__nf$1;
     $109 = $__nb;
     $110 = (($108) - ($109))|0;
     $111 = (($__ob) + ($110<<2)|0);
     $112 = HEAP32[$__oe>>2]|0;
     $113 = ($111|0)==($112|0);
     if ($113) {
      $$pre$phiZ2D = $0;$188 = $111;
     } else {
      $$0$i$i$6 = $112;$$01$i$i$5 = $111;
      while(1) {
       $114 = ((($$0$i$i$6)) + -4|0);
       $115 = ($$01$i$i$5>>>0)<($114>>>0);
       if (!($115)) {
        $$pre$phiZ2D = $0;$188 = $112;
        break L28;
       }
       $116 = HEAP32[$$01$i$i$5>>2]|0;
       $117 = HEAP32[$114>>2]|0;
       HEAP32[$$01$i$i$5>>2] = $117;
       HEAP32[$114>>2] = $116;
       $118 = ((($$01$i$i$5)) + 4|0);
       $$0$i$i$6 = $114;$$01$i$i$5 = $118;
      }
     }
    }
   } while(0);
   $189 = $188;$__nf$2 = $__ns$2;
   while(1) {
    $152 = ($__nf$2>>>0)<($__ne>>>0);
    if (!($152)) {
     $176 = $189;$__nf$3 = $__nf$2;
     break;
    }
    $153 = HEAP8[$__nf$2>>0]|0;
    $154 = ($153<<24>>24)==(46);
    if ($154) {
     $__nf$2$lcssa52 = $__nf$2;
     label = 45;
     break;
    }
    $164 = HEAP32[$$pre$phiZ2D>>2]|0;
    $165 = ((($164)) + 44|0);
    $166 = HEAP32[$165>>2]|0;
    __THREW__ = 0;
    $167 = (invoke_iii($166|0,($0|0),($153|0))|0);
    $168 = __THREW__; __THREW__ = 0;
    $169 = $168&1;
    if ($169) {
     label = 4;
     break;
    }
    $170 = HEAP32[$__oe>>2]|0;
    $171 = ((($170)) + 4|0);
    HEAP32[$__oe>>2] = $171;
    HEAP32[$170>>2] = $167;
    $172 = ((($__nf$2)) + 1|0);
    $189 = $171;$__nf$2 = $172;
   }
   if ((label|0) == 4) {
    $15 = ___cxa_find_matching_catch()|0;
    $16 = tempRet0;
    $lpad$phi$index = $15;$lpad$phi$index5 = $16;
    break;
   }
   if ((label|0) == 45) {
    $155 = HEAP32[$1>>2]|0;
    $156 = ((($155)) + 12|0);
    $157 = HEAP32[$156>>2]|0;
    __THREW__ = 0;
    $158 = (invoke_ii($157|0,($1|0))|0);
    $159 = __THREW__; __THREW__ = 0;
    $160 = $159&1;
    if ($160) {
     label = 8;
     break;
    }
    $161 = HEAP32[$__oe>>2]|0;
    $162 = ((($161)) + 4|0);
    HEAP32[$__oe>>2] = $162;
    HEAP32[$161>>2] = $158;
    $163 = ((($__nf$2$lcssa52)) + 1|0);
    $176 = $162;$__nf$3 = $163;
   }
   $173 = HEAP32[$0>>2]|0;
   $174 = ((($173)) + 48|0);
   $175 = HEAP32[$174>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($175|0,($0|0),($__nf$3|0),($__ne|0),($176|0))|0);
   $177 = __THREW__; __THREW__ = 0;
   $178 = $177&1;
   if ($178) {
    label = 8;
   } else {
    $179 = $__nf$3;
    $180 = (($25) - ($179))|0;
    $181 = HEAP32[$__oe>>2]|0;
    $182 = (($181) + ($180<<2)|0);
    HEAP32[$__oe>>2] = $182;
    $183 = ($__np|0)==($__ne|0);
    $184 = $__np;
    $185 = $__nb;
    $186 = (($184) - ($185))|0;
    $187 = (($__ob) + ($186<<2)|0);
    $storemerge = $183 ? $182 : $187;
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $23 = ___cxa_find_matching_catch()|0;
  $24 = tempRet0;
  $lpad$phi$index = $23;$lpad$phi$index5 = $24;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$02 = 0, $$115 = 0, $$1314 = 0, $$byval_copy = 0, $$pre = 0, $$pre7 = 0, $$pre8 = 0, $$pre8$pre = 0, $$pre810 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 304|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 308|0;
 $__nb = sp + 300|0;
 $__o = sp + 72|0;
 $__op = sp + 68|0;
 $__oe = sp + 64|0;
 $0 = sp + 60|0;
 $1 = sp + 56|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($__fmt)) + 1|0);
 $7 = ((($__iob)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($6,20867,$8)|0);
 HEAP32[$__nb>>2] = $__nar;
 $10 = (__ZNSt3__16__clocEv()|0);
 if ($9) {
  $11 = ((($__iob)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $13 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $13;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $14;
 }
 $15 = ($__nc$0|0)>(29);
 do {
  if ($15) {
   __THREW__ = 0;
   $16 = (invoke_i(417)|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($9) {
    if (!($18)) {
     $19 = ((($__iob)) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $20;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $__v;
     $21 = (invoke_iiiii(422,($__nb|0),($16|0),($__fmt|0),($vararg_buffer5|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      $__nc$1 = $21;
      label = 12;
     }
    }
   } else {
    if (!($18)) {
     __THREW__ = 0;
     HEAPF64[$vararg_buffer9>>3] = $__v;
     $26 = (invoke_iiiii(422,($__nb|0),($16|0),($__fmt|0),($vararg_buffer9|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if (!($28)) {
      $__nc$1 = $26;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $29 = HEAP32[$__nb>>2]|0;
    $30 = ($29|0)==(0|0);
    if (!($30)) {
     $31 = $29;
     $$pre810 = $29;$61 = $31;$__nc$2 = $__nc$1;
     label = 16;
     break;
    }
    __THREW__ = 0;
    invoke_v(423);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if (!($33)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $34 = $$pre;
     $$pre810 = $34;$61 = $$pre;$__nc$2 = $__nc$1;
     label = 16;
     break;
    }
   }
   $24 = ___cxa_find_matching_catch()|0;
   $25 = tempRet0;
   $$115 = $24;$$1314 = $25;
  } else {
   $$pre7 = HEAP32[$__nb>>2]|0;
   $$pre810 = $$pre7;$61 = 0;$__nc$2 = $__nc$0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $35 = (($$pre810) + ($__nc$2)|0);
  $36 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($$pre810,$35,$__iob)|0);
  $37 = ($$pre810|0)==($__nar|0);
  do {
   if ($37) {
    $49 = $__nar;$58 = 0;$__ob$0 = $__o;
    label = 22;
   } else {
    $38 = $__nc$2 << 3;
    $39 = (_malloc($38)|0);
    $40 = ($39|0)==(0|0);
    if ($40) {
     __THREW__ = 0;
     invoke_v(423);
     $41 = __THREW__; __THREW__ = 0;
     $42 = $41&1;
     if ($42) {
      $71 = 0;
      label = 20;
      break;
     }
     $$pre8$pre = HEAP32[$__nb>>2]|0;
     $$pre8 = $$pre8$pre;
    } else {
     $$pre8 = $$pre810;
    }
    $45 = $39;
    $49 = $$pre8;$58 = $45;$__ob$0 = $39;
    label = 22;
   }
  } while(0);
  do {
   if ((label|0) == 22) {
    __THREW__ = 0;
    $46 = (invoke_ii(353,($__iob|0))|0);
    $47 = __THREW__; __THREW__ = 0;
    $48 = $47&1;
    if ($48) {
     $71 = $58;
     label = 20;
    } else {
     HEAP32[$0>>2] = $46;
     __THREW__ = 0;
     invoke_viiiiiii(429,($49|0),($36|0),($35|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
     $50 = __THREW__; __THREW__ = 0;
     $51 = $50&1;
     if ($51) {
      $64 = ___cxa_find_matching_catch()|0;
      $65 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($46)|0);
      $$0 = $64;$$02 = $65;$66 = $58;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($46)|0);
     $52 = HEAP32[$__s>>2]|0;
     HEAP32[$1>>2] = $52;
     $53 = HEAP32[$__op>>2]|0;
     $54 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
     $55 = (invoke_iiiiiii(430,($$byval_copy|0),($__ob$0|0),($53|0),($54|0),($__iob|0),($__fl|0))|0);
     $56 = __THREW__; __THREW__ = 0;
     $57 = $56&1;
     if ($57) {
      $71 = $58;
      label = 20;
     } else {
      HEAP32[$__s>>2] = $55;
      $59 = ($58|0)==(0);
      if (!($59)) {
       $60 = $58;
       _free($60);
      }
      $62 = ($61|0)==(0);
      if (!($62)) {
       $63 = $61;
       _free($63);
      }
      STACKTOP = sp;return ($55|0);
     }
    }
   }
  } while(0);
  if ((label|0) == 20) {
   $43 = ___cxa_find_matching_catch()|0;
   $44 = tempRet0;
   $$0 = $43;$$02 = $44;$66 = $71;
  }
  $67 = ($66|0)==(0);
  if (!($67)) {
   $68 = $66;
   _free($68);
  }
  $69 = ($61|0)==(0);
  if ($69) {
   $$115 = $$0;$$1314 = $$02;
  } else {
   $70 = $61;
   _free($70);
   $$115 = $$0;$$1314 = $$02;
  }
 }
 ___resumeException($$115|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 160|0;
 $vararg_buffer = sp;
 $__fmt = sp + 184|0;
 $__nar = sp + 164|0;
 $__o = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[20869>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[20869+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[20869+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[20869+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[20869+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[20869+5>>0]|0;
 $2 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $3 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$2,$__fmt,$vararg_buffer)|0);
 $4 = (($__nar) + ($3)|0);
 $5 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$4,$__iob)|0);
 $6 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $6;
 __THREW__ = 0;
 $7 = (invoke_iii(354,($0|0),(8580|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $21 = ___cxa_find_matching_catch()|0;
  $22 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($6)|0);
  ___resumeException($21|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($6)|0);
  $10 = HEAP32[$7>>2]|0;
  $11 = ((($10)) + 48|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiiii[$12 & 1023]($7,$__nar,$4,$__o)|0);
  $13 = (($__o) + ($3<<2)|0);
  $14 = ($5|0)==($4|0);
  $15 = $__nar;
  $16 = $5;
  $17 = (($16) - ($15))|0;
  $18 = (($__o) + ($17<<2)|0);
  $__op$0 = $14 ? $13 : $18;
  $19 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $19;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $20 = (__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$__op$0,$13,$__iob,$__fl)|0);
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i$27 = 0, $$0$ph = 0, $$0$ph$be = 0, $$0$pn = 0, $$3 = 0, $$3$lcssa = 0, $$byval_copy = 0, $$byval_copy$1 = 0, $$lcssa112 = 0, $$lcssa115 = 0, $$lcssa116 = 0, $$lcssa116$lcssa = 0, $$lcssa116$lcssa119 = 0, $$lcssa117 = 0, $$lcssa118 = 0, $$lcssa121 = 0, $$lcssa123 = 0, $$lcssa126 = 0, $$lcssa127 = 0;
 var $$lcssa128 = 0, $$pre = 0, $$pre$i$2$i$i$22 = 0, $$pre$i$2$i$i$2240 = 0, $$pre$i$2$i$i$2241 = 0, $$pre$i$i$i$18 = 0, $$pre$i$i$i$9 = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $isascii1$i = 0, $isascii1$i$25 = 0, $isascii1$i$6 = 0, $or$cond = 0, $sext = 0, $tmp$i$i$24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy$1 = sp + 16|0;
 $$byval_copy = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 $3 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $3;
 __THREW__ = 0;
 $4 = (invoke_iii(354,($0|0),(8588|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $39 = ___cxa_find_matching_catch()|0;
  $40 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
  ___resumeException($39|0);
  // unreachable;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
 HEAP32[$__err>>2] = 0;
 $7 = ((($4)) + 8|0);
 $$0$ph = $__fmtb;$$pre = 0;
 L4: while(1) {
  $8 = ($$0$ph|0)!=($__fmte|0);
  $9 = $$pre;
  while(1) {
   $10 = ($9|0)==(0);
   $or$cond = $8 & $10;
   $11 = HEAP32[$__b>>2]|0;
   if (!($or$cond)) {
    $$pre$i$i$i$9 = $11;
    break L4;
   }
   $12 = ($11|0)==(0|0);
   $13 = $11;
   if ($12) {
    $189 = $13;$24 = 0;
   } else {
    $14 = ((($11)) + 12|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ((($11)) + 16|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($15|0)==($17|0);
    if ($18) {
     $19 = HEAP32[$11>>2]|0;
     $20 = ((($19)) + 36|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = (FUNCTION_TABLE_ii[$21 & 1023]($11)|0);
     $23 = ($22|0)==(-1);
     if ($23) {
      HEAP32[$__b>>2] = 0;
      $189 = 0;$24 = 0;
     } else {
      $189 = $13;$24 = $11;
     }
    } else {
     $189 = $13;$24 = $11;
    }
   }
   $25 = ($24|0)==(0|0);
   $26 = HEAP32[$__e>>2]|0;
   $27 = ($26|0)==(0|0);
   $28 = $26;
   do {
    if ($27) {
     $190 = $28;
     label = 14;
    } else {
     $29 = ((($26)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ((($26)) + 16|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($30|0)==($32|0);
     if ($33) {
      $34 = HEAP32[$26>>2]|0;
      $35 = ((($34)) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = (FUNCTION_TABLE_ii[$36 & 1023]($26)|0);
      $38 = ($37|0)==(-1);
      if ($38) {
       HEAP32[$__e>>2] = 0;
       $190 = 0;
       label = 14;
       break;
      }
     }
     if ($25) {
      $191 = $26;$192 = $28;
     } else {
      $$lcssa115 = $24;
      label = 15;
      break L4;
     }
    }
   } while(0);
   if ((label|0) == 14) {
    label = 0;
    if ($25) {
     $$lcssa115 = $24;
     label = 15;
     break L4;
    } else {
     $191 = 0;$192 = $190;
    }
   }
   $41 = HEAP8[$$0$ph>>0]|0;
   $42 = HEAP32[$4>>2]|0;
   $43 = ((($42)) + 36|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (FUNCTION_TABLE_iiii[$44 & 1023]($4,$41,0)|0);
   $46 = ($45<<24>>24)==(37);
   if ($46) {
    $$lcssa112 = $189;$$lcssa116 = $24;$$lcssa123 = $192;
    label = 18;
    break;
   }
   $67 = HEAP8[$$0$ph>>0]|0;
   $isascii1$i = ($67<<24>>24)>(-1);
   if ($isascii1$i) {
    $68 = $67 << 24 >> 24;
    $69 = HEAP32[$7>>2]|0;
    $70 = (($69) + ($68<<1)|0);
    $71 = HEAP16[$70>>1]|0;
    $72 = $71 & 8192;
    $73 = ($72<<16>>16)==(0);
    if (!($73)) {
     $$lcssa117 = $24;$$lcssa121 = $191;$$lcssa126 = $69;
     label = 27;
     break;
    }
   }
   $132 = ((($24)) + 12|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = ((($24)) + 16|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = ($133|0)==($135|0);
   if ($136) {
    $137 = HEAP32[$24>>2]|0;
    $138 = ((($137)) + 36|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = (FUNCTION_TABLE_ii[$139 & 1023]($24)|0);
    $$0$i$i$27 = $140;
   } else {
    $141 = HEAP8[$133>>0]|0;
    $142 = $141&255;
    $$0$i$i$27 = $142;
   }
   $143 = $$0$i$i$27&255;
   $144 = HEAP32[$4>>2]|0;
   $145 = ((($144)) + 12|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = (FUNCTION_TABLE_iii[$146 & 511]($4,$143)|0);
   $148 = HEAP8[$$0$ph>>0]|0;
   $149 = HEAP32[$4>>2]|0;
   $150 = ((($149)) + 12|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = (FUNCTION_TABLE_iii[$151 & 511]($4,$148)|0);
   $153 = ($147<<24>>24)==($152<<24>>24);
   if ($153) {
    $$lcssa118 = $24;$$lcssa127 = $132;$$lcssa128 = $134;
    label = 55;
    break;
   }
   HEAP32[$__err>>2] = 4;
   $9 = 4;
  }
  L32: do {
   if ((label|0) == 18) {
    label = 0;
    $47 = ((($$0$ph)) + 1|0);
    $48 = ($47|0)==($__fmte|0);
    if ($48) {
     $$lcssa116$lcssa = $$lcssa116;
     label = 19;
     break L4;
    }
    $49 = HEAP8[$47>>0]|0;
    $50 = HEAP32[$4>>2]|0;
    $51 = ((($50)) + 36|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (FUNCTION_TABLE_iiii[$52 & 1023]($4,$49,0)|0);
    switch ($53<<24>>24) {
    case 48: case 69:  {
     $54 = ((($$0$ph)) + 2|0);
     $55 = ($54|0)==($__fmte|0);
     if ($55) {
      $$lcssa116$lcssa119 = $$lcssa116;
      label = 24;
      break L4;
     }
     $56 = HEAP8[$54>>0]|0;
     $57 = HEAP32[$4>>2]|0;
     $58 = ((($57)) + 36|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = (FUNCTION_TABLE_iiii[$59 & 1023]($4,$56,0)|0);
     $66 = $47;$__cmd$0 = $60;$__opt$0 = $53;
     break;
    }
    default: {
     $66 = $$0$ph;$__cmd$0 = $53;$__opt$0 = 0;
    }
    }
    $61 = HEAP32[$this>>2]|0;
    $62 = ((($61)) + 36|0);
    $63 = HEAP32[$62>>2]|0;
    HEAP32[$1>>2] = $$lcssa112;
    HEAP32[$2>>2] = $$lcssa123;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
    ;HEAP32[$$byval_copy$1>>2]=HEAP32[$2>>2]|0;
    $64 = (FUNCTION_TABLE_iiiiiiiii[$63 & 511]($this,$$byval_copy,$$byval_copy$1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0)|0);
    HEAP32[$__b>>2] = $64;
    $65 = ((($66)) + 2|0);
    $$0$ph$be = $65;
   }
   else if ((label|0) == 27) {
    label = 0;
    $$0$pn = $$0$ph;
    while(1) {
     $$3 = ((($$0$pn)) + 1|0);
     $74 = ($$3|0)==($__fmte|0);
     if ($74) {
      $$3$lcssa = $__fmte;
      break;
     }
     $75 = HEAP8[$$3>>0]|0;
     $isascii1$i$6 = ($75<<24>>24)>(-1);
     if (!($isascii1$i$6)) {
      $$3$lcssa = $$3;
      break;
     }
     $76 = $75 << 24 >> 24;
     $77 = (($$lcssa126) + ($76<<1)|0);
     $78 = HEAP16[$77>>1]|0;
     $79 = $78 & 8192;
     $80 = ($79<<16>>16)==(0);
     if ($80) {
      $$3$lcssa = $$3;
      break;
     } else {
      $$0$pn = $$3;
     }
    }
    $$pre$i$2$i$i$22 = $$lcssa121;$$pre$i$i$i$18 = $$lcssa117;$94 = $$lcssa121;
    while(1) {
     $81 = ($$pre$i$i$i$18|0)==(0|0);
     if ($81) {
      $92 = 0;
     } else {
      $82 = ((($$pre$i$i$i$18)) + 12|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = ((($$pre$i$i$i$18)) + 16|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = ($83|0)==($85|0);
      if ($86) {
       $87 = HEAP32[$$pre$i$i$i$18>>2]|0;
       $88 = ((($87)) + 36|0);
       $89 = HEAP32[$88>>2]|0;
       $90 = (FUNCTION_TABLE_ii[$89 & 1023]($$pre$i$i$i$18)|0);
       $91 = ($90|0)==(-1);
       if ($91) {
        HEAP32[$__b>>2] = 0;
        $92 = 0;
       } else {
        $92 = $$pre$i$i$i$18;
       }
      } else {
       $92 = $$pre$i$i$i$18;
      }
     }
     $93 = ($92|0)==(0|0);
     $95 = ($94|0)==(0|0);
     do {
      if ($95) {
       $$pre$i$2$i$i$2241 = $$pre$i$2$i$i$22;
       label = 41;
      } else {
       $96 = ((($94)) + 12|0);
       $97 = HEAP32[$96>>2]|0;
       $98 = ((($94)) + 16|0);
       $99 = HEAP32[$98>>2]|0;
       $100 = ($97|0)==($99|0);
       if (!($100)) {
        if ($93) {
         $$pre$i$2$i$i$2240 = $$pre$i$2$i$i$22;$193 = $94;
         break;
        } else {
         $$0$ph$be = $$3$lcssa;
         break L32;
        }
       }
       $101 = HEAP32[$94>>2]|0;
       $102 = ((($101)) + 36|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = (FUNCTION_TABLE_ii[$103 & 1023]($94)|0);
       $105 = ($104|0)==(-1);
       if ($105) {
        HEAP32[$__e>>2] = 0;
        $$pre$i$2$i$i$2241 = 0;
        label = 41;
        break;
       } else {
        $106 = ($$pre$i$2$i$i$22|0)==(0|0);
        $tmp$i$i$24 = $93 ^ $106;
        if ($tmp$i$i$24) {
         $$pre$i$2$i$i$2240 = $$pre$i$2$i$i$22;$193 = $$pre$i$2$i$i$22;
         break;
        } else {
         $$0$ph$be = $$3$lcssa;
         break L32;
        }
       }
      }
     } while(0);
     if ((label|0) == 41) {
      label = 0;
      if ($93) {
       $$0$ph$be = $$3$lcssa;
       break L32;
      } else {
       $$pre$i$2$i$i$2240 = $$pre$i$2$i$i$2241;$193 = 0;
      }
     }
     $107 = ((($92)) + 12|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = ((($92)) + 16|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($108|0)==($110|0);
     if ($111) {
      $112 = HEAP32[$92>>2]|0;
      $113 = ((($112)) + 36|0);
      $114 = HEAP32[$113>>2]|0;
      $115 = (FUNCTION_TABLE_ii[$114 & 1023]($92)|0);
      $$0$i$i = $115;
     } else {
      $116 = HEAP8[$108>>0]|0;
      $117 = $116&255;
      $$0$i$i = $117;
     }
     $118 = $$0$i$i&255;
     $isascii1$i$25 = ($118<<24>>24)>(-1);
     if (!($isascii1$i$25)) {
      $$0$ph$be = $$3$lcssa;
      break L32;
     }
     $sext = $$0$i$i << 24;
     $119 = $sext >> 24;
     $120 = HEAP32[$7>>2]|0;
     $121 = (($120) + ($119<<1)|0);
     $122 = HEAP16[$121>>1]|0;
     $123 = $122 & 8192;
     $124 = ($123<<16>>16)==(0);
     if ($124) {
      $$0$ph$be = $$3$lcssa;
      break L32;
     }
     $125 = HEAP32[$107>>2]|0;
     $126 = HEAP32[$109>>2]|0;
     $127 = ($125|0)==($126|0);
     if ($127) {
      $128 = HEAP32[$92>>2]|0;
      $129 = ((($128)) + 40|0);
      $130 = HEAP32[$129>>2]|0;
      (FUNCTION_TABLE_ii[$130 & 1023]($92)|0);
      $$pre$i$2$i$i$22 = $$pre$i$2$i$i$2240;$$pre$i$i$i$18 = $92;$94 = $193;
      continue;
     } else {
      $131 = ((($125)) + 1|0);
      HEAP32[$107>>2] = $131;
      $$pre$i$2$i$i$22 = $$pre$i$2$i$i$2240;$$pre$i$i$i$18 = $92;$94 = $193;
      continue;
     }
    }
   }
   else if ((label|0) == 55) {
    label = 0;
    $154 = HEAP32[$$lcssa127>>2]|0;
    $155 = HEAP32[$$lcssa128>>2]|0;
    $156 = ($154|0)==($155|0);
    if ($156) {
     $157 = HEAP32[$$lcssa118>>2]|0;
     $158 = ((($157)) + 40|0);
     $159 = HEAP32[$158>>2]|0;
     (FUNCTION_TABLE_ii[$159 & 1023]($$lcssa118)|0);
    } else {
     $160 = ((($154)) + 1|0);
     HEAP32[$$lcssa127>>2] = $160;
    }
    $161 = ((($$0$ph)) + 1|0);
    $$0$ph$be = $161;
   }
  } while(0);
  $$pre$pre = HEAP32[$__err>>2]|0;
  $$0$ph = $$0$ph$be;$$pre = $$pre$pre;
 }
 if ((label|0) == 15) {
  HEAP32[$__err>>2] = 4;
  $$pre$i$i$i$9 = $$lcssa115;
 }
 else if ((label|0) == 19) {
  HEAP32[$__err>>2] = 4;
  $$pre$i$i$i$9 = $$lcssa116$lcssa;
 }
 else if ((label|0) == 24) {
  HEAP32[$__err>>2] = 4;
  $$pre$i$i$i$9 = $$lcssa116$lcssa119;
 }
 $162 = ($$pre$i$i$i$9|0)==(0|0);
 if ($162) {
  $173 = 0;
 } else {
  $163 = ((($$pre$i$i$i$9)) + 12|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = ((($$pre$i$i$i$9)) + 16|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = ($164|0)==($166|0);
  if ($167) {
   $168 = HEAP32[$$pre$i$i$i$9>>2]|0;
   $169 = ((($168)) + 36|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = (FUNCTION_TABLE_ii[$170 & 1023]($$pre$i$i$i$9)|0);
   $172 = ($171|0)==(-1);
   if ($172) {
    HEAP32[$__b>>2] = 0;
    $173 = 0;
   } else {
    $173 = $$pre$i$i$i$9;
   }
  } else {
   $173 = $$pre$i$i$i$9;
  }
 }
 $174 = ($173|0)==(0|0);
 $175 = HEAP32[$__e>>2]|0;
 $176 = ($175|0)==(0|0);
 do {
  if ($176) {
   label = 70;
  } else {
   $177 = ((($175)) + 12|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = ((($175)) + 16|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = ($178|0)==($180|0);
   if ($181) {
    $182 = HEAP32[$175>>2]|0;
    $183 = ((($182)) + 36|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = (FUNCTION_TABLE_ii[$184 & 1023]($175)|0);
    $186 = ($185|0)==(-1);
    if ($186) {
     HEAP32[$__e>>2] = 0;
     label = 70;
     break;
    }
   }
   if (!($174)) {
    label = 71;
   }
  }
 } while(0);
 if ((label|0) == 70) {
  if ($174) {
   label = 71;
  }
 }
 if ((label|0) == 71) {
  $187 = HEAP32[$__err>>2]|0;
  $188 = $187 | 2;
  HEAP32[$__err>>2] = $188;
 }
 STACKTOP = sp;return ($173|0);
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy$1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy$1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy,$$byval_copy$1,$__iob,$__err,$__tm,20875,(20883))|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy$1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = ((($this)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 $12 = ((($6)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($6)) + 1|0);
 $15 = $11 ? $14 : $13;
 $16 = ((($6)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $9&255;
 $19 = $18 >>> 1;
 $20 = $11 ? $19 : $17;
 $21 = (($15) + ($20)|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy$1>>2]=HEAP32[$1>>2]|0;
 $22 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy,$$byval_copy$1,$__iob,$__err,$__tm,$15,$21)|0);
 STACKTOP = sp;return ($22|0);
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(354,($0|0),(8588|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 24|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($1)|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($4)) + 168|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $7 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$4,$6,$__ct,$__err,0)|0);
 $8 = $7;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)<(168);
 if ($11) {
  $12 = (($10|0) / 12)&-1;
  $13 = (($12|0) % 7)&-1;
  HEAP32[$__w>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(354,($0|0),(8588|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 16|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $6;
 $7 = ((($5)) + 288|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $8 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$7,$__ct,$__err,0)|0);
 $9 = $8;
 $10 = $5;
 $11 = (($9) - ($10))|0;
 $12 = ($11|0)<(288);
 if ($12) {
  $13 = (($11|0) / 12)&-1;
  $14 = (($13|0) % 12)&-1;
  HEAP32[$__m>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(354,($0|0),(8588|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 20|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$ = 0, $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = ($2|0)<(69);
  if ($6) {
   $7 = (($2) + 2000)|0;
   $__t$0 = $7;
  } else {
   $$off = (($2) + -69)|0;
   $8 = ($$off>>>0)<(31);
   $9 = (($2) + 1900)|0;
   $$ = $8 ? $9 : $2;
   $__t$0 = $$;
  }
  $10 = (($__t$0) + -1900)|0;
  HEAP32[$__y>>2] = $10;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $$byval_copy$10 = 0, $$byval_copy$11 = 0, $$byval_copy$12 = 0, $$byval_copy$13 = 0, $$byval_copy$14 = 0, $$byval_copy$15 = 0, $$byval_copy$16 = 0, $$byval_copy$17 = 0, $$byval_copy$18 = 0, $$byval_copy$19 = 0, $$byval_copy$2 = 0, $$byval_copy$20 = 0, $$byval_copy$21 = 0, $$byval_copy$22 = 0, $$byval_copy$23 = 0, $$byval_copy$24 = 0, $$byval_copy$25 = 0, $$byval_copy$26 = 0;
 var $$byval_copy$27 = 0, $$byval_copy$28 = 0, $$byval_copy$29 = 0, $$byval_copy$3 = 0, $$byval_copy$30 = 0, $$byval_copy$4 = 0, $$byval_copy$5 = 0, $$byval_copy$6 = 0, $$byval_copy$7 = 0, $$byval_copy$8 = 0, $$byval_copy$9 = 0, $$sroa$07$0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy$30 = sp + 248|0;
 $$byval_copy$29 = sp + 244|0;
 $$byval_copy$28 = sp + 240|0;
 $$byval_copy$27 = sp + 236|0;
 $$byval_copy$26 = sp + 232|0;
 $$byval_copy$25 = sp + 228|0;
 $$byval_copy$24 = sp + 224|0;
 $$byval_copy$23 = sp + 220|0;
 $$byval_copy$22 = sp + 216|0;
 $$byval_copy$21 = sp + 212|0;
 $$byval_copy$20 = sp + 208|0;
 $$byval_copy$19 = sp + 204|0;
 $$byval_copy$18 = sp + 200|0;
 $$byval_copy$17 = sp + 196|0;
 $$byval_copy$16 = sp + 192|0;
 $$byval_copy$15 = sp + 188|0;
 $$byval_copy$14 = sp + 184|0;
 $$byval_copy$13 = sp + 180|0;
 $$byval_copy$12 = sp + 176|0;
 $$byval_copy$11 = sp + 172|0;
 $$byval_copy$10 = sp + 168|0;
 $$byval_copy$9 = sp + 164|0;
 $$byval_copy$8 = sp + 160|0;
 $$byval_copy$7 = sp + 156|0;
 $$byval_copy$6 = sp + 152|0;
 $$byval_copy$5 = sp + 148|0;
 $$byval_copy$4 = sp + 144|0;
 $$byval_copy$3 = sp + 140|0;
 $$byval_copy$2 = sp + 136|0;
 $$byval_copy$1 = sp + 132|0;
 $$byval_copy = sp + 128|0;
 $1 = sp + 124|0;
 $2 = sp + 120|0;
 $3 = sp + 116|0;
 $4 = sp + 112|0;
 $5 = sp + 108|0;
 $6 = sp + 104|0;
 $7 = sp + 100|0;
 $8 = sp + 96|0;
 $9 = sp + 92|0;
 $10 = sp + 88|0;
 $11 = sp + 84|0;
 $12 = sp + 80|0;
 $13 = sp + 76|0;
 $14 = sp + 72|0;
 $15 = sp + 68|0;
 $16 = sp + 64|0;
 $17 = sp + 60|0;
 $18 = sp + 56|0;
 $19 = sp + 52|0;
 $20 = sp + 48|0;
 $21 = sp + 44|0;
 $22 = sp + 40|0;
 $23 = sp + 36|0;
 $24 = sp + 32|0;
 $25 = sp + 28|0;
 $26 = sp + 24|0;
 $27 = sp + 20|0;
 $28 = sp + 16|0;
 $29 = sp + 12|0;
 $30 = sp + 8|0;
 $31 = sp + 4|0;
 $32 = sp;
 HEAP32[$__err>>2] = 0;
 $33 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$1>>2] = $33;
 __THREW__ = 0;
 $34 = (invoke_iii(354,($1|0),(8588|0))|0);
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $38 = ___cxa_find_matching_catch()|0;
  $39 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($33)|0);
  ___resumeException($38|0);
  // unreachable;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($33)|0);
 $37 = $__fmt << 24 >> 24;
 do {
  switch ($37|0) {
  case 65: case 97:  {
   $40 = ((($__tm)) + 24|0);
   $41 = HEAP32[$__e>>2]|0;
   HEAP32[$2>>2] = $41;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$40,$__b,$$byval_copy,$__err,$34);
   label = 28;
   break;
  }
  case 104: case 66: case 98:  {
   $42 = ((($__tm)) + 16|0);
   $43 = HEAP32[$__e>>2]|0;
   HEAP32[$3>>2] = $43;
   ;HEAP32[$$byval_copy$1>>2]=HEAP32[$3>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$42,$__b,$$byval_copy$1,$__err,$34);
   label = 28;
   break;
  }
  case 99:  {
   $44 = ((($this)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($45)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (FUNCTION_TABLE_ii[$47 & 1023]($44)|0);
   $49 = HEAP32[$__b>>2]|0;
   HEAP32[$4>>2] = $49;
   $50 = HEAP32[$__e>>2]|0;
   HEAP32[$5>>2] = $50;
   $51 = HEAP8[$48>>0]|0;
   $52 = $51 & 1;
   $53 = ($52<<24>>24)==(0);
   $54 = ((($48)) + 8|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($48)) + 1|0);
   $57 = $53 ? $56 : $55;
   $58 = ((($48)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $51&255;
   $61 = $60 >>> 1;
   $62 = $53 ? $61 : $59;
   $63 = (($57) + ($62)|0);
   ;HEAP32[$$byval_copy$2>>2]=HEAP32[$4>>2]|0;
   ;HEAP32[$$byval_copy$3>>2]=HEAP32[$5>>2]|0;
   $64 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy$2,$$byval_copy$3,$__iob,$__err,$__tm,$57,$63)|0);
   HEAP32[$__b>>2] = $64;
   label = 28;
   break;
  }
  case 101: case 100:  {
   $65 = ((($__tm)) + 12|0);
   $66 = HEAP32[$__e>>2]|0;
   HEAP32[$6>>2] = $66;
   ;HEAP32[$$byval_copy$4>>2]=HEAP32[$6>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$65,$__b,$$byval_copy$4,$__err,$34);
   label = 28;
   break;
  }
  case 68:  {
   $67 = HEAP32[$__b>>2]|0;
   HEAP32[$7>>2] = $67;
   $68 = HEAP32[$__e>>2]|0;
   HEAP32[$8>>2] = $68;
   ;HEAP32[$$byval_copy$5>>2]=HEAP32[$7>>2]|0;
   ;HEAP32[$$byval_copy$6>>2]=HEAP32[$8>>2]|0;
   $69 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy$5,$$byval_copy$6,$__iob,$__err,$__tm,20883,(20891))|0);
   HEAP32[$__b>>2] = $69;
   label = 28;
   break;
  }
  case 70:  {
   $70 = HEAP32[$__b>>2]|0;
   HEAP32[$9>>2] = $70;
   $71 = HEAP32[$__e>>2]|0;
   HEAP32[$10>>2] = $71;
   ;HEAP32[$$byval_copy$7>>2]=HEAP32[$9>>2]|0;
   ;HEAP32[$$byval_copy$8>>2]=HEAP32[$10>>2]|0;
   $72 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy$7,$$byval_copy$8,$__iob,$__err,$__tm,20891,(20899))|0);
   HEAP32[$__b>>2] = $72;
   label = 28;
   break;
  }
  case 72:  {
   $73 = ((($__tm)) + 8|0);
   $74 = HEAP32[$__e>>2]|0;
   HEAP32[$11>>2] = $74;
   ;HEAP32[$$byval_copy$9>>2]=HEAP32[$11>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$73,$__b,$$byval_copy$9,$__err,$34);
   label = 28;
   break;
  }
  case 73:  {
   $75 = ((($__tm)) + 8|0);
   $76 = HEAP32[$__e>>2]|0;
   HEAP32[$12>>2] = $76;
   ;HEAP32[$$byval_copy$10>>2]=HEAP32[$12>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$75,$__b,$$byval_copy$10,$__err,$34);
   label = 28;
   break;
  }
  case 106:  {
   $77 = ((($__tm)) + 28|0);
   $78 = HEAP32[$__e>>2]|0;
   HEAP32[$13>>2] = $78;
   ;HEAP32[$$byval_copy$11>>2]=HEAP32[$13>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this,$77,$__b,$$byval_copy$11,$__err,$34);
   label = 28;
   break;
  }
  case 109:  {
   $79 = ((($__tm)) + 16|0);
   $80 = HEAP32[$__e>>2]|0;
   HEAP32[$14>>2] = $80;
   ;HEAP32[$$byval_copy$12>>2]=HEAP32[$14>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this,$79,$__b,$$byval_copy$12,$__err,$34);
   label = 28;
   break;
  }
  case 77:  {
   $81 = ((($__tm)) + 4|0);
   $82 = HEAP32[$__e>>2]|0;
   HEAP32[$15>>2] = $82;
   ;HEAP32[$$byval_copy$13>>2]=HEAP32[$15>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this,$81,$__b,$$byval_copy$13,$__err,$34);
   label = 28;
   break;
  }
  case 116: case 110:  {
   $83 = HEAP32[$__e>>2]|0;
   HEAP32[$16>>2] = $83;
   ;HEAP32[$$byval_copy$14>>2]=HEAP32[$16>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$$byval_copy$14,$__err,$34);
   label = 28;
   break;
  }
  case 112:  {
   $84 = ((($__tm)) + 8|0);
   $85 = HEAP32[$__e>>2]|0;
   HEAP32[$17>>2] = $85;
   ;HEAP32[$$byval_copy$15>>2]=HEAP32[$17>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$84,$__b,$$byval_copy$15,$__err,$34);
   label = 28;
   break;
  }
  case 114:  {
   $86 = HEAP32[$__b>>2]|0;
   HEAP32[$18>>2] = $86;
   $87 = HEAP32[$__e>>2]|0;
   HEAP32[$19>>2] = $87;
   ;HEAP32[$$byval_copy$16>>2]=HEAP32[$18>>2]|0;
   ;HEAP32[$$byval_copy$17>>2]=HEAP32[$19>>2]|0;
   $88 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy$16,$$byval_copy$17,$__iob,$__err,$__tm,20899,(20910))|0);
   HEAP32[$__b>>2] = $88;
   label = 28;
   break;
  }
  case 82:  {
   $89 = HEAP32[$__b>>2]|0;
   HEAP32[$20>>2] = $89;
   $90 = HEAP32[$__e>>2]|0;
   HEAP32[$21>>2] = $90;
   ;HEAP32[$$byval_copy$18>>2]=HEAP32[$20>>2]|0;
   ;HEAP32[$$byval_copy$19>>2]=HEAP32[$21>>2]|0;
   $91 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy$18,$$byval_copy$19,$__iob,$__err,$__tm,20910,(20915))|0);
   HEAP32[$__b>>2] = $91;
   label = 28;
   break;
  }
  case 83:  {
   $92 = HEAP32[$__e>>2]|0;
   HEAP32[$22>>2] = $92;
   ;HEAP32[$$byval_copy$20>>2]=HEAP32[$22>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__tm,$__b,$$byval_copy$20,$__err,$34);
   label = 28;
   break;
  }
  case 84:  {
   $93 = HEAP32[$__b>>2]|0;
   HEAP32[$23>>2] = $93;
   $94 = HEAP32[$__e>>2]|0;
   HEAP32[$24>>2] = $94;
   ;HEAP32[$$byval_copy$21>>2]=HEAP32[$23>>2]|0;
   ;HEAP32[$$byval_copy$22>>2]=HEAP32[$24>>2]|0;
   $95 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy$21,$$byval_copy$22,$__iob,$__err,$__tm,20915,(20923))|0);
   HEAP32[$__b>>2] = $95;
   label = 28;
   break;
  }
  case 119:  {
   $96 = ((($__tm)) + 24|0);
   $97 = HEAP32[$__e>>2]|0;
   HEAP32[$25>>2] = $97;
   ;HEAP32[$$byval_copy$23>>2]=HEAP32[$25>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$96,$__b,$$byval_copy$23,$__err,$34);
   label = 28;
   break;
  }
  case 120:  {
   $98 = HEAP32[$this>>2]|0;
   $99 = ((($98)) + 20|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = HEAP32[$__b>>2]|0;
   HEAP32[$26>>2] = $101;
   $102 = HEAP32[$__e>>2]|0;
   HEAP32[$27>>2] = $102;
   ;HEAP32[$$byval_copy$24>>2]=HEAP32[$26>>2]|0;
   ;HEAP32[$$byval_copy$25>>2]=HEAP32[$27>>2]|0;
   $103 = (FUNCTION_TABLE_iiiiiii[$100 & 511]($this,$$byval_copy$24,$$byval_copy$25,$__iob,$__err,$__tm)|0);
   $$sroa$07$0 = $103;
   break;
  }
  case 88:  {
   $104 = ((($this)) + 8|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = ((($105)) + 24|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = (FUNCTION_TABLE_ii[$107 & 1023]($104)|0);
   $109 = HEAP32[$__b>>2]|0;
   HEAP32[$28>>2] = $109;
   $110 = HEAP32[$__e>>2]|0;
   HEAP32[$29>>2] = $110;
   $111 = HEAP8[$108>>0]|0;
   $112 = $111 & 1;
   $113 = ($112<<24>>24)==(0);
   $114 = ((($108)) + 8|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = ((($108)) + 1|0);
   $117 = $113 ? $116 : $115;
   $118 = ((($108)) + 4|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $111&255;
   $121 = $120 >>> 1;
   $122 = $113 ? $121 : $119;
   $123 = (($117) + ($122)|0);
   ;HEAP32[$$byval_copy$26>>2]=HEAP32[$28>>2]|0;
   ;HEAP32[$$byval_copy$27>>2]=HEAP32[$29>>2]|0;
   $124 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy$26,$$byval_copy$27,$__iob,$__err,$__tm,$117,$123)|0);
   HEAP32[$__b>>2] = $124;
   label = 28;
   break;
  }
  case 121:  {
   $125 = ((($__tm)) + 20|0);
   $126 = HEAP32[$__e>>2]|0;
   HEAP32[$30>>2] = $126;
   ;HEAP32[$$byval_copy$28>>2]=HEAP32[$30>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$125,$__b,$$byval_copy$28,$__err,$34);
   label = 28;
   break;
  }
  case 89:  {
   $127 = ((($__tm)) + 20|0);
   $128 = HEAP32[$__e>>2]|0;
   HEAP32[$31>>2] = $128;
   ;HEAP32[$$byval_copy$29>>2]=HEAP32[$31>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this,$127,$__b,$$byval_copy$29,$__err,$34);
   label = 28;
   break;
  }
  case 37:  {
   $129 = HEAP32[$__e>>2]|0;
   HEAP32[$32>>2] = $129;
   ;HEAP32[$$byval_copy$30>>2]=HEAP32[$32>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$$byval_copy$30,$__err,$34);
   label = 28;
   break;
  }
  default: {
   $130 = HEAP32[$__err>>2]|0;
   $131 = $130 | 4;
   HEAP32[$__err>>2] = $131;
   label = 28;
  }
  }
 } while(0);
 if ((label|0) == 28) {
  $132 = HEAP32[$__b>>2]|0;
  $$sroa$07$0 = $132;
 }
 STACKTOP = sp;return ($$sroa$07$0|0);
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $$off = (($2) + -1)|0;
 $6 = ($$off>>>0)<(31);
 $7 = $6 & $5;
 if ($7) {
  HEAP32[$__d>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(24);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__h>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $$off = (($2) + -1)|0;
 $6 = ($$off>>>0)<(12);
 $7 = $6 & $5;
 if ($7) {
  HEAP32[$__h>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,3)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(366);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__d>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(13);
 $or$cond = $6 & $5;
 if ($or$cond) {
  $7 = (($2) + -1)|0;
  HEAP32[$__m>>2] = $7;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(60);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__m>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre$i$2$i$i$6 = 0, $$pre$i$i$i = 0, $$pre$i$i$i$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $isascii1$i = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__ct)) + 8|0);
 L1: while(1) {
  $1 = HEAP32[$__b>>2]|0;
  $2 = ($1|0)==(0|0);
  do {
   if ($2) {
    $13 = 0;
   } else {
    $3 = ((($1)) + 12|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = ((($1)) + 16|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($4|0)==($6|0);
    if ($7) {
     $8 = HEAP32[$1>>2]|0;
     $9 = ((($8)) + 36|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = (FUNCTION_TABLE_ii[$10 & 1023]($1)|0);
     $12 = ($11|0)==(-1);
     if ($12) {
      HEAP32[$__b>>2] = 0;
      $13 = 0;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b>>2]|0;
      $13 = $$pre$i$i$i;
      break;
     }
    } else {
     $13 = $1;
    }
   }
  } while(0);
  $14 = ($13|0)==(0|0);
  $15 = HEAP32[$__e>>2]|0;
  $16 = ($15|0)==(0|0);
  do {
   if ($16) {
    label = 12;
   } else {
    $17 = ((($15)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($15)) + 16|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($18|0)==($20|0);
    if (!($21)) {
     if ($14) {
      $83 = $15;
      break;
     } else {
      $$pre$i$2$i$i$6 = $15;
      break L1;
     }
    }
    $22 = HEAP32[$15>>2]|0;
    $23 = ((($22)) + 36|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (FUNCTION_TABLE_ii[$24 & 1023]($15)|0);
    $26 = ($25|0)==(-1);
    if ($26) {
     HEAP32[$__e>>2] = 0;
     label = 12;
     break;
    } else {
     if ($14) {
      $83 = $15;
      break;
     } else {
      $$pre$i$2$i$i$6 = $15;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 12) {
   label = 0;
   if ($14) {
    $$pre$i$2$i$i$6 = 0;
    break;
   } else {
    $83 = 0;
   }
  }
  $27 = HEAP32[$__b>>2]|0;
  $28 = ((($27)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($27)) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($29|0)==($31|0);
  if ($32) {
   $33 = HEAP32[$27>>2]|0;
   $34 = ((($33)) + 36|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (FUNCTION_TABLE_ii[$35 & 1023]($27)|0);
   $$0$i$i = $36;
  } else {
   $37 = HEAP8[$29>>0]|0;
   $38 = $37&255;
   $$0$i$i = $38;
  }
  $39 = $$0$i$i&255;
  $isascii1$i = ($39<<24>>24)>(-1);
  if (!($isascii1$i)) {
   $$pre$i$2$i$i$6 = $83;
   break;
  }
  $sext = $$0$i$i << 24;
  $40 = $sext >> 24;
  $41 = HEAP32[$0>>2]|0;
  $42 = (($41) + ($40<<1)|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 & 8192;
  $45 = ($44<<16>>16)==(0);
  if ($45) {
   $$pre$i$2$i$i$6 = $83;
   break;
  }
  $46 = HEAP32[$__b>>2]|0;
  $47 = ((($46)) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($46)) + 16|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($48|0)==($50|0);
  if ($51) {
   $52 = HEAP32[$46>>2]|0;
   $53 = ((($52)) + 40|0);
   $54 = HEAP32[$53>>2]|0;
   (FUNCTION_TABLE_ii[$54 & 1023]($46)|0);
   continue;
  } else {
   $55 = ((($48)) + 1|0);
   HEAP32[$47>>2] = $55;
   continue;
  }
 }
 $56 = HEAP32[$__b>>2]|0;
 $57 = ($56|0)==(0|0);
 do {
  if ($57) {
   $68 = 0;
  } else {
   $58 = ((($56)) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ((($56)) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)==($61|0);
   if ($62) {
    $63 = HEAP32[$56>>2]|0;
    $64 = ((($63)) + 36|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (FUNCTION_TABLE_ii[$65 & 1023]($56)|0);
    $67 = ($66|0)==(-1);
    if ($67) {
     HEAP32[$__b>>2] = 0;
     $68 = 0;
     break;
    } else {
     $$pre$i$i$i$2 = HEAP32[$__b>>2]|0;
     $68 = $$pre$i$i$i$2;
     break;
    }
   } else {
    $68 = $56;
   }
  }
 } while(0);
 $69 = ($68|0)==(0|0);
 $70 = ($$pre$i$2$i$i$6|0)==(0|0);
 do {
  if ($70) {
   label = 32;
  } else {
   $71 = ((($$pre$i$2$i$i$6)) + 12|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ((($$pre$i$2$i$i$6)) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($72|0)==($74|0);
   if ($75) {
    $76 = HEAP32[$$pre$i$2$i$i$6>>2]|0;
    $77 = ((($76)) + 36|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (FUNCTION_TABLE_ii[$78 & 1023]($$pre$i$2$i$i$6)|0);
    $80 = ($79|0)==(-1);
    if ($80) {
     HEAP32[$__e>>2] = 0;
     label = 32;
     break;
    }
   }
   if (!($69)) {
    label = 33;
   }
  }
 } while(0);
 if ((label|0) == 32) {
  if ($69) {
   label = 33;
  }
 }
 if ((label|0) == 33) {
  $81 = HEAP32[$__err>>2]|0;
  $82 = $81 | 2;
  HEAP32[$__err>>2] = $82;
 }
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = $6&255;
  $12 = $11 >>> 1;
  $23 = $12;
 } else {
  $9 = ((($5)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $23 = $10;
 }
 $13 = ((($5)) + 12|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 & 1;
 $16 = ($15<<24>>24)==(0);
 if ($16) {
  $19 = $14&255;
  $20 = $19 >>> 1;
  $22 = $20;
 } else {
  $17 = ((($5)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $22 = $18;
 }
 $21 = (0 - ($22))|0;
 $24 = ($23|0)==($21|0);
 do {
  if ($24) {
   $25 = HEAP32[$__err>>2]|0;
   $26 = $25 | 4;
   HEAP32[$__err>>2] = $26;
  } else {
   $27 = HEAP32[$__e>>2]|0;
   HEAP32[$0>>2] = $27;
   $28 = ((($5)) + 24|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   $29 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$28,$__ct,$__err,0)|0);
   $30 = ($29|0)==($5|0);
   $31 = HEAP32[$__h>>2]|0;
   $32 = ($31|0)==(12);
   $or$cond = $30 & $32;
   if ($or$cond) {
    HEAP32[$__h>>2] = 0;
    break;
   }
   $33 = $29;
   $34 = $5;
   $35 = (($33) - ($34))|0;
   $36 = ($35|0)==(12);
   $37 = ($31|0)<(12);
   $or$cond3 = $37 & $36;
   if ($or$cond3) {
    $38 = (($31) + 12)|0;
    HEAP32[$__h>>2] = $38;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__s,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__s = $__s|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(61);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__s>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,1)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(7);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__w>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (($2) + -1900)|0;
  HEAP32[$__y>>2] = $6;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$2$i$i$611 = 0, $$pre$i$i$i = 0, $$pre$i$i$i$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $12 = 0;
  } else {
   $2 = ((($0)) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ((($0)) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = ((($7)) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $12 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $12 = $$pre$i$i$i;
     break;
    }
   } else {
    $12 = $0;
   }
  }
 } while(0);
 $13 = ($12|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = ((($14)) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($14)) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = ((($21)) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 1023]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($13) {
    $$pre$i$2$i$i$611 = $14;
    label = 13;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($13) {
   label = 12;
  } else {
   $$pre$i$2$i$i$611 = 0;
   label = 13;
  }
 }
 L16: do {
  if ((label|0) == 12) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
  }
  else if ((label|0) == 13) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($28)) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = ((($34)) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP8[$30>>0]|0;
    $39 = $38&255;
    $$0$i$i = $39;
   }
   $40 = $$0$i$i&255;
   $41 = HEAP32[$__ct>>2]|0;
   $42 = ((($41)) + 36|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (FUNCTION_TABLE_iiii[$43 & 1023]($__ct,$40,0)|0);
   $45 = ($44<<24>>24)==(37);
   if (!($45)) {
    $46 = HEAP32[$__err>>2]|0;
    $47 = $46 | 4;
    HEAP32[$__err>>2] = $47;
    break;
   }
   $48 = HEAP32[$__b>>2]|0;
   $49 = ((($48)) + 12|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ((($48)) + 16|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($50|0)==($52|0);
   if ($53) {
    $55 = HEAP32[$48>>2]|0;
    $56 = ((($55)) + 40|0);
    $57 = HEAP32[$56>>2]|0;
    (FUNCTION_TABLE_ii[$57 & 1023]($48)|0);
    $$pre = HEAP32[$__b>>2]|0;
    $58 = ($$pre|0)==(0|0);
    if ($58) {
     $70 = 0;
    } else {
     $60 = $$pre;
     label = 21;
    }
   } else {
    $54 = ((($50)) + 1|0);
    HEAP32[$49>>2] = $54;
    $60 = $48;
    label = 21;
   }
   do {
    if ((label|0) == 21) {
     $59 = ((($60)) + 12|0);
     $61 = HEAP32[$59>>2]|0;
     $62 = ((($60)) + 16|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = ($61|0)==($63|0);
     if ($64) {
      $65 = HEAP32[$60>>2]|0;
      $66 = ((($65)) + 36|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = (FUNCTION_TABLE_ii[$67 & 1023]($60)|0);
      $69 = ($68|0)==(-1);
      if ($69) {
       HEAP32[$__b>>2] = 0;
       $70 = 0;
       break;
      } else {
       $$pre$i$i$i$2 = HEAP32[$__b>>2]|0;
       $70 = $$pre$i$i$i$2;
       break;
      }
     } else {
      $70 = $60;
     }
    }
   } while(0);
   $71 = ($70|0)==(0|0);
   $72 = ($$pre$i$2$i$i$611|0)==(0|0);
   do {
    if ($72) {
     label = 30;
    } else {
     $73 = ((($$pre$i$2$i$i$611)) + 12|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = ((($$pre$i$2$i$i$611)) + 16|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ($74|0)==($76|0);
     if ($77) {
      $78 = HEAP32[$$pre$i$2$i$i$611>>2]|0;
      $79 = ((($78)) + 36|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = (FUNCTION_TABLE_ii[$80 & 1023]($$pre$i$2$i$i$611)|0);
      $82 = ($81|0)==(-1);
      if ($82) {
       HEAP32[$__e>>2] = 0;
       label = 30;
       break;
      }
     }
     if ($71) {
      break L16;
     }
    }
   } while(0);
   if ((label|0) == 30) {
    if (!($71)) {
     break;
    }
   }
   $83 = HEAP32[$__err>>2]|0;
   $84 = $83 | 2;
   HEAP32[$__err>>2] = $84;
  }
 } while(0);
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i$1$i$i = 0, $$0$i$i$1$i$i$12 = 0, $$0$i$i$1$i$i$27 = 0, $$0$i$i$18 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$21 = 0, $$0$i$i$i$i$6 = 0, $$0$ph = 0, $$0$ph$be = 0, $$0$pn = 0, $$3 = 0, $$3$lcssa = 0, $$byval_copy = 0, $$byval_copy$1 = 0, $$lcssa114 = 0, $$lcssa117 = 0, $$lcssa118 = 0, $$lcssa118$lcssa = 0, $$lcssa118$lcssa121 = 0;
 var $$lcssa119 = 0, $$lcssa120 = 0, $$lcssa123 = 0, $$lcssa125 = 0, $$lcssa128 = 0, $$lcssa129 = 0, $$ph = 0, $$pre = 0, $$pre$i$3$i$i$14 = 0, $$pre$i$3$i$i$1445 = 0, $$pre$i$3$i$i$1446 = 0, $$pre$i$i$i$23 = 0, $$pre$i$i$i$8 = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $or$cond = 0, $phitmp$i$4$i$i$15 = 0, $tmp$i$i$17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy$1 = sp + 16|0;
 $$byval_copy = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 $3 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $3;
 __THREW__ = 0;
 $4 = (invoke_iii(354,($0|0),(8580|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $38 = ___cxa_find_matching_catch()|0;
  $39 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
  ___resumeException($38|0);
  // unreachable;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
 HEAP32[$__err>>2] = 0;
 $$0$ph = $__fmtb;$$pre = 0;
 L4: while(1) {
  $7 = ($$0$ph|0)!=($__fmte|0);
  $8 = $$pre;
  while(1) {
   $9 = ($8|0)==(0);
   $or$cond = $7 & $9;
   $10 = HEAP32[$__b>>2]|0;
   if (!($or$cond)) {
    $$pre$i$i$i$23 = $10;
    break L4;
   }
   $11 = ($10|0)==(0|0);
   $12 = $10;
   if ($11) {
    $126 = 0;$182 = $12;$183 = 1;
   } else {
    $13 = ((($10)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($10)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14|0)==($16|0);
    if ($17) {
     $18 = HEAP32[$10>>2]|0;
     $19 = ((($18)) + 36|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (FUNCTION_TABLE_ii[$20 & 1023]($10)|0);
     $$0$i$i$i$i = $21;
    } else {
     $22 = HEAP32[$14>>2]|0;
     $$0$i$i$i$i = $22;
    }
    $23 = ($$0$i$i$i$i|0)==(-1);
    if ($23) {
     HEAP32[$__b>>2] = 0;
     $126 = 0;$182 = 0;$183 = 1;
    } else {
     $126 = $10;$182 = $12;$183 = 0;
    }
   }
   $24 = HEAP32[$__e>>2]|0;
   $25 = ($24|0)==(0|0);
   $26 = $24;
   do {
    if ($25) {
     $$ph = $26;
     label = 17;
    } else {
     $27 = ((($24)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ((($24)) + 16|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($28|0)==($30|0);
     if ($31) {
      $32 = HEAP32[$24>>2]|0;
      $33 = ((($32)) + 36|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (FUNCTION_TABLE_ii[$34 & 1023]($24)|0);
      $$0$i$i$1$i$i = $35;
     } else {
      $36 = HEAP32[$28>>2]|0;
      $$0$i$i$1$i$i = $36;
     }
     $37 = ($$0$i$i$1$i$i|0)==(-1);
     if ($37) {
      HEAP32[$__e>>2] = 0;
      $$ph = 0;
      label = 17;
      break;
     } else {
      if ($183) {
       $184 = $24;$185 = $26;
       break;
      } else {
       $$lcssa117 = $126;
       label = 19;
       break L4;
      }
     }
    }
   } while(0);
   if ((label|0) == 17) {
    label = 0;
    if ($183) {
     $$lcssa117 = $126;
     label = 19;
     break L4;
    } else {
     $184 = 0;$185 = $$ph;
    }
   }
   $40 = HEAP32[$$0$ph>>2]|0;
   $41 = HEAP32[$4>>2]|0;
   $42 = ((($41)) + 52|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (FUNCTION_TABLE_iiii[$43 & 1023]($4,$40,0)|0);
   $45 = ($44<<24>>24)==(37);
   if ($45) {
    $$lcssa114 = $182;$$lcssa118 = $126;$$lcssa125 = $185;
    label = 22;
    break;
   }
   $66 = HEAP32[$$0$ph>>2]|0;
   $67 = HEAP32[$4>>2]|0;
   $68 = ((($67)) + 12|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = (FUNCTION_TABLE_iiii[$69 & 1023]($4,8192,$66)|0);
   if ($70) {
    $$lcssa119 = $126;$$lcssa123 = $184;
    label = 30;
    break;
   }
   $125 = ((($126)) + 12|0);
   $127 = HEAP32[$125>>2]|0;
   $128 = ((($126)) + 16|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = ($127|0)==($129|0);
   if ($130) {
    $131 = HEAP32[$126>>2]|0;
    $132 = ((($131)) + 36|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (FUNCTION_TABLE_ii[$133 & 1023]($126)|0);
    $$0$i$i$18 = $134;
   } else {
    $135 = HEAP32[$127>>2]|0;
    $$0$i$i$18 = $135;
   }
   $136 = HEAP32[$4>>2]|0;
   $137 = ((($136)) + 28|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = (FUNCTION_TABLE_iii[$138 & 511]($4,$$0$i$i$18)|0);
   $140 = HEAP32[$$0$ph>>2]|0;
   $141 = HEAP32[$4>>2]|0;
   $142 = ((($141)) + 28|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = (FUNCTION_TABLE_iii[$143 & 511]($4,$140)|0);
   $145 = ($139|0)==($144|0);
   if ($145) {
    $$lcssa120 = $126;$$lcssa128 = $125;$$lcssa129 = $128;
    label = 59;
    break;
   }
   HEAP32[$__err>>2] = 4;
   $8 = 4;
  }
  L36: do {
   if ((label|0) == 22) {
    label = 0;
    $46 = ((($$0$ph)) + 4|0);
    $47 = ($46|0)==($__fmte|0);
    if ($47) {
     $$lcssa118$lcssa = $$lcssa118;
     label = 23;
     break L4;
    }
    $48 = HEAP32[$46>>2]|0;
    $49 = HEAP32[$4>>2]|0;
    $50 = ((($49)) + 52|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (FUNCTION_TABLE_iiii[$51 & 1023]($4,$48,0)|0);
    switch ($52<<24>>24) {
    case 48: case 69:  {
     $53 = ((($$0$ph)) + 8|0);
     $54 = ($53|0)==($__fmte|0);
     if ($54) {
      $$lcssa118$lcssa121 = $$lcssa118;
      label = 28;
      break L4;
     }
     $55 = HEAP32[$53>>2]|0;
     $56 = HEAP32[$4>>2]|0;
     $57 = ((($56)) + 52|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = (FUNCTION_TABLE_iiii[$58 & 1023]($4,$55,0)|0);
     $65 = $46;$__cmd$0 = $59;$__opt$0 = $52;
     break;
    }
    default: {
     $65 = $$0$ph;$__cmd$0 = $52;$__opt$0 = 0;
    }
    }
    $60 = HEAP32[$this>>2]|0;
    $61 = ((($60)) + 36|0);
    $62 = HEAP32[$61>>2]|0;
    HEAP32[$1>>2] = $$lcssa114;
    HEAP32[$2>>2] = $$lcssa125;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
    ;HEAP32[$$byval_copy$1>>2]=HEAP32[$2>>2]|0;
    $63 = (FUNCTION_TABLE_iiiiiiiii[$62 & 511]($this,$$byval_copy,$$byval_copy$1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0)|0);
    HEAP32[$__b>>2] = $63;
    $64 = ((($65)) + 8|0);
    $$0$ph$be = $64;
   }
   else if ((label|0) == 30) {
    label = 0;
    $$0$pn = $$0$ph;
    while(1) {
     $$3 = ((($$0$pn)) + 4|0);
     $71 = ($$3|0)==($__fmte|0);
     if ($71) {
      $$3$lcssa = $__fmte;
      break;
     }
     $72 = HEAP32[$$3>>2]|0;
     $73 = HEAP32[$4>>2]|0;
     $74 = ((($73)) + 12|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = (FUNCTION_TABLE_iiii[$75 & 1023]($4,8192,$72)|0);
     if ($76) {
      $$0$pn = $$3;
     } else {
      $$3$lcssa = $$3;
      break;
     }
    }
    $$pre$i$3$i$i$14 = $$lcssa123;$$pre$i$i$i$8 = $$lcssa119;$89 = $$lcssa123;
    while(1) {
     $77 = ($$pre$i$i$i$8|0)==(0|0);
     if ($77) {
      $102 = 1;$104 = 0;
     } else {
      $78 = ((($$pre$i$i$i$8)) + 12|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ((($$pre$i$i$i$8)) + 16|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = ($79|0)==($81|0);
      if ($82) {
       $83 = HEAP32[$$pre$i$i$i$8>>2]|0;
       $84 = ((($83)) + 36|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = (FUNCTION_TABLE_ii[$85 & 1023]($$pre$i$i$i$8)|0);
       $$0$i$i$i$i$6 = $86;
      } else {
       $87 = HEAP32[$79>>2]|0;
       $$0$i$i$i$i$6 = $87;
      }
      $88 = ($$0$i$i$i$i$6|0)==(-1);
      if ($88) {
       HEAP32[$__b>>2] = 0;
       $102 = 1;$104 = 0;
      } else {
       $102 = 0;$104 = $$pre$i$i$i$8;
      }
     }
     $90 = ($89|0)==(0|0);
     do {
      if ($90) {
       $$pre$i$3$i$i$1446 = $$pre$i$3$i$i$14;
       label = 46;
      } else {
       $91 = ((($89)) + 12|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = ((($89)) + 16|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = ($92|0)==($94|0);
       if ($95) {
        $96 = HEAP32[$89>>2]|0;
        $97 = ((($96)) + 36|0);
        $98 = HEAP32[$97>>2]|0;
        $99 = (FUNCTION_TABLE_ii[$98 & 1023]($89)|0);
        $$0$i$i$1$i$i$12 = $99;
       } else {
        $100 = HEAP32[$92>>2]|0;
        $$0$i$i$1$i$i$12 = $100;
       }
       $101 = ($$0$i$i$1$i$i$12|0)==(-1);
       if ($101) {
        HEAP32[$__e>>2] = 0;
        $$pre$i$3$i$i$1446 = 0;
        label = 46;
        break;
       } else {
        $phitmp$i$4$i$i$15 = ($$pre$i$3$i$i$14|0)==(0|0);
        $tmp$i$i$17 = $102 ^ $phitmp$i$4$i$i$15;
        if ($tmp$i$i$17) {
         $$pre$i$3$i$i$1445 = $$pre$i$3$i$i$14;$186 = $$pre$i$3$i$i$14;
         break;
        } else {
         $$0$ph$be = $$3$lcssa;
         break L36;
        }
       }
      }
     } while(0);
     if ((label|0) == 46) {
      label = 0;
      if ($102) {
       $$0$ph$be = $$3$lcssa;
       break L36;
      } else {
       $$pre$i$3$i$i$1445 = $$pre$i$3$i$i$1446;$186 = 0;
      }
     }
     $103 = ((($104)) + 12|0);
     $105 = HEAP32[$103>>2]|0;
     $106 = ((($104)) + 16|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($105|0)==($107|0);
     if ($108) {
      $109 = HEAP32[$104>>2]|0;
      $110 = ((($109)) + 36|0);
      $111 = HEAP32[$110>>2]|0;
      $112 = (FUNCTION_TABLE_ii[$111 & 1023]($104)|0);
      $$0$i$i = $112;
     } else {
      $113 = HEAP32[$105>>2]|0;
      $$0$i$i = $113;
     }
     $114 = HEAP32[$4>>2]|0;
     $115 = ((($114)) + 12|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = (FUNCTION_TABLE_iiii[$116 & 1023]($4,8192,$$0$i$i)|0);
     if (!($117)) {
      $$0$ph$be = $$3$lcssa;
      break L36;
     }
     $118 = HEAP32[$103>>2]|0;
     $119 = HEAP32[$106>>2]|0;
     $120 = ($118|0)==($119|0);
     if ($120) {
      $121 = HEAP32[$104>>2]|0;
      $122 = ((($121)) + 40|0);
      $123 = HEAP32[$122>>2]|0;
      (FUNCTION_TABLE_ii[$123 & 1023]($104)|0);
      $$pre$i$3$i$i$14 = $$pre$i$3$i$i$1445;$$pre$i$i$i$8 = $104;$89 = $186;
      continue;
     } else {
      $124 = ((($118)) + 4|0);
      HEAP32[$103>>2] = $124;
      $$pre$i$3$i$i$14 = $$pre$i$3$i$i$1445;$$pre$i$i$i$8 = $104;$89 = $186;
      continue;
     }
    }
   }
   else if ((label|0) == 59) {
    label = 0;
    $146 = HEAP32[$$lcssa128>>2]|0;
    $147 = HEAP32[$$lcssa129>>2]|0;
    $148 = ($146|0)==($147|0);
    if ($148) {
     $149 = HEAP32[$$lcssa120>>2]|0;
     $150 = ((($149)) + 40|0);
     $151 = HEAP32[$150>>2]|0;
     (FUNCTION_TABLE_ii[$151 & 1023]($$lcssa120)|0);
    } else {
     $152 = ((($146)) + 4|0);
     HEAP32[$$lcssa128>>2] = $152;
    }
    $153 = ((($$0$ph)) + 4|0);
    $$0$ph$be = $153;
   }
  } while(0);
  $$pre$pre = HEAP32[$__err>>2]|0;
  $$0$ph = $$0$ph$be;$$pre = $$pre$pre;
 }
 if ((label|0) == 19) {
  HEAP32[$__err>>2] = 4;
  $$pre$i$i$i$23 = $$lcssa117;
 }
 else if ((label|0) == 23) {
  HEAP32[$__err>>2] = 4;
  $$pre$i$i$i$23 = $$lcssa118$lcssa;
 }
 else if ((label|0) == 28) {
  HEAP32[$__err>>2] = 4;
  $$pre$i$i$i$23 = $$lcssa118$lcssa121;
 }
 $154 = ($$pre$i$i$i$23|0)==(0|0);
 if ($154) {
  $181 = 0;$187 = 1;
 } else {
  $155 = ((($$pre$i$i$i$23)) + 12|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = ((($$pre$i$i$i$23)) + 16|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = ($156|0)==($158|0);
  if ($159) {
   $160 = HEAP32[$$pre$i$i$i$23>>2]|0;
   $161 = ((($160)) + 36|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = (FUNCTION_TABLE_ii[$162 & 1023]($$pre$i$i$i$23)|0);
   $$0$i$i$i$i$21 = $163;
  } else {
   $164 = HEAP32[$156>>2]|0;
   $$0$i$i$i$i$21 = $164;
  }
  $165 = ($$0$i$i$i$i$21|0)==(-1);
  if ($165) {
   HEAP32[$__b>>2] = 0;
   $181 = 0;$187 = 1;
  } else {
   $181 = $$pre$i$i$i$23;$187 = 0;
  }
 }
 $166 = HEAP32[$__e>>2]|0;
 $167 = ($166|0)==(0|0);
 do {
  if ($167) {
   label = 77;
  } else {
   $168 = ((($166)) + 12|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = ((($166)) + 16|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = ($169|0)==($171|0);
   if ($172) {
    $173 = HEAP32[$166>>2]|0;
    $174 = ((($173)) + 36|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = (FUNCTION_TABLE_ii[$175 & 1023]($166)|0);
    $$0$i$i$1$i$i$27 = $176;
   } else {
    $177 = HEAP32[$169>>2]|0;
    $$0$i$i$1$i$i$27 = $177;
   }
   $178 = ($$0$i$i$1$i$i$27|0)==(-1);
   if ($178) {
    HEAP32[$__e>>2] = 0;
    label = 77;
    break;
   } else {
    if ($187) {
     break;
    } else {
     label = 79;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 77) {
  if ($187) {
   label = 79;
  }
 }
 if ((label|0) == 79) {
  $179 = HEAP32[$__err>>2]|0;
  $180 = $179 | 2;
  HEAP32[$__err>>2] = $180;
 }
 STACKTOP = sp;return ($181|0);
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy$1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy$1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy,$$byval_copy$1,$__iob,$__err,$__tm,9156,(9188))|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy$1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = ((($this)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 $12 = ((($6)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($6)) + 4|0);
 $15 = $11 ? $14 : $13;
 $16 = HEAP32[$14>>2]|0;
 $17 = $9&255;
 $18 = $17 >>> 1;
 $19 = $11 ? $18 : $16;
 $20 = (($15) + ($19<<2)|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy$1>>2]=HEAP32[$1>>2]|0;
 $21 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy,$$byval_copy$1,$__iob,$__err,$__tm,$15,$20)|0);
 STACKTOP = sp;return ($21|0);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(354,($0|0),(8580|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 24|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($1)|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($4)) + 168|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $7 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$4,$6,$__ct,$__err,0)|0);
 $8 = $7;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)<(168);
 if ($11) {
  $12 = (($10|0) / 12)&-1;
  $13 = (($12|0) % 7)&-1;
  HEAP32[$__w>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(354,($0|0),(8580|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 16|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $6;
 $7 = ((($5)) + 288|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $8 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$7,$__ct,$__err,0)|0);
 $9 = $8;
 $10 = $5;
 $11 = (($9) - ($10))|0;
 $12 = ($11|0)<(288);
 if ($12) {
  $13 = (($11|0) / 12)&-1;
  $14 = (($13|0) % 12)&-1;
  HEAP32[$__m>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(354,($0|0),(8580|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 20|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$ = 0, $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = ($2|0)<(69);
  if ($6) {
   $7 = (($2) + 2000)|0;
   $__t$0 = $7;
  } else {
   $$off = (($2) + -69)|0;
   $8 = ($$off>>>0)<(31);
   $9 = (($2) + 1900)|0;
   $$ = $8 ? $9 : $2;
   $__t$0 = $$;
  }
  $10 = (($__t$0) + -1900)|0;
  HEAP32[$__y>>2] = $10;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy$1 = 0, $$byval_copy$10 = 0, $$byval_copy$11 = 0, $$byval_copy$12 = 0, $$byval_copy$13 = 0, $$byval_copy$14 = 0, $$byval_copy$15 = 0, $$byval_copy$16 = 0, $$byval_copy$17 = 0, $$byval_copy$18 = 0, $$byval_copy$19 = 0, $$byval_copy$2 = 0, $$byval_copy$20 = 0, $$byval_copy$21 = 0, $$byval_copy$22 = 0, $$byval_copy$23 = 0, $$byval_copy$24 = 0, $$byval_copy$25 = 0, $$byval_copy$26 = 0;
 var $$byval_copy$27 = 0, $$byval_copy$28 = 0, $$byval_copy$29 = 0, $$byval_copy$3 = 0, $$byval_copy$30 = 0, $$byval_copy$4 = 0, $$byval_copy$5 = 0, $$byval_copy$6 = 0, $$byval_copy$7 = 0, $$byval_copy$8 = 0, $$byval_copy$9 = 0, $$sroa$07$0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy$30 = sp + 248|0;
 $$byval_copy$29 = sp + 244|0;
 $$byval_copy$28 = sp + 240|0;
 $$byval_copy$27 = sp + 236|0;
 $$byval_copy$26 = sp + 232|0;
 $$byval_copy$25 = sp + 228|0;
 $$byval_copy$24 = sp + 224|0;
 $$byval_copy$23 = sp + 220|0;
 $$byval_copy$22 = sp + 216|0;
 $$byval_copy$21 = sp + 212|0;
 $$byval_copy$20 = sp + 208|0;
 $$byval_copy$19 = sp + 204|0;
 $$byval_copy$18 = sp + 200|0;
 $$byval_copy$17 = sp + 196|0;
 $$byval_copy$16 = sp + 192|0;
 $$byval_copy$15 = sp + 188|0;
 $$byval_copy$14 = sp + 184|0;
 $$byval_copy$13 = sp + 180|0;
 $$byval_copy$12 = sp + 176|0;
 $$byval_copy$11 = sp + 172|0;
 $$byval_copy$10 = sp + 168|0;
 $$byval_copy$9 = sp + 164|0;
 $$byval_copy$8 = sp + 160|0;
 $$byval_copy$7 = sp + 156|0;
 $$byval_copy$6 = sp + 152|0;
 $$byval_copy$5 = sp + 148|0;
 $$byval_copy$4 = sp + 144|0;
 $$byval_copy$3 = sp + 140|0;
 $$byval_copy$2 = sp + 136|0;
 $$byval_copy$1 = sp + 132|0;
 $$byval_copy = sp + 128|0;
 $1 = sp + 124|0;
 $2 = sp + 120|0;
 $3 = sp + 116|0;
 $4 = sp + 112|0;
 $5 = sp + 108|0;
 $6 = sp + 104|0;
 $7 = sp + 100|0;
 $8 = sp + 96|0;
 $9 = sp + 92|0;
 $10 = sp + 88|0;
 $11 = sp + 84|0;
 $12 = sp + 80|0;
 $13 = sp + 76|0;
 $14 = sp + 72|0;
 $15 = sp + 68|0;
 $16 = sp + 64|0;
 $17 = sp + 60|0;
 $18 = sp + 56|0;
 $19 = sp + 52|0;
 $20 = sp + 48|0;
 $21 = sp + 44|0;
 $22 = sp + 40|0;
 $23 = sp + 36|0;
 $24 = sp + 32|0;
 $25 = sp + 28|0;
 $26 = sp + 24|0;
 $27 = sp + 20|0;
 $28 = sp + 16|0;
 $29 = sp + 12|0;
 $30 = sp + 8|0;
 $31 = sp + 4|0;
 $32 = sp;
 HEAP32[$__err>>2] = 0;
 $33 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$1>>2] = $33;
 __THREW__ = 0;
 $34 = (invoke_iii(354,($1|0),(8580|0))|0);
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $38 = ___cxa_find_matching_catch()|0;
  $39 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($33)|0);
  ___resumeException($38|0);
  // unreachable;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($33)|0);
 $37 = $__fmt << 24 >> 24;
 do {
  switch ($37|0) {
  case 65: case 97:  {
   $40 = ((($__tm)) + 24|0);
   $41 = HEAP32[$__e>>2]|0;
   HEAP32[$2>>2] = $41;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$40,$__b,$$byval_copy,$__err,$34);
   label = 28;
   break;
  }
  case 104: case 66: case 98:  {
   $42 = ((($__tm)) + 16|0);
   $43 = HEAP32[$__e>>2]|0;
   HEAP32[$3>>2] = $43;
   ;HEAP32[$$byval_copy$1>>2]=HEAP32[$3>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$42,$__b,$$byval_copy$1,$__err,$34);
   label = 28;
   break;
  }
  case 99:  {
   $44 = ((($this)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($45)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (FUNCTION_TABLE_ii[$47 & 1023]($44)|0);
   $49 = HEAP32[$__b>>2]|0;
   HEAP32[$4>>2] = $49;
   $50 = HEAP32[$__e>>2]|0;
   HEAP32[$5>>2] = $50;
   $51 = HEAP8[$48>>0]|0;
   $52 = $51 & 1;
   $53 = ($52<<24>>24)==(0);
   $54 = ((($48)) + 8|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($48)) + 4|0);
   $57 = $53 ? $56 : $55;
   $58 = HEAP32[$56>>2]|0;
   $59 = $51&255;
   $60 = $59 >>> 1;
   $61 = $53 ? $60 : $58;
   $62 = (($57) + ($61<<2)|0);
   ;HEAP32[$$byval_copy$2>>2]=HEAP32[$4>>2]|0;
   ;HEAP32[$$byval_copy$3>>2]=HEAP32[$5>>2]|0;
   $63 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy$2,$$byval_copy$3,$__iob,$__err,$__tm,$57,$62)|0);
   HEAP32[$__b>>2] = $63;
   label = 28;
   break;
  }
  case 101: case 100:  {
   $64 = ((($__tm)) + 12|0);
   $65 = HEAP32[$__e>>2]|0;
   HEAP32[$6>>2] = $65;
   ;HEAP32[$$byval_copy$4>>2]=HEAP32[$6>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$64,$__b,$$byval_copy$4,$__err,$34);
   label = 28;
   break;
  }
  case 68:  {
   $66 = HEAP32[$__b>>2]|0;
   HEAP32[$7>>2] = $66;
   $67 = HEAP32[$__e>>2]|0;
   HEAP32[$8>>2] = $67;
   ;HEAP32[$$byval_copy$5>>2]=HEAP32[$7>>2]|0;
   ;HEAP32[$$byval_copy$6>>2]=HEAP32[$8>>2]|0;
   $68 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy$5,$$byval_copy$6,$__iob,$__err,$__tm,9188,(9220))|0);
   HEAP32[$__b>>2] = $68;
   label = 28;
   break;
  }
  case 70:  {
   $69 = HEAP32[$__b>>2]|0;
   HEAP32[$9>>2] = $69;
   $70 = HEAP32[$__e>>2]|0;
   HEAP32[$10>>2] = $70;
   ;HEAP32[$$byval_copy$7>>2]=HEAP32[$9>>2]|0;
   ;HEAP32[$$byval_copy$8>>2]=HEAP32[$10>>2]|0;
   $71 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy$7,$$byval_copy$8,$__iob,$__err,$__tm,9220,(9252))|0);
   HEAP32[$__b>>2] = $71;
   label = 28;
   break;
  }
  case 72:  {
   $72 = ((($__tm)) + 8|0);
   $73 = HEAP32[$__e>>2]|0;
   HEAP32[$11>>2] = $73;
   ;HEAP32[$$byval_copy$9>>2]=HEAP32[$11>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$72,$__b,$$byval_copy$9,$__err,$34);
   label = 28;
   break;
  }
  case 73:  {
   $74 = ((($__tm)) + 8|0);
   $75 = HEAP32[$__e>>2]|0;
   HEAP32[$12>>2] = $75;
   ;HEAP32[$$byval_copy$10>>2]=HEAP32[$12>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$74,$__b,$$byval_copy$10,$__err,$34);
   label = 28;
   break;
  }
  case 106:  {
   $76 = ((($__tm)) + 28|0);
   $77 = HEAP32[$__e>>2]|0;
   HEAP32[$13>>2] = $77;
   ;HEAP32[$$byval_copy$11>>2]=HEAP32[$13>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this,$76,$__b,$$byval_copy$11,$__err,$34);
   label = 28;
   break;
  }
  case 109:  {
   $78 = ((($__tm)) + 16|0);
   $79 = HEAP32[$__e>>2]|0;
   HEAP32[$14>>2] = $79;
   ;HEAP32[$$byval_copy$12>>2]=HEAP32[$14>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this,$78,$__b,$$byval_copy$12,$__err,$34);
   label = 28;
   break;
  }
  case 77:  {
   $80 = ((($__tm)) + 4|0);
   $81 = HEAP32[$__e>>2]|0;
   HEAP32[$15>>2] = $81;
   ;HEAP32[$$byval_copy$13>>2]=HEAP32[$15>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this,$80,$__b,$$byval_copy$13,$__err,$34);
   label = 28;
   break;
  }
  case 116: case 110:  {
   $82 = HEAP32[$__e>>2]|0;
   HEAP32[$16>>2] = $82;
   ;HEAP32[$$byval_copy$14>>2]=HEAP32[$16>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$$byval_copy$14,$__err,$34);
   label = 28;
   break;
  }
  case 112:  {
   $83 = ((($__tm)) + 8|0);
   $84 = HEAP32[$__e>>2]|0;
   HEAP32[$17>>2] = $84;
   ;HEAP32[$$byval_copy$15>>2]=HEAP32[$17>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$83,$__b,$$byval_copy$15,$__err,$34);
   label = 28;
   break;
  }
  case 114:  {
   $85 = HEAP32[$__b>>2]|0;
   HEAP32[$18>>2] = $85;
   $86 = HEAP32[$__e>>2]|0;
   HEAP32[$19>>2] = $86;
   ;HEAP32[$$byval_copy$16>>2]=HEAP32[$18>>2]|0;
   ;HEAP32[$$byval_copy$17>>2]=HEAP32[$19>>2]|0;
   $87 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy$16,$$byval_copy$17,$__iob,$__err,$__tm,9252,(9296))|0);
   HEAP32[$__b>>2] = $87;
   label = 28;
   break;
  }
  case 82:  {
   $88 = HEAP32[$__b>>2]|0;
   HEAP32[$20>>2] = $88;
   $89 = HEAP32[$__e>>2]|0;
   HEAP32[$21>>2] = $89;
   ;HEAP32[$$byval_copy$18>>2]=HEAP32[$20>>2]|0;
   ;HEAP32[$$byval_copy$19>>2]=HEAP32[$21>>2]|0;
   $90 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy$18,$$byval_copy$19,$__iob,$__err,$__tm,9296,(9316))|0);
   HEAP32[$__b>>2] = $90;
   label = 28;
   break;
  }
  case 83:  {
   $91 = HEAP32[$__e>>2]|0;
   HEAP32[$22>>2] = $91;
   ;HEAP32[$$byval_copy$20>>2]=HEAP32[$22>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__tm,$__b,$$byval_copy$20,$__err,$34);
   label = 28;
   break;
  }
  case 84:  {
   $92 = HEAP32[$__b>>2]|0;
   HEAP32[$23>>2] = $92;
   $93 = HEAP32[$__e>>2]|0;
   HEAP32[$24>>2] = $93;
   ;HEAP32[$$byval_copy$21>>2]=HEAP32[$23>>2]|0;
   ;HEAP32[$$byval_copy$22>>2]=HEAP32[$24>>2]|0;
   $94 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy$21,$$byval_copy$22,$__iob,$__err,$__tm,9316,(9348))|0);
   HEAP32[$__b>>2] = $94;
   label = 28;
   break;
  }
  case 119:  {
   $95 = ((($__tm)) + 24|0);
   $96 = HEAP32[$__e>>2]|0;
   HEAP32[$25>>2] = $96;
   ;HEAP32[$$byval_copy$23>>2]=HEAP32[$25>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$95,$__b,$$byval_copy$23,$__err,$34);
   label = 28;
   break;
  }
  case 120:  {
   $97 = HEAP32[$this>>2]|0;
   $98 = ((($97)) + 20|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = HEAP32[$__b>>2]|0;
   HEAP32[$26>>2] = $100;
   $101 = HEAP32[$__e>>2]|0;
   HEAP32[$27>>2] = $101;
   ;HEAP32[$$byval_copy$24>>2]=HEAP32[$26>>2]|0;
   ;HEAP32[$$byval_copy$25>>2]=HEAP32[$27>>2]|0;
   $102 = (FUNCTION_TABLE_iiiiiii[$99 & 511]($this,$$byval_copy$24,$$byval_copy$25,$__iob,$__err,$__tm)|0);
   $$sroa$07$0 = $102;
   break;
  }
  case 88:  {
   $103 = ((($this)) + 8|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = ((($104)) + 24|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (FUNCTION_TABLE_ii[$106 & 1023]($103)|0);
   $108 = HEAP32[$__b>>2]|0;
   HEAP32[$28>>2] = $108;
   $109 = HEAP32[$__e>>2]|0;
   HEAP32[$29>>2] = $109;
   $110 = HEAP8[$107>>0]|0;
   $111 = $110 & 1;
   $112 = ($111<<24>>24)==(0);
   $113 = ((($107)) + 8|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = ((($107)) + 4|0);
   $116 = $112 ? $115 : $114;
   $117 = HEAP32[$115>>2]|0;
   $118 = $110&255;
   $119 = $118 >>> 1;
   $120 = $112 ? $119 : $117;
   $121 = (($116) + ($120<<2)|0);
   ;HEAP32[$$byval_copy$26>>2]=HEAP32[$28>>2]|0;
   ;HEAP32[$$byval_copy$27>>2]=HEAP32[$29>>2]|0;
   $122 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy$26,$$byval_copy$27,$__iob,$__err,$__tm,$116,$121)|0);
   HEAP32[$__b>>2] = $122;
   label = 28;
   break;
  }
  case 121:  {
   $123 = ((($__tm)) + 20|0);
   $124 = HEAP32[$__e>>2]|0;
   HEAP32[$30>>2] = $124;
   ;HEAP32[$$byval_copy$28>>2]=HEAP32[$30>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$123,$__b,$$byval_copy$28,$__err,$34);
   label = 28;
   break;
  }
  case 89:  {
   $125 = ((($__tm)) + 20|0);
   $126 = HEAP32[$__e>>2]|0;
   HEAP32[$31>>2] = $126;
   ;HEAP32[$$byval_copy$29>>2]=HEAP32[$31>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this,$125,$__b,$$byval_copy$29,$__err,$34);
   label = 28;
   break;
  }
  case 37:  {
   $127 = HEAP32[$__e>>2]|0;
   HEAP32[$32>>2] = $127;
   ;HEAP32[$$byval_copy$30>>2]=HEAP32[$32>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$$byval_copy$30,$__err,$34);
   label = 28;
   break;
  }
  default: {
   $128 = HEAP32[$__err>>2]|0;
   $129 = $128 | 4;
   HEAP32[$__err>>2] = $129;
   label = 28;
  }
  }
 } while(0);
 if ((label|0) == 28) {
  $130 = HEAP32[$__b>>2]|0;
  $$sroa$07$0 = $130;
 }
 STACKTOP = sp;return ($$sroa$07$0|0);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $$off = (($2) + -1)|0;
 $6 = ($$off>>>0)<(31);
 $7 = $6 & $5;
 if ($7) {
  HEAP32[$__d>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(24);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__h>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $$off = (($2) + -1)|0;
 $6 = ($$off>>>0)<(12);
 $7 = $6 & $5;
 if ($7) {
  HEAP32[$__h>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,3)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(366);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__d>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(13);
 $or$cond = $6 & $5;
 if ($or$cond) {
  $7 = (($2) + -1)|0;
  HEAP32[$__m>>2] = $7;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(60);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__m>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$1$i$i = 0, $$0$i$i$1$i$i$7 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$1 = 0, $$pre$i$3$i$i$9 = 0, $$pre$i$i$i = 0, $$pre$i$i$i$3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i$4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: while(1) {
  $0 = HEAP32[$__b>>2]|0;
  $1 = ($0|0)==(0|0);
  do {
   if ($1) {
    $78 = 1;
   } else {
    $2 = ((($0)) + 12|0);
    $3 = HEAP32[$2>>2]|0;
    $4 = ((($0)) + 16|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($3|0)==($5|0);
    if ($6) {
     $7 = HEAP32[$0>>2]|0;
     $8 = ((($7)) + 36|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
     $$0$i$i$i$i = $10;
    } else {
     $11 = HEAP32[$3>>2]|0;
     $$0$i$i$i$i = $11;
    }
    $12 = ($$0$i$i$i$i|0)==(-1);
    if ($12) {
     HEAP32[$__b>>2] = 0;
     $78 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $78 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $13 = HEAP32[$__e>>2]|0;
  $14 = ($13|0)==(0|0);
  do {
   if ($14) {
    label = 15;
   } else {
    $15 = ((($13)) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($13)) + 16|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($16|0)==($18|0);
    if ($19) {
     $20 = HEAP32[$13>>2]|0;
     $21 = ((($20)) + 36|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
     $$0$i$i$1$i$i = $23;
    } else {
     $24 = HEAP32[$16>>2]|0;
     $$0$i$i$1$i$i = $24;
    }
    $25 = ($$0$i$i$1$i$i|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 15;
     break;
    } else {
     if ($78) {
      $79 = $13;
      break;
     } else {
      $$pre$i$3$i$i$9 = $13;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($78) {
    $$pre$i$3$i$i$9 = 0;
    break;
   } else {
    $79 = 0;
   }
  }
  $26 = HEAP32[$__b>>2]|0;
  $27 = ((($26)) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($26)) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($28|0)==($30|0);
  if ($31) {
   $32 = HEAP32[$26>>2]|0;
   $33 = ((($32)) + 36|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (FUNCTION_TABLE_ii[$34 & 1023]($26)|0);
   $$0$i$i = $35;
  } else {
   $36 = HEAP32[$28>>2]|0;
   $$0$i$i = $36;
  }
  $37 = HEAP32[$__ct>>2]|0;
  $38 = ((($37)) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (FUNCTION_TABLE_iiii[$39 & 1023]($__ct,8192,$$0$i$i)|0);
  if (!($40)) {
   $$pre$i$3$i$i$9 = $79;
   break;
  }
  $41 = HEAP32[$__b>>2]|0;
  $42 = ((($41)) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($41)) + 16|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($43|0)==($45|0);
  if ($46) {
   $47 = HEAP32[$41>>2]|0;
   $48 = ((($47)) + 40|0);
   $49 = HEAP32[$48>>2]|0;
   (FUNCTION_TABLE_ii[$49 & 1023]($41)|0);
   continue;
  } else {
   $50 = ((($43)) + 4|0);
   HEAP32[$42>>2] = $50;
   continue;
  }
 }
 $51 = HEAP32[$__b>>2]|0;
 $52 = ($51|0)==(0|0);
 do {
  if ($52) {
   $80 = 1;
  } else {
   $53 = ((($51)) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($51)) + 16|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($54|0)==($56|0);
   if ($57) {
    $58 = HEAP32[$51>>2]|0;
    $59 = ((($58)) + 36|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (FUNCTION_TABLE_ii[$60 & 1023]($51)|0);
    $$0$i$i$i$i$1 = $61;
   } else {
    $62 = HEAP32[$54>>2]|0;
    $$0$i$i$i$i$1 = $62;
   }
   $63 = ($$0$i$i$i$i$1|0)==(-1);
   if ($63) {
    HEAP32[$__b>>2] = 0;
    $80 = 1;
    break;
   } else {
    $$pre$i$i$i$3 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i$4 = ($$pre$i$i$i$3|0)==(0|0);
    $80 = $phitmp$i$i$i$4;
    break;
   }
  }
 } while(0);
 $64 = ($$pre$i$3$i$i$9|0)==(0|0);
 do {
  if ($64) {
   label = 37;
  } else {
   $65 = ((($$pre$i$3$i$i$9)) + 12|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ((($$pre$i$3$i$i$9)) + 16|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($66|0)==($68|0);
   if ($69) {
    $70 = HEAP32[$$pre$i$3$i$i$9>>2]|0;
    $71 = ((($70)) + 36|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (FUNCTION_TABLE_ii[$72 & 1023]($$pre$i$3$i$i$9)|0);
    $$0$i$i$1$i$i$7 = $73;
   } else {
    $74 = HEAP32[$66>>2]|0;
    $$0$i$i$1$i$i$7 = $74;
   }
   $75 = ($$0$i$i$1$i$i$7|0)==(-1);
   if ($75) {
    HEAP32[$__e>>2] = 0;
    label = 37;
    break;
   } else {
    if ($80) {
     break;
    } else {
     label = 39;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 37) {
  if ($80) {
   label = 39;
  }
 }
 if ((label|0) == 39) {
  $76 = HEAP32[$__err>>2]|0;
  $77 = $76 | 2;
  HEAP32[$__err>>2] = $77;
 }
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = $6&255;
  $12 = $11 >>> 1;
  $23 = $12;
 } else {
  $9 = ((($5)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $23 = $10;
 }
 $13 = ((($5)) + 12|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 & 1;
 $16 = ($15<<24>>24)==(0);
 if ($16) {
  $19 = $14&255;
  $20 = $19 >>> 1;
  $22 = $20;
 } else {
  $17 = ((($5)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $22 = $18;
 }
 $21 = (0 - ($22))|0;
 $24 = ($23|0)==($21|0);
 do {
  if ($24) {
   $25 = HEAP32[$__err>>2]|0;
   $26 = $25 | 4;
   HEAP32[$__err>>2] = $26;
  } else {
   $27 = HEAP32[$__e>>2]|0;
   HEAP32[$0>>2] = $27;
   $28 = ((($5)) + 24|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   $29 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$28,$__ct,$__err,0)|0);
   $30 = ($29|0)==($5|0);
   $31 = HEAP32[$__h>>2]|0;
   $32 = ($31|0)==(12);
   $or$cond = $30 & $32;
   if ($or$cond) {
    HEAP32[$__h>>2] = 0;
    break;
   }
   $33 = $29;
   $34 = $5;
   $35 = (($33) - ($34))|0;
   $36 = ($35|0)==(12);
   $37 = ($31|0)<(12);
   $or$cond3 = $37 & $36;
   if ($or$cond3) {
    $38 = (($31) + 12)|0;
    HEAP32[$__h>>2] = $38;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__s,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__s = $__s|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(61);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__s>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,1)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(7);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__w>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (($2) + -1900)|0;
  HEAP32[$__y>>2] = $6;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$1$i$i = 0, $$0$i$i$1$i$i$7 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$1 = 0, $$pre = 0, $$pre$i$3$i$i$915 = 0, $$pre$i$i$i = 0, $$pre$i$i$i$3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i$4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $83 = 1;
  } else {
   $2 = ((($0)) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ((($0)) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = ((($7)) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $83 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $83 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = ((($13)) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($13)) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = ((($20)) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
    $$0$i$i$1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i$1$i$i = $24;
   }
   $25 = ($$0$i$i$1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($83) {
     $$pre$i$3$i$i$915 = $13;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($83) {
   label = 16;
  } else {
   $$pre$i$3$i$i$915 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
  }
  else if ((label|0) == 17) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($28)) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = ((($34)) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP32[$30>>2]|0;
    $$0$i$i = $38;
   }
   $39 = HEAP32[$__ct>>2]|0;
   $40 = ((($39)) + 52|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($__ct,$$0$i$i,0)|0);
   $43 = ($42<<24>>24)==(37);
   if (!($43)) {
    $44 = HEAP32[$__err>>2]|0;
    $45 = $44 | 4;
    HEAP32[$__err>>2] = $45;
    break;
   }
   $46 = HEAP32[$__b>>2]|0;
   $47 = ((($46)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ((($46)) + 16|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($48|0)==($50|0);
   if ($51) {
    $53 = HEAP32[$46>>2]|0;
    $54 = ((($53)) + 40|0);
    $55 = HEAP32[$54>>2]|0;
    (FUNCTION_TABLE_ii[$55 & 1023]($46)|0);
    $$pre = HEAP32[$__b>>2]|0;
    $56 = ($$pre|0)==(0|0);
    if ($56) {
     $84 = 1;
    } else {
     $58 = $$pre;
     label = 25;
    }
   } else {
    $52 = ((($48)) + 4|0);
    HEAP32[$47>>2] = $52;
    $58 = $46;
    label = 25;
   }
   do {
    if ((label|0) == 25) {
     $57 = ((($58)) + 12|0);
     $59 = HEAP32[$57>>2]|0;
     $60 = ((($58)) + 16|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($59|0)==($61|0);
     if ($62) {
      $63 = HEAP32[$58>>2]|0;
      $64 = ((($63)) + 36|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = (FUNCTION_TABLE_ii[$65 & 1023]($58)|0);
      $$0$i$i$i$i$1 = $66;
     } else {
      $67 = HEAP32[$59>>2]|0;
      $$0$i$i$i$i$1 = $67;
     }
     $68 = ($$0$i$i$i$i$1|0)==(-1);
     if ($68) {
      HEAP32[$__b>>2] = 0;
      $84 = 1;
      break;
     } else {
      $$pre$i$i$i$3 = HEAP32[$__b>>2]|0;
      $phitmp$i$i$i$4 = ($$pre$i$i$i$3|0)==(0|0);
      $84 = $phitmp$i$i$i$4;
      break;
     }
    }
   } while(0);
   $69 = ($$pre$i$3$i$i$915|0)==(0|0);
   do {
    if ($69) {
     label = 37;
    } else {
     $70 = ((($$pre$i$3$i$i$915)) + 12|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($$pre$i$3$i$i$915)) + 16|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($71|0)==($73|0);
     if ($74) {
      $75 = HEAP32[$$pre$i$3$i$i$915>>2]|0;
      $76 = ((($75)) + 36|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = (FUNCTION_TABLE_ii[$77 & 1023]($$pre$i$3$i$i$915)|0);
      $$0$i$i$1$i$i$7 = $78;
     } else {
      $79 = HEAP32[$71>>2]|0;
      $$0$i$i$1$i$i$7 = $79;
     }
     $80 = ($$0$i$i$1$i$i$7|0)==(-1);
     if ($80) {
      HEAP32[$__e>>2] = 0;
      label = 37;
      break;
     } else {
      if ($84) {
       break L22;
      } else {
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 37) {
    if (!($84)) {
     break;
    }
   }
   $81 = HEAP32[$__err>>2]|0;
   $82 = $81 | 2;
   HEAP32[$__err>>2] = $82;
  }
 } while(0);
 return;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 return;
}
function __ZNSt3__110__time_putD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 __THREW__ = 0;
 $1 = (invoke_i(417)|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if (!($3)) {
   $4 = ($0|0)==($1|0);
   if (!($4)) {
    $5 = HEAP32[$this>>2]|0;
    __THREW__ = 0;
    invoke_vi(431,($5|0));
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if ($7) {
     break;
    }
   }
   return;
  }
 } while(0);
 $8 = ___cxa_find_matching_catch(0|0)|0;
 $9 = tempRet0;
 ___clang_call_terminate($8);
 // unreachable;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$0$i$i = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 4|0;
 $__ne = sp;
 $2 = ((($__nar)) + 100|0);
 HEAP32[$__ne>>2] = $2;
 $3 = ((($this)) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $4 = HEAP32[$__ne>>2]|0;
 $5 = HEAP32[$__s>>2]|0;
 $$0$i$i = $__nar;$8 = $5;
 while(1) {
  $6 = ($$0$i$i|0)==($4|0);
  if ($6) {
   $$lcssa = $8;
   break;
  }
  $7 = HEAP8[$$0$i$i>>0]|0;
  $9 = ($8|0)==(0|0);
  do {
   if ($9) {
    $23 = 0;
   } else {
    $10 = ((($8)) + 24|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($8)) + 28|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($11|0)==($13|0);
    if ($14) {
     $16 = HEAP32[$8>>2]|0;
     $17 = ((($16)) + 52|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = $7&255;
     $20 = (FUNCTION_TABLE_iii[$18 & 511]($8,$19)|0);
     $21 = ($20|0)==(-1);
     $$$i = $21 ? 0 : $8;
     $23 = $$$i;
     break;
    } else {
     $15 = ((($11)) + 1|0);
     HEAP32[$10>>2] = $15;
     HEAP8[$11>>0] = $7;
     $23 = $8;
     break;
    }
   }
  } while(0);
  $22 = ((($$0$i$i)) + 1|0);
  $$0$i$i = $22;$8 = $23;
 }
 STACKTOP = sp;return ($$lcssa|0);
}
function __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this,$__nb,$__ne,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fmt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $fmt = sp;
 HEAP8[$fmt>>0] = 37;
 $0 = ((($fmt)) + 1|0);
 HEAP8[$0>>0] = $__fmt;
 $1 = ((($fmt)) + 2|0);
 HEAP8[$1>>0] = $__mod;
 $2 = ((($fmt)) + 3|0);
 HEAP8[$2>>0] = 0;
 $3 = ($__mod<<24>>24)==(0);
 if (!($3)) {
  HEAP8[$0>>0] = $__mod;
  HEAP8[$1>>0] = $__fmt;
 }
 $4 = HEAP32[$__ne>>2]|0;
 $5 = $__nb;
 $6 = (($4) - ($5))|0;
 $7 = HEAP32[$this>>2]|0;
 $8 = (_strftime_l(($__nb|0),($6|0),($fmt|0),($__tm|0),($7|0))|0);
 $9 = (($__nb) + ($8)|0);
 HEAP32[$__ne>>2] = $9;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 8|0;
 $__ne = sp;
 $2 = ((($__nar)) + 400|0);
 HEAP32[$__ne>>2] = $2;
 $3 = ((($this)) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $4 = HEAP32[$__ne>>2]|0;
 $5 = HEAP32[$__s>>2]|0;
 $$0$i$i = $__nar;$8 = $5;
 while(1) {
  $6 = ($$0$i$i|0)==($4|0);
  if ($6) {
   $$lcssa = $8;
   break;
  }
  $7 = HEAP32[$$0$i$i>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $22 = 0;
  } else {
   $10 = ((($8)) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($8)) + 28|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($11|0)==($13|0);
   if ($14) {
    $15 = HEAP32[$8>>2]|0;
    $16 = ((($15)) + 52|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (FUNCTION_TABLE_iii[$17 & 511]($8,$7)|0);
    $$0$i$i$i$i = $18;
   } else {
    $19 = ((($11)) + 4|0);
    HEAP32[$10>>2] = $19;
    HEAP32[$11>>2] = $7;
    $$0$i$i$i$i = $7;
   }
   $20 = ($$0$i$i$i$i|0)==(-1);
   $$$i = $20 ? 0 : $8;
   $22 = $$$i;
  }
  $21 = ((($$0$i$i)) + 4|0);
  $$0$i$i = $21;$8 = $22;
 }
 STACKTOP = sp;return ($$lcssa|0);
}
function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this,$__wb,$__we,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__wb = $__wb|0;
 $__we = $__we|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__nb = 0, $__ne = 0, $mb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 16|0;
 $__ne = sp + 12|0;
 $mb = sp;
 $__nb = sp + 8|0;
 $0 = ((($__nar)) + 100|0);
 HEAP32[$__ne>>2] = $0;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $1 = $mb;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 HEAP32[$__nb>>2] = $__nar;
 $5 = HEAP32[$__we>>2]|0;
 $6 = $__wb;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 2;
 $9 = HEAP32[$this>>2]|0;
 $10 = (_uselocale($9)|0);
 __THREW__ = 0;
 $11 = (invoke_iiiii(432,($__wb|0),($__nb|0),($8|0),($mb|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $19 = ___cxa_find_matching_catch()|0;
  $20 = tempRet0;
  $21 = ($10|0)==(0|0);
  if (!($21)) {
   __THREW__ = 0;
   (invoke_ii(433,($10|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    $24 = ___cxa_find_matching_catch(0|0)|0;
    $25 = tempRet0;
    ___clang_call_terminate($24);
    // unreachable;
   }
  }
  ___resumeException($19|0);
  // unreachable;
 }
 $14 = ($10|0)==(0|0);
 if (!($14)) {
  __THREW__ = 0;
  (invoke_ii(433,($10|0))|0);
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $17 = ___cxa_find_matching_catch(0|0)|0;
   $18 = tempRet0;
   ___clang_call_terminate($17);
   // unreachable;
  }
 }
 $26 = ($11|0)==(-1);
 if ($26) {
  __ZNSt3__121__throw_runtime_errorEPKc(20923);
  // unreachable;
 } else {
  $27 = (($__wb) + ($11<<2)|0);
  HEAP32[$__we>>2] = $27;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110moneypunctIcLb0EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__110moneypunctIcLb1EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__110moneypunctIwLb0EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__110moneypunctIwLb1EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$01 = 0, $$114 = 0, $$115 = 0, $$1212 = 0, $$1213 = 0, $$byval_copy = 0, $$phi$trans$insert$pre$phiZZZZ2D = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre16 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__nc$2$lcssa = 0, $__neg = 0, $__w$0 = 0, $__wb = 0;
 var $__wbuf = 0, $__wn = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $__wbuf = sp + 140|0;
 $__wb = sp + 16|0;
 $__wn = sp + 12|0;
 $__loc = sp + 8|0;
 $__neg = sp + 138|0;
 $0 = sp + 4|0;
 $__atoms = sp + 128|0;
 $__nbuf = sp + 28|0;
 $1 = $__wbuf;
 HEAP32[$__wb>>2] = $1;
 $2 = ((($__wb)) + 4|0);
 HEAP32[$2>>2] = (434);
 $3 = ((($__wbuf)) + 100|0);
 __THREW__ = 0;
 $4 = (invoke_ii(353,($__iob|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $33 = ___cxa_find_matching_catch()|0;
  $34 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$114 = $33;$$1212 = $34;$110 = 434;$111 = $__wbuf;
  label = 47;
 } else {
  HEAP32[$__loc>>2] = $4;
  __THREW__ = 0;
  $7 = (invoke_iii(354,($__loc|0),(8588|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  L4: do {
   if ($9) {
    label = 10;
   } else {
    HEAP8[$__neg>>0] = 0;
    $10 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $10;
    $11 = ((($__iob)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
    $13 = (invoke_iiiiiiiiiiii(435,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($12|0),($__err|0),($__neg|0),($7|0),($__wb|0),($__wn|0),($3|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if ($15) {
     label = 10;
    } else {
     L7: do {
      if ($13) {
       $16 = HEAP32[$7>>2]|0;
       $17 = ((($16)) + 32|0);
       $18 = HEAP32[$17>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($18|0,($7|0),(20944|0),((20954)|0),($__atoms|0))|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if ($20) {
        label = 10;
        break L4;
       }
       $21 = HEAP32[$__wn>>2]|0;
       $22 = HEAP32[$__wb>>2]|0;
       $23 = (($21) - ($22))|0;
       $24 = ($23|0)>(98);
       $25 = $22;
       $26 = $21;
       if ($24) {
        $27 = (($23) + 2)|0;
        $28 = (_malloc($27)|0);
        $29 = $28;
        $30 = ($28|0)==(0|0);
        if ($30) {
         __THREW__ = 0;
         invoke_v(423);
         $31 = __THREW__; __THREW__ = 0;
         $32 = $31&1;
         if ($32) {
          $39 = $29;
         } else {
          $64 = $29;$__nc$0 = 0;
          label = 13;
         }
        } else {
         $64 = $29;$__nc$0 = $28;
         label = 13;
        }
       } else {
        $64 = 0;$__nc$0 = $__nbuf;
        label = 13;
       }
       do {
        if ((label|0) == 13) {
         $42 = HEAP8[$__neg>>0]|0;
         $43 = ($42<<24>>24)==(0);
         if ($43) {
          $__nc$1 = $__nc$0;
         } else {
          $44 = ((($__nc$0)) + 1|0);
          HEAP8[$__nc$0>>0] = 45;
          $__nc$1 = $44;
         }
         $45 = ((($__atoms)) + 10|0);
         $46 = $__atoms;
         $48 = $26;$__nc$2 = $__nc$1;$__w$0 = $25;
         while(1) {
          $47 = ($__w$0>>>0)<($48>>>0);
          if (!($47)) {
           $__nc$2$lcssa = $__nc$2;
           break;
          }
          $49 = HEAP8[$__w$0>>0]|0;
          $$0$i = $__atoms;
          while(1) {
           $50 = ($$0$i|0)==($45|0);
           if ($50) {
            $$0$lcssa$i = $45;
            break;
           }
           $51 = HEAP8[$$0$i>>0]|0;
           $52 = ($51<<24>>24)==($49<<24>>24);
           if ($52) {
            $$0$lcssa$i = $$0$i;
            break;
           }
           $53 = ((($$0$i)) + 1|0);
           $$0$i = $53;
          }
          $54 = $$0$lcssa$i;
          $55 = (($54) - ($46))|0;
          $56 = (20944 + ($55)|0);
          $57 = HEAP8[$56>>0]|0;
          HEAP8[$__nc$2>>0] = $57;
          $58 = ((($__w$0)) + 1|0);
          $59 = ((($__nc$2)) + 1|0);
          $$pre = HEAP32[$__wn>>2]|0;
          $48 = $$pre;$__nc$2 = $59;$__w$0 = $58;
         }
         HEAP8[$__nc$2$lcssa>>0] = 0;
         HEAP32[$vararg_buffer>>2] = $__v;
         $60 = (_sscanf($__nbuf,20955,$vararg_buffer)|0);
         $61 = ($60|0)==(1);
         if (!($61)) {
          __THREW__ = 0;
          invoke_vi(436,(20959|0));
          $62 = __THREW__; __THREW__ = 0;
          $63 = $62&1;
          if ($63) {
           $39 = $64;
           break;
          }
         }
         $65 = ($64|0)==(0);
         if (!($65)) {
          $66 = $64;
          _free($66);
         }
         break L7;
        }
       } while(0);
       $37 = ___cxa_find_matching_catch()|0;
       $38 = tempRet0;
       $40 = ($39|0)==(0);
       if ($40) {
        $$0 = $37;$$01 = $38;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
        break L4;
       }
       $41 = $39;
       _free($41);
       $$0 = $37;$$01 = $38;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
       break L4;
      }
     } while(0);
     $67 = HEAP32[$__b>>2]|0;
     $68 = ($67|0)==(0|0);
     do {
      if ($68) {
       $81 = 0;
      } else {
       $69 = ((($67)) + 12|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = ((($67)) + 16|0);
       $72 = HEAP32[$71>>2]|0;
       $73 = ($70|0)==($72|0);
       if ($73) {
        $74 = HEAP32[$67>>2]|0;
        $75 = ((($74)) + 36|0);
        $76 = HEAP32[$75>>2]|0;
        __THREW__ = 0;
        $77 = (invoke_ii($76|0,($67|0))|0);
        $78 = __THREW__; __THREW__ = 0;
        $79 = $78&1;
        if ($79) {
         label = 10;
         break L4;
        }
        $80 = ($77|0)==(-1);
        if ($80) {
         HEAP32[$__b>>2] = 0;
         $81 = 0;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b>>2]|0;
         $81 = $$pre$i$i$i;
         break;
        }
       } else {
        $81 = $67;
       }
      }
     } while(0);
     $82 = ($81|0)==(0|0);
     $83 = HEAP32[$__e>>2]|0;
     $84 = ($83|0)==(0|0);
     do {
      if ($84) {
       label = 39;
      } else {
       $85 = ((($83)) + 12|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = ((($83)) + 16|0);
       $88 = HEAP32[$87>>2]|0;
       $89 = ($86|0)==($88|0);
       if ($89) {
        $90 = HEAP32[$83>>2]|0;
        $91 = ((($90)) + 36|0);
        $92 = HEAP32[$91>>2]|0;
        __THREW__ = 0;
        $93 = (invoke_ii($92|0,($83|0))|0);
        $94 = __THREW__; __THREW__ = 0;
        $95 = $94&1;
        if ($95) {
         label = 10;
         break L4;
        }
        $96 = ($93|0)==(-1);
        if ($96) {
         HEAP32[$__e>>2] = 0;
         label = 39;
         break;
        }
       }
       if (!($82)) {
        label = 40;
       }
      }
     } while(0);
     if ((label|0) == 39) {
      if ($82) {
       label = 40;
      }
     }
     if ((label|0) == 40) {
      $97 = HEAP32[$__err>>2]|0;
      $98 = $97 | 2;
      HEAP32[$__err>>2] = $98;
     }
     $99 = HEAP32[$__b>>2]|0;
     $100 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($100)|0);
     $101 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $102 = ($101|0)==(0|0);
     if (!($102)) {
      $103 = HEAP32[$2>>2]|0;
      __THREW__ = 0;
      invoke_vi($103|0,($101|0));
      $104 = __THREW__; __THREW__ = 0;
      $105 = $104&1;
      if ($105) {
       $106 = ___cxa_find_matching_catch(0|0)|0;
       $107 = tempRet0;
       ___clang_call_terminate($106);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($99|0);
    }
   }
  } while(0);
  if ((label|0) == 10) {
   $35 = ___cxa_find_matching_catch()|0;
   $36 = tempRet0;
   $$0 = $35;$$01 = $36;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
  }
  $108 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($108)|0);
  $$pre8 = HEAP32[$$phi$trans$insert$pre$phiZZZZ2D>>2]|0;
  HEAP32[$$phi$trans$insert$pre$phiZZZZ2D>>2] = 0;
  $109 = ($$pre8|0)==(0|0);
  if ($109) {
   $$115 = $$0;$$1213 = $$01;
  } else {
   $$pre16 = HEAP32[$2>>2]|0;
   $$114 = $$0;$$1212 = $$01;$110 = $$pre16;$111 = $$pre8;
   label = 47;
  }
 }
 if ((label|0) == 47) {
  __THREW__ = 0;
  invoke_vi($110|0,($111|0));
  $112 = __THREW__; __THREW__ = 0;
  $113 = $112&1;
  if ($113) {
   $114 = ___cxa_find_matching_catch(0|0)|0;
   $115 = tempRet0;
   ___clang_call_terminate($114);
   // unreachable;
  } else {
   $$115 = $$114;$$1213 = $$1212;
  }
 }
 ___resumeException($$115|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__112__do_nothingEPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$0$i$i = 0, $$0$i$i$109 = 0, $$0$i$i$112 = 0, $$0$i$i$129 = 0, $$0$i$i$136 = 0, $$0$i$i$145 = 0, $$0$i$i$155 = 0, $$0$i$i$172 = 0, $$0$i$i$57 = 0, $$0$i$i$60 = 0, $$0$i$i$73 = 0, $$0$i$i$80 = 0, $$0$i$i$83 = 0, $$0$i$i$90 = 0, $$10 = 0, $$lcssa = 0, $$lcssa277 = 0, $$lcssa395 = 0, $$lcssa397 = 0, $$phi$trans$insert = 0;
 var $$phi$trans$insert308 = 0, $$pre = 0, $$pre$i$2$i$i$123 = 0, $$pre$i$2$i$i$163 = 0, $$pre$i$2$i$i$163290 = 0, $$pre$i$2$i$i$163292 = 0, $$pre$i$2$i$i$180 = 0, $$pre$i$2$i$i$180302 = 0, $$pre$i$2$i$i$180303 = 0, $$pre$i$2$i$i$67 = 0, $$pre$i$2$i$i$67312 = 0, $$pre$i$2$i$i$67314 = 0, $$pre$i$2$i$i$99 = 0, $$pre$i$2$i$i$99298$ph = 0, $$pre$i$2$i$i$99298317 = 0, $$pre$i$i$i = 0, $$pre$i$i$i$119 = 0, $$pre$i$i$i$159 = 0, $$pre$i$i$i$176 = 0, $$pre$i$i$i$47 = 0;
 var $$pre$i$i$i$63 = 0, $$pre$i$i$i$95 = 0, $$pre295 = 0, $$pre297 = 0, $$pre300 = 0, $$pre301 = 0, $$pre305 = 0, $$pre306 = 0, $$pre307 = 0, $$pre309 = 0, $$pre310 = 0, $$pre311 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0;
 var $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0;
 var $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0;
 var $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0;
 var $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0;
 var $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0;
 var $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0;
 var $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0;
 var $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0;
 var $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0;
 var $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0;
 var $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0;
 var $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0;
 var $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0;
 var $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0;
 var $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0;
 var $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0;
 var $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0;
 var $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0;
 var $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0;
 var $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0;
 var $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0;
 var $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0;
 var $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0;
 var $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0;
 var $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0;
 var $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0;
 var $__i$0 = 0, $__i$0$i$i = 0, $__i$0$i$i$29 = 0, $__i$0$i$i$32 = 0, $__i$0$i$i$36 = 0, $__i$0$i$i$41 = 0, $__ng$0 = 0, $__ng$0$lcssa396 = 0, $__ng$2$ph = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$023 = 0, $__p$0 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$022 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0 = 0;
 var $__trailing_sign$0$lcssa = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond28 = 0, $exitcond$i$i = 0, $exitcond$i$i$30 = 0, $exitcond$i$i$33 = 0, $exitcond$i$i$37 = 0, $exitcond$i$i$42 = 0, $isascii1$i = 0, $isascii1$i$153 = 0, $isascii1$i$186 = 0, $isascii1$i$76 = 0, $isascii1$i$88 = 0, $lpad$phi$index = 0, $lpad$phi$index7 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond14 = 0;
 var $or$cond25 = 0, $sext = 0, $sext244 = 0, $sext245 = 0, $sext246 = 0, $switch = 0, $tmp$i$i$101 = 0, $tmp$i$i$165 = 0, $tmp$i$i$182 = 0, $tmp$i$i$69 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 488|0;
 $__gbuf = sp + 88|0;
 $__gb = sp + 80|0;
 $__gn = sp + 72|0;
 $__ge = sp + 68|0;
 $__pat = sp + 496|0;
 $__dp = sp + 493|0;
 $__ts = sp + 492|0;
 $__grp = sp + 56|0;
 $__sym = sp + 44|0;
 $__psn = sp + 32|0;
 $__nsn = sp + 20|0;
 $__spaces = sp + 8|0;
 $__fd = sp + 4|0;
 $__et = sp;
 HEAP32[$0>>2] = $__we;
 $1 = $__gbuf;
 HEAP32[$__gb>>2] = $1;
 $2 = ((($__gb)) + 4|0);
 HEAP32[$2>>2] = (434);
 HEAP32[$__gn>>2] = $__gbuf;
 $3 = ((($__gbuf)) + 400|0);
 HEAP32[$__ge>>2] = $3;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $4 = (($__grp) + ($__i$0$i$i<<2)|0);
  HEAP32[$4>>2] = 0;
  $5 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $5;
 }
 $__i$0$i$i$29 = 0;
 while(1) {
  $exitcond$i$i$30 = ($__i$0$i$i$29|0)==(3);
  if ($exitcond$i$i$30) {
   break;
  }
  $6 = (($__sym) + ($__i$0$i$i$29<<2)|0);
  HEAP32[$6>>2] = 0;
  $7 = (($__i$0$i$i$29) + 1)|0;
  $__i$0$i$i$29 = $7;
 }
 $__i$0$i$i$32 = 0;
 while(1) {
  $exitcond$i$i$33 = ($__i$0$i$i$32|0)==(3);
  if ($exitcond$i$i$33) {
   break;
  }
  $8 = (($__psn) + ($__i$0$i$i$32<<2)|0);
  HEAP32[$8>>2] = 0;
  $9 = (($__i$0$i$i$32) + 1)|0;
  $__i$0$i$i$32 = $9;
 }
 $__i$0$i$i$36 = 0;
 while(1) {
  $exitcond$i$i$37 = ($__i$0$i$i$36|0)==(3);
  if ($exitcond$i$i$37) {
   break;
  }
  $10 = (($__nsn) + ($__i$0$i$i$36<<2)|0);
  HEAP32[$10>>2] = 0;
  $11 = (($__i$0$i$i$36) + 1)|0;
  $__i$0$i$i$36 = $11;
 }
 $__i$0$i$i$41 = 0;
 while(1) {
  $exitcond$i$i$42 = ($__i$0$i$i$41|0)==(3);
  if ($exitcond$i$i$42) {
   break;
  }
  $12 = (($__spaces) + ($__i$0$i$i$41<<2)|0);
  HEAP32[$12>>2] = 0;
  $13 = (($__i$0$i$i$41) + 1)|0;
  $__i$0$i$i$41 = $13;
 }
 __THREW__ = 0;
 invoke_viiiiiiiiii(437,($__intl|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 L21: do {
  if ($15) {
   $77 = ___cxa_find_matching_catch()|0;
   $78 = tempRet0;
   $lpad$phi$index = $77;$lpad$phi$index7 = $78;
  } else {
   $16 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $16;
   $17 = ((($__ct)) + 8|0);
   $18 = ((($__psn)) + 4|0);
   $19 = ((($__nsn)) + 4|0);
   $20 = ((($__nsn)) + 8|0);
   $21 = ((($__nsn)) + 1|0);
   $22 = ((($__psn)) + 8|0);
   $23 = ((($__psn)) + 1|0);
   $24 = $__flags & 512;
   $25 = ($24|0)!=(0);
   $26 = ((($__sym)) + 8|0);
   $27 = ((($__sym)) + 1|0);
   $28 = ((($__sym)) + 4|0);
   $29 = ((($__spaces)) + 4|0);
   $30 = ((($__spaces)) + 8|0);
   $31 = ((($__spaces)) + 1|0);
   $32 = ((($__pat)) + 3|0);
   $33 = ((($__grp)) + 4|0);
   $869 = $__gbuf;$__p$0 = 0;$__trailing_sign$0 = 0;
   L24: while(1) {
    $34 = ($__p$0>>>0)<(4);
    if (!($34)) {
     $$lcssa397 = $869;$__trailing_sign$0$lcssa = $__trailing_sign$0;
     label = 251;
     break;
    }
    $35 = HEAP32[$__b>>2]|0;
    $36 = ($35|0)==(0|0);
    do {
     if ($36) {
      $49 = 0;
     } else {
      $37 = ((($35)) + 12|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = ((($35)) + 16|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ($38|0)==($40|0);
      if ($41) {
       $42 = HEAP32[$35>>2]|0;
       $43 = ((($42)) + 36|0);
       $44 = HEAP32[$43>>2]|0;
       __THREW__ = 0;
       $45 = (invoke_ii($44|0,($35|0))|0);
       $46 = __THREW__; __THREW__ = 0;
       $47 = $46&1;
       if ($47) {
        label = 38;
        break L24;
       }
       $48 = ($45|0)==(-1);
       if ($48) {
        HEAP32[$__b>>2] = 0;
        $49 = 0;
        break;
       } else {
        $$pre$i$i$i$47 = HEAP32[$__b>>2]|0;
        $49 = $$pre$i$i$i$47;
        break;
       }
      } else {
       $49 = $35;
      }
     }
    } while(0);
    $50 = ($49|0)==(0|0);
    $51 = HEAP32[$__e>>2]|0;
    $52 = ($51|0)==(0|0);
    do {
     if ($52) {
      label = 31;
     } else {
      $53 = ((($51)) + 12|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = ((($51)) + 16|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = ($54|0)==($56|0);
      if (!($57)) {
       if ($50) {
        $870 = $51;
        break;
       } else {
        $$lcssa397 = $869;$__trailing_sign$0$lcssa = $__trailing_sign$0;
        label = 251;
        break L24;
       }
      }
      $58 = HEAP32[$51>>2]|0;
      $59 = ((($58)) + 36|0);
      $60 = HEAP32[$59>>2]|0;
      __THREW__ = 0;
      $61 = (invoke_ii($60|0,($51|0))|0);
      $62 = __THREW__; __THREW__ = 0;
      $63 = $62&1;
      if ($63) {
       label = 38;
       break L24;
      }
      $64 = ($61|0)==(-1);
      if ($64) {
       HEAP32[$__e>>2] = 0;
       label = 31;
       break;
      } else {
       if ($50) {
        $870 = $51;
        break;
       } else {
        $$lcssa397 = $869;$__trailing_sign$0$lcssa = $__trailing_sign$0;
        label = 251;
        break L24;
       }
      }
     }
    } while(0);
    if ((label|0) == 31) {
     label = 0;
     if ($50) {
      $$lcssa397 = $869;$__trailing_sign$0$lcssa = $__trailing_sign$0;
      label = 251;
      break;
     } else {
      $870 = 0;
     }
    }
    $86 = (($__pat) + ($__p$0)|0);
    $87 = HEAP8[$86>>0]|0;
    $88 = $87 << 24 >> 24;
    L47: do {
     switch ($88|0) {
     case 1:  {
      $cond28 = ($__p$0|0)==(3);
      if ($cond28) {
       $871 = $869;$__trailing_sign$1 = $__trailing_sign$0;
      } else {
       $90 = HEAP32[$__b>>2]|0;
       $91 = ((($90)) + 12|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = ((($90)) + 16|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = ($92|0)==($94|0);
       if ($95) {
        $96 = HEAP32[$90>>2]|0;
        $97 = ((($96)) + 36|0);
        $98 = HEAP32[$97>>2]|0;
        __THREW__ = 0;
        $99 = (invoke_ii($98|0,($90|0))|0);
        $100 = __THREW__; __THREW__ = 0;
        $101 = $100&1;
        if ($101) {
         label = 38;
         break L24;
        } else {
         $$0$i$i$57 = $99;
        }
       } else {
        $102 = HEAP8[$92>>0]|0;
        $103 = $102&255;
        $$0$i$i$57 = $103;
       }
       $104 = $$0$i$i$57&255;
       $isascii1$i = ($104<<24>>24)>(-1);
       if (!($isascii1$i)) {
        label = 56;
        break L24;
       }
       $sext246 = $$0$i$i$57 << 24;
       $105 = $sext246 >> 24;
       $106 = HEAP32[$17>>2]|0;
       $107 = (($106) + ($105<<1)|0);
       $108 = HEAP16[$107>>1]|0;
       $109 = $108 & 8192;
       $110 = ($109<<16>>16)==(0);
       if ($110) {
        label = 56;
        break L24;
       }
       $111 = HEAP32[$__b>>2]|0;
       $112 = ((($111)) + 12|0);
       $113 = HEAP32[$112>>2]|0;
       $114 = ((($111)) + 16|0);
       $115 = HEAP32[$114>>2]|0;
       $116 = ($113|0)==($115|0);
       if ($116) {
        $117 = HEAP32[$111>>2]|0;
        $118 = ((($117)) + 40|0);
        $119 = HEAP32[$118>>2]|0;
        __THREW__ = 0;
        $120 = (invoke_ii($119|0,($111|0))|0);
        $121 = __THREW__; __THREW__ = 0;
        $122 = $121&1;
        if ($122) {
         label = 38;
         break L24;
        } else {
         $$0$i$i$60 = $120;
        }
       } else {
        $123 = ((($113)) + 1|0);
        HEAP32[$112>>2] = $123;
        $124 = HEAP8[$113>>0]|0;
        $125 = $124&255;
        $$0$i$i$60 = $125;
       }
       $126 = $$0$i$i$60&255;
       __THREW__ = 0;
       invoke_vii(375,($__spaces|0),($126|0));
       $127 = __THREW__; __THREW__ = 0;
       $128 = $127&1;
       if ($128) {
        label = 38;
        break L24;
       } else {
        $$pre$i$2$i$i$67 = $870;$148 = $870;
        label = 58;
       }
      }
      break;
     }
     case 0:  {
      $131 = ($__p$0|0)==(3);
      if ($131) {
       $871 = $869;$__trailing_sign$1 = $__trailing_sign$0;
      } else {
       $$pre$i$2$i$i$67 = $870;$148 = $870;
       label = 58;
      }
      break;
     }
     case 3:  {
      $202 = HEAP8[$__psn>>0]|0;
      $203 = $202 & 1;
      $204 = ($203<<24>>24)==(0);
      $205 = HEAP32[$18>>2]|0;
      $206 = $202&255;
      $207 = $206 >>> 1;
      $208 = $204 ? $207 : $205;
      $209 = HEAP8[$__nsn>>0]|0;
      $210 = $209 & 1;
      $211 = ($210<<24>>24)==(0);
      $212 = HEAP32[$19>>2]|0;
      $213 = $209&255;
      $214 = $213 >>> 1;
      $215 = $211 ? $214 : $212;
      $216 = (0 - ($215))|0;
      $217 = ($208|0)==($216|0);
      if ($217) {
       $871 = $869;$__trailing_sign$1 = $__trailing_sign$0;
      } else {
       $218 = ($208|0)==(0);
       if ($218) {
        $262 = HEAP32[$__b>>2]|0;
        $263 = ((($262)) + 12|0);
        $264 = HEAP32[$263>>2]|0;
        $265 = ((($262)) + 16|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = ($264|0)==($266|0);
        if ($267) {
         $268 = HEAP32[$262>>2]|0;
         $269 = ((($268)) + 36|0);
         $270 = HEAP32[$269>>2]|0;
         __THREW__ = 0;
         $271 = (invoke_ii($270|0,($262|0))|0);
         $272 = __THREW__; __THREW__ = 0;
         $273 = $272&1;
         if ($273) {
          label = 38;
          break L24;
         }
         $$pre311 = HEAP8[$__nsn>>0]|0;
         $$0$i$i$129 = $271;$278 = $$pre311;
        } else {
         $274 = HEAP8[$264>>0]|0;
         $275 = $274&255;
         $$0$i$i$129 = $275;$278 = $209;
        }
        $276 = $$0$i$i$129&255;
        $277 = $278 & 1;
        $279 = ($277<<24>>24)==(0);
        $280 = HEAP32[$20>>2]|0;
        $281 = $279 ? $21 : $280;
        $282 = HEAP8[$281>>0]|0;
        $283 = ($276<<24>>24)==($282<<24>>24);
        if (!($283)) {
         $871 = $869;$__trailing_sign$1 = $__trailing_sign$0;
         break L47;
        }
        $284 = HEAP32[$__b>>2]|0;
        $285 = ((($284)) + 12|0);
        $286 = HEAP32[$285>>2]|0;
        $287 = ((($284)) + 16|0);
        $288 = HEAP32[$287>>2]|0;
        $289 = ($286|0)==($288|0);
        if ($289) {
         $290 = HEAP32[$284>>2]|0;
         $291 = ((($290)) + 40|0);
         $292 = HEAP32[$291>>2]|0;
         __THREW__ = 0;
         (invoke_ii($292|0,($284|0))|0);
         $293 = __THREW__; __THREW__ = 0;
         $294 = $293&1;
         if ($294) {
          label = 38;
          break L24;
         }
        } else {
         $295 = ((($286)) + 1|0);
         HEAP32[$285>>2] = $295;
        }
        HEAP8[$__neg>>0] = 1;
        $296 = HEAP8[$__nsn>>0]|0;
        $297 = $296 & 1;
        $298 = ($297<<24>>24)==(0);
        $299 = HEAP32[$19>>2]|0;
        $300 = $296&255;
        $301 = $300 >>> 1;
        $302 = $298 ? $301 : $299;
        $303 = ($302>>>0)>(1);
        $__nsn$__trailing_sign$0 = $303 ? $__nsn : $__trailing_sign$0;
        $871 = $869;$__trailing_sign$1 = $__nsn$__trailing_sign$0;
        break L47;
       }
       $219 = ($215|0)==(0);
       $220 = HEAP32[$__b>>2]|0;
       $221 = ((($220)) + 12|0);
       $222 = HEAP32[$221>>2]|0;
       $223 = ((($220)) + 16|0);
       $224 = HEAP32[$223>>2]|0;
       $225 = ($222|0)==($224|0);
       if ($219) {
        if ($225) {
         $226 = HEAP32[$220>>2]|0;
         $227 = ((($226)) + 36|0);
         $228 = HEAP32[$227>>2]|0;
         __THREW__ = 0;
         $229 = (invoke_ii($228|0,($220|0))|0);
         $230 = __THREW__; __THREW__ = 0;
         $231 = $230&1;
         if ($231) {
          label = 38;
          break L24;
         }
         $$pre310 = HEAP8[$__psn>>0]|0;
         $$0$i$i$109 = $229;$236 = $$pre310;
        } else {
         $232 = HEAP8[$222>>0]|0;
         $233 = $232&255;
         $$0$i$i$109 = $233;$236 = $202;
        }
        $234 = $$0$i$i$109&255;
        $235 = $236 & 1;
        $237 = ($235<<24>>24)==(0);
        $238 = HEAP32[$22>>2]|0;
        $239 = $237 ? $23 : $238;
        $240 = HEAP8[$239>>0]|0;
        $241 = ($234<<24>>24)==($240<<24>>24);
        if (!($241)) {
         HEAP8[$__neg>>0] = 1;
         $871 = $869;$__trailing_sign$1 = $__trailing_sign$0;
         break L47;
        }
        $242 = HEAP32[$__b>>2]|0;
        $243 = ((($242)) + 12|0);
        $244 = HEAP32[$243>>2]|0;
        $245 = ((($242)) + 16|0);
        $246 = HEAP32[$245>>2]|0;
        $247 = ($244|0)==($246|0);
        if ($247) {
         $248 = HEAP32[$242>>2]|0;
         $249 = ((($248)) + 40|0);
         $250 = HEAP32[$249>>2]|0;
         __THREW__ = 0;
         (invoke_ii($250|0,($242|0))|0);
         $251 = __THREW__; __THREW__ = 0;
         $252 = $251&1;
         if ($252) {
          label = 38;
          break L24;
         }
        } else {
         $253 = ((($244)) + 1|0);
         HEAP32[$243>>2] = $253;
        }
        $254 = HEAP8[$__psn>>0]|0;
        $255 = $254 & 1;
        $256 = ($255<<24>>24)==(0);
        $257 = HEAP32[$18>>2]|0;
        $258 = $254&255;
        $259 = $258 >>> 1;
        $260 = $256 ? $259 : $257;
        $261 = ($260>>>0)>(1);
        $__psn$__trailing_sign$0 = $261 ? $__psn : $__trailing_sign$0;
        $871 = $869;$__trailing_sign$1 = $__psn$__trailing_sign$0;
        break L47;
       }
       if ($225) {
        $304 = HEAP32[$220>>2]|0;
        $305 = ((($304)) + 36|0);
        $306 = HEAP32[$305>>2]|0;
        __THREW__ = 0;
        $307 = (invoke_ii($306|0,($220|0))|0);
        $308 = __THREW__; __THREW__ = 0;
        $309 = $308&1;
        if ($309) {
         label = 38;
         break L24;
        }
        $$pre305 = HEAP8[$__psn>>0]|0;
        $$pre306 = HEAP32[$__b>>2]|0;
        $$phi$trans$insert = ((($$pre306)) + 12|0);
        $$pre307 = HEAP32[$$phi$trans$insert>>2]|0;
        $$phi$trans$insert308 = ((($$pre306)) + 16|0);
        $$pre309 = HEAP32[$$phi$trans$insert308>>2]|0;
        $$0$i$i$136 = $307;$314 = $$pre305;$321 = $$pre306;$322 = $$pre307;$324 = $$pre309;
       } else {
        $310 = HEAP8[$222>>0]|0;
        $311 = $310&255;
        $$0$i$i$136 = $311;$314 = $202;$321 = $220;$322 = $222;$324 = $224;
       }
       $312 = $$0$i$i$136&255;
       $313 = $314 & 1;
       $315 = ($313<<24>>24)==(0);
       $316 = HEAP32[$22>>2]|0;
       $317 = $315 ? $23 : $316;
       $318 = HEAP8[$317>>0]|0;
       $319 = ($312<<24>>24)==($318<<24>>24);
       $320 = ((($321)) + 12|0);
       $323 = ($322|0)==($324|0);
       if ($319) {
        if ($323) {
         $325 = HEAP32[$321>>2]|0;
         $326 = ((($325)) + 40|0);
         $327 = HEAP32[$326>>2]|0;
         __THREW__ = 0;
         (invoke_ii($327|0,($321|0))|0);
         $328 = __THREW__; __THREW__ = 0;
         $329 = $328&1;
         if ($329) {
          label = 38;
          break L24;
         }
        } else {
         $330 = ((($322)) + 1|0);
         HEAP32[$320>>2] = $330;
        }
        $331 = HEAP8[$__psn>>0]|0;
        $332 = $331 & 1;
        $333 = ($332<<24>>24)==(0);
        $334 = HEAP32[$18>>2]|0;
        $335 = $331&255;
        $336 = $335 >>> 1;
        $337 = $333 ? $336 : $334;
        $338 = ($337>>>0)>(1);
        $__psn$__trailing_sign$022 = $338 ? $__psn : $__trailing_sign$0;
        $871 = $869;$__trailing_sign$1 = $__psn$__trailing_sign$022;
        break L47;
       }
       if ($323) {
        $339 = HEAP32[$321>>2]|0;
        $340 = ((($339)) + 36|0);
        $341 = HEAP32[$340>>2]|0;
        __THREW__ = 0;
        $342 = (invoke_ii($341|0,($321|0))|0);
        $343 = __THREW__; __THREW__ = 0;
        $344 = $343&1;
        if ($344) {
         label = 38;
         break L24;
        } else {
         $$0$i$i$145 = $342;
        }
       } else {
        $345 = HEAP8[$322>>0]|0;
        $346 = $345&255;
        $$0$i$i$145 = $346;
       }
       $347 = $$0$i$i$145&255;
       $348 = HEAP8[$__nsn>>0]|0;
       $349 = $348 & 1;
       $350 = ($349<<24>>24)==(0);
       $351 = HEAP32[$20>>2]|0;
       $352 = $350 ? $21 : $351;
       $353 = HEAP8[$352>>0]|0;
       $354 = ($347<<24>>24)==($353<<24>>24);
       if (!($354)) {
        label = 120;
        break L24;
       }
       $355 = HEAP32[$__b>>2]|0;
       $356 = ((($355)) + 12|0);
       $357 = HEAP32[$356>>2]|0;
       $358 = ((($355)) + 16|0);
       $359 = HEAP32[$358>>2]|0;
       $360 = ($357|0)==($359|0);
       if ($360) {
        $361 = HEAP32[$355>>2]|0;
        $362 = ((($361)) + 40|0);
        $363 = HEAP32[$362>>2]|0;
        __THREW__ = 0;
        (invoke_ii($363|0,($355|0))|0);
        $364 = __THREW__; __THREW__ = 0;
        $365 = $364&1;
        if ($365) {
         label = 38;
         break L24;
        }
       } else {
        $366 = ((($357)) + 1|0);
        HEAP32[$356>>2] = $366;
       }
       HEAP8[$__neg>>0] = 1;
       $367 = HEAP8[$__nsn>>0]|0;
       $368 = $367 & 1;
       $369 = ($368<<24>>24)==(0);
       $370 = HEAP32[$19>>2]|0;
       $371 = $367&255;
       $372 = $371 >>> 1;
       $373 = $369 ? $372 : $370;
       $374 = ($373>>>0)>(1);
       $__nsn$__trailing_sign$023 = $374 ? $__nsn : $__trailing_sign$0;
       $871 = $869;$__trailing_sign$1 = $__nsn$__trailing_sign$023;
      }
      break;
     }
     case 2:  {
      $377 = ($__trailing_sign$0|0)!=(0|0);
      $378 = ($__p$0>>>0)<(2);
      $or$cond = $378 | $377;
      if (!($or$cond)) {
       $379 = ($__p$0|0)==(2);
       $380 = HEAP8[$32>>0]|0;
       $381 = ($380<<24>>24)!=(0);
       $382 = $379 & $381;
       $brmerge = $25 | $382;
       if (!($brmerge)) {
        $871 = $869;$__trailing_sign$1 = 0;
        break L47;
       }
      }
      $383 = HEAP8[$__sym>>0]|0;
      $384 = $383 & 1;
      $385 = ($384<<24>>24)==(0);
      $386 = HEAP32[$26>>2]|0;
      $387 = $385 ? $27 : $386;
      $388 = $387;
      $389 = ($__p$0|0)==(0);
      L116: do {
       if ($389) {
        $$pre$i$2$i$i$180 = $870;$432 = $383;$437 = $386;$441 = $388;$460 = $870;
       } else {
        $390 = (($__p$0) + -1)|0;
        $391 = (($__pat) + ($390)|0);
        $392 = HEAP8[$391>>0]|0;
        $switch = ($392&255)<(2);
        if ($switch) {
         $393 = HEAP32[$28>>2]|0;
         $394 = $383&255;
         $395 = $394 >>> 1;
         $396 = $385 ? $395 : $393;
         $397 = (($387) + ($396)|0);
         $398 = HEAP32[$17>>2]|0;
         $399 = $388;
         while(1) {
          $400 = $399;
          $401 = ($400|0)==($397|0);
          if ($401) {
           $$lcssa = $399;
           break;
          }
          $402 = HEAP8[$400>>0]|0;
          $isascii1$i$186 = ($402<<24>>24)>(-1);
          if (!($isascii1$i$186)) {
           $$lcssa = $399;
           break;
          }
          $403 = $402 << 24 >> 24;
          $404 = (($398) + ($403<<1)|0);
          $405 = HEAP16[$404>>1]|0;
          $406 = $405 & 8192;
          $407 = ($406<<16>>16)==(0);
          if ($407) {
           $$lcssa = $399;
           break;
          }
          $408 = ((($400)) + 1|0);
          $409 = $408;
          $399 = $409;
         }
         $410 = (($$lcssa) - ($388))|0;
         $411 = HEAP8[$__spaces>>0]|0;
         $412 = $411 & 1;
         $413 = ($412<<24>>24)==(0);
         $414 = HEAP32[$29>>2]|0;
         $415 = $411&255;
         $416 = $415 >>> 1;
         $417 = $413 ? $416 : $414;
         $418 = ($410>>>0)>($417>>>0);
         if ($418) {
          $$pre$i$2$i$i$180 = $870;$432 = $383;$437 = $386;$441 = $388;$460 = $870;
         } else {
          $419 = HEAP32[$30>>2]|0;
          $420 = $413 ? $31 : $419;
          $421 = (($420) + ($417)|0);
          $422 = (0 - ($410))|0;
          $423 = (($421) + ($422)|0);
          $$sink = $387;$424 = $423;
          while(1) {
           $425 = ($424|0)==($421|0);
           if ($425) {
            $$pre$i$2$i$i$180 = $870;$432 = $383;$437 = $386;$441 = $$lcssa;$460 = $870;
            break L116;
           }
           $426 = HEAP8[$424>>0]|0;
           $427 = HEAP8[$$sink>>0]|0;
           $428 = ($426<<24>>24)==($427<<24>>24);
           if (!($428)) {
            $$pre$i$2$i$i$180 = $870;$432 = $383;$437 = $386;$441 = $388;$460 = $870;
            break L116;
           }
           $429 = ((($424)) + 1|0);
           $430 = ((($$sink)) + 1|0);
           $$sink = $430;$424 = $429;
          }
         }
        } else {
         $$pre$i$2$i$i$180 = $870;$432 = $383;$437 = $386;$441 = $388;$460 = $870;
        }
       }
      } while(0);
      L130: while(1) {
       $431 = $432 & 1;
       $433 = ($431<<24>>24)==(0);
       $434 = HEAP32[$28>>2]|0;
       $435 = $432&255;
       $436 = $435 >>> 1;
       $438 = $433 ? $27 : $437;
       $439 = $433 ? $436 : $434;
       $440 = (($438) + ($439)|0);
       $442 = $441;
       $443 = ($442|0)==($440|0);
       if ($443) {
        $$lcssa277 = $440;
        break;
       }
       $444 = HEAP32[$__b>>2]|0;
       $445 = ($444|0)==(0|0);
       do {
        if ($445) {
         $458 = 0;
        } else {
         $446 = ((($444)) + 12|0);
         $447 = HEAP32[$446>>2]|0;
         $448 = ((($444)) + 16|0);
         $449 = HEAP32[$448>>2]|0;
         $450 = ($447|0)==($449|0);
         if ($450) {
          $451 = HEAP32[$444>>2]|0;
          $452 = ((($451)) + 36|0);
          $453 = HEAP32[$452>>2]|0;
          __THREW__ = 0;
          $454 = (invoke_ii($453|0,($444|0))|0);
          $455 = __THREW__; __THREW__ = 0;
          $456 = $455&1;
          if ($456) {
           label = 35;
           break L24;
          }
          $457 = ($454|0)==(-1);
          if ($457) {
           HEAP32[$__b>>2] = 0;
           $458 = 0;
           break;
          } else {
           $$pre$i$i$i$176 = HEAP32[$__b>>2]|0;
           $458 = $$pre$i$i$i$176;
           break;
          }
         } else {
          $458 = $444;
         }
        }
       } while(0);
       $459 = ($458|0)==(0|0);
       $461 = ($460|0)==(0|0);
       do {
        if ($461) {
         $$pre$i$2$i$i$180303 = $$pre$i$2$i$i$180;
         label = 148;
        } else {
         $462 = ((($460)) + 12|0);
         $463 = HEAP32[$462>>2]|0;
         $464 = ((($460)) + 16|0);
         $465 = HEAP32[$464>>2]|0;
         $466 = ($463|0)==($465|0);
         if (!($466)) {
          if ($459) {
           $$pre$i$2$i$i$180302 = $$pre$i$2$i$i$180;$873 = $460;
           break;
          } else {
           $$lcssa277 = $442;
           break L130;
          }
         }
         $467 = HEAP32[$460>>2]|0;
         $468 = ((($467)) + 36|0);
         $469 = HEAP32[$468>>2]|0;
         __THREW__ = 0;
         $470 = (invoke_ii($469|0,($460|0))|0);
         $471 = __THREW__; __THREW__ = 0;
         $472 = $471&1;
         if ($472) {
          label = 35;
          break L24;
         }
         $473 = ($470|0)==(-1);
         if ($473) {
          HEAP32[$__e>>2] = 0;
          $$pre$i$2$i$i$180303 = 0;
          label = 148;
          break;
         } else {
          $474 = ($$pre$i$2$i$i$180|0)==(0|0);
          $tmp$i$i$182 = $459 ^ $474;
          if ($tmp$i$i$182) {
           $$pre$i$2$i$i$180302 = $$pre$i$2$i$i$180;$873 = $$pre$i$2$i$i$180;
           break;
          } else {
           $$lcssa277 = $442;
           break L130;
          }
         }
        }
       } while(0);
       if ((label|0) == 148) {
        label = 0;
        if ($459) {
         $$lcssa277 = $442;
         break;
        } else {
         $$pre$i$2$i$i$180302 = $$pre$i$2$i$i$180303;$873 = 0;
        }
       }
       $475 = HEAP32[$__b>>2]|0;
       $476 = ((($475)) + 12|0);
       $477 = HEAP32[$476>>2]|0;
       $478 = ((($475)) + 16|0);
       $479 = HEAP32[$478>>2]|0;
       $480 = ($477|0)==($479|0);
       if ($480) {
        $481 = HEAP32[$475>>2]|0;
        $482 = ((($481)) + 36|0);
        $483 = HEAP32[$482>>2]|0;
        __THREW__ = 0;
        $484 = (invoke_ii($483|0,($475|0))|0);
        $485 = __THREW__; __THREW__ = 0;
        $486 = $485&1;
        if ($486) {
         label = 35;
         break L24;
        } else {
         $$0$i$i$172 = $484;
        }
       } else {
        $487 = HEAP8[$477>>0]|0;
        $488 = $487&255;
        $$0$i$i$172 = $488;
       }
       $489 = $$0$i$i$172&255;
       $490 = HEAP8[$442>>0]|0;
       $491 = ($489<<24>>24)==($490<<24>>24);
       if (!($491)) {
        $$lcssa277 = $442;
        break;
       }
       $492 = HEAP32[$__b>>2]|0;
       $493 = ((($492)) + 12|0);
       $494 = HEAP32[$493>>2]|0;
       $495 = ((($492)) + 16|0);
       $496 = HEAP32[$495>>2]|0;
       $497 = ($494|0)==($496|0);
       if ($497) {
        $498 = HEAP32[$492>>2]|0;
        $499 = ((($498)) + 40|0);
        $500 = HEAP32[$499>>2]|0;
        __THREW__ = 0;
        (invoke_ii($500|0,($492|0))|0);
        $501 = __THREW__; __THREW__ = 0;
        $502 = $501&1;
        if ($502) {
         label = 35;
         break L24;
        }
       } else {
        $503 = ((($494)) + 1|0);
        HEAP32[$493>>2] = $503;
       }
       $504 = ((($442)) + 1|0);
       $505 = $504;
       $$pre300 = HEAP8[$__sym>>0]|0;
       $$pre301 = HEAP32[$26>>2]|0;
       $$pre$i$2$i$i$180 = $$pre$i$2$i$i$180302;$432 = $$pre300;$437 = $$pre301;$441 = $505;$460 = $873;
      }
      if ($25) {
       $506 = HEAP8[$__sym>>0]|0;
       $507 = $506 & 1;
       $508 = ($507<<24>>24)==(0);
       $509 = HEAP32[$26>>2]|0;
       $510 = HEAP32[$28>>2]|0;
       $511 = $506&255;
       $512 = $511 >>> 1;
       $513 = $508 ? $27 : $509;
       $514 = $508 ? $512 : $510;
       $515 = (($513) + ($514)|0);
       $516 = ($$lcssa277|0)==($515|0);
       if ($516) {
        $871 = $869;$__trailing_sign$1 = $__trailing_sign$0;
       } else {
        label = 160;
        break L24;
       }
      } else {
       $871 = $869;$__trailing_sign$1 = $__trailing_sign$0;
      }
      break;
     }
     case 4:  {
      $89 = HEAP8[$__ts>>0]|0;
      $$pre$i$2$i$i$163 = $870;$535 = $870;$590 = $869;$__ng$0 = 0;
      L165: while(1) {
       $519 = HEAP32[$__b>>2]|0;
       $520 = ($519|0)==(0|0);
       do {
        if ($520) {
         $533 = 0;
        } else {
         $521 = ((($519)) + 12|0);
         $522 = HEAP32[$521>>2]|0;
         $523 = ((($519)) + 16|0);
         $524 = HEAP32[$523>>2]|0;
         $525 = ($522|0)==($524|0);
         if ($525) {
          $526 = HEAP32[$519>>2]|0;
          $527 = ((($526)) + 36|0);
          $528 = HEAP32[$527>>2]|0;
          __THREW__ = 0;
          $529 = (invoke_ii($528|0,($519|0))|0);
          $530 = __THREW__; __THREW__ = 0;
          $531 = $530&1;
          if ($531) {
           label = 37;
           break L24;
          }
          $532 = ($529|0)==(-1);
          if ($532) {
           HEAP32[$__b>>2] = 0;
           $533 = 0;
           break;
          } else {
           $$pre$i$i$i$159 = HEAP32[$__b>>2]|0;
           $533 = $$pre$i$i$i$159;
           break;
          }
         } else {
          $533 = $519;
         }
        }
       } while(0);
       $534 = ($533|0)==(0|0);
       $536 = ($535|0)==(0|0);
       do {
        if ($536) {
         $$pre$i$2$i$i$163290 = $$pre$i$2$i$i$163;
         label = 173;
        } else {
         $537 = ((($535)) + 12|0);
         $538 = HEAP32[$537>>2]|0;
         $539 = ((($535)) + 16|0);
         $540 = HEAP32[$539>>2]|0;
         $541 = ($538|0)==($540|0);
         if (!($541)) {
          if ($534) {
           $$pre$i$2$i$i$163292 = $$pre$i$2$i$i$163;$874 = $535;
           break;
          } else {
           $$lcssa395 = $590;$$pre$i$2$i$i$123 = $$pre$i$2$i$i$163;$__ng$0$lcssa396 = $__ng$0;
           break L165;
          }
         }
         $542 = HEAP32[$535>>2]|0;
         $543 = ((($542)) + 36|0);
         $544 = HEAP32[$543>>2]|0;
         __THREW__ = 0;
         $545 = (invoke_ii($544|0,($535|0))|0);
         $546 = __THREW__; __THREW__ = 0;
         $547 = $546&1;
         if ($547) {
          label = 37;
          break L24;
         }
         $548 = ($545|0)==(-1);
         if ($548) {
          HEAP32[$__e>>2] = 0;
          $$pre$i$2$i$i$163290 = 0;
          label = 173;
          break;
         } else {
          $549 = ($$pre$i$2$i$i$163|0)==(0|0);
          $tmp$i$i$165 = $534 ^ $549;
          if ($tmp$i$i$165) {
           $$pre$i$2$i$i$163292 = $$pre$i$2$i$i$163;$874 = $$pre$i$2$i$i$163;
           break;
          } else {
           $$lcssa395 = $590;$$pre$i$2$i$i$123 = $$pre$i$2$i$i$163;$__ng$0$lcssa396 = $__ng$0;
           break L165;
          }
         }
        }
       } while(0);
       if ((label|0) == 173) {
        label = 0;
        if ($534) {
         $$lcssa395 = $590;$$pre$i$2$i$i$123 = $$pre$i$2$i$i$163290;$__ng$0$lcssa396 = $__ng$0;
         break;
        } else {
         $$pre$i$2$i$i$163292 = $$pre$i$2$i$i$163290;$874 = 0;
        }
       }
       $550 = HEAP32[$__b>>2]|0;
       $551 = ((($550)) + 12|0);
       $552 = HEAP32[$551>>2]|0;
       $553 = ((($550)) + 16|0);
       $554 = HEAP32[$553>>2]|0;
       $555 = ($552|0)==($554|0);
       if ($555) {
        $556 = HEAP32[$550>>2]|0;
        $557 = ((($556)) + 36|0);
        $558 = HEAP32[$557>>2]|0;
        __THREW__ = 0;
        $559 = (invoke_ii($558|0,($550|0))|0);
        $560 = __THREW__; __THREW__ = 0;
        $561 = $560&1;
        if ($561) {
         label = 37;
         break L24;
        } else {
         $$0$i$i$155 = $559;
        }
       } else {
        $562 = HEAP8[$552>>0]|0;
        $563 = $562&255;
        $$0$i$i$155 = $563;
       }
       $564 = $$0$i$i$155&255;
       $isascii1$i$153 = ($564<<24>>24)>(-1);
       if ($isascii1$i$153) {
        $sext244 = $$0$i$i$155 << 24;
        $565 = $sext244 >> 24;
        $566 = HEAP32[$17>>2]|0;
        $567 = (($566) + ($565<<1)|0);
        $568 = HEAP16[$567>>1]|0;
        $569 = $568 & 2048;
        $570 = ($569<<16>>16)==(0);
        if ($570) {
         label = 184;
        } else {
         $571 = HEAP32[$__wn>>2]|0;
         $572 = HEAP32[$0>>2]|0;
         $573 = ($571|0)==($572|0);
         if ($573) {
          __THREW__ = 0;
          invoke_viii(438,($__wb|0),($__wn|0),($0|0));
          $574 = __THREW__; __THREW__ = 0;
          $575 = $574&1;
          if ($575) {
           label = 37;
           break L24;
          }
          $$pre = HEAP32[$__wn>>2]|0;
          $577 = $$pre;
         } else {
          $577 = $571;
         }
         $576 = ((($577)) + 1|0);
         HEAP32[$__wn>>2] = $576;
         HEAP8[$577>>0] = $564;
         $578 = (($__ng$0) + 1)|0;
         $875 = $590;$__ng$2$ph = $578;
        }
       } else {
        label = 184;
       }
       if ((label|0) == 184) {
        label = 0;
        $579 = HEAP8[$__grp>>0]|0;
        $580 = $579 & 1;
        $581 = ($580<<24>>24)==(0);
        $582 = HEAP32[$33>>2]|0;
        $583 = $579&255;
        $584 = $583 >>> 1;
        $585 = $581 ? $584 : $582;
        $586 = ($585|0)!=(0);
        $587 = ($__ng$0|0)!=(0);
        $or$cond12 = $587 & $586;
        $588 = ($564<<24>>24)==($89<<24>>24);
        $or$cond25 = $588 & $or$cond12;
        if (!($or$cond25)) {
         $$lcssa395 = $590;$$pre$i$2$i$i$123 = $$pre$i$2$i$i$163292;$__ng$0$lcssa396 = $__ng$0;
         break;
        }
        $589 = HEAP32[$__ge>>2]|0;
        $591 = ($590|0)==($589|0);
        if ($591) {
         __THREW__ = 0;
         invoke_viii(439,($__gb|0),($__gn|0),($__ge|0));
         $592 = __THREW__; __THREW__ = 0;
         $593 = $592&1;
         if ($593) {
          label = 37;
          break L24;
         }
         $$pre295 = HEAP32[$__gn>>2]|0;
         $595 = $$pre295;
        } else {
         $595 = $590;
        }
        $594 = ((($595)) + 4|0);
        HEAP32[$__gn>>2] = $594;
        HEAP32[$595>>2] = $__ng$0;
        $875 = $594;$__ng$2$ph = 0;
       }
       $596 = HEAP32[$__b>>2]|0;
       $597 = ((($596)) + 12|0);
       $598 = HEAP32[$597>>2]|0;
       $599 = ((($596)) + 16|0);
       $600 = HEAP32[$599>>2]|0;
       $601 = ($598|0)==($600|0);
       if ($601) {
        $602 = HEAP32[$596>>2]|0;
        $603 = ((($602)) + 40|0);
        $604 = HEAP32[$603>>2]|0;
        __THREW__ = 0;
        (invoke_ii($604|0,($596|0))|0);
        $605 = __THREW__; __THREW__ = 0;
        $606 = $605&1;
        if ($606) {
         label = 37;
         break L24;
        } else {
         $$pre$i$2$i$i$163 = $$pre$i$2$i$i$163292;$535 = $874;$590 = $875;$__ng$0 = $__ng$2$ph;
         continue;
        }
       } else {
        $607 = ((($598)) + 1|0);
        HEAP32[$597>>2] = $607;
        $$pre$i$2$i$i$163 = $$pre$i$2$i$i$163292;$535 = $874;$590 = $875;$__ng$0 = $__ng$2$ph;
        continue;
       }
      }
      $608 = HEAP32[$__gb>>2]|0;
      $609 = ($608|0)!=($$lcssa395|0);
      $610 = ($__ng$0$lcssa396|0)!=(0);
      $or$cond14 = $610 & $609;
      if ($or$cond14) {
       $611 = HEAP32[$__ge>>2]|0;
       $612 = ($$lcssa395|0)==($611|0);
       if ($612) {
        __THREW__ = 0;
        invoke_viii(439,($__gb|0),($__gn|0),($__ge|0));
        $613 = __THREW__; __THREW__ = 0;
        $614 = $613&1;
        if ($614) {
         label = 38;
         break L24;
        }
        $$pre297 = HEAP32[$__gn>>2]|0;
        $616 = $$pre297;
       } else {
        $616 = $$lcssa395;
       }
       $615 = ((($616)) + 4|0);
       HEAP32[$__gn>>2] = $615;
       HEAP32[$616>>2] = $__ng$0$lcssa396;
       $876 = $615;
      } else {
       $876 = $$lcssa395;
      }
      $617 = HEAP32[$__fd>>2]|0;
      $618 = ($617|0)>(0);
      L217: do {
       if ($618) {
        $619 = HEAP32[$__b>>2]|0;
        $620 = ($619|0)==(0|0);
        do {
         if ($620) {
          $633 = 0;
         } else {
          $621 = ((($619)) + 12|0);
          $622 = HEAP32[$621>>2]|0;
          $623 = ((($619)) + 16|0);
          $624 = HEAP32[$623>>2]|0;
          $625 = ($622|0)==($624|0);
          if ($625) {
           $626 = HEAP32[$619>>2]|0;
           $627 = ((($626)) + 36|0);
           $628 = HEAP32[$627>>2]|0;
           __THREW__ = 0;
           $629 = (invoke_ii($628|0,($619|0))|0);
           $630 = __THREW__; __THREW__ = 0;
           $631 = $630&1;
           if ($631) {
            label = 38;
            break L24;
           }
           $632 = ($629|0)==(-1);
           if ($632) {
            HEAP32[$__b>>2] = 0;
            $633 = 0;
            break;
           } else {
            $$pre$i$i$i$119 = HEAP32[$__b>>2]|0;
            $633 = $$pre$i$i$i$119;
            break;
           }
          } else {
           $633 = $619;
          }
         }
        } while(0);
        $634 = ($633|0)==(0|0);
        $635 = ($$pre$i$2$i$i$123|0)==(0|0);
        do {
         if ($635) {
          label = 210;
         } else {
          $636 = ((($$pre$i$2$i$i$123)) + 12|0);
          $637 = HEAP32[$636>>2]|0;
          $638 = ((($$pre$i$2$i$i$123)) + 16|0);
          $639 = HEAP32[$638>>2]|0;
          $640 = ($637|0)==($639|0);
          if ($640) {
           $641 = HEAP32[$$pre$i$2$i$i$123>>2]|0;
           $642 = ((($641)) + 36|0);
           $643 = HEAP32[$642>>2]|0;
           __THREW__ = 0;
           $644 = (invoke_ii($643|0,($$pre$i$2$i$i$123|0))|0);
           $645 = __THREW__; __THREW__ = 0;
           $646 = $645&1;
           if ($646) {
            label = 38;
            break L24;
           }
           $647 = ($644|0)==(-1);
           if ($647) {
            HEAP32[$__e>>2] = 0;
            label = 210;
            break;
           }
          }
          if ($634) {
           $877 = $$pre$i$2$i$i$123;
          } else {
           label = 215;
           break L24;
          }
         }
        } while(0);
        if ((label|0) == 210) {
         label = 0;
         if ($634) {
          label = 215;
          break L24;
         } else {
          $877 = 0;
         }
        }
        $648 = HEAP32[$__b>>2]|0;
        $649 = ((($648)) + 12|0);
        $650 = HEAP32[$649>>2]|0;
        $651 = ((($648)) + 16|0);
        $652 = HEAP32[$651>>2]|0;
        $653 = ($650|0)==($652|0);
        if ($653) {
         $654 = HEAP32[$648>>2]|0;
         $655 = ((($654)) + 36|0);
         $656 = HEAP32[$655>>2]|0;
         __THREW__ = 0;
         $657 = (invoke_ii($656|0,($648|0))|0);
         $658 = __THREW__; __THREW__ = 0;
         $659 = $658&1;
         if ($659) {
          label = 38;
          break L24;
         } else {
          $$0$i$i$112 = $657;
         }
        } else {
         $660 = HEAP8[$650>>0]|0;
         $661 = $660&255;
         $$0$i$i$112 = $661;
        }
        $662 = $$0$i$i$112&255;
        $663 = HEAP8[$__dp>>0]|0;
        $664 = ($662<<24>>24)==($663<<24>>24);
        if (!($664)) {
         label = 215;
         break L24;
        }
        $667 = HEAP32[$__b>>2]|0;
        $668 = ((($667)) + 12|0);
        $669 = HEAP32[$668>>2]|0;
        $670 = ((($667)) + 16|0);
        $671 = HEAP32[$670>>2]|0;
        $672 = ($669|0)==($671|0);
        if ($672) {
         $673 = HEAP32[$667>>2]|0;
         $674 = ((($673)) + 40|0);
         $675 = HEAP32[$674>>2]|0;
         __THREW__ = 0;
         (invoke_ii($675|0,($667|0))|0);
         $676 = __THREW__; __THREW__ = 0;
         $677 = $676&1;
         if ($677) {
          label = 38;
          break L24;
         } else {
          $$pre$i$2$i$i$99 = $877;$679 = $617;$697 = $877;
         }
        } else {
         $678 = ((($669)) + 1|0);
         HEAP32[$668>>2] = $678;
         $$pre$i$2$i$i$99 = $877;$679 = $617;$697 = $877;
        }
        while(1) {
         $680 = ($679|0)>(0);
         if (!($680)) {
          break L217;
         }
         $681 = HEAP32[$__b>>2]|0;
         $682 = ($681|0)==(0|0);
         do {
          if ($682) {
           $695 = 0;
          } else {
           $683 = ((($681)) + 12|0);
           $684 = HEAP32[$683>>2]|0;
           $685 = ((($681)) + 16|0);
           $686 = HEAP32[$685>>2]|0;
           $687 = ($684|0)==($686|0);
           if ($687) {
            $688 = HEAP32[$681>>2]|0;
            $689 = ((($688)) + 36|0);
            $690 = HEAP32[$689>>2]|0;
            __THREW__ = 0;
            $691 = (invoke_ii($690|0,($681|0))|0);
            $692 = __THREW__; __THREW__ = 0;
            $693 = $692&1;
            if ($693) {
             label = 36;
             break L24;
            }
            $694 = ($691|0)==(-1);
            if ($694) {
             HEAP32[$__b>>2] = 0;
             $695 = 0;
             break;
            } else {
             $$pre$i$i$i$95 = HEAP32[$__b>>2]|0;
             $695 = $$pre$i$i$i$95;
             break;
            }
           } else {
            $695 = $681;
           }
          }
         } while(0);
         $696 = ($695|0)==(0|0);
         $698 = ($697|0)==(0|0);
         do {
          if ($698) {
           $$pre$i$2$i$i$99298$ph = $$pre$i$2$i$i$99;
           label = 232;
          } else {
           $699 = ((($697)) + 12|0);
           $700 = HEAP32[$699>>2]|0;
           $701 = ((($697)) + 16|0);
           $702 = HEAP32[$701>>2]|0;
           $703 = ($700|0)==($702|0);
           if (!($703)) {
            if ($696) {
             $$pre$i$2$i$i$99298317 = $$pre$i$2$i$i$99;$878 = $697;
             break;
            } else {
             label = 239;
             break L24;
            }
           }
           $704 = HEAP32[$697>>2]|0;
           $705 = ((($704)) + 36|0);
           $706 = HEAP32[$705>>2]|0;
           __THREW__ = 0;
           $707 = (invoke_ii($706|0,($697|0))|0);
           $708 = __THREW__; __THREW__ = 0;
           $709 = $708&1;
           if ($709) {
            label = 36;
            break L24;
           }
           $710 = ($707|0)==(-1);
           if ($710) {
            HEAP32[$__e>>2] = 0;
            $$pre$i$2$i$i$99298$ph = 0;
            label = 232;
            break;
           } else {
            $711 = ($$pre$i$2$i$i$99|0)==(0|0);
            $tmp$i$i$101 = $696 ^ $711;
            if ($tmp$i$i$101) {
             $$pre$i$2$i$i$99298317 = $$pre$i$2$i$i$99;$878 = $$pre$i$2$i$i$99;
             break;
            } else {
             label = 239;
             break L24;
            }
           }
          }
         } while(0);
         if ((label|0) == 232) {
          label = 0;
          if ($696) {
           label = 239;
           break L24;
          } else {
           $$pre$i$2$i$i$99298317 = $$pre$i$2$i$i$99298$ph;$878 = 0;
          }
         }
         $712 = HEAP32[$__b>>2]|0;
         $713 = ((($712)) + 12|0);
         $714 = HEAP32[$713>>2]|0;
         $715 = ((($712)) + 16|0);
         $716 = HEAP32[$715>>2]|0;
         $717 = ($714|0)==($716|0);
         if ($717) {
          $718 = HEAP32[$712>>2]|0;
          $719 = ((($718)) + 36|0);
          $720 = HEAP32[$719>>2]|0;
          __THREW__ = 0;
          $721 = (invoke_ii($720|0,($712|0))|0);
          $722 = __THREW__; __THREW__ = 0;
          $723 = $722&1;
          if ($723) {
           label = 36;
           break L24;
          } else {
           $$0$i$i$90 = $721;
          }
         } else {
          $724 = HEAP8[$714>>0]|0;
          $725 = $724&255;
          $$0$i$i$90 = $725;
         }
         $726 = $$0$i$i$90&255;
         $isascii1$i$88 = ($726<<24>>24)>(-1);
         if (!($isascii1$i$88)) {
          label = 239;
          break L24;
         }
         $sext = $$0$i$i$90 << 24;
         $727 = $sext >> 24;
         $728 = HEAP32[$17>>2]|0;
         $729 = (($728) + ($727<<1)|0);
         $730 = HEAP16[$729>>1]|0;
         $731 = $730 & 2048;
         $732 = ($731<<16>>16)==(0);
         if ($732) {
          label = 239;
          break L24;
         }
         $735 = HEAP32[$__wn>>2]|0;
         $736 = HEAP32[$0>>2]|0;
         $737 = ($735|0)==($736|0);
         if ($737) {
          __THREW__ = 0;
          invoke_viii(438,($__wb|0),($__wn|0),($0|0));
          $738 = __THREW__; __THREW__ = 0;
          $739 = $738&1;
          if ($739) {
           label = 36;
           break L24;
          }
         }
         $740 = HEAP32[$__b>>2]|0;
         $741 = ((($740)) + 12|0);
         $742 = HEAP32[$741>>2]|0;
         $743 = ((($740)) + 16|0);
         $744 = HEAP32[$743>>2]|0;
         $745 = ($742|0)==($744|0);
         if ($745) {
          $746 = HEAP32[$740>>2]|0;
          $747 = ((($746)) + 36|0);
          $748 = HEAP32[$747>>2]|0;
          __THREW__ = 0;
          $749 = (invoke_ii($748|0,($740|0))|0);
          $750 = __THREW__; __THREW__ = 0;
          $751 = $750&1;
          if ($751) {
           label = 36;
           break L24;
          } else {
           $$0$i$i$83 = $749;
          }
         } else {
          $752 = HEAP8[$742>>0]|0;
          $753 = $752&255;
          $$0$i$i$83 = $753;
         }
         $754 = $$0$i$i$83&255;
         $755 = HEAP32[$__wn>>2]|0;
         $756 = ((($755)) + 1|0);
         HEAP32[$__wn>>2] = $756;
         HEAP8[$755>>0] = $754;
         $757 = (($679) + -1)|0;
         HEAP32[$__fd>>2] = $757;
         $758 = HEAP32[$__b>>2]|0;
         $759 = ((($758)) + 12|0);
         $760 = HEAP32[$759>>2]|0;
         $761 = ((($758)) + 16|0);
         $762 = HEAP32[$761>>2]|0;
         $763 = ($760|0)==($762|0);
         if ($763) {
          $764 = HEAP32[$758>>2]|0;
          $765 = ((($764)) + 40|0);
          $766 = HEAP32[$765>>2]|0;
          __THREW__ = 0;
          (invoke_ii($766|0,($758|0))|0);
          $767 = __THREW__; __THREW__ = 0;
          $768 = $767&1;
          if ($768) {
           label = 36;
           break L24;
          } else {
           $$pre$i$2$i$i$99 = $$pre$i$2$i$i$99298317;$679 = $757;$697 = $878;
           continue;
          }
         } else {
          $769 = ((($760)) + 1|0);
          HEAP32[$759>>2] = $769;
          $$pre$i$2$i$i$99 = $$pre$i$2$i$i$99298317;$679 = $757;$697 = $878;
          continue;
         }
        }
       }
      } while(0);
      $770 = HEAP32[$__wn>>2]|0;
      $771 = HEAP32[$__wb>>2]|0;
      $772 = ($770|0)==($771|0);
      if ($772) {
       label = 249;
       break L24;
      } else {
       $871 = $876;$__trailing_sign$1 = $__trailing_sign$0;
      }
      break;
     }
     default: {
      $871 = $869;$__trailing_sign$1 = $__trailing_sign$0;
     }
     }
    } while(0);
    L285: do {
     if ((label|0) == 58) {
      while(1) {
       label = 0;
       $132 = HEAP32[$__b>>2]|0;
       $133 = ($132|0)==(0|0);
       do {
        if ($133) {
         $146 = 0;
        } else {
         $134 = ((($132)) + 12|0);
         $135 = HEAP32[$134>>2]|0;
         $136 = ((($132)) + 16|0);
         $137 = HEAP32[$136>>2]|0;
         $138 = ($135|0)==($137|0);
         if ($138) {
          $139 = HEAP32[$132>>2]|0;
          $140 = ((($139)) + 36|0);
          $141 = HEAP32[$140>>2]|0;
          __THREW__ = 0;
          $142 = (invoke_ii($141|0,($132|0))|0);
          $143 = __THREW__; __THREW__ = 0;
          $144 = $143&1;
          if ($144) {
           label = 34;
           break L24;
          }
          $145 = ($142|0)==(-1);
          if ($145) {
           HEAP32[$__b>>2] = 0;
           $146 = 0;
           break;
          } else {
           $$pre$i$i$i$63 = HEAP32[$__b>>2]|0;
           $146 = $$pre$i$i$i$63;
           break;
          }
         } else {
          $146 = $132;
         }
        }
       } while(0);
       $147 = ($146|0)==(0|0);
       $149 = ($148|0)==(0|0);
       do {
        if ($149) {
         $$pre$i$2$i$i$67312 = $$pre$i$2$i$i$67;
         label = 70;
        } else {
         $150 = ((($148)) + 12|0);
         $151 = HEAP32[$150>>2]|0;
         $152 = ((($148)) + 16|0);
         $153 = HEAP32[$152>>2]|0;
         $154 = ($151|0)==($153|0);
         if (!($154)) {
          if ($147) {
           $$pre$i$2$i$i$67314 = $$pre$i$2$i$i$67;$872 = $148;
           break;
          } else {
           $871 = $869;$__trailing_sign$1 = $__trailing_sign$0;
           break L285;
          }
         }
         $155 = HEAP32[$148>>2]|0;
         $156 = ((($155)) + 36|0);
         $157 = HEAP32[$156>>2]|0;
         __THREW__ = 0;
         $158 = (invoke_ii($157|0,($148|0))|0);
         $159 = __THREW__; __THREW__ = 0;
         $160 = $159&1;
         if ($160) {
          label = 34;
          break L24;
         }
         $161 = ($158|0)==(-1);
         if ($161) {
          HEAP32[$__e>>2] = 0;
          $$pre$i$2$i$i$67312 = 0;
          label = 70;
          break;
         } else {
          $162 = ($$pre$i$2$i$i$67|0)==(0|0);
          $tmp$i$i$69 = $147 ^ $162;
          if ($tmp$i$i$69) {
           $$pre$i$2$i$i$67314 = $$pre$i$2$i$i$67;$872 = $$pre$i$2$i$i$67;
           break;
          } else {
           $871 = $869;$__trailing_sign$1 = $__trailing_sign$0;
           break L285;
          }
         }
        }
       } while(0);
       if ((label|0) == 70) {
        label = 0;
        if ($147) {
         $871 = $869;$__trailing_sign$1 = $__trailing_sign$0;
         break L285;
        } else {
         $$pre$i$2$i$i$67314 = $$pre$i$2$i$i$67312;$872 = 0;
        }
       }
       $163 = HEAP32[$__b>>2]|0;
       $164 = ((($163)) + 12|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ((($163)) + 16|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($165|0)==($167|0);
       if ($168) {
        $169 = HEAP32[$163>>2]|0;
        $170 = ((($169)) + 36|0);
        $171 = HEAP32[$170>>2]|0;
        __THREW__ = 0;
        $172 = (invoke_ii($171|0,($163|0))|0);
        $173 = __THREW__; __THREW__ = 0;
        $174 = $173&1;
        if ($174) {
         label = 34;
         break L24;
        } else {
         $$0$i$i$73 = $172;
        }
       } else {
        $175 = HEAP8[$165>>0]|0;
        $176 = $175&255;
        $$0$i$i$73 = $176;
       }
       $177 = $$0$i$i$73&255;
       $isascii1$i$76 = ($177<<24>>24)>(-1);
       if (!($isascii1$i$76)) {
        $871 = $869;$__trailing_sign$1 = $__trailing_sign$0;
        break L285;
       }
       $sext245 = $$0$i$i$73 << 24;
       $178 = $sext245 >> 24;
       $179 = HEAP32[$17>>2]|0;
       $180 = (($179) + ($178<<1)|0);
       $181 = HEAP16[$180>>1]|0;
       $182 = $181 & 8192;
       $183 = ($182<<16>>16)==(0);
       if ($183) {
        $871 = $869;$__trailing_sign$1 = $__trailing_sign$0;
        break L285;
       }
       $184 = HEAP32[$__b>>2]|0;
       $185 = ((($184)) + 12|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ((($184)) + 16|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = ($186|0)==($188|0);
       if ($189) {
        $190 = HEAP32[$184>>2]|0;
        $191 = ((($190)) + 40|0);
        $192 = HEAP32[$191>>2]|0;
        __THREW__ = 0;
        $193 = (invoke_ii($192|0,($184|0))|0);
        $194 = __THREW__; __THREW__ = 0;
        $195 = $194&1;
        if ($195) {
         label = 34;
         break L24;
        } else {
         $$0$i$i$80 = $193;
        }
       } else {
        $196 = ((($186)) + 1|0);
        HEAP32[$185>>2] = $196;
        $197 = HEAP8[$186>>0]|0;
        $198 = $197&255;
        $$0$i$i$80 = $198;
       }
       $199 = $$0$i$i$80&255;
       __THREW__ = 0;
       invoke_vii(375,($__spaces|0),($199|0));
       $200 = __THREW__; __THREW__ = 0;
       $201 = $200&1;
       if ($201) {
        label = 34;
        break L24;
       } else {
        $$pre$i$2$i$i$67 = $$pre$i$2$i$i$67314;$148 = $872;
        label = 58;
       }
      }
     }
    } while(0);
    $775 = (($__p$0) + 1)|0;
    $869 = $871;$__p$0 = $775;$__trailing_sign$0 = $__trailing_sign$1;
   }
   L319:    switch (label|0) {
    case 34: {
     $67 = ___cxa_find_matching_catch()|0;
     $68 = tempRet0;
     $lpad$phi$index = $67;$lpad$phi$index7 = $68;
     break L21;
     break;
    }
    case 35: {
     $69 = ___cxa_find_matching_catch()|0;
     $70 = tempRet0;
     $lpad$phi$index = $69;$lpad$phi$index7 = $70;
     break L21;
     break;
    }
    case 36: {
     $71 = ___cxa_find_matching_catch()|0;
     $72 = tempRet0;
     $lpad$phi$index = $71;$lpad$phi$index7 = $72;
     break L21;
     break;
    }
    case 37: {
     $73 = ___cxa_find_matching_catch()|0;
     $74 = tempRet0;
     $lpad$phi$index = $73;$lpad$phi$index7 = $74;
     break L21;
     break;
    }
    case 38: {
     $75 = ___cxa_find_matching_catch()|0;
     $76 = tempRet0;
     $lpad$phi$index = $75;$lpad$phi$index7 = $76;
     break L21;
     break;
    }
    case 56: {
     $129 = HEAP32[$__err>>2]|0;
     $130 = $129 | 4;
     HEAP32[$__err>>2] = $130;
     $$10 = 0;
     break;
    }
    case 120: {
     $375 = HEAP32[$__err>>2]|0;
     $376 = $375 | 4;
     HEAP32[$__err>>2] = $376;
     $$10 = 0;
     break;
    }
    case 160: {
     $517 = HEAP32[$__err>>2]|0;
     $518 = $517 | 4;
     HEAP32[$__err>>2] = $518;
     $$10 = 0;
     break;
    }
    case 215: {
     $665 = HEAP32[$__err>>2]|0;
     $666 = $665 | 4;
     HEAP32[$__err>>2] = $666;
     $$10 = 0;
     break;
    }
    case 239: {
     $733 = HEAP32[$__err>>2]|0;
     $734 = $733 | 4;
     HEAP32[$__err>>2] = $734;
     $$10 = 0;
     break;
    }
    case 249: {
     $773 = HEAP32[$__err>>2]|0;
     $774 = $773 | 4;
     HEAP32[$__err>>2] = $774;
     $$10 = 0;
     break;
    }
    case 251: {
     $776 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L321: do {
      if (!($776)) {
       $777 = ((($__trailing_sign$0$lcssa)) + 1|0);
       $778 = ((($__trailing_sign$0$lcssa)) + 8|0);
       $779 = ((($__trailing_sign$0$lcssa)) + 4|0);
       $__i$0 = 1;
       L323: while(1) {
        $780 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $781 = $780 & 1;
        $782 = ($781<<24>>24)==(0);
        if ($782) {
         $784 = $780&255;
         $785 = $784 >>> 1;
         $787 = $785;
        } else {
         $783 = HEAP32[$779>>2]|0;
         $787 = $783;
        }
        $786 = ($__i$0>>>0)<($787>>>0);
        if (!($786)) {
         break L321;
        }
        $788 = HEAP32[$__b>>2]|0;
        $789 = ($788|0)==(0|0);
        do {
         if ($789) {
          $802 = 0;
         } else {
          $790 = ((($788)) + 12|0);
          $791 = HEAP32[$790>>2]|0;
          $792 = ((($788)) + 16|0);
          $793 = HEAP32[$792>>2]|0;
          $794 = ($791|0)==($793|0);
          if ($794) {
           $795 = HEAP32[$788>>2]|0;
           $796 = ((($795)) + 36|0);
           $797 = HEAP32[$796>>2]|0;
           __THREW__ = 0;
           $798 = (invoke_ii($797|0,($788|0))|0);
           $799 = __THREW__; __THREW__ = 0;
           $800 = $799&1;
           if ($800) {
            label = 33;
            break L323;
           }
           $801 = ($798|0)==(-1);
           if ($801) {
            HEAP32[$__b>>2] = 0;
            $802 = 0;
            break;
           } else {
            $$pre$i$i$i = HEAP32[$__b>>2]|0;
            $802 = $$pre$i$i$i;
            break;
           }
          } else {
           $802 = $788;
          }
         }
        } while(0);
        $803 = ($802|0)==(0|0);
        $804 = HEAP32[$__e>>2]|0;
        $805 = ($804|0)==(0|0);
        do {
         if ($805) {
          label = 269;
         } else {
          $806 = ((($804)) + 12|0);
          $807 = HEAP32[$806>>2]|0;
          $808 = ((($804)) + 16|0);
          $809 = HEAP32[$808>>2]|0;
          $810 = ($807|0)==($809|0);
          if ($810) {
           $811 = HEAP32[$804>>2]|0;
           $812 = ((($811)) + 36|0);
           $813 = HEAP32[$812>>2]|0;
           __THREW__ = 0;
           $814 = (invoke_ii($813|0,($804|0))|0);
           $815 = __THREW__; __THREW__ = 0;
           $816 = $815&1;
           if ($816) {
            label = 33;
            break L323;
           }
           $817 = ($814|0)==(-1);
           if ($817) {
            HEAP32[$__e>>2] = 0;
            label = 269;
            break;
           }
          }
          if (!($803)) {
           label = 276;
           break L323;
          }
         }
        } while(0);
        if ((label|0) == 269) {
         label = 0;
         if ($803) {
          label = 276;
          break;
         }
        }
        $818 = HEAP32[$__b>>2]|0;
        $819 = ((($818)) + 12|0);
        $820 = HEAP32[$819>>2]|0;
        $821 = ((($818)) + 16|0);
        $822 = HEAP32[$821>>2]|0;
        $823 = ($820|0)==($822|0);
        if ($823) {
         $824 = HEAP32[$818>>2]|0;
         $825 = ((($824)) + 36|0);
         $826 = HEAP32[$825>>2]|0;
         __THREW__ = 0;
         $827 = (invoke_ii($826|0,($818|0))|0);
         $828 = __THREW__; __THREW__ = 0;
         $829 = $828&1;
         if ($829) {
          label = 33;
          break;
         } else {
          $$0$i$i = $827;
         }
        } else {
         $830 = HEAP8[$820>>0]|0;
         $831 = $830&255;
         $$0$i$i = $831;
        }
        $832 = $$0$i$i&255;
        $833 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $834 = $833 & 1;
        $835 = ($834<<24>>24)==(0);
        if ($835) {
         $838 = $777;
        } else {
         $836 = HEAP32[$778>>2]|0;
         $838 = $836;
        }
        $837 = (($838) + ($__i$0)|0);
        $839 = HEAP8[$837>>0]|0;
        $840 = ($832<<24>>24)==($839<<24>>24);
        if (!($840)) {
         label = 276;
         break;
        }
        $843 = (($__i$0) + 1)|0;
        $844 = HEAP32[$__b>>2]|0;
        $845 = ((($844)) + 12|0);
        $846 = HEAP32[$845>>2]|0;
        $847 = ((($844)) + 16|0);
        $848 = HEAP32[$847>>2]|0;
        $849 = ($846|0)==($848|0);
        if ($849) {
         $850 = HEAP32[$844>>2]|0;
         $851 = ((($850)) + 40|0);
         $852 = HEAP32[$851>>2]|0;
         __THREW__ = 0;
         (invoke_ii($852|0,($844|0))|0);
         $853 = __THREW__; __THREW__ = 0;
         $854 = $853&1;
         if ($854) {
          label = 33;
          break;
         } else {
          $__i$0 = $843;
          continue;
         }
        } else {
         $855 = ((($846)) + 1|0);
         HEAP32[$845>>2] = $855;
         $__i$0 = $843;
         continue;
        }
       }
       if ((label|0) == 33) {
        $65 = ___cxa_find_matching_catch()|0;
        $66 = tempRet0;
        $lpad$phi$index = $65;$lpad$phi$index7 = $66;
        break L21;
       }
       else if ((label|0) == 276) {
        $841 = HEAP32[$__err>>2]|0;
        $842 = $841 | 4;
        HEAP32[$__err>>2] = $842;
        $$10 = 0;
        break L319;
       }
      }
     } while(0);
     $856 = HEAP32[$__gb>>2]|0;
     $857 = ($856|0)==($$lcssa397|0);
     if ($857) {
      $$10 = 1;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$856,$$lcssa397,$__et);
      $858 = HEAP32[$__et>>2]|0;
      $859 = ($858|0)==(0);
      if ($859) {
       $$10 = 1;
       break;
      } else {
       $860 = HEAP32[$__err>>2]|0;
       $861 = $860 | 4;
       HEAP32[$__err>>2] = $861;
       $$10 = 0;
       break;
      }
     }
     break;
    }
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__spaces);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nsn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__psn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
   $862 = HEAP32[$__gb>>2]|0;
   HEAP32[$__gb>>2] = 0;
   $863 = ($862|0)==(0|0);
   if (!($863)) {
    $864 = HEAP32[$2>>2]|0;
    __THREW__ = 0;
    invoke_vi($864|0,($862|0));
    $865 = __THREW__; __THREW__ = 0;
    $866 = $865&1;
    if ($866) {
     $867 = ___cxa_find_matching_catch(0|0)|0;
     $868 = tempRet0;
     ___clang_call_terminate($867);
     // unreachable;
    }
   }
   STACKTOP = sp;return ($$10|0);
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 $79 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $80 = ($79|0)==(0|0);
 if (!($80)) {
  $81 = HEAP32[$2>>2]|0;
  __THREW__ = 0;
  invoke_vi($81|0,($79|0));
  $82 = __THREW__; __THREW__ = 0;
  $83 = $82&1;
  if ($83) {
   $84 = ___cxa_find_matching_catch(0|0)|0;
   $85 = tempRet0;
   ___clang_call_terminate($84);
   // unreachable;
  }
 }
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__121__throw_runtime_errorEPKc($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(440,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  ___cxa_throw(($0|0),(264|0),(34|0));
  // unreachable;
 }
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$011 = 0, $$0110 = 0, $$012 = 0, $$019 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__loc = 0, $__neg = 0, $__w$0 = 0, $__w$0$lcssa = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 24|0;
 $__wbuf = sp + 32|0;
 $__wb = sp + 16|0;
 $__wn = sp + 8|0;
 $__loc = sp + 4|0;
 $__neg = sp + 28|0;
 $0 = sp;
 $1 = $__wbuf;
 HEAP32[$__wb>>2] = $1;
 $2 = ((($__wb)) + 4|0);
 HEAP32[$2>>2] = (434);
 $3 = ((($__wbuf)) + 100|0);
 __THREW__ = 0;
 $4 = (invoke_ii(353,($__iob|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $34 = ___cxa_find_matching_catch()|0;
  $35 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$011 = $34;$$019 = $35;$95 = $__wbuf;
  label = 37;
 } else {
  HEAP32[$__loc>>2] = $4;
  __THREW__ = 0;
  $7 = (invoke_iii(354,($__loc|0),(8588|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  L4: do {
   if (!($9)) {
    HEAP8[$__neg>>0] = 0;
    $10 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $10;
    $11 = ((($__iob)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $10;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
    $14 = (invoke_iiiiiiiiiiii(435,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($12|0),($__err|0),($__neg|0),($7|0),($__wb|0),($__wn|0),($3|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     if ($14) {
      $17 = HEAP8[$__v>>0]|0;
      $18 = $17 & 1;
      $19 = ($18<<24>>24)==(0);
      if ($19) {
       $23 = ((($__v)) + 1|0);
       HEAP8[$23>>0] = 0;
       HEAP8[$__v>>0] = 0;
      } else {
       $20 = ((($__v)) + 8|0);
       $21 = HEAP32[$20>>2]|0;
       HEAP8[$21>>0] = 0;
       $22 = ((($__v)) + 4|0);
       HEAP32[$22>>2] = 0;
      }
      $24 = HEAP8[$__neg>>0]|0;
      $25 = ($24<<24>>24)==(0);
      if (!($25)) {
       $26 = HEAP32[$7>>2]|0;
       $27 = ((($26)) + 28|0);
       $28 = HEAP32[$27>>2]|0;
       __THREW__ = 0;
       $29 = (invoke_iii($28|0,($7|0),45)|0);
       $30 = __THREW__; __THREW__ = 0;
       $31 = $30&1;
       if ($31) {
        break;
       }
       __THREW__ = 0;
       invoke_vii(375,($__v|0),($29|0));
       $32 = __THREW__; __THREW__ = 0;
       $33 = $32&1;
       if ($33) {
        break;
       }
      }
      $36 = HEAP32[$7>>2]|0;
      $37 = ((($36)) + 28|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_iii($38|0,($7|0),48)|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       break;
      }
      $42 = HEAP32[$__wb>>2]|0;
      $43 = HEAP32[$__wn>>2]|0;
      $44 = ((($43)) + -1|0);
      $__w$0 = $42;
      while(1) {
       $45 = ($__w$0>>>0)<($44>>>0);
       if (!($45)) {
        $__w$0$lcssa = $__w$0;
        break;
       }
       $46 = HEAP8[$__w$0>>0]|0;
       $47 = ($46<<24>>24)==($39<<24>>24);
       if (!($47)) {
        $__w$0$lcssa = $__w$0;
        break;
       }
       $48 = ((($__w$0)) + 1|0);
       $__w$0 = $48;
      }
      __THREW__ = 0;
      (invoke_iiii(441,($__v|0),($__w$0$lcssa|0),($43|0))|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       break;
      }
     }
     $51 = HEAP32[$__b>>2]|0;
     $52 = ($51|0)==(0|0);
     do {
      if ($52) {
       $65 = 0;
      } else {
       $53 = ((($51)) + 12|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = ((($51)) + 16|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = ($54|0)==($56|0);
       if ($57) {
        $58 = HEAP32[$51>>2]|0;
        $59 = ((($58)) + 36|0);
        $60 = HEAP32[$59>>2]|0;
        __THREW__ = 0;
        $61 = (invoke_ii($60|0,($51|0))|0);
        $62 = __THREW__; __THREW__ = 0;
        $63 = $62&1;
        if ($63) {
         break L4;
        }
        $64 = ($61|0)==(-1);
        if ($64) {
         HEAP32[$__b>>2] = 0;
         $65 = 0;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b>>2]|0;
         $65 = $$pre$i$i$i;
         break;
        }
       } else {
        $65 = $51;
       }
      }
     } while(0);
     $66 = ($65|0)==(0|0);
     $67 = ($10|0)==(0);
     do {
      if ($67) {
       label = 30;
      } else {
       $68 = ((($13)) + 12|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = ((($13)) + 16|0);
       $71 = HEAP32[$70>>2]|0;
       $72 = ($69|0)==($71|0);
       if ($72) {
        $73 = $10;
        $74 = HEAP32[$73>>2]|0;
        $75 = ((($74)) + 36|0);
        $76 = HEAP32[$75>>2]|0;
        __THREW__ = 0;
        $77 = (invoke_ii($76|0,($13|0))|0);
        $78 = __THREW__; __THREW__ = 0;
        $79 = $78&1;
        if ($79) {
         break L4;
        }
        $80 = ($77|0)==(-1);
        if ($80) {
         HEAP32[$__e>>2] = 0;
         label = 30;
         break;
        }
       }
       if (!($66)) {
        label = 31;
       }
      }
     } while(0);
     if ((label|0) == 30) {
      if ($66) {
       label = 31;
      }
     }
     if ((label|0) == 31) {
      $81 = HEAP32[$__err>>2]|0;
      $82 = $81 | 2;
      HEAP32[$__err>>2] = $82;
     }
     $83 = HEAP32[$__b>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($4)|0);
     $84 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $85 = ($84|0)==(0|0);
     if (!($85)) {
      $86 = HEAP32[$2>>2]|0;
      __THREW__ = 0;
      invoke_vi($86|0,($84|0));
      $87 = __THREW__; __THREW__ = 0;
      $88 = $87&1;
      if ($88) {
       $89 = ___cxa_find_matching_catch(0|0)|0;
       $90 = tempRet0;
       ___clang_call_terminate($89);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($83|0);
    }
   }
  } while(0);
  $91 = ___cxa_find_matching_catch()|0;
  $92 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($4)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $93 = ($$pre|0)==(0|0);
  if ($93) {
   $$0110 = $92;$$012 = $91;
  } else {
   $$011 = $91;$$019 = $92;$95 = $$pre;
   label = 37;
  }
 }
 if ((label|0) == 37) {
  $94 = HEAP32[$2>>2]|0;
  __THREW__ = 0;
  invoke_vi($94|0,($95|0));
  $96 = __THREW__; __THREW__ = 0;
  $97 = $96&1;
  if ($97) {
   $98 = ___cxa_find_matching_catch(0|0)|0;
   $99 = tempRet0;
   ___clang_call_terminate($98);
   // unreachable;
  } else {
   $$0110 = $$019;$$012 = $$011;
  }
 }
 ___resumeException($$012|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i$14 = 0, $__i$0$i$i$i$19 = 0, $__i$0$i$i$i$24 = 0, $__i$0$i$i$i$29 = 0, $__i$0$i$i$i$34 = 0, $__i$0$i$i$i$4 = 0, $__i$0$i$i$i$9 = 0;
 var $exitcond$i$i$i = 0, $exitcond$i$i$i$10 = 0, $exitcond$i$i$i$15 = 0, $exitcond$i$i$i$20 = 0, $exitcond$i$i$i$25 = 0, $exitcond$i$i$i$30 = 0, $exitcond$i$i$i$35 = 0, $exitcond$i$i$i$5 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 100|0;
 $1 = sp + 88|0;
 $2 = sp + 76|0;
 $3 = sp + 64|0;
 $4 = sp + 52|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 if ($__intl) {
  $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,8196)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_vii[$13 & 1023]($0,$10);
  $14 = HEAP32[$0>>2]|0;
  HEAP8[$__pat>>0]=$14&255;HEAP8[$__pat+1>>0]=($14>>8)&255;HEAP8[$__pat+2>>0]=($14>>16)&255;HEAP8[$__pat+3>>0]=$14>>24;
  $15 = HEAP32[$10>>2]|0;
  $16 = ((($15)) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vii[$17 & 1023]($1,$10);
  $18 = HEAP8[$__nsn>>0]|0;
  $19 = $18 & 1;
  $20 = ($19<<24>>24)==(0);
  if ($20) {
   $24 = ((($__nsn)) + 1|0);
   HEAP8[$24>>0] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $21 = ((($__nsn)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP8[$22>>0] = 0;
   $23 = ((($__nsn)) + 4|0);
   HEAP32[$23>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(442,($__nsn|0),0);
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if ($26) {
   $27 = ___cxa_find_matching_catch(0|0)|0;
   $28 = tempRet0;
   ___clang_call_terminate($27);
   // unreachable;
  }
  ;HEAP32[$__nsn>>2]=HEAP32[$1>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
  $__i$0$i$i$i = 0;
  while(1) {
   $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
   if ($exitcond$i$i$i) {
    break;
   }
   $29 = (($1) + ($__i$0$i$i$i<<2)|0);
   HEAP32[$29>>2] = 0;
   $30 = (($__i$0$i$i$i) + 1)|0;
   $__i$0$i$i$i = $30;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
  $31 = HEAP32[$10>>2]|0;
  $32 = ((($31)) + 28|0);
  $33 = HEAP32[$32>>2]|0;
  FUNCTION_TABLE_vii[$33 & 1023]($2,$10);
  $34 = HEAP8[$__psn>>0]|0;
  $35 = $34 & 1;
  $36 = ($35<<24>>24)==(0);
  if ($36) {
   $40 = ((($__psn)) + 1|0);
   HEAP8[$40>>0] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $37 = ((($__psn)) + 8|0);
   $38 = HEAP32[$37>>2]|0;
   HEAP8[$38>>0] = 0;
   $39 = ((($__psn)) + 4|0);
   HEAP32[$39>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(442,($__psn|0),0);
  $41 = __THREW__; __THREW__ = 0;
  $42 = $41&1;
  if ($42) {
   $43 = ___cxa_find_matching_catch(0|0)|0;
   $44 = tempRet0;
   ___clang_call_terminate($43);
   // unreachable;
  }
  ;HEAP32[$__psn>>2]=HEAP32[$2>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
  $__i$0$i$i$i$4 = 0;
  while(1) {
   $exitcond$i$i$i$5 = ($__i$0$i$i$i$4|0)==(3);
   if ($exitcond$i$i$i$5) {
    break;
   }
   $45 = (($2) + ($__i$0$i$i$i$4<<2)|0);
   HEAP32[$45>>2] = 0;
   $46 = (($__i$0$i$i$i$4) + 1)|0;
   $__i$0$i$i$i$4 = $46;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
  $47 = HEAP32[$10>>2]|0;
  $48 = ((($47)) + 12|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (FUNCTION_TABLE_ii[$49 & 1023]($10)|0);
  HEAP8[$__dp>>0] = $50;
  $51 = HEAP32[$10>>2]|0;
  $52 = ((($51)) + 16|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (FUNCTION_TABLE_ii[$53 & 1023]($10)|0);
  HEAP8[$__ts>>0] = $54;
  $55 = HEAP32[$10>>2]|0;
  $56 = ((($55)) + 20|0);
  $57 = HEAP32[$56>>2]|0;
  FUNCTION_TABLE_vii[$57 & 1023]($3,$10);
  $58 = HEAP8[$__grp>>0]|0;
  $59 = $58 & 1;
  $60 = ($59<<24>>24)==(0);
  if ($60) {
   $64 = ((($__grp)) + 1|0);
   HEAP8[$64>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $61 = ((($__grp)) + 8|0);
   $62 = HEAP32[$61>>2]|0;
   HEAP8[$62>>0] = 0;
   $63 = ((($__grp)) + 4|0);
   HEAP32[$63>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(442,($__grp|0),0);
  $65 = __THREW__; __THREW__ = 0;
  $66 = $65&1;
  if ($66) {
   $67 = ___cxa_find_matching_catch(0|0)|0;
   $68 = tempRet0;
   ___clang_call_terminate($67);
   // unreachable;
  }
  ;HEAP32[$__grp>>2]=HEAP32[$3>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
  $__i$0$i$i$i$9 = 0;
  while(1) {
   $exitcond$i$i$i$10 = ($__i$0$i$i$i$9|0)==(3);
   if ($exitcond$i$i$i$10) {
    break;
   }
   $69 = (($3) + ($__i$0$i$i$i$9<<2)|0);
   HEAP32[$69>>2] = 0;
   $70 = (($__i$0$i$i$i$9) + 1)|0;
   $__i$0$i$i$i$9 = $70;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
  $71 = HEAP32[$10>>2]|0;
  $72 = ((($71)) + 24|0);
  $73 = HEAP32[$72>>2]|0;
  FUNCTION_TABLE_vii[$73 & 1023]($4,$10);
  $74 = HEAP8[$__sym>>0]|0;
  $75 = $74 & 1;
  $76 = ($75<<24>>24)==(0);
  if ($76) {
   $80 = ((($__sym)) + 1|0);
   HEAP8[$80>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $77 = ((($__sym)) + 8|0);
   $78 = HEAP32[$77>>2]|0;
   HEAP8[$78>>0] = 0;
   $79 = ((($__sym)) + 4|0);
   HEAP32[$79>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(442,($__sym|0),0);
  $81 = __THREW__; __THREW__ = 0;
  $82 = $81&1;
  if ($82) {
   $83 = ___cxa_find_matching_catch(0|0)|0;
   $84 = tempRet0;
   ___clang_call_terminate($83);
   // unreachable;
  }
  ;HEAP32[$__sym>>2]=HEAP32[$4>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
  $__i$0$i$i$i$14 = 0;
  while(1) {
   $exitcond$i$i$i$15 = ($__i$0$i$i$i$14|0)==(3);
   if ($exitcond$i$i$i$15) {
    break;
   }
   $85 = (($4) + ($__i$0$i$i$i$14<<2)|0);
   HEAP32[$85>>2] = 0;
   $86 = (($__i$0$i$i$i$14) + 1)|0;
   $__i$0$i$i$i$14 = $86;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
  $87 = HEAP32[$10>>2]|0;
  $88 = ((($87)) + 36|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (FUNCTION_TABLE_ii[$89 & 1023]($10)|0);
  $storemerge = $90;
 } else {
  $91 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,8132)|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = ((($92)) + 44|0);
  $94 = HEAP32[$93>>2]|0;
  FUNCTION_TABLE_vii[$94 & 1023]($5,$91);
  $95 = HEAP32[$5>>2]|0;
  HEAP8[$__pat>>0]=$95&255;HEAP8[$__pat+1>>0]=($95>>8)&255;HEAP8[$__pat+2>>0]=($95>>16)&255;HEAP8[$__pat+3>>0]=$95>>24;
  $96 = HEAP32[$91>>2]|0;
  $97 = ((($96)) + 32|0);
  $98 = HEAP32[$97>>2]|0;
  FUNCTION_TABLE_vii[$98 & 1023]($6,$91);
  $99 = HEAP8[$__nsn>>0]|0;
  $100 = $99 & 1;
  $101 = ($100<<24>>24)==(0);
  if ($101) {
   $105 = ((($__nsn)) + 1|0);
   HEAP8[$105>>0] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $102 = ((($__nsn)) + 8|0);
   $103 = HEAP32[$102>>2]|0;
   HEAP8[$103>>0] = 0;
   $104 = ((($__nsn)) + 4|0);
   HEAP32[$104>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(442,($__nsn|0),0);
  $106 = __THREW__; __THREW__ = 0;
  $107 = $106&1;
  if ($107) {
   $108 = ___cxa_find_matching_catch(0|0)|0;
   $109 = tempRet0;
   ___clang_call_terminate($108);
   // unreachable;
  }
  ;HEAP32[$__nsn>>2]=HEAP32[$6>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
  $__i$0$i$i$i$19 = 0;
  while(1) {
   $exitcond$i$i$i$20 = ($__i$0$i$i$i$19|0)==(3);
   if ($exitcond$i$i$i$20) {
    break;
   }
   $110 = (($6) + ($__i$0$i$i$i$19<<2)|0);
   HEAP32[$110>>2] = 0;
   $111 = (($__i$0$i$i$i$19) + 1)|0;
   $__i$0$i$i$i$19 = $111;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
  $112 = HEAP32[$91>>2]|0;
  $113 = ((($112)) + 28|0);
  $114 = HEAP32[$113>>2]|0;
  FUNCTION_TABLE_vii[$114 & 1023]($7,$91);
  $115 = HEAP8[$__psn>>0]|0;
  $116 = $115 & 1;
  $117 = ($116<<24>>24)==(0);
  if ($117) {
   $121 = ((($__psn)) + 1|0);
   HEAP8[$121>>0] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $118 = ((($__psn)) + 8|0);
   $119 = HEAP32[$118>>2]|0;
   HEAP8[$119>>0] = 0;
   $120 = ((($__psn)) + 4|0);
   HEAP32[$120>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(442,($__psn|0),0);
  $122 = __THREW__; __THREW__ = 0;
  $123 = $122&1;
  if ($123) {
   $124 = ___cxa_find_matching_catch(0|0)|0;
   $125 = tempRet0;
   ___clang_call_terminate($124);
   // unreachable;
  }
  ;HEAP32[$__psn>>2]=HEAP32[$7>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
  $__i$0$i$i$i$24 = 0;
  while(1) {
   $exitcond$i$i$i$25 = ($__i$0$i$i$i$24|0)==(3);
   if ($exitcond$i$i$i$25) {
    break;
   }
   $126 = (($7) + ($__i$0$i$i$i$24<<2)|0);
   HEAP32[$126>>2] = 0;
   $127 = (($__i$0$i$i$i$24) + 1)|0;
   $__i$0$i$i$i$24 = $127;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
  $128 = HEAP32[$91>>2]|0;
  $129 = ((($128)) + 12|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (FUNCTION_TABLE_ii[$130 & 1023]($91)|0);
  HEAP8[$__dp>>0] = $131;
  $132 = HEAP32[$91>>2]|0;
  $133 = ((($132)) + 16|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = (FUNCTION_TABLE_ii[$134 & 1023]($91)|0);
  HEAP8[$__ts>>0] = $135;
  $136 = HEAP32[$91>>2]|0;
  $137 = ((($136)) + 20|0);
  $138 = HEAP32[$137>>2]|0;
  FUNCTION_TABLE_vii[$138 & 1023]($8,$91);
  $139 = HEAP8[$__grp>>0]|0;
  $140 = $139 & 1;
  $141 = ($140<<24>>24)==(0);
  if ($141) {
   $145 = ((($__grp)) + 1|0);
   HEAP8[$145>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $142 = ((($__grp)) + 8|0);
   $143 = HEAP32[$142>>2]|0;
   HEAP8[$143>>0] = 0;
   $144 = ((($__grp)) + 4|0);
   HEAP32[$144>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(442,($__grp|0),0);
  $146 = __THREW__; __THREW__ = 0;
  $147 = $146&1;
  if ($147) {
   $148 = ___cxa_find_matching_catch(0|0)|0;
   $149 = tempRet0;
   ___clang_call_terminate($148);
   // unreachable;
  }
  ;HEAP32[$__grp>>2]=HEAP32[$8>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
  $__i$0$i$i$i$29 = 0;
  while(1) {
   $exitcond$i$i$i$30 = ($__i$0$i$i$i$29|0)==(3);
   if ($exitcond$i$i$i$30) {
    break;
   }
   $150 = (($8) + ($__i$0$i$i$i$29<<2)|0);
   HEAP32[$150>>2] = 0;
   $151 = (($__i$0$i$i$i$29) + 1)|0;
   $__i$0$i$i$i$29 = $151;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
  $152 = HEAP32[$91>>2]|0;
  $153 = ((($152)) + 24|0);
  $154 = HEAP32[$153>>2]|0;
  FUNCTION_TABLE_vii[$154 & 1023]($9,$91);
  $155 = HEAP8[$__sym>>0]|0;
  $156 = $155 & 1;
  $157 = ($156<<24>>24)==(0);
  if ($157) {
   $161 = ((($__sym)) + 1|0);
   HEAP8[$161>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $158 = ((($__sym)) + 8|0);
   $159 = HEAP32[$158>>2]|0;
   HEAP8[$159>>0] = 0;
   $160 = ((($__sym)) + 4|0);
   HEAP32[$160>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(442,($__sym|0),0);
  $162 = __THREW__; __THREW__ = 0;
  $163 = $162&1;
  if ($163) {
   $164 = ___cxa_find_matching_catch(0|0)|0;
   $165 = tempRet0;
   ___clang_call_terminate($164);
   // unreachable;
  }
  ;HEAP32[$__sym>>2]=HEAP32[$9>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
  $__i$0$i$i$i$34 = 0;
  while(1) {
   $exitcond$i$i$i$35 = ($__i$0$i$i$i$34|0)==(3);
   if ($exitcond$i$i$i$35) {
    break;
   }
   $166 = (($9) + ($__i$0$i$i$i$34<<2)|0);
   HEAP32[$166>>2] = 0;
   $167 = (($__i$0$i$i$i$34) + 1)|0;
   $__i$0$i$i$i$34 = $167;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
  $168 = HEAP32[$91>>2]|0;
  $169 = ((($168)) + 36|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = (FUNCTION_TABLE_ii[$170 & 1023]($91)|0);
  $storemerge = $171;
 }
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$__g_end,$__err) {
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__err = $__err|0;
 var $$0$i$i = 0, $$01$i$i = 0, $$__ig$0 = 0, $$not = 0, $$pre = 0, $$pre11 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ig$0 = 0, $__r$0 = 0, $or$cond2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__grouping>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 $3 = ((($__grouping)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0&255;
 $6 = $5 >>> 1;
 $7 = $2 ? $6 : $4;
 $8 = ($7|0)==(0);
 do {
  if (!($8)) {
   $9 = ($__g|0)==($__g_end|0);
   if ($9) {
    $16 = $0;$24 = $4;
   } else {
    $$0$i$i = $__g_end;$$01$i$i = $__g;
    while(1) {
     $10 = ((($$0$i$i)) + -4|0);
     $11 = ($$01$i$i>>>0)<($10>>>0);
     if (!($11)) {
      break;
     }
     $12 = HEAP32[$$01$i$i>>2]|0;
     $13 = HEAP32[$10>>2]|0;
     HEAP32[$$01$i$i>>2] = $13;
     HEAP32[$10>>2] = $12;
     $14 = ((($$01$i$i)) + 4|0);
     $$0$i$i = $10;$$01$i$i = $14;
    }
    $$pre = HEAP8[$__grouping>>0]|0;
    $$pre11 = HEAP32[$3>>2]|0;
    $16 = $$pre;$24 = $$pre11;
   }
   $15 = $16 & 1;
   $17 = ($15<<24>>24)==(0);
   $18 = ((($__grouping)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($__grouping)) + 1|0);
   $21 = $17 ? $20 : $19;
   $22 = $16&255;
   $23 = $22 >>> 1;
   $25 = $17 ? $23 : $24;
   $26 = (($21) + ($25)|0);
   $27 = ((($__g_end)) + -4|0);
   $28 = $26;
   $__ig$0 = $21;$__r$0 = $__g;
   while(1) {
    $29 = ($__r$0>>>0)<($27>>>0);
    $30 = HEAP8[$__ig$0>>0]|0;
    $$not = ($30<<24>>24)<(1);
    $31 = ($30<<24>>24)==(127);
    $or$cond2 = $$not | $31;
    if (!($29)) {
     break;
    }
    if (!($or$cond2)) {
     $32 = $30 << 24 >> 24;
     $33 = HEAP32[$__r$0>>2]|0;
     $34 = ($32|0)==($33|0);
     if (!($34)) {
      label = 10;
      break;
     }
    }
    $35 = $__ig$0;
    $36 = (($28) - ($35))|0;
    $37 = ($36|0)>(1);
    $38 = ((($__ig$0)) + 1|0);
    $$__ig$0 = $37 ? $38 : $__ig$0;
    $39 = ((($__r$0)) + 4|0);
    $__ig$0 = $$__ig$0;$__r$0 = $39;
   }
   if ((label|0) == 10) {
    HEAP32[$__err>>2] = 4;
    break;
   }
   if (!($or$cond2)) {
    $40 = $30 << 24 >> 24;
    $41 = HEAP32[$27>>2]|0;
    $42 = (($41) + -1)|0;
    $43 = ($42>>>0)<($40>>>0);
    if (!($43)) {
     HEAP32[$__err>>2] = 4;
    }
   }
  }
 } while(0);
 return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i$1$i$i = 0, $$0$i$i$i$i = 0, $$0$lcssa$i = 0, $$01 = 0, $$113 = 0, $$114 = 0, $$1211 = 0, $$1212 = 0, $$byval_copy = 0, $$phi$trans$insert$pre$phiZZZZ2D = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre15 = 0, $$pre7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0;
 var $__nc$2 = 0, $__nc$2$lcssa = 0, $__neg = 0, $__w$0 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 472|0;
 $vararg_buffer = sp;
 $__wbuf = sp + 72|0;
 $__wb = sp + 64|0;
 $__wn = sp + 56|0;
 $__loc = sp + 52|0;
 $__neg = sp + 576|0;
 $0 = sp + 48|0;
 $__atoms = sp + 8|0;
 $__nbuf = sp + 476|0;
 $1 = $__wbuf;
 HEAP32[$__wb>>2] = $1;
 $2 = ((($__wb)) + 4|0);
 HEAP32[$2>>2] = (434);
 $3 = ((($__wbuf)) + 400|0);
 __THREW__ = 0;
 $4 = (invoke_ii(353,($__iob|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $34 = ___cxa_find_matching_catch()|0;
  $35 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$113 = $34;$$1211 = $35;$112 = 434;$113 = $__wbuf;
  label = 49;
 } else {
  HEAP32[$__loc>>2] = $4;
  __THREW__ = 0;
  $7 = (invoke_iii(354,($__loc|0),(8580|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  L4: do {
   if ($9) {
    label = 10;
   } else {
    HEAP8[$__neg>>0] = 0;
    $10 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $10;
    $11 = ((($__iob)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
    $13 = (invoke_iiiiiiiiiiii(443,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($12|0),($__err|0),($__neg|0),($7|0),($__wb|0),($__wn|0),($3|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if ($15) {
     label = 10;
    } else {
     L7: do {
      if ($13) {
       $16 = HEAP32[$7>>2]|0;
       $17 = ((($16)) + 48|0);
       $18 = HEAP32[$17>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($18|0,($7|0),(20975|0),((20985)|0),($__atoms|0))|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if ($20) {
        label = 10;
        break L4;
       }
       $21 = HEAP32[$__wn>>2]|0;
       $22 = HEAP32[$__wb>>2]|0;
       $23 = (($21) - ($22))|0;
       $24 = ($23|0)>(392);
       $25 = $22;
       $26 = $21;
       if ($24) {
        $27 = $23 >> 2;
        $28 = (($27) + 2)|0;
        $29 = (_malloc($28)|0);
        $30 = $29;
        $31 = ($29|0)==(0|0);
        if ($31) {
         __THREW__ = 0;
         invoke_v(423);
         $32 = __THREW__; __THREW__ = 0;
         $33 = $32&1;
         if ($33) {
          $40 = $30;
         } else {
          $66 = $30;$__nc$0 = 0;
          label = 13;
         }
        } else {
         $66 = $30;$__nc$0 = $29;
         label = 13;
        }
       } else {
        $66 = 0;$__nc$0 = $__nbuf;
        label = 13;
       }
       do {
        if ((label|0) == 13) {
         $43 = HEAP8[$__neg>>0]|0;
         $44 = ($43<<24>>24)==(0);
         if ($44) {
          $__nc$1 = $__nc$0;
         } else {
          $45 = ((($__nc$0)) + 1|0);
          HEAP8[$__nc$0>>0] = 45;
          $__nc$1 = $45;
         }
         $46 = ((($__atoms)) + 40|0);
         $47 = $__atoms;
         $49 = $26;$__nc$2 = $__nc$1;$__w$0 = $25;
         while(1) {
          $48 = ($__w$0>>>0)<($49>>>0);
          if (!($48)) {
           $__nc$2$lcssa = $__nc$2;
           break;
          }
          $50 = HEAP32[$__w$0>>2]|0;
          $$0$i = $__atoms;
          while(1) {
           $51 = ($$0$i|0)==($46|0);
           if ($51) {
            $$0$lcssa$i = $46;
            break;
           }
           $52 = HEAP32[$$0$i>>2]|0;
           $53 = ($52|0)==($50|0);
           if ($53) {
            $$0$lcssa$i = $$0$i;
            break;
           }
           $54 = ((($$0$i)) + 4|0);
           $$0$i = $54;
          }
          $55 = $$0$lcssa$i;
          $56 = (($55) - ($47))|0;
          $57 = $56 >> 2;
          $58 = (20975 + ($57)|0);
          $59 = HEAP8[$58>>0]|0;
          HEAP8[$__nc$2>>0] = $59;
          $60 = ((($__w$0)) + 4|0);
          $61 = ((($__nc$2)) + 1|0);
          $$pre = HEAP32[$__wn>>2]|0;
          $49 = $$pre;$__nc$2 = $61;$__w$0 = $60;
         }
         HEAP8[$__nc$2$lcssa>>0] = 0;
         HEAP32[$vararg_buffer>>2] = $__v;
         $62 = (_sscanf($__nbuf,20955,$vararg_buffer)|0);
         $63 = ($62|0)==(1);
         if (!($63)) {
          __THREW__ = 0;
          invoke_vi(436,(20959|0));
          $64 = __THREW__; __THREW__ = 0;
          $65 = $64&1;
          if ($65) {
           $40 = $66;
           break;
          }
         }
         $67 = ($66|0)==(0);
         if (!($67)) {
          $68 = $66;
          _free($68);
         }
         break L7;
        }
       } while(0);
       $38 = ___cxa_find_matching_catch()|0;
       $39 = tempRet0;
       $41 = ($40|0)==(0);
       if ($41) {
        $$0 = $38;$$01 = $39;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
        break L4;
       }
       $42 = $40;
       _free($42);
       $$0 = $38;$$01 = $39;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
       break L4;
      }
     } while(0);
     $69 = HEAP32[$__b>>2]|0;
     $70 = ($69|0)==(0|0);
     do {
      if ($70) {
       $118 = 1;
      } else {
       $71 = ((($69)) + 12|0);
       $72 = HEAP32[$71>>2]|0;
       $73 = ((($69)) + 16|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = ($72|0)==($74|0);
       if ($75) {
        $76 = HEAP32[$69>>2]|0;
        $77 = ((($76)) + 36|0);
        $78 = HEAP32[$77>>2]|0;
        __THREW__ = 0;
        $79 = (invoke_ii($78|0,($69|0))|0);
        $80 = __THREW__; __THREW__ = 0;
        $81 = $80&1;
        if ($81) {
         label = 10;
         break L4;
        } else {
         $$0$i$i$i$i = $79;
        }
       } else {
        $82 = HEAP32[$72>>2]|0;
        $$0$i$i$i$i = $82;
       }
       $83 = ($$0$i$i$i$i|0)==(-1);
       if ($83) {
        HEAP32[$__b>>2] = 0;
        $118 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
        $118 = $phitmp$i$i$i;
        break;
       }
      }
     } while(0);
     $84 = HEAP32[$__e>>2]|0;
     $85 = ($84|0)==(0|0);
     do {
      if ($85) {
       label = 40;
      } else {
       $86 = ((($84)) + 12|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = ((($84)) + 16|0);
       $89 = HEAP32[$88>>2]|0;
       $90 = ($87|0)==($89|0);
       if ($90) {
        $91 = HEAP32[$84>>2]|0;
        $92 = ((($91)) + 36|0);
        $93 = HEAP32[$92>>2]|0;
        __THREW__ = 0;
        $94 = (invoke_ii($93|0,($84|0))|0);
        $95 = __THREW__; __THREW__ = 0;
        $96 = $95&1;
        if ($96) {
         label = 10;
         break L4;
        } else {
         $$0$i$i$1$i$i = $94;
        }
       } else {
        $97 = HEAP32[$87>>2]|0;
        $$0$i$i$1$i$i = $97;
       }
       $98 = ($$0$i$i$1$i$i|0)==(-1);
       if ($98) {
        HEAP32[$__e>>2] = 0;
        label = 40;
        break;
       } else {
        if ($118) {
         break;
        } else {
         label = 42;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 40) {
      if ($118) {
       label = 42;
      }
     }
     if ((label|0) == 42) {
      $99 = HEAP32[$__err>>2]|0;
      $100 = $99 | 2;
      HEAP32[$__err>>2] = $100;
     }
     $101 = HEAP32[$__b>>2]|0;
     $102 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($102)|0);
     $103 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $104 = ($103|0)==(0|0);
     if (!($104)) {
      $105 = HEAP32[$2>>2]|0;
      __THREW__ = 0;
      invoke_vi($105|0,($103|0));
      $106 = __THREW__; __THREW__ = 0;
      $107 = $106&1;
      if ($107) {
       $108 = ___cxa_find_matching_catch(0|0)|0;
       $109 = tempRet0;
       ___clang_call_terminate($108);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($101|0);
    }
   }
  } while(0);
  if ((label|0) == 10) {
   $36 = ___cxa_find_matching_catch()|0;
   $37 = tempRet0;
   $$0 = $36;$$01 = $37;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
  }
  $110 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($110)|0);
  $$pre7 = HEAP32[$$phi$trans$insert$pre$phiZZZZ2D>>2]|0;
  HEAP32[$$phi$trans$insert$pre$phiZZZZ2D>>2] = 0;
  $111 = ($$pre7|0)==(0|0);
  if ($111) {
   $$114 = $$0;$$1212 = $$01;
  } else {
   $$pre15 = HEAP32[$2>>2]|0;
   $$113 = $$0;$$1211 = $$01;$112 = $$pre15;$113 = $$pre7;
   label = 49;
  }
 }
 if ((label|0) == 49) {
  __THREW__ = 0;
  invoke_vi($112|0,($113|0));
  $114 = __THREW__; __THREW__ = 0;
  $115 = $114&1;
  if ($115) {
   $116 = ___cxa_find_matching_catch(0|0)|0;
   $117 = tempRet0;
   ___clang_call_terminate($116);
   // unreachable;
  } else {
   $$114 = $$113;$$1212 = $$1211;
  }
 }
 ___resumeException($$114|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$0$i$i = 0, $$0$i$i$1$i$i = 0, $$0$i$i$1$i$i$113 = 0, $$0$i$i$1$i$i$147 = 0, $$0$i$i$1$i$i$179 = 0, $$0$i$i$1$i$i$204 = 0, $$0$i$i$1$i$i$51 = 0, $$0$i$i$1$i$i$72 = 0, $$0$i$i$101 = 0, $$0$i$i$104 = 0, $$0$i$i$125 = 0, $$0$i$i$134 = 0, $$0$i$i$137 = 0, $$0$i$i$159 = 0, $$0$i$i$170 = 0, $$0$i$i$194 = 0, $$0$i$i$60 = 0, $$0$i$i$64 = 0, $$0$i$i$81 = 0, $$0$i$i$88 = 0;
 var $$0$i$i$93 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$107 = 0, $$0$i$i$i$i$141 = 0, $$0$i$i$i$i$173 = 0, $$0$i$i$i$i$198 = 0, $$0$i$i$i$i$45 = 0, $$0$i$i$i$i$66 = 0, $$10 = 0, $$lcssa295 = 0, $$lcssa453 = 0, $$lcssa462 = 0, $$lcssa463 = 0, $$phi$trans$insert = 0, $$phi$trans$insert330 = 0, $$pre = 0, $$pre$i$3$i$i$115 = 0, $$pre$i$3$i$i$115316$ph = 0, $$pre$i$3$i$i$115316340 = 0, $$pre$i$3$i$i$149 = 0;
 var $$pre$i$3$i$i$181 = 0, $$pre$i$3$i$i$181309 = 0, $$pre$i$3$i$i$181311 = 0, $$pre$i$3$i$i$206 = 0, $$pre$i$3$i$i$206324 = 0, $$pre$i$3$i$i$206325 = 0, $$pre$i$3$i$i$74 = 0, $$pre$i$3$i$i$74334 = 0, $$pre$i$3$i$i$74336 = 0, $$pre$i$i$i = 0, $$pre$i$i$i$109 = 0, $$pre$i$i$i$143 = 0, $$pre$i$i$i$175 = 0, $$pre$i$i$i$200 = 0, $$pre$i$i$i$47 = 0, $$pre$i$i$i$68 = 0, $$pre313 = 0, $$pre315 = 0, $$pre318 = 0, $$pre319 = 0;
 var $$pre320 = 0, $$pre321 = 0, $$pre322 = 0, $$pre323 = 0, $$pre327 = 0, $$pre328 = 0, $$pre329 = 0, $$pre331 = 0, $$pre332 = 0, $$pre333 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0;
 var $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0;
 var $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0;
 var $__gn = 0, $__grp = 0, $__i$0 = 0, $__i$0$i$i = 0, $__i$0$i$i$29 = 0, $__i$0$i$i$31 = 0, $__i$0$i$i$35 = 0, $__i$0$i$i$40 = 0, $__ng$0 = 0, $__ng$0$lcssa454 = 0, $__ng$2$ph = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$023 = 0, $__p$0 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$022 = 0, $__spaces = 0;
 var $__sym = 0, $__trailing_sign$0 = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond28 = 0, $exitcond$i$i = 0, $exitcond$i$i$30 = 0, $exitcond$i$i$32 = 0, $exitcond$i$i$36 = 0, $exitcond$i$i$41 = 0, $lpad$phi$index = 0, $lpad$phi$index8 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond14 = 0, $or$cond25 = 0, $phitmp$i$4$i$i$116 = 0, $phitmp$i$4$i$i$182 = 0;
 var $phitmp$i$4$i$i$207 = 0, $phitmp$i$4$i$i$75 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i$110 = 0, $phitmp$i$i$i$144 = 0, $phitmp$i$i$i$176 = 0, $phitmp$i$i$i$201 = 0, $phitmp$i$i$i$48 = 0, $phitmp$i$i$i$69 = 0, $switch = 0, $tmp$i$i$118 = 0, $tmp$i$i$184 = 0, $tmp$i$i$209 = 0, $tmp$i$i$77 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 496|0;
 $__gbuf = sp + 96|0;
 $__gb = sp + 88|0;
 $__gn = sp + 80|0;
 $__ge = sp + 76|0;
 $__pat = sp + 500|0;
 $__dp = sp + 72|0;
 $__ts = sp + 68|0;
 $__grp = sp + 56|0;
 $__sym = sp + 44|0;
 $__psn = sp + 32|0;
 $__nsn = sp + 20|0;
 $__spaces = sp + 8|0;
 $__fd = sp + 4|0;
 $__et = sp;
 HEAP32[$0>>2] = $__we;
 $1 = $__gbuf;
 HEAP32[$__gb>>2] = $1;
 $2 = ((($__gb)) + 4|0);
 HEAP32[$2>>2] = (434);
 HEAP32[$__gn>>2] = $__gbuf;
 $3 = ((($__gbuf)) + 400|0);
 HEAP32[$__ge>>2] = $3;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $4 = (($__grp) + ($__i$0$i$i<<2)|0);
  HEAP32[$4>>2] = 0;
  $5 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $5;
 }
 $__i$0$i$i$29 = 0;
 while(1) {
  $exitcond$i$i$30 = ($__i$0$i$i$29|0)==(3);
  if ($exitcond$i$i$30) {
   break;
  }
  $6 = (($__sym) + ($__i$0$i$i$29<<2)|0);
  HEAP32[$6>>2] = 0;
  $7 = (($__i$0$i$i$29) + 1)|0;
  $__i$0$i$i$29 = $7;
 }
 $__i$0$i$i$31 = 0;
 while(1) {
  $exitcond$i$i$32 = ($__i$0$i$i$31|0)==(3);
  if ($exitcond$i$i$32) {
   break;
  }
  $8 = (($__psn) + ($__i$0$i$i$31<<2)|0);
  HEAP32[$8>>2] = 0;
  $9 = (($__i$0$i$i$31) + 1)|0;
  $__i$0$i$i$31 = $9;
 }
 $__i$0$i$i$35 = 0;
 while(1) {
  $exitcond$i$i$36 = ($__i$0$i$i$35|0)==(3);
  if ($exitcond$i$i$36) {
   break;
  }
  $10 = (($__nsn) + ($__i$0$i$i$35<<2)|0);
  HEAP32[$10>>2] = 0;
  $11 = (($__i$0$i$i$35) + 1)|0;
  $__i$0$i$i$35 = $11;
 }
 $__i$0$i$i$40 = 0;
 while(1) {
  $exitcond$i$i$41 = ($__i$0$i$i$40|0)==(3);
  if ($exitcond$i$i$41) {
   break;
  }
  $12 = (($__spaces) + ($__i$0$i$i$40<<2)|0);
  HEAP32[$12>>2] = 0;
  $13 = (($__i$0$i$i$40) + 1)|0;
  $__i$0$i$i$40 = $13;
 }
 __THREW__ = 0;
 invoke_viiiiiiiiii(444,($__intl|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 L21: do {
  if ($15) {
   $74 = ___cxa_find_matching_catch()|0;
   $75 = tempRet0;
   $lpad$phi$index = $74;$lpad$phi$index8 = $75;
  } else {
   $16 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $16;
   $17 = ((($__psn)) + 4|0);
   $18 = ((($__nsn)) + 4|0);
   $19 = ((($__nsn)) + 8|0);
   $20 = ((($__psn)) + 8|0);
   $21 = $__flags & 512;
   $22 = ($21|0)!=(0);
   $23 = ((($__sym)) + 8|0);
   $24 = ((($__sym)) + 4|0);
   $25 = ((($__spaces)) + 4|0);
   $26 = ((($__spaces)) + 8|0);
   $27 = ((($__pat)) + 3|0);
   $28 = ((($__grp)) + 4|0);
   $850 = $__gbuf;$__p$0 = 0;$__trailing_sign$0 = 0;
   L24: while(1) {
    $29 = ($__p$0>>>0)<(4);
    if (!($29)) {
     $$lcssa463 = $850;$__trailing_sign$0$lcssa = $__trailing_sign$0;
     label = 259;
     break;
    }
    $30 = HEAP32[$__b>>2]|0;
    $31 = ($30|0)==(0|0);
    do {
     if ($31) {
      $851 = 1;
     } else {
      $32 = ((($30)) + 12|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ((($30)) + 16|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($33|0)==($35|0);
      if ($36) {
       $37 = HEAP32[$30>>2]|0;
       $38 = ((($37)) + 36|0);
       $39 = HEAP32[$38>>2]|0;
       __THREW__ = 0;
       $40 = (invoke_ii($39|0,($30|0))|0);
       $41 = __THREW__; __THREW__ = 0;
       $42 = $41&1;
       if ($42) {
        label = 40;
        break L24;
       } else {
        $$0$i$i$i$i$45 = $40;
       }
      } else {
       $43 = HEAP32[$33>>2]|0;
       $$0$i$i$i$i$45 = $43;
      }
      $44 = ($$0$i$i$i$i$45|0)==(-1);
      if ($44) {
       HEAP32[$__b>>2] = 0;
       $851 = 1;
       break;
      } else {
       $$pre$i$i$i$47 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i$48 = ($$pre$i$i$i$47|0)==(0|0);
       $851 = $phitmp$i$i$i$48;
       break;
      }
     }
    } while(0);
    $45 = HEAP32[$__e>>2]|0;
    $46 = ($45|0)==(0|0);
    do {
     if ($46) {
      label = 32;
     } else {
      $47 = ((($45)) + 12|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ((($45)) + 16|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = ($48|0)==($50|0);
      if ($51) {
       $52 = HEAP32[$45>>2]|0;
       $53 = ((($52)) + 36|0);
       $54 = HEAP32[$53>>2]|0;
       __THREW__ = 0;
       $55 = (invoke_ii($54|0,($45|0))|0);
       $56 = __THREW__; __THREW__ = 0;
       $57 = $56&1;
       if ($57) {
        label = 40;
        break L24;
       } else {
        $$0$i$i$1$i$i$51 = $55;
       }
      } else {
       $58 = HEAP32[$48>>2]|0;
       $$0$i$i$1$i$i$51 = $58;
      }
      $59 = ($$0$i$i$1$i$i$51|0)==(-1);
      if ($59) {
       HEAP32[$__e>>2] = 0;
       label = 32;
       break;
      } else {
       if ($851) {
        $852 = $45;
        break;
       } else {
        $$lcssa463 = $850;$__trailing_sign$0$lcssa = $__trailing_sign$0;
        label = 259;
        break L24;
       }
      }
     }
    } while(0);
    if ((label|0) == 32) {
     label = 0;
     if ($851) {
      $$lcssa463 = $850;$__trailing_sign$0$lcssa = $__trailing_sign$0;
      label = 259;
      break;
     } else {
      $852 = 0;
     }
    }
    $83 = (($__pat) + ($__p$0)|0);
    $84 = HEAP8[$83>>0]|0;
    $85 = $84 << 24 >> 24;
    L49: do {
     switch ($85|0) {
     case 1:  {
      $cond28 = ($__p$0|0)==(3);
      if ($cond28) {
       $853 = $850;$__trailing_sign$1 = $__trailing_sign$0;
      } else {
       $87 = HEAP32[$__b>>2]|0;
       $88 = ((($87)) + 12|0);
       $89 = HEAP32[$88>>2]|0;
       $90 = ((($87)) + 16|0);
       $91 = HEAP32[$90>>2]|0;
       $92 = ($89|0)==($91|0);
       if ($92) {
        $93 = HEAP32[$87>>2]|0;
        $94 = ((($93)) + 36|0);
        $95 = HEAP32[$94>>2]|0;
        __THREW__ = 0;
        $96 = (invoke_ii($95|0,($87|0))|0);
        $97 = __THREW__; __THREW__ = 0;
        $98 = $97&1;
        if ($98) {
         label = 40;
         break L24;
        } else {
         $$0$i$i$60 = $96;
        }
       } else {
        $99 = HEAP32[$89>>2]|0;
        $$0$i$i$60 = $99;
       }
       $100 = HEAP32[$__ct>>2]|0;
       $101 = ((($100)) + 12|0);
       $102 = HEAP32[$101>>2]|0;
       __THREW__ = 0;
       $103 = (invoke_iiii($102|0,($__ct|0),8192,($$0$i$i$60|0))|0);
       $104 = __THREW__; __THREW__ = 0;
       $105 = $104&1;
       if ($105) {
        label = 40;
        break L24;
       }
       if (!($103)) {
        label = 58;
        break L24;
       }
       $106 = HEAP32[$__b>>2]|0;
       $107 = ((($106)) + 12|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = ((($106)) + 16|0);
       $110 = HEAP32[$109>>2]|0;
       $111 = ($108|0)==($110|0);
       if ($111) {
        $112 = HEAP32[$106>>2]|0;
        $113 = ((($112)) + 40|0);
        $114 = HEAP32[$113>>2]|0;
        __THREW__ = 0;
        $115 = (invoke_ii($114|0,($106|0))|0);
        $116 = __THREW__; __THREW__ = 0;
        $117 = $116&1;
        if ($117) {
         label = 40;
         break L24;
        } else {
         $$0$i$i$64 = $115;
        }
       } else {
        $118 = ((($108)) + 4|0);
        HEAP32[$107>>2] = $118;
        $119 = HEAP32[$108>>2]|0;
        $$0$i$i$64 = $119;
       }
       __THREW__ = 0;
       invoke_vii(445,($__spaces|0),($$0$i$i$64|0));
       $120 = __THREW__; __THREW__ = 0;
       $121 = $120&1;
       if ($121) {
        label = 40;
        break L24;
       } else {
        $$pre$i$3$i$i$74 = $852;$140 = $852;
        label = 60;
       }
      }
      break;
     }
     case 0:  {
      $124 = ($__p$0|0)==(3);
      if ($124) {
       $853 = $850;$__trailing_sign$1 = $__trailing_sign$0;
      } else {
       $$pre$i$3$i$i$74 = $852;$140 = $852;
       label = 60;
      }
      break;
     }
     case 3:  {
      $191 = HEAP8[$__psn>>0]|0;
      $192 = $191 & 1;
      $193 = ($192<<24>>24)==(0);
      $194 = HEAP32[$17>>2]|0;
      $195 = $191&255;
      $196 = $195 >>> 1;
      $197 = $193 ? $196 : $194;
      $198 = HEAP8[$__nsn>>0]|0;
      $199 = $198 & 1;
      $200 = ($199<<24>>24)==(0);
      $201 = HEAP32[$18>>2]|0;
      $202 = $198&255;
      $203 = $202 >>> 1;
      $204 = $200 ? $203 : $201;
      $205 = (0 - ($204))|0;
      $206 = ($197|0)==($205|0);
      if ($206) {
       $853 = $850;$__trailing_sign$1 = $__trailing_sign$0;
      } else {
       $207 = ($197|0)==(0);
       if ($207) {
        $249 = HEAP32[$__b>>2]|0;
        $250 = ((($249)) + 12|0);
        $251 = HEAP32[$250>>2]|0;
        $252 = ((($249)) + 16|0);
        $253 = HEAP32[$252>>2]|0;
        $254 = ($251|0)==($253|0);
        if ($254) {
         $255 = HEAP32[$249>>2]|0;
         $256 = ((($255)) + 36|0);
         $257 = HEAP32[$256>>2]|0;
         __THREW__ = 0;
         $258 = (invoke_ii($257|0,($249|0))|0);
         $259 = __THREW__; __THREW__ = 0;
         $260 = $259&1;
         if ($260) {
          label = 40;
          break L24;
         }
         $$pre333 = HEAP8[$__nsn>>0]|0;
         $$0$i$i$125 = $258;$263 = $$pre333;
        } else {
         $261 = HEAP32[$251>>2]|0;
         $$0$i$i$125 = $261;$263 = $198;
        }
        $262 = $263 & 1;
        $264 = ($262<<24>>24)==(0);
        $265 = HEAP32[$19>>2]|0;
        $266 = $264 ? $18 : $265;
        $267 = HEAP32[$266>>2]|0;
        $268 = ($$0$i$i$125|0)==($267|0);
        if (!($268)) {
         $853 = $850;$__trailing_sign$1 = $__trailing_sign$0;
         break L49;
        }
        $269 = HEAP32[$__b>>2]|0;
        $270 = ((($269)) + 12|0);
        $271 = HEAP32[$270>>2]|0;
        $272 = ((($269)) + 16|0);
        $273 = HEAP32[$272>>2]|0;
        $274 = ($271|0)==($273|0);
        if ($274) {
         $275 = HEAP32[$269>>2]|0;
         $276 = ((($275)) + 40|0);
         $277 = HEAP32[$276>>2]|0;
         __THREW__ = 0;
         (invoke_ii($277|0,($269|0))|0);
         $278 = __THREW__; __THREW__ = 0;
         $279 = $278&1;
         if ($279) {
          label = 40;
          break L24;
         }
        } else {
         $280 = ((($271)) + 4|0);
         HEAP32[$270>>2] = $280;
        }
        HEAP8[$__neg>>0] = 1;
        $281 = HEAP8[$__nsn>>0]|0;
        $282 = $281 & 1;
        $283 = ($282<<24>>24)==(0);
        $284 = HEAP32[$18>>2]|0;
        $285 = $281&255;
        $286 = $285 >>> 1;
        $287 = $283 ? $286 : $284;
        $288 = ($287>>>0)>(1);
        $__nsn$__trailing_sign$0 = $288 ? $__nsn : $__trailing_sign$0;
        $853 = $850;$__trailing_sign$1 = $__nsn$__trailing_sign$0;
        break L49;
       }
       $208 = ($204|0)==(0);
       $209 = HEAP32[$__b>>2]|0;
       $210 = ((($209)) + 12|0);
       $211 = HEAP32[$210>>2]|0;
       $212 = ((($209)) + 16|0);
       $213 = HEAP32[$212>>2]|0;
       $214 = ($211|0)==($213|0);
       if ($208) {
        if ($214) {
         $215 = HEAP32[$209>>2]|0;
         $216 = ((($215)) + 36|0);
         $217 = HEAP32[$216>>2]|0;
         __THREW__ = 0;
         $218 = (invoke_ii($217|0,($209|0))|0);
         $219 = __THREW__; __THREW__ = 0;
         $220 = $219&1;
         if ($220) {
          label = 40;
          break L24;
         }
         $$pre332 = HEAP8[$__psn>>0]|0;
         $$0$i$i$104 = $218;$223 = $$pre332;
        } else {
         $221 = HEAP32[$211>>2]|0;
         $$0$i$i$104 = $221;$223 = $191;
        }
        $222 = $223 & 1;
        $224 = ($222<<24>>24)==(0);
        $225 = HEAP32[$20>>2]|0;
        $226 = $224 ? $17 : $225;
        $227 = HEAP32[$226>>2]|0;
        $228 = ($$0$i$i$104|0)==($227|0);
        if (!($228)) {
         HEAP8[$__neg>>0] = 1;
         $853 = $850;$__trailing_sign$1 = $__trailing_sign$0;
         break L49;
        }
        $229 = HEAP32[$__b>>2]|0;
        $230 = ((($229)) + 12|0);
        $231 = HEAP32[$230>>2]|0;
        $232 = ((($229)) + 16|0);
        $233 = HEAP32[$232>>2]|0;
        $234 = ($231|0)==($233|0);
        if ($234) {
         $235 = HEAP32[$229>>2]|0;
         $236 = ((($235)) + 40|0);
         $237 = HEAP32[$236>>2]|0;
         __THREW__ = 0;
         (invoke_ii($237|0,($229|0))|0);
         $238 = __THREW__; __THREW__ = 0;
         $239 = $238&1;
         if ($239) {
          label = 40;
          break L24;
         }
        } else {
         $240 = ((($231)) + 4|0);
         HEAP32[$230>>2] = $240;
        }
        $241 = HEAP8[$__psn>>0]|0;
        $242 = $241 & 1;
        $243 = ($242<<24>>24)==(0);
        $244 = HEAP32[$17>>2]|0;
        $245 = $241&255;
        $246 = $245 >>> 1;
        $247 = $243 ? $246 : $244;
        $248 = ($247>>>0)>(1);
        $__psn$__trailing_sign$0 = $248 ? $__psn : $__trailing_sign$0;
        $853 = $850;$__trailing_sign$1 = $__psn$__trailing_sign$0;
        break L49;
       }
       if ($214) {
        $289 = HEAP32[$209>>2]|0;
        $290 = ((($289)) + 36|0);
        $291 = HEAP32[$290>>2]|0;
        __THREW__ = 0;
        $292 = (invoke_ii($291|0,($209|0))|0);
        $293 = __THREW__; __THREW__ = 0;
        $294 = $293&1;
        if ($294) {
         label = 40;
         break L24;
        }
        $$pre327 = HEAP8[$__psn>>0]|0;
        $$pre328 = HEAP32[$__b>>2]|0;
        $$phi$trans$insert = ((($$pre328)) + 12|0);
        $$pre329 = HEAP32[$$phi$trans$insert>>2]|0;
        $$phi$trans$insert330 = ((($$pre328)) + 16|0);
        $$pre331 = HEAP32[$$phi$trans$insert330>>2]|0;
        $$0$i$i$137 = $292;$297 = $$pre327;$304 = $$pre328;$305 = $$pre329;$307 = $$pre331;
       } else {
        $295 = HEAP32[$211>>2]|0;
        $$0$i$i$137 = $295;$297 = $191;$304 = $209;$305 = $211;$307 = $213;
       }
       $296 = $297 & 1;
       $298 = ($296<<24>>24)==(0);
       $299 = HEAP32[$20>>2]|0;
       $300 = $298 ? $17 : $299;
       $301 = HEAP32[$300>>2]|0;
       $302 = ($$0$i$i$137|0)==($301|0);
       $303 = ((($304)) + 12|0);
       $306 = ($305|0)==($307|0);
       if ($302) {
        if ($306) {
         $308 = HEAP32[$304>>2]|0;
         $309 = ((($308)) + 40|0);
         $310 = HEAP32[$309>>2]|0;
         __THREW__ = 0;
         (invoke_ii($310|0,($304|0))|0);
         $311 = __THREW__; __THREW__ = 0;
         $312 = $311&1;
         if ($312) {
          label = 40;
          break L24;
         }
        } else {
         $313 = ((($305)) + 4|0);
         HEAP32[$303>>2] = $313;
        }
        $314 = HEAP8[$__psn>>0]|0;
        $315 = $314 & 1;
        $316 = ($315<<24>>24)==(0);
        $317 = HEAP32[$17>>2]|0;
        $318 = $314&255;
        $319 = $318 >>> 1;
        $320 = $316 ? $319 : $317;
        $321 = ($320>>>0)>(1);
        $__psn$__trailing_sign$022 = $321 ? $__psn : $__trailing_sign$0;
        $853 = $850;$__trailing_sign$1 = $__psn$__trailing_sign$022;
        break L49;
       }
       if ($306) {
        $322 = HEAP32[$304>>2]|0;
        $323 = ((($322)) + 36|0);
        $324 = HEAP32[$323>>2]|0;
        __THREW__ = 0;
        $325 = (invoke_ii($324|0,($304|0))|0);
        $326 = __THREW__; __THREW__ = 0;
        $327 = $326&1;
        if ($327) {
         label = 40;
         break L24;
        } else {
         $$0$i$i$159 = $325;
        }
       } else {
        $328 = HEAP32[$305>>2]|0;
        $$0$i$i$159 = $328;
       }
       $329 = HEAP8[$__nsn>>0]|0;
       $330 = $329 & 1;
       $331 = ($330<<24>>24)==(0);
       $332 = HEAP32[$19>>2]|0;
       $333 = $331 ? $18 : $332;
       $334 = HEAP32[$333>>2]|0;
       $335 = ($$0$i$i$159|0)==($334|0);
       if (!($335)) {
        label = 123;
        break L24;
       }
       $336 = HEAP32[$__b>>2]|0;
       $337 = ((($336)) + 12|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ((($336)) + 16|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($338|0)==($340|0);
       if ($341) {
        $342 = HEAP32[$336>>2]|0;
        $343 = ((($342)) + 40|0);
        $344 = HEAP32[$343>>2]|0;
        __THREW__ = 0;
        (invoke_ii($344|0,($336|0))|0);
        $345 = __THREW__; __THREW__ = 0;
        $346 = $345&1;
        if ($346) {
         label = 40;
         break L24;
        }
       } else {
        $347 = ((($338)) + 4|0);
        HEAP32[$337>>2] = $347;
       }
       HEAP8[$__neg>>0] = 1;
       $348 = HEAP8[$__nsn>>0]|0;
       $349 = $348 & 1;
       $350 = ($349<<24>>24)==(0);
       $351 = HEAP32[$18>>2]|0;
       $352 = $348&255;
       $353 = $352 >>> 1;
       $354 = $350 ? $353 : $351;
       $355 = ($354>>>0)>(1);
       $__nsn$__trailing_sign$023 = $355 ? $__nsn : $__trailing_sign$0;
       $853 = $850;$__trailing_sign$1 = $__nsn$__trailing_sign$023;
      }
      break;
     }
     case 2:  {
      $358 = ($__trailing_sign$0|0)!=(0|0);
      $359 = ($__p$0>>>0)<(2);
      $or$cond = $359 | $358;
      if (!($or$cond)) {
       $360 = ($__p$0|0)==(2);
       $361 = HEAP8[$27>>0]|0;
       $362 = ($361<<24>>24)!=(0);
       $363 = $360 & $362;
       $brmerge = $22 | $363;
       if (!($brmerge)) {
        $853 = $850;$__trailing_sign$1 = 0;
        break L49;
       }
      }
      $364 = HEAP8[$__sym>>0]|0;
      $365 = $364 & 1;
      $366 = ($365<<24>>24)==(0);
      $367 = HEAP32[$23>>2]|0;
      $368 = $366 ? $24 : $367;
      $369 = $368;
      $370 = ($__p$0|0)==(0);
      L118: do {
       if ($370) {
        $$pre$i$3$i$i$206 = $852;$426 = $364;$431 = $367;$435 = $369;$453 = $852;
       } else {
        $371 = (($__p$0) + -1)|0;
        $372 = (($__pat) + ($371)|0);
        $373 = HEAP8[$372>>0]|0;
        $switch = ($373&255)<(2);
        if ($switch) {
         $375 = $364;$380 = $367;$384 = $369;
         while(1) {
          $374 = $375 & 1;
          $376 = ($374<<24>>24)==(0);
          $377 = HEAP32[$24>>2]|0;
          $378 = $375&255;
          $379 = $378 >>> 1;
          $381 = $376 ? $24 : $380;
          $382 = $376 ? $379 : $377;
          $383 = (($381) + ($382<<2)|0);
          $385 = $384;
          $386 = ($385|0)==($383|0);
          if ($386) {
           $397 = $375;$399 = $380;$403 = $384;
           break;
          }
          $387 = HEAP32[$385>>2]|0;
          $388 = HEAP32[$__ct>>2]|0;
          $389 = ((($388)) + 12|0);
          $390 = HEAP32[$389>>2]|0;
          __THREW__ = 0;
          $391 = (invoke_iiii($390|0,($__ct|0),8192,($387|0))|0);
          $392 = __THREW__; __THREW__ = 0;
          $393 = $392&1;
          if ($393) {
           label = 37;
           break L24;
          }
          if (!($391)) {
           $$lcssa462 = $384;
           label = 131;
           break;
          }
          $394 = ((($385)) + 4|0);
          $395 = $394;
          $$pre318 = HEAP8[$__sym>>0]|0;
          $$pre319 = HEAP32[$23>>2]|0;
          $375 = $$pre318;$380 = $$pre319;$384 = $395;
         }
         if ((label|0) == 131) {
          label = 0;
          $$pre320 = HEAP8[$__sym>>0]|0;
          $$pre321 = HEAP32[$23>>2]|0;
          $397 = $$pre320;$399 = $$pre321;$403 = $$lcssa462;
         }
         $396 = $397 & 1;
         $398 = ($396<<24>>24)==(0);
         $400 = $398 ? $24 : $399;
         $401 = $400;
         $402 = (($403) - ($401))|0;
         $404 = $402 >> 2;
         $405 = HEAP8[$__spaces>>0]|0;
         $406 = $405 & 1;
         $407 = ($406<<24>>24)==(0);
         $408 = HEAP32[$25>>2]|0;
         $409 = $405&255;
         $410 = $409 >>> 1;
         $411 = $407 ? $410 : $408;
         $412 = ($404>>>0)>($411>>>0);
         if ($412) {
          $$pre$i$3$i$i$206 = $852;$426 = $397;$431 = $399;$435 = $401;$453 = $852;
         } else {
          $413 = HEAP32[$26>>2]|0;
          $414 = $407 ? $25 : $413;
          $415 = (($414) + ($411<<2)|0);
          $416 = (0 - ($404))|0;
          $417 = (($415) + ($416<<2)|0);
          $$sink = $400;$418 = $417;
          while(1) {
           $419 = ($418|0)==($415|0);
           if ($419) {
            $$pre$i$3$i$i$206 = $852;$426 = $397;$431 = $399;$435 = $403;$453 = $852;
            break L118;
           }
           $420 = HEAP32[$418>>2]|0;
           $421 = HEAP32[$$sink>>2]|0;
           $422 = ($420|0)==($421|0);
           if (!($422)) {
            $$pre$i$3$i$i$206 = $852;$426 = $397;$431 = $399;$435 = $401;$453 = $852;
            break L118;
           }
           $423 = ((($418)) + 4|0);
           $424 = ((($$sink)) + 4|0);
           $$sink = $424;$418 = $423;
          }
         }
        } else {
         $$pre$i$3$i$i$206 = $852;$426 = $364;$431 = $367;$435 = $369;$453 = $852;
        }
       }
      } while(0);
      L133: while(1) {
       $425 = $426 & 1;
       $427 = ($425<<24>>24)==(0);
       $428 = HEAP32[$24>>2]|0;
       $429 = $426&255;
       $430 = $429 >>> 1;
       $432 = $427 ? $24 : $431;
       $433 = $427 ? $430 : $428;
       $434 = (($432) + ($433<<2)|0);
       $436 = $435;
       $437 = ($436|0)==($434|0);
       if ($437) {
        $$lcssa295 = $434;
        break;
       }
       $438 = HEAP32[$__b>>2]|0;
       $439 = ($438|0)==(0|0);
       do {
        if ($439) {
         $468 = 1;
        } else {
         $440 = ((($438)) + 12|0);
         $441 = HEAP32[$440>>2]|0;
         $442 = ((($438)) + 16|0);
         $443 = HEAP32[$442>>2]|0;
         $444 = ($441|0)==($443|0);
         if ($444) {
          $445 = HEAP32[$438>>2]|0;
          $446 = ((($445)) + 36|0);
          $447 = HEAP32[$446>>2]|0;
          __THREW__ = 0;
          $448 = (invoke_ii($447|0,($438|0))|0);
          $449 = __THREW__; __THREW__ = 0;
          $450 = $449&1;
          if ($450) {
           label = 36;
           break L24;
          } else {
           $$0$i$i$i$i$198 = $448;
          }
         } else {
          $451 = HEAP32[$441>>2]|0;
          $$0$i$i$i$i$198 = $451;
         }
         $452 = ($$0$i$i$i$i$198|0)==(-1);
         if ($452) {
          HEAP32[$__b>>2] = 0;
          $468 = 1;
          break;
         } else {
          $$pre$i$i$i$200 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i$201 = ($$pre$i$i$i$200|0)==(0|0);
          $468 = $phitmp$i$i$i$201;
          break;
         }
        }
       } while(0);
       $454 = ($453|0)==(0|0);
       do {
        if ($454) {
         $$pre$i$3$i$i$206325 = $$pre$i$3$i$i$206;
         label = 152;
        } else {
         $455 = ((($453)) + 12|0);
         $456 = HEAP32[$455>>2]|0;
         $457 = ((($453)) + 16|0);
         $458 = HEAP32[$457>>2]|0;
         $459 = ($456|0)==($458|0);
         if ($459) {
          $460 = HEAP32[$453>>2]|0;
          $461 = ((($460)) + 36|0);
          $462 = HEAP32[$461>>2]|0;
          __THREW__ = 0;
          $463 = (invoke_ii($462|0,($453|0))|0);
          $464 = __THREW__; __THREW__ = 0;
          $465 = $464&1;
          if ($465) {
           label = 36;
           break L24;
          } else {
           $$0$i$i$1$i$i$204 = $463;
          }
         } else {
          $466 = HEAP32[$456>>2]|0;
          $$0$i$i$1$i$i$204 = $466;
         }
         $467 = ($$0$i$i$1$i$i$204|0)==(-1);
         if ($467) {
          HEAP32[$__e>>2] = 0;
          $$pre$i$3$i$i$206325 = 0;
          label = 152;
          break;
         } else {
          $phitmp$i$4$i$i$207 = ($$pre$i$3$i$i$206|0)==(0|0);
          $tmp$i$i$209 = $468 ^ $phitmp$i$4$i$i$207;
          if ($tmp$i$i$209) {
           $$pre$i$3$i$i$206324 = $$pre$i$3$i$i$206;$855 = $$pre$i$3$i$i$206;
           break;
          } else {
           $$lcssa295 = $436;
           break L133;
          }
         }
        }
       } while(0);
       if ((label|0) == 152) {
        label = 0;
        if ($468) {
         $$lcssa295 = $436;
         break;
        } else {
         $$pre$i$3$i$i$206324 = $$pre$i$3$i$i$206325;$855 = 0;
        }
       }
       $469 = HEAP32[$__b>>2]|0;
       $470 = ((($469)) + 12|0);
       $471 = HEAP32[$470>>2]|0;
       $472 = ((($469)) + 16|0);
       $473 = HEAP32[$472>>2]|0;
       $474 = ($471|0)==($473|0);
       if ($474) {
        $475 = HEAP32[$469>>2]|0;
        $476 = ((($475)) + 36|0);
        $477 = HEAP32[$476>>2]|0;
        __THREW__ = 0;
        $478 = (invoke_ii($477|0,($469|0))|0);
        $479 = __THREW__; __THREW__ = 0;
        $480 = $479&1;
        if ($480) {
         label = 36;
         break L24;
        } else {
         $$0$i$i$194 = $478;
        }
       } else {
        $481 = HEAP32[$471>>2]|0;
        $$0$i$i$194 = $481;
       }
       $482 = HEAP32[$436>>2]|0;
       $483 = ($$0$i$i$194|0)==($482|0);
       if (!($483)) {
        $$lcssa295 = $436;
        break;
       }
       $484 = HEAP32[$__b>>2]|0;
       $485 = ((($484)) + 12|0);
       $486 = HEAP32[$485>>2]|0;
       $487 = ((($484)) + 16|0);
       $488 = HEAP32[$487>>2]|0;
       $489 = ($486|0)==($488|0);
       if ($489) {
        $490 = HEAP32[$484>>2]|0;
        $491 = ((($490)) + 40|0);
        $492 = HEAP32[$491>>2]|0;
        __THREW__ = 0;
        (invoke_ii($492|0,($484|0))|0);
        $493 = __THREW__; __THREW__ = 0;
        $494 = $493&1;
        if ($494) {
         label = 36;
         break L24;
        }
       } else {
        $495 = ((($486)) + 4|0);
        HEAP32[$485>>2] = $495;
       }
       $496 = ((($436)) + 4|0);
       $497 = $496;
       $$pre322 = HEAP8[$__sym>>0]|0;
       $$pre323 = HEAP32[$23>>2]|0;
       $$pre$i$3$i$i$206 = $$pre$i$3$i$i$206324;$426 = $$pre322;$431 = $$pre323;$435 = $497;$453 = $855;
      }
      if ($22) {
       $498 = HEAP8[$__sym>>0]|0;
       $499 = $498 & 1;
       $500 = ($499<<24>>24)==(0);
       $501 = HEAP32[$23>>2]|0;
       $502 = HEAP32[$24>>2]|0;
       $503 = $498&255;
       $504 = $503 >>> 1;
       $505 = $500 ? $24 : $501;
       $506 = $500 ? $504 : $502;
       $507 = (($505) + ($506<<2)|0);
       $508 = ($$lcssa295|0)==($507|0);
       if ($508) {
        $853 = $850;$__trailing_sign$1 = $__trailing_sign$0;
       } else {
        label = 164;
        break L24;
       }
      } else {
       $853 = $850;$__trailing_sign$1 = $__trailing_sign$0;
      }
      break;
     }
     case 4:  {
      $86 = HEAP32[$__ts>>2]|0;
      $$pre$i$3$i$i$181 = $852;$526 = $852;$580 = $850;$__ng$0 = 0;
      L170: while(1) {
       $511 = HEAP32[$__b>>2]|0;
       $512 = ($511|0)==(0|0);
       do {
        if ($512) {
         $541 = 1;
        } else {
         $513 = ((($511)) + 12|0);
         $514 = HEAP32[$513>>2]|0;
         $515 = ((($511)) + 16|0);
         $516 = HEAP32[$515>>2]|0;
         $517 = ($514|0)==($516|0);
         if ($517) {
          $518 = HEAP32[$511>>2]|0;
          $519 = ((($518)) + 36|0);
          $520 = HEAP32[$519>>2]|0;
          __THREW__ = 0;
          $521 = (invoke_ii($520|0,($511|0))|0);
          $522 = __THREW__; __THREW__ = 0;
          $523 = $522&1;
          if ($523) {
           label = 39;
           break L24;
          } else {
           $$0$i$i$i$i$173 = $521;
          }
         } else {
          $524 = HEAP32[$514>>2]|0;
          $$0$i$i$i$i$173 = $524;
         }
         $525 = ($$0$i$i$i$i$173|0)==(-1);
         if ($525) {
          HEAP32[$__b>>2] = 0;
          $541 = 1;
          break;
         } else {
          $$pre$i$i$i$175 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i$176 = ($$pre$i$i$i$175|0)==(0|0);
          $541 = $phitmp$i$i$i$176;
          break;
         }
        }
       } while(0);
       $527 = ($526|0)==(0|0);
       do {
        if ($527) {
         $$pre$i$3$i$i$181309 = $$pre$i$3$i$i$181;
         label = 178;
        } else {
         $528 = ((($526)) + 12|0);
         $529 = HEAP32[$528>>2]|0;
         $530 = ((($526)) + 16|0);
         $531 = HEAP32[$530>>2]|0;
         $532 = ($529|0)==($531|0);
         if ($532) {
          $533 = HEAP32[$526>>2]|0;
          $534 = ((($533)) + 36|0);
          $535 = HEAP32[$534>>2]|0;
          __THREW__ = 0;
          $536 = (invoke_ii($535|0,($526|0))|0);
          $537 = __THREW__; __THREW__ = 0;
          $538 = $537&1;
          if ($538) {
           label = 39;
           break L24;
          } else {
           $$0$i$i$1$i$i$179 = $536;
          }
         } else {
          $539 = HEAP32[$529>>2]|0;
          $$0$i$i$1$i$i$179 = $539;
         }
         $540 = ($$0$i$i$1$i$i$179|0)==(-1);
         if ($540) {
          HEAP32[$__e>>2] = 0;
          $$pre$i$3$i$i$181309 = 0;
          label = 178;
          break;
         } else {
          $phitmp$i$4$i$i$182 = ($$pre$i$3$i$i$181|0)==(0|0);
          $tmp$i$i$184 = $541 ^ $phitmp$i$4$i$i$182;
          if ($tmp$i$i$184) {
           $$pre$i$3$i$i$181311 = $$pre$i$3$i$i$181;$856 = $$pre$i$3$i$i$181;
           break;
          } else {
           $$lcssa453 = $580;$$pre$i$3$i$i$149 = $$pre$i$3$i$i$181;$__ng$0$lcssa454 = $__ng$0;
           break L170;
          }
         }
        }
       } while(0);
       if ((label|0) == 178) {
        label = 0;
        if ($541) {
         $$lcssa453 = $580;$$pre$i$3$i$i$149 = $$pre$i$3$i$i$181309;$__ng$0$lcssa454 = $__ng$0;
         break;
        } else {
         $$pre$i$3$i$i$181311 = $$pre$i$3$i$i$181309;$856 = 0;
        }
       }
       $542 = HEAP32[$__b>>2]|0;
       $543 = ((($542)) + 12|0);
       $544 = HEAP32[$543>>2]|0;
       $545 = ((($542)) + 16|0);
       $546 = HEAP32[$545>>2]|0;
       $547 = ($544|0)==($546|0);
       if ($547) {
        $548 = HEAP32[$542>>2]|0;
        $549 = ((($548)) + 36|0);
        $550 = HEAP32[$549>>2]|0;
        __THREW__ = 0;
        $551 = (invoke_ii($550|0,($542|0))|0);
        $552 = __THREW__; __THREW__ = 0;
        $553 = $552&1;
        if ($553) {
         label = 39;
         break L24;
        } else {
         $$0$i$i$170 = $551;
        }
       } else {
        $554 = HEAP32[$544>>2]|0;
        $$0$i$i$170 = $554;
       }
       $555 = HEAP32[$__ct>>2]|0;
       $556 = ((($555)) + 12|0);
       $557 = HEAP32[$556>>2]|0;
       __THREW__ = 0;
       $558 = (invoke_iiii($557|0,($__ct|0),2048,($$0$i$i$170|0))|0);
       $559 = __THREW__; __THREW__ = 0;
       $560 = $559&1;
       if ($560) {
        label = 39;
        break L24;
       }
       if ($558) {
        $561 = HEAP32[$__wn>>2]|0;
        $562 = HEAP32[$0>>2]|0;
        $563 = ($561|0)==($562|0);
        if ($563) {
         __THREW__ = 0;
         invoke_viii(446,($__wb|0),($__wn|0),($0|0));
         $564 = __THREW__; __THREW__ = 0;
         $565 = $564&1;
         if ($565) {
          label = 39;
          break L24;
         }
         $$pre313 = HEAP32[$__wn>>2]|0;
         $567 = $$pre313;
        } else {
         $567 = $561;
        }
        $566 = ((($567)) + 4|0);
        HEAP32[$__wn>>2] = $566;
        HEAP32[$567>>2] = $$0$i$i$170;
        $568 = (($__ng$0) + 1)|0;
        $857 = $580;$__ng$2$ph = $568;
       } else {
        $569 = HEAP8[$__grp>>0]|0;
        $570 = $569 & 1;
        $571 = ($570<<24>>24)==(0);
        $572 = HEAP32[$28>>2]|0;
        $573 = $569&255;
        $574 = $573 >>> 1;
        $575 = $571 ? $574 : $572;
        $576 = ($575|0)!=(0);
        $577 = ($__ng$0|0)!=(0);
        $or$cond12 = $577 & $576;
        $578 = ($$0$i$i$170|0)==($86|0);
        $or$cond25 = $578 & $or$cond12;
        if (!($or$cond25)) {
         $$lcssa453 = $580;$$pre$i$3$i$i$149 = $$pre$i$3$i$i$181311;$__ng$0$lcssa454 = $__ng$0;
         break;
        }
        $579 = HEAP32[$__ge>>2]|0;
        $581 = ($580|0)==($579|0);
        if ($581) {
         __THREW__ = 0;
         invoke_viii(439,($__gb|0),($__gn|0),($__ge|0));
         $582 = __THREW__; __THREW__ = 0;
         $583 = $582&1;
         if ($583) {
          label = 39;
          break L24;
         }
         $$pre = HEAP32[$__gn>>2]|0;
         $585 = $$pre;
        } else {
         $585 = $580;
        }
        $584 = ((($585)) + 4|0);
        HEAP32[$__gn>>2] = $584;
        HEAP32[$585>>2] = $__ng$0;
        $857 = $584;$__ng$2$ph = 0;
       }
       $586 = HEAP32[$__b>>2]|0;
       $587 = ((($586)) + 12|0);
       $588 = HEAP32[$587>>2]|0;
       $589 = ((($586)) + 16|0);
       $590 = HEAP32[$589>>2]|0;
       $591 = ($588|0)==($590|0);
       if ($591) {
        $592 = HEAP32[$586>>2]|0;
        $593 = ((($592)) + 40|0);
        $594 = HEAP32[$593>>2]|0;
        __THREW__ = 0;
        (invoke_ii($594|0,($586|0))|0);
        $595 = __THREW__; __THREW__ = 0;
        $596 = $595&1;
        if ($596) {
         label = 39;
         break L24;
        } else {
         $$pre$i$3$i$i$181 = $$pre$i$3$i$i$181311;$526 = $856;$580 = $857;$__ng$0 = $__ng$2$ph;
         continue;
        }
       } else {
        $597 = ((($588)) + 4|0);
        HEAP32[$587>>2] = $597;
        $$pre$i$3$i$i$181 = $$pre$i$3$i$i$181311;$526 = $856;$580 = $857;$__ng$0 = $__ng$2$ph;
        continue;
       }
      }
      $598 = HEAP32[$__gb>>2]|0;
      $599 = ($598|0)!=($$lcssa453|0);
      $600 = ($__ng$0$lcssa454|0)!=(0);
      $or$cond14 = $600 & $599;
      if ($or$cond14) {
       $601 = HEAP32[$__ge>>2]|0;
       $602 = ($$lcssa453|0)==($601|0);
       if ($602) {
        __THREW__ = 0;
        invoke_viii(439,($__gb|0),($__gn|0),($__ge|0));
        $603 = __THREW__; __THREW__ = 0;
        $604 = $603&1;
        if ($604) {
         label = 40;
         break L24;
        }
        $$pre315 = HEAP32[$__gn>>2]|0;
        $606 = $$pre315;
       } else {
        $606 = $$lcssa453;
       }
       $605 = ((($606)) + 4|0);
       HEAP32[$__gn>>2] = $605;
       HEAP32[$606>>2] = $__ng$0$lcssa454;
       $858 = $605;
      } else {
       $858 = $$lcssa453;
      }
      $607 = HEAP32[$__fd>>2]|0;
      $608 = ($607|0)>(0);
      L223: do {
       if ($608) {
        $609 = HEAP32[$__b>>2]|0;
        $610 = ($609|0)==(0|0);
        do {
         if ($610) {
          $859 = 1;
         } else {
          $611 = ((($609)) + 12|0);
          $612 = HEAP32[$611>>2]|0;
          $613 = ((($609)) + 16|0);
          $614 = HEAP32[$613>>2]|0;
          $615 = ($612|0)==($614|0);
          if ($615) {
           $616 = HEAP32[$609>>2]|0;
           $617 = ((($616)) + 36|0);
           $618 = HEAP32[$617>>2]|0;
           __THREW__ = 0;
           $619 = (invoke_ii($618|0,($609|0))|0);
           $620 = __THREW__; __THREW__ = 0;
           $621 = $620&1;
           if ($621) {
            label = 40;
            break L24;
           } else {
            $$0$i$i$i$i$141 = $619;
           }
          } else {
           $622 = HEAP32[$612>>2]|0;
           $$0$i$i$i$i$141 = $622;
          }
          $623 = ($$0$i$i$i$i$141|0)==(-1);
          if ($623) {
           HEAP32[$__b>>2] = 0;
           $859 = 1;
           break;
          } else {
           $$pre$i$i$i$143 = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i$144 = ($$pre$i$i$i$143|0)==(0|0);
           $859 = $phitmp$i$i$i$144;
           break;
          }
         }
        } while(0);
        $624 = ($$pre$i$3$i$i$149|0)==(0|0);
        do {
         if ($624) {
          label = 216;
         } else {
          $625 = ((($$pre$i$3$i$i$149)) + 12|0);
          $626 = HEAP32[$625>>2]|0;
          $627 = ((($$pre$i$3$i$i$149)) + 16|0);
          $628 = HEAP32[$627>>2]|0;
          $629 = ($626|0)==($628|0);
          if ($629) {
           $630 = HEAP32[$$pre$i$3$i$i$149>>2]|0;
           $631 = ((($630)) + 36|0);
           $632 = HEAP32[$631>>2]|0;
           __THREW__ = 0;
           $633 = (invoke_ii($632|0,($$pre$i$3$i$i$149|0))|0);
           $634 = __THREW__; __THREW__ = 0;
           $635 = $634&1;
           if ($635) {
            label = 40;
            break L24;
           } else {
            $$0$i$i$1$i$i$147 = $633;
           }
          } else {
           $636 = HEAP32[$626>>2]|0;
           $$0$i$i$1$i$i$147 = $636;
          }
          $637 = ($$0$i$i$1$i$i$147|0)==(-1);
          if ($637) {
           HEAP32[$__e>>2] = 0;
           label = 216;
           break;
          } else {
           if ($859) {
            $860 = $$pre$i$3$i$i$149;
            break;
           } else {
            label = 222;
            break L24;
           }
          }
         }
        } while(0);
        if ((label|0) == 216) {
         label = 0;
         if ($859) {
          label = 222;
          break L24;
         } else {
          $860 = 0;
         }
        }
        $638 = HEAP32[$__b>>2]|0;
        $639 = ((($638)) + 12|0);
        $640 = HEAP32[$639>>2]|0;
        $641 = ((($638)) + 16|0);
        $642 = HEAP32[$641>>2]|0;
        $643 = ($640|0)==($642|0);
        if ($643) {
         $644 = HEAP32[$638>>2]|0;
         $645 = ((($644)) + 36|0);
         $646 = HEAP32[$645>>2]|0;
         __THREW__ = 0;
         $647 = (invoke_ii($646|0,($638|0))|0);
         $648 = __THREW__; __THREW__ = 0;
         $649 = $648&1;
         if ($649) {
          label = 40;
          break L24;
         } else {
          $$0$i$i$134 = $647;
         }
        } else {
         $650 = HEAP32[$640>>2]|0;
         $$0$i$i$134 = $650;
        }
        $651 = HEAP32[$__dp>>2]|0;
        $652 = ($$0$i$i$134|0)==($651|0);
        if (!($652)) {
         label = 222;
         break L24;
        }
        $655 = HEAP32[$__b>>2]|0;
        $656 = ((($655)) + 12|0);
        $657 = HEAP32[$656>>2]|0;
        $658 = ((($655)) + 16|0);
        $659 = HEAP32[$658>>2]|0;
        $660 = ($657|0)==($659|0);
        if ($660) {
         $661 = HEAP32[$655>>2]|0;
         $662 = ((($661)) + 40|0);
         $663 = HEAP32[$662>>2]|0;
         __THREW__ = 0;
         (invoke_ii($663|0,($655|0))|0);
         $664 = __THREW__; __THREW__ = 0;
         $665 = $664&1;
         if ($665) {
          label = 40;
          break L24;
         } else {
          $$pre$i$3$i$i$115 = $860;$667 = $607;$684 = $860;
         }
        } else {
         $666 = ((($657)) + 4|0);
         HEAP32[$656>>2] = $666;
         $$pre$i$3$i$i$115 = $860;$667 = $607;$684 = $860;
        }
        while(1) {
         $668 = ($667|0)>(0);
         if (!($668)) {
          break L223;
         }
         $669 = HEAP32[$__b>>2]|0;
         $670 = ($669|0)==(0|0);
         do {
          if ($670) {
           $699 = 1;
          } else {
           $671 = ((($669)) + 12|0);
           $672 = HEAP32[$671>>2]|0;
           $673 = ((($669)) + 16|0);
           $674 = HEAP32[$673>>2]|0;
           $675 = ($672|0)==($674|0);
           if ($675) {
            $676 = HEAP32[$669>>2]|0;
            $677 = ((($676)) + 36|0);
            $678 = HEAP32[$677>>2]|0;
            __THREW__ = 0;
            $679 = (invoke_ii($678|0,($669|0))|0);
            $680 = __THREW__; __THREW__ = 0;
            $681 = $680&1;
            if ($681) {
             label = 38;
             break L24;
            } else {
             $$0$i$i$i$i$107 = $679;
            }
           } else {
            $682 = HEAP32[$672>>2]|0;
            $$0$i$i$i$i$107 = $682;
           }
           $683 = ($$0$i$i$i$i$107|0)==(-1);
           if ($683) {
            HEAP32[$__b>>2] = 0;
            $699 = 1;
            break;
           } else {
            $$pre$i$i$i$109 = HEAP32[$__b>>2]|0;
            $phitmp$i$i$i$110 = ($$pre$i$i$i$109|0)==(0|0);
            $699 = $phitmp$i$i$i$110;
            break;
           }
          }
         } while(0);
         $685 = ($684|0)==(0|0);
         do {
          if ($685) {
           $$pre$i$3$i$i$115316$ph = $$pre$i$3$i$i$115;
           label = 240;
          } else {
           $686 = ((($684)) + 12|0);
           $687 = HEAP32[$686>>2]|0;
           $688 = ((($684)) + 16|0);
           $689 = HEAP32[$688>>2]|0;
           $690 = ($687|0)==($689|0);
           if ($690) {
            $691 = HEAP32[$684>>2]|0;
            $692 = ((($691)) + 36|0);
            $693 = HEAP32[$692>>2]|0;
            __THREW__ = 0;
            $694 = (invoke_ii($693|0,($684|0))|0);
            $695 = __THREW__; __THREW__ = 0;
            $696 = $695&1;
            if ($696) {
             label = 38;
             break L24;
            } else {
             $$0$i$i$1$i$i$113 = $694;
            }
           } else {
            $697 = HEAP32[$687>>2]|0;
            $$0$i$i$1$i$i$113 = $697;
           }
           $698 = ($$0$i$i$1$i$i$113|0)==(-1);
           if ($698) {
            HEAP32[$__e>>2] = 0;
            $$pre$i$3$i$i$115316$ph = 0;
            label = 240;
            break;
           } else {
            $phitmp$i$4$i$i$116 = ($$pre$i$3$i$i$115|0)==(0|0);
            $tmp$i$i$118 = $699 ^ $phitmp$i$4$i$i$116;
            if ($tmp$i$i$118) {
             $$pre$i$3$i$i$115316340 = $$pre$i$3$i$i$115;$861 = $$pre$i$3$i$i$115;
             break;
            } else {
             label = 247;
             break L24;
            }
           }
          }
         } while(0);
         if ((label|0) == 240) {
          label = 0;
          if ($699) {
           label = 247;
           break L24;
          } else {
           $$pre$i$3$i$i$115316340 = $$pre$i$3$i$i$115316$ph;$861 = 0;
          }
         }
         $700 = HEAP32[$__b>>2]|0;
         $701 = ((($700)) + 12|0);
         $702 = HEAP32[$701>>2]|0;
         $703 = ((($700)) + 16|0);
         $704 = HEAP32[$703>>2]|0;
         $705 = ($702|0)==($704|0);
         if ($705) {
          $706 = HEAP32[$700>>2]|0;
          $707 = ((($706)) + 36|0);
          $708 = HEAP32[$707>>2]|0;
          __THREW__ = 0;
          $709 = (invoke_ii($708|0,($700|0))|0);
          $710 = __THREW__; __THREW__ = 0;
          $711 = $710&1;
          if ($711) {
           label = 38;
           break L24;
          } else {
           $$0$i$i$101 = $709;
          }
         } else {
          $712 = HEAP32[$702>>2]|0;
          $$0$i$i$101 = $712;
         }
         $713 = HEAP32[$__ct>>2]|0;
         $714 = ((($713)) + 12|0);
         $715 = HEAP32[$714>>2]|0;
         __THREW__ = 0;
         $716 = (invoke_iiii($715|0,($__ct|0),2048,($$0$i$i$101|0))|0);
         $717 = __THREW__; __THREW__ = 0;
         $718 = $717&1;
         if ($718) {
          label = 38;
          break L24;
         }
         if (!($716)) {
          label = 247;
          break L24;
         }
         $721 = HEAP32[$__wn>>2]|0;
         $722 = HEAP32[$0>>2]|0;
         $723 = ($721|0)==($722|0);
         if ($723) {
          __THREW__ = 0;
          invoke_viii(446,($__wb|0),($__wn|0),($0|0));
          $724 = __THREW__; __THREW__ = 0;
          $725 = $724&1;
          if ($725) {
           label = 38;
           break L24;
          }
         }
         $726 = HEAP32[$__b>>2]|0;
         $727 = ((($726)) + 12|0);
         $728 = HEAP32[$727>>2]|0;
         $729 = ((($726)) + 16|0);
         $730 = HEAP32[$729>>2]|0;
         $731 = ($728|0)==($730|0);
         if ($731) {
          $732 = HEAP32[$726>>2]|0;
          $733 = ((($732)) + 36|0);
          $734 = HEAP32[$733>>2]|0;
          __THREW__ = 0;
          $735 = (invoke_ii($734|0,($726|0))|0);
          $736 = __THREW__; __THREW__ = 0;
          $737 = $736&1;
          if ($737) {
           label = 38;
           break L24;
          } else {
           $$0$i$i$93 = $735;
          }
         } else {
          $738 = HEAP32[$728>>2]|0;
          $$0$i$i$93 = $738;
         }
         $739 = HEAP32[$__wn>>2]|0;
         $740 = ((($739)) + 4|0);
         HEAP32[$__wn>>2] = $740;
         HEAP32[$739>>2] = $$0$i$i$93;
         $741 = (($667) + -1)|0;
         HEAP32[$__fd>>2] = $741;
         $742 = HEAP32[$__b>>2]|0;
         $743 = ((($742)) + 12|0);
         $744 = HEAP32[$743>>2]|0;
         $745 = ((($742)) + 16|0);
         $746 = HEAP32[$745>>2]|0;
         $747 = ($744|0)==($746|0);
         if ($747) {
          $748 = HEAP32[$742>>2]|0;
          $749 = ((($748)) + 40|0);
          $750 = HEAP32[$749>>2]|0;
          __THREW__ = 0;
          (invoke_ii($750|0,($742|0))|0);
          $751 = __THREW__; __THREW__ = 0;
          $752 = $751&1;
          if ($752) {
           label = 38;
           break L24;
          } else {
           $$pre$i$3$i$i$115 = $$pre$i$3$i$i$115316340;$667 = $741;$684 = $861;
           continue;
          }
         } else {
          $753 = ((($744)) + 4|0);
          HEAP32[$743>>2] = $753;
          $$pre$i$3$i$i$115 = $$pre$i$3$i$i$115316340;$667 = $741;$684 = $861;
          continue;
         }
        }
       }
      } while(0);
      $754 = HEAP32[$__wn>>2]|0;
      $755 = HEAP32[$__wb>>2]|0;
      $756 = ($754|0)==($755|0);
      if ($756) {
       label = 257;
       break L24;
      } else {
       $853 = $858;$__trailing_sign$1 = $__trailing_sign$0;
      }
      break;
     }
     default: {
      $853 = $850;$__trailing_sign$1 = $__trailing_sign$0;
     }
     }
    } while(0);
    L297: do {
     if ((label|0) == 60) {
      while(1) {
       label = 0;
       $125 = HEAP32[$__b>>2]|0;
       $126 = ($125|0)==(0|0);
       do {
        if ($126) {
         $155 = 1;
        } else {
         $127 = ((($125)) + 12|0);
         $128 = HEAP32[$127>>2]|0;
         $129 = ((($125)) + 16|0);
         $130 = HEAP32[$129>>2]|0;
         $131 = ($128|0)==($130|0);
         if ($131) {
          $132 = HEAP32[$125>>2]|0;
          $133 = ((($132)) + 36|0);
          $134 = HEAP32[$133>>2]|0;
          __THREW__ = 0;
          $135 = (invoke_ii($134|0,($125|0))|0);
          $136 = __THREW__; __THREW__ = 0;
          $137 = $136&1;
          if ($137) {
           label = 35;
           break L24;
          } else {
           $$0$i$i$i$i$66 = $135;
          }
         } else {
          $138 = HEAP32[$128>>2]|0;
          $$0$i$i$i$i$66 = $138;
         }
         $139 = ($$0$i$i$i$i$66|0)==(-1);
         if ($139) {
          HEAP32[$__b>>2] = 0;
          $155 = 1;
          break;
         } else {
          $$pre$i$i$i$68 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i$69 = ($$pre$i$i$i$68|0)==(0|0);
          $155 = $phitmp$i$i$i$69;
          break;
         }
        }
       } while(0);
       $141 = ($140|0)==(0|0);
       do {
        if ($141) {
         $$pre$i$3$i$i$74334 = $$pre$i$3$i$i$74;
         label = 73;
        } else {
         $142 = ((($140)) + 12|0);
         $143 = HEAP32[$142>>2]|0;
         $144 = ((($140)) + 16|0);
         $145 = HEAP32[$144>>2]|0;
         $146 = ($143|0)==($145|0);
         if ($146) {
          $147 = HEAP32[$140>>2]|0;
          $148 = ((($147)) + 36|0);
          $149 = HEAP32[$148>>2]|0;
          __THREW__ = 0;
          $150 = (invoke_ii($149|0,($140|0))|0);
          $151 = __THREW__; __THREW__ = 0;
          $152 = $151&1;
          if ($152) {
           label = 35;
           break L24;
          } else {
           $$0$i$i$1$i$i$72 = $150;
          }
         } else {
          $153 = HEAP32[$143>>2]|0;
          $$0$i$i$1$i$i$72 = $153;
         }
         $154 = ($$0$i$i$1$i$i$72|0)==(-1);
         if ($154) {
          HEAP32[$__e>>2] = 0;
          $$pre$i$3$i$i$74334 = 0;
          label = 73;
          break;
         } else {
          $phitmp$i$4$i$i$75 = ($$pre$i$3$i$i$74|0)==(0|0);
          $tmp$i$i$77 = $155 ^ $phitmp$i$4$i$i$75;
          if ($tmp$i$i$77) {
           $$pre$i$3$i$i$74336 = $$pre$i$3$i$i$74;$854 = $$pre$i$3$i$i$74;
           break;
          } else {
           $853 = $850;$__trailing_sign$1 = $__trailing_sign$0;
           break L297;
          }
         }
        }
       } while(0);
       if ((label|0) == 73) {
        label = 0;
        if ($155) {
         $853 = $850;$__trailing_sign$1 = $__trailing_sign$0;
         break L297;
        } else {
         $$pre$i$3$i$i$74336 = $$pre$i$3$i$i$74334;$854 = 0;
        }
       }
       $156 = HEAP32[$__b>>2]|0;
       $157 = ((($156)) + 12|0);
       $158 = HEAP32[$157>>2]|0;
       $159 = ((($156)) + 16|0);
       $160 = HEAP32[$159>>2]|0;
       $161 = ($158|0)==($160|0);
       if ($161) {
        $162 = HEAP32[$156>>2]|0;
        $163 = ((($162)) + 36|0);
        $164 = HEAP32[$163>>2]|0;
        __THREW__ = 0;
        $165 = (invoke_ii($164|0,($156|0))|0);
        $166 = __THREW__; __THREW__ = 0;
        $167 = $166&1;
        if ($167) {
         label = 35;
         break L24;
        } else {
         $$0$i$i$81 = $165;
        }
       } else {
        $168 = HEAP32[$158>>2]|0;
        $$0$i$i$81 = $168;
       }
       $169 = HEAP32[$__ct>>2]|0;
       $170 = ((($169)) + 12|0);
       $171 = HEAP32[$170>>2]|0;
       __THREW__ = 0;
       $172 = (invoke_iiii($171|0,($__ct|0),8192,($$0$i$i$81|0))|0);
       $173 = __THREW__; __THREW__ = 0;
       $174 = $173&1;
       if ($174) {
        label = 35;
        break L24;
       }
       if (!($172)) {
        $853 = $850;$__trailing_sign$1 = $__trailing_sign$0;
        break L297;
       }
       $175 = HEAP32[$__b>>2]|0;
       $176 = ((($175)) + 12|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ((($175)) + 16|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($177|0)==($179|0);
       if ($180) {
        $181 = HEAP32[$175>>2]|0;
        $182 = ((($181)) + 40|0);
        $183 = HEAP32[$182>>2]|0;
        __THREW__ = 0;
        $184 = (invoke_ii($183|0,($175|0))|0);
        $185 = __THREW__; __THREW__ = 0;
        $186 = $185&1;
        if ($186) {
         label = 35;
         break L24;
        } else {
         $$0$i$i$88 = $184;
        }
       } else {
        $187 = ((($177)) + 4|0);
        HEAP32[$176>>2] = $187;
        $188 = HEAP32[$177>>2]|0;
        $$0$i$i$88 = $188;
       }
       __THREW__ = 0;
       invoke_vii(445,($__spaces|0),($$0$i$i$88|0));
       $189 = __THREW__; __THREW__ = 0;
       $190 = $189&1;
       if ($190) {
        label = 35;
        break L24;
       } else {
        $$pre$i$3$i$i$74 = $$pre$i$3$i$i$74336;$140 = $854;
        label = 60;
       }
      }
     }
    } while(0);
    $759 = (($__p$0) + 1)|0;
    $850 = $853;$__p$0 = $759;$__trailing_sign$0 = $__trailing_sign$1;
   }
   L333:    switch (label|0) {
    case 35: {
     $62 = ___cxa_find_matching_catch()|0;
     $63 = tempRet0;
     $lpad$phi$index = $62;$lpad$phi$index8 = $63;
     break L21;
     break;
    }
    case 36: {
     $64 = ___cxa_find_matching_catch()|0;
     $65 = tempRet0;
     $lpad$phi$index = $64;$lpad$phi$index8 = $65;
     break L21;
     break;
    }
    case 37: {
     $66 = ___cxa_find_matching_catch()|0;
     $67 = tempRet0;
     $lpad$phi$index = $66;$lpad$phi$index8 = $67;
     break L21;
     break;
    }
    case 38: {
     $68 = ___cxa_find_matching_catch()|0;
     $69 = tempRet0;
     $lpad$phi$index = $68;$lpad$phi$index8 = $69;
     break L21;
     break;
    }
    case 39: {
     $70 = ___cxa_find_matching_catch()|0;
     $71 = tempRet0;
     $lpad$phi$index = $70;$lpad$phi$index8 = $71;
     break L21;
     break;
    }
    case 40: {
     $72 = ___cxa_find_matching_catch()|0;
     $73 = tempRet0;
     $lpad$phi$index = $72;$lpad$phi$index8 = $73;
     break L21;
     break;
    }
    case 58: {
     $122 = HEAP32[$__err>>2]|0;
     $123 = $122 | 4;
     HEAP32[$__err>>2] = $123;
     $$10 = 0;
     break;
    }
    case 123: {
     $356 = HEAP32[$__err>>2]|0;
     $357 = $356 | 4;
     HEAP32[$__err>>2] = $357;
     $$10 = 0;
     break;
    }
    case 164: {
     $509 = HEAP32[$__err>>2]|0;
     $510 = $509 | 4;
     HEAP32[$__err>>2] = $510;
     $$10 = 0;
     break;
    }
    case 222: {
     $653 = HEAP32[$__err>>2]|0;
     $654 = $653 | 4;
     HEAP32[$__err>>2] = $654;
     $$10 = 0;
     break;
    }
    case 247: {
     $719 = HEAP32[$__err>>2]|0;
     $720 = $719 | 4;
     HEAP32[$__err>>2] = $720;
     $$10 = 0;
     break;
    }
    case 257: {
     $757 = HEAP32[$__err>>2]|0;
     $758 = $757 | 4;
     HEAP32[$__err>>2] = $758;
     $$10 = 0;
     break;
    }
    case 259: {
     $760 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L335: do {
      if (!($760)) {
       $761 = ((($__trailing_sign$0$lcssa)) + 4|0);
       $762 = ((($__trailing_sign$0$lcssa)) + 8|0);
       $__i$0 = 1;
       L337: while(1) {
        $763 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $764 = $763 & 1;
        $765 = ($764<<24>>24)==(0);
        if ($765) {
         $767 = $763&255;
         $768 = $767 >>> 1;
         $770 = $768;
        } else {
         $766 = HEAP32[$761>>2]|0;
         $770 = $766;
        }
        $769 = ($__i$0>>>0)<($770>>>0);
        if (!($769)) {
         break L335;
        }
        $771 = HEAP32[$__b>>2]|0;
        $772 = ($771|0)==(0|0);
        do {
         if ($772) {
          $862 = 1;
         } else {
          $773 = ((($771)) + 12|0);
          $774 = HEAP32[$773>>2]|0;
          $775 = ((($771)) + 16|0);
          $776 = HEAP32[$775>>2]|0;
          $777 = ($774|0)==($776|0);
          if ($777) {
           $778 = HEAP32[$771>>2]|0;
           $779 = ((($778)) + 36|0);
           $780 = HEAP32[$779>>2]|0;
           __THREW__ = 0;
           $781 = (invoke_ii($780|0,($771|0))|0);
           $782 = __THREW__; __THREW__ = 0;
           $783 = $782&1;
           if ($783) {
            label = 34;
            break L337;
           } else {
            $$0$i$i$i$i = $781;
           }
          } else {
           $784 = HEAP32[$774>>2]|0;
           $$0$i$i$i$i = $784;
          }
          $785 = ($$0$i$i$i$i|0)==(-1);
          if ($785) {
           HEAP32[$__b>>2] = 0;
           $862 = 1;
           break;
          } else {
           $$pre$i$i$i = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
           $862 = $phitmp$i$i$i;
           break;
          }
         }
        } while(0);
        $786 = HEAP32[$__e>>2]|0;
        $787 = ($786|0)==(0|0);
        do {
         if ($787) {
          label = 278;
         } else {
          $788 = ((($786)) + 12|0);
          $789 = HEAP32[$788>>2]|0;
          $790 = ((($786)) + 16|0);
          $791 = HEAP32[$790>>2]|0;
          $792 = ($789|0)==($791|0);
          if ($792) {
           $793 = HEAP32[$786>>2]|0;
           $794 = ((($793)) + 36|0);
           $795 = HEAP32[$794>>2]|0;
           __THREW__ = 0;
           $796 = (invoke_ii($795|0,($786|0))|0);
           $797 = __THREW__; __THREW__ = 0;
           $798 = $797&1;
           if ($798) {
            label = 34;
            break L337;
           } else {
            $$0$i$i$1$i$i = $796;
           }
          } else {
           $799 = HEAP32[$789>>2]|0;
           $$0$i$i$1$i$i = $799;
          }
          $800 = ($$0$i$i$1$i$i|0)==(-1);
          if ($800) {
           HEAP32[$__e>>2] = 0;
           label = 278;
           break;
          } else {
           if ($862) {
            break;
           } else {
            label = 286;
            break L337;
           }
          }
         }
        } while(0);
        if ((label|0) == 278) {
         label = 0;
         if ($862) {
          label = 286;
          break;
         }
        }
        $801 = HEAP32[$__b>>2]|0;
        $802 = ((($801)) + 12|0);
        $803 = HEAP32[$802>>2]|0;
        $804 = ((($801)) + 16|0);
        $805 = HEAP32[$804>>2]|0;
        $806 = ($803|0)==($805|0);
        if ($806) {
         $807 = HEAP32[$801>>2]|0;
         $808 = ((($807)) + 36|0);
         $809 = HEAP32[$808>>2]|0;
         __THREW__ = 0;
         $810 = (invoke_ii($809|0,($801|0))|0);
         $811 = __THREW__; __THREW__ = 0;
         $812 = $811&1;
         if ($812) {
          label = 34;
          break;
         } else {
          $$0$i$i = $810;
         }
        } else {
         $813 = HEAP32[$803>>2]|0;
         $$0$i$i = $813;
        }
        $814 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $815 = $814 & 1;
        $816 = ($815<<24>>24)==(0);
        if ($816) {
         $819 = $761;
        } else {
         $817 = HEAP32[$762>>2]|0;
         $819 = $817;
        }
        $818 = (($819) + ($__i$0<<2)|0);
        $820 = HEAP32[$818>>2]|0;
        $821 = ($$0$i$i|0)==($820|0);
        if (!($821)) {
         label = 286;
         break;
        }
        $824 = (($__i$0) + 1)|0;
        $825 = HEAP32[$__b>>2]|0;
        $826 = ((($825)) + 12|0);
        $827 = HEAP32[$826>>2]|0;
        $828 = ((($825)) + 16|0);
        $829 = HEAP32[$828>>2]|0;
        $830 = ($827|0)==($829|0);
        if ($830) {
         $831 = HEAP32[$825>>2]|0;
         $832 = ((($831)) + 40|0);
         $833 = HEAP32[$832>>2]|0;
         __THREW__ = 0;
         (invoke_ii($833|0,($825|0))|0);
         $834 = __THREW__; __THREW__ = 0;
         $835 = $834&1;
         if ($835) {
          label = 34;
          break;
         } else {
          $__i$0 = $824;
          continue;
         }
        } else {
         $836 = ((($827)) + 4|0);
         HEAP32[$826>>2] = $836;
         $__i$0 = $824;
         continue;
        }
       }
       if ((label|0) == 34) {
        $60 = ___cxa_find_matching_catch()|0;
        $61 = tempRet0;
        $lpad$phi$index = $60;$lpad$phi$index8 = $61;
        break L21;
       }
       else if ((label|0) == 286) {
        $822 = HEAP32[$__err>>2]|0;
        $823 = $822 | 4;
        HEAP32[$__err>>2] = $823;
        $$10 = 0;
        break L333;
       }
      }
     } while(0);
     $837 = HEAP32[$__gb>>2]|0;
     $838 = ($837|0)==($$lcssa463|0);
     if ($838) {
      $$10 = 1;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$837,$$lcssa463,$__et);
      $839 = HEAP32[$__et>>2]|0;
      $840 = ($839|0)==(0);
      if ($840) {
       $$10 = 1;
       break;
      } else {
       $841 = HEAP32[$__err>>2]|0;
       $842 = $841 | 4;
       HEAP32[$__err>>2] = $842;
       $$10 = 0;
       break;
      }
     }
     break;
    }
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__spaces);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nsn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__psn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
   $843 = HEAP32[$__gb>>2]|0;
   HEAP32[$__gb>>2] = 0;
   $844 = ($843|0)==(0|0);
   if (!($844)) {
    $845 = HEAP32[$2>>2]|0;
    __THREW__ = 0;
    invoke_vi($845|0,($843|0));
    $846 = __THREW__; __THREW__ = 0;
    $847 = $846&1;
    if ($847) {
     $848 = ___cxa_find_matching_catch(0|0)|0;
     $849 = tempRet0;
     ___clang_call_terminate($848);
     // unreachable;
    }
   }
   STACKTOP = sp;return ($$10|0);
  }
 } while(0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 $76 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $77 = ($76|0)==(0|0);
 if (!($77)) {
  $78 = HEAP32[$2>>2]|0;
  __THREW__ = 0;
  invoke_vi($78|0,($76|0));
  $79 = __THREW__; __THREW__ = 0;
  $80 = $79&1;
  if ($80) {
   $81 = ___cxa_find_matching_catch(0|0)|0;
   $82 = tempRet0;
   ___clang_call_terminate($81);
   // unreachable;
  }
 }
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i$1$i$i = 0, $$0$i$i$i$i = 0, $$011 = 0, $$0110 = 0, $$012 = 0, $$019 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__loc = 0, $__neg = 0, $__w$0 = 0, $__w$0$lcssa = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 424|0;
 $__wbuf = sp + 24|0;
 $__wb = sp + 16|0;
 $__wn = sp + 8|0;
 $__loc = sp + 4|0;
 $__neg = sp + 428|0;
 $0 = sp;
 $1 = $__wbuf;
 HEAP32[$__wb>>2] = $1;
 $2 = ((($__wb)) + 4|0);
 HEAP32[$2>>2] = (434);
 $3 = ((($__wbuf)) + 400|0);
 __THREW__ = 0;
 $4 = (invoke_ii(353,($__iob|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $33 = ___cxa_find_matching_catch()|0;
  $34 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$011 = $33;$$019 = $34;$94 = $__wbuf;
  label = 39;
 } else {
  HEAP32[$__loc>>2] = $4;
  __THREW__ = 0;
  $7 = (invoke_iii(354,($__loc|0),(8580|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  L4: do {
   if (!($9)) {
    HEAP8[$__neg>>0] = 0;
    $10 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $10;
    $11 = ((($__iob)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $10;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
    $14 = (invoke_iiiiiiiiiiii(443,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($12|0),($__err|0),($__neg|0),($7|0),($__wb|0),($__wn|0),($3|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     if ($14) {
      $17 = HEAP8[$__v>>0]|0;
      $18 = $17 & 1;
      $19 = ($18<<24>>24)==(0);
      if ($19) {
       HEAP8[$__v>>0] = 0;
      } else {
       $20 = ((($__v)) + 8|0);
       $21 = HEAP32[$20>>2]|0;
       HEAP32[$21>>2] = 0;
      }
      $22 = ((($__v)) + 4|0);
      HEAP32[$22>>2] = 0;
      $23 = HEAP8[$__neg>>0]|0;
      $24 = ($23<<24>>24)==(0);
      if (!($24)) {
       $25 = HEAP32[$7>>2]|0;
       $26 = ((($25)) + 44|0);
       $27 = HEAP32[$26>>2]|0;
       __THREW__ = 0;
       $28 = (invoke_iii($27|0,($7|0),45)|0);
       $29 = __THREW__; __THREW__ = 0;
       $30 = $29&1;
       if ($30) {
        break;
       }
       __THREW__ = 0;
       invoke_vii(445,($__v|0),($28|0));
       $31 = __THREW__; __THREW__ = 0;
       $32 = $31&1;
       if ($32) {
        break;
       }
      }
      $35 = HEAP32[$7>>2]|0;
      $36 = ((($35)) + 44|0);
      $37 = HEAP32[$36>>2]|0;
      __THREW__ = 0;
      $38 = (invoke_iii($37|0,($7|0),48)|0);
      $39 = __THREW__; __THREW__ = 0;
      $40 = $39&1;
      if ($40) {
       break;
      }
      $41 = HEAP32[$__wb>>2]|0;
      $42 = HEAP32[$__wn>>2]|0;
      $43 = ((($42)) + -4|0);
      $__w$0 = $41;
      while(1) {
       $44 = ($__w$0>>>0)<($43>>>0);
       if (!($44)) {
        $__w$0$lcssa = $__w$0;
        break;
       }
       $45 = HEAP32[$__w$0>>2]|0;
       $46 = ($45|0)==($38|0);
       if (!($46)) {
        $__w$0$lcssa = $__w$0;
        break;
       }
       $47 = ((($__w$0)) + 4|0);
       $__w$0 = $47;
      }
      __THREW__ = 0;
      (invoke_iiii(447,($__v|0),($__w$0$lcssa|0),($42|0))|0);
      $48 = __THREW__; __THREW__ = 0;
      $49 = $48&1;
      if ($49) {
       break;
      }
     }
     $50 = HEAP32[$__b>>2]|0;
     $51 = ($50|0)==(0|0);
     do {
      if ($51) {
       $99 = 1;
      } else {
       $52 = ((($50)) + 12|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = ((($50)) + 16|0);
       $55 = HEAP32[$54>>2]|0;
       $56 = ($53|0)==($55|0);
       if ($56) {
        $57 = HEAP32[$50>>2]|0;
        $58 = ((($57)) + 36|0);
        $59 = HEAP32[$58>>2]|0;
        __THREW__ = 0;
        $60 = (invoke_ii($59|0,($50|0))|0);
        $61 = __THREW__; __THREW__ = 0;
        $62 = $61&1;
        if ($62) {
         break L4;
        } else {
         $$0$i$i$i$i = $60;
        }
       } else {
        $63 = HEAP32[$53>>2]|0;
        $$0$i$i$i$i = $63;
       }
       $64 = ($$0$i$i$i$i|0)==(-1);
       if ($64) {
        HEAP32[$__b>>2] = 0;
        $99 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
        $99 = $phitmp$i$i$i;
        break;
       }
      }
     } while(0);
     $65 = ($10|0)==(0);
     do {
      if ($65) {
       label = 31;
      } else {
       $66 = ((($13)) + 12|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = ((($13)) + 16|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = ($67|0)==($69|0);
       if ($70) {
        $71 = $10;
        $72 = HEAP32[$71>>2]|0;
        $73 = ((($72)) + 36|0);
        $74 = HEAP32[$73>>2]|0;
        __THREW__ = 0;
        $75 = (invoke_ii($74|0,($13|0))|0);
        $76 = __THREW__; __THREW__ = 0;
        $77 = $76&1;
        if ($77) {
         break L4;
        } else {
         $$0$i$i$1$i$i = $75;
        }
       } else {
        $78 = HEAP32[$67>>2]|0;
        $$0$i$i$1$i$i = $78;
       }
       $79 = ($$0$i$i$1$i$i|0)==(-1);
       if ($79) {
        HEAP32[$__e>>2] = 0;
        label = 31;
        break;
       } else {
        if ($99) {
         break;
        } else {
         label = 33;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 31) {
      if ($99) {
       label = 33;
      }
     }
     if ((label|0) == 33) {
      $80 = HEAP32[$__err>>2]|0;
      $81 = $80 | 2;
      HEAP32[$__err>>2] = $81;
     }
     $82 = HEAP32[$__b>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($4)|0);
     $83 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $84 = ($83|0)==(0|0);
     if (!($84)) {
      $85 = HEAP32[$2>>2]|0;
      __THREW__ = 0;
      invoke_vi($85|0,($83|0));
      $86 = __THREW__; __THREW__ = 0;
      $87 = $86&1;
      if ($87) {
       $88 = ___cxa_find_matching_catch(0|0)|0;
       $89 = tempRet0;
       ___clang_call_terminate($88);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($82|0);
    }
   }
  } while(0);
  $90 = ___cxa_find_matching_catch()|0;
  $91 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($4)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $92 = ($$pre|0)==(0|0);
  if ($92) {
   $$0110 = $91;$$012 = $90;
  } else {
   $$011 = $90;$$019 = $91;$94 = $$pre;
   label = 39;
  }
 }
 if ((label|0) == 39) {
  $93 = HEAP32[$2>>2]|0;
  __THREW__ = 0;
  invoke_vi($93|0,($94|0));
  $95 = __THREW__; __THREW__ = 0;
  $96 = $95&1;
  if ($96) {
   $97 = ___cxa_find_matching_catch(0|0)|0;
   $98 = tempRet0;
   ___clang_call_terminate($97);
   // unreachable;
  } else {
   $$0110 = $$019;$$012 = $$011;
  }
 }
 ___resumeException($$012|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i$11 = 0, $__i$0$i$i$i$16 = 0, $__i$0$i$i$i$21 = 0, $__i$0$i$i$i$26 = 0, $__i$0$i$i$i$31 = 0, $__i$0$i$i$i$4 = 0, $__i$0$i$i$i$7 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i$12 = 0, $exitcond$i$i$i$17 = 0, $exitcond$i$i$i$22 = 0, $exitcond$i$i$i$27 = 0, $exitcond$i$i$i$32 = 0;
 var $exitcond$i$i$i$5 = 0, $exitcond$i$i$i$8 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 100|0;
 $1 = sp + 88|0;
 $2 = sp + 76|0;
 $3 = sp + 64|0;
 $4 = sp + 52|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 if ($__intl) {
  $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,8324)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_vii[$13 & 1023]($0,$10);
  $14 = HEAP32[$0>>2]|0;
  HEAP8[$__pat>>0]=$14&255;HEAP8[$__pat+1>>0]=($14>>8)&255;HEAP8[$__pat+2>>0]=($14>>16)&255;HEAP8[$__pat+3>>0]=$14>>24;
  $15 = HEAP32[$10>>2]|0;
  $16 = ((($15)) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vii[$17 & 1023]($1,$10);
  $18 = HEAP8[$__nsn>>0]|0;
  $19 = $18 & 1;
  $20 = ($19<<24>>24)==(0);
  if ($20) {
   HEAP8[$__nsn>>0] = 0;
  } else {
   $21 = ((($__nsn)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP32[$22>>2] = 0;
  }
  $23 = ((($__nsn)) + 4|0);
  HEAP32[$23>>2] = 0;
  __THREW__ = 0;
  invoke_vii(448,($__nsn|0),0);
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if ($25) {
   $26 = ___cxa_find_matching_catch(0|0)|0;
   $27 = tempRet0;
   ___clang_call_terminate($26);
   // unreachable;
  }
  ;HEAP32[$__nsn>>2]=HEAP32[$1>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
  $__i$0$i$i$i = 0;
  while(1) {
   $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
   if ($exitcond$i$i$i) {
    break;
   }
   $28 = (($1) + ($__i$0$i$i$i<<2)|0);
   HEAP32[$28>>2] = 0;
   $29 = (($__i$0$i$i$i) + 1)|0;
   $__i$0$i$i$i = $29;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($1);
  $30 = HEAP32[$10>>2]|0;
  $31 = ((($30)) + 28|0);
  $32 = HEAP32[$31>>2]|0;
  FUNCTION_TABLE_vii[$32 & 1023]($2,$10);
  $33 = HEAP8[$__psn>>0]|0;
  $34 = $33 & 1;
  $35 = ($34<<24>>24)==(0);
  if ($35) {
   HEAP8[$__psn>>0] = 0;
  } else {
   $36 = ((($__psn)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   HEAP32[$37>>2] = 0;
  }
  $38 = ((($__psn)) + 4|0);
  HEAP32[$38>>2] = 0;
  __THREW__ = 0;
  invoke_vii(448,($__psn|0),0);
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if ($40) {
   $41 = ___cxa_find_matching_catch(0|0)|0;
   $42 = tempRet0;
   ___clang_call_terminate($41);
   // unreachable;
  }
  ;HEAP32[$__psn>>2]=HEAP32[$2>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
  $__i$0$i$i$i$4 = 0;
  while(1) {
   $exitcond$i$i$i$5 = ($__i$0$i$i$i$4|0)==(3);
   if ($exitcond$i$i$i$5) {
    break;
   }
   $43 = (($2) + ($__i$0$i$i$i$4<<2)|0);
   HEAP32[$43>>2] = 0;
   $44 = (($__i$0$i$i$i$4) + 1)|0;
   $__i$0$i$i$i$4 = $44;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($2);
  $45 = HEAP32[$10>>2]|0;
  $46 = ((($45)) + 12|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (FUNCTION_TABLE_ii[$47 & 1023]($10)|0);
  HEAP32[$__dp>>2] = $48;
  $49 = HEAP32[$10>>2]|0;
  $50 = ((($49)) + 16|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (FUNCTION_TABLE_ii[$51 & 1023]($10)|0);
  HEAP32[$__ts>>2] = $52;
  $53 = HEAP32[$10>>2]|0;
  $54 = ((($53)) + 20|0);
  $55 = HEAP32[$54>>2]|0;
  FUNCTION_TABLE_vii[$55 & 1023]($3,$10);
  $56 = HEAP8[$__grp>>0]|0;
  $57 = $56 & 1;
  $58 = ($57<<24>>24)==(0);
  if ($58) {
   $62 = ((($__grp)) + 1|0);
   HEAP8[$62>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $59 = ((($__grp)) + 8|0);
   $60 = HEAP32[$59>>2]|0;
   HEAP8[$60>>0] = 0;
   $61 = ((($__grp)) + 4|0);
   HEAP32[$61>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(442,($__grp|0),0);
  $63 = __THREW__; __THREW__ = 0;
  $64 = $63&1;
  if ($64) {
   $65 = ___cxa_find_matching_catch(0|0)|0;
   $66 = tempRet0;
   ___clang_call_terminate($65);
   // unreachable;
  }
  ;HEAP32[$__grp>>2]=HEAP32[$3>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
  $__i$0$i$i$i$7 = 0;
  while(1) {
   $exitcond$i$i$i$8 = ($__i$0$i$i$i$7|0)==(3);
   if ($exitcond$i$i$i$8) {
    break;
   }
   $67 = (($3) + ($__i$0$i$i$i$7<<2)|0);
   HEAP32[$67>>2] = 0;
   $68 = (($__i$0$i$i$i$7) + 1)|0;
   $__i$0$i$i$i$7 = $68;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
  $69 = HEAP32[$10>>2]|0;
  $70 = ((($69)) + 24|0);
  $71 = HEAP32[$70>>2]|0;
  FUNCTION_TABLE_vii[$71 & 1023]($4,$10);
  $72 = HEAP8[$__sym>>0]|0;
  $73 = $72 & 1;
  $74 = ($73<<24>>24)==(0);
  if ($74) {
   HEAP8[$__sym>>0] = 0;
  } else {
   $75 = ((($__sym)) + 8|0);
   $76 = HEAP32[$75>>2]|0;
   HEAP32[$76>>2] = 0;
  }
  $77 = ((($__sym)) + 4|0);
  HEAP32[$77>>2] = 0;
  __THREW__ = 0;
  invoke_vii(448,($__sym|0),0);
  $78 = __THREW__; __THREW__ = 0;
  $79 = $78&1;
  if ($79) {
   $80 = ___cxa_find_matching_catch(0|0)|0;
   $81 = tempRet0;
   ___clang_call_terminate($80);
   // unreachable;
  }
  ;HEAP32[$__sym>>2]=HEAP32[$4>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
  $__i$0$i$i$i$11 = 0;
  while(1) {
   $exitcond$i$i$i$12 = ($__i$0$i$i$i$11|0)==(3);
   if ($exitcond$i$i$i$12) {
    break;
   }
   $82 = (($4) + ($__i$0$i$i$i$11<<2)|0);
   HEAP32[$82>>2] = 0;
   $83 = (($__i$0$i$i$i$11) + 1)|0;
   $__i$0$i$i$i$11 = $83;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($4);
  $84 = HEAP32[$10>>2]|0;
  $85 = ((($84)) + 36|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (FUNCTION_TABLE_ii[$86 & 1023]($10)|0);
  $storemerge = $87;
 } else {
  $88 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,8260)|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = ((($89)) + 44|0);
  $91 = HEAP32[$90>>2]|0;
  FUNCTION_TABLE_vii[$91 & 1023]($5,$88);
  $92 = HEAP32[$5>>2]|0;
  HEAP8[$__pat>>0]=$92&255;HEAP8[$__pat+1>>0]=($92>>8)&255;HEAP8[$__pat+2>>0]=($92>>16)&255;HEAP8[$__pat+3>>0]=$92>>24;
  $93 = HEAP32[$88>>2]|0;
  $94 = ((($93)) + 32|0);
  $95 = HEAP32[$94>>2]|0;
  FUNCTION_TABLE_vii[$95 & 1023]($6,$88);
  $96 = HEAP8[$__nsn>>0]|0;
  $97 = $96 & 1;
  $98 = ($97<<24>>24)==(0);
  if ($98) {
   HEAP8[$__nsn>>0] = 0;
  } else {
   $99 = ((($__nsn)) + 8|0);
   $100 = HEAP32[$99>>2]|0;
   HEAP32[$100>>2] = 0;
  }
  $101 = ((($__nsn)) + 4|0);
  HEAP32[$101>>2] = 0;
  __THREW__ = 0;
  invoke_vii(448,($__nsn|0),0);
  $102 = __THREW__; __THREW__ = 0;
  $103 = $102&1;
  if ($103) {
   $104 = ___cxa_find_matching_catch(0|0)|0;
   $105 = tempRet0;
   ___clang_call_terminate($104);
   // unreachable;
  }
  ;HEAP32[$__nsn>>2]=HEAP32[$6>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
  $__i$0$i$i$i$16 = 0;
  while(1) {
   $exitcond$i$i$i$17 = ($__i$0$i$i$i$16|0)==(3);
   if ($exitcond$i$i$i$17) {
    break;
   }
   $106 = (($6) + ($__i$0$i$i$i$16<<2)|0);
   HEAP32[$106>>2] = 0;
   $107 = (($__i$0$i$i$i$16) + 1)|0;
   $__i$0$i$i$i$16 = $107;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($6);
  $108 = HEAP32[$88>>2]|0;
  $109 = ((($108)) + 28|0);
  $110 = HEAP32[$109>>2]|0;
  FUNCTION_TABLE_vii[$110 & 1023]($7,$88);
  $111 = HEAP8[$__psn>>0]|0;
  $112 = $111 & 1;
  $113 = ($112<<24>>24)==(0);
  if ($113) {
   HEAP8[$__psn>>0] = 0;
  } else {
   $114 = ((($__psn)) + 8|0);
   $115 = HEAP32[$114>>2]|0;
   HEAP32[$115>>2] = 0;
  }
  $116 = ((($__psn)) + 4|0);
  HEAP32[$116>>2] = 0;
  __THREW__ = 0;
  invoke_vii(448,($__psn|0),0);
  $117 = __THREW__; __THREW__ = 0;
  $118 = $117&1;
  if ($118) {
   $119 = ___cxa_find_matching_catch(0|0)|0;
   $120 = tempRet0;
   ___clang_call_terminate($119);
   // unreachable;
  }
  ;HEAP32[$__psn>>2]=HEAP32[$7>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
  $__i$0$i$i$i$21 = 0;
  while(1) {
   $exitcond$i$i$i$22 = ($__i$0$i$i$i$21|0)==(3);
   if ($exitcond$i$i$i$22) {
    break;
   }
   $121 = (($7) + ($__i$0$i$i$i$21<<2)|0);
   HEAP32[$121>>2] = 0;
   $122 = (($__i$0$i$i$i$21) + 1)|0;
   $__i$0$i$i$i$21 = $122;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($7);
  $123 = HEAP32[$88>>2]|0;
  $124 = ((($123)) + 12|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = (FUNCTION_TABLE_ii[$125 & 1023]($88)|0);
  HEAP32[$__dp>>2] = $126;
  $127 = HEAP32[$88>>2]|0;
  $128 = ((($127)) + 16|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = (FUNCTION_TABLE_ii[$129 & 1023]($88)|0);
  HEAP32[$__ts>>2] = $130;
  $131 = HEAP32[$88>>2]|0;
  $132 = ((($131)) + 20|0);
  $133 = HEAP32[$132>>2]|0;
  FUNCTION_TABLE_vii[$133 & 1023]($8,$88);
  $134 = HEAP8[$__grp>>0]|0;
  $135 = $134 & 1;
  $136 = ($135<<24>>24)==(0);
  if ($136) {
   $140 = ((($__grp)) + 1|0);
   HEAP8[$140>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $137 = ((($__grp)) + 8|0);
   $138 = HEAP32[$137>>2]|0;
   HEAP8[$138>>0] = 0;
   $139 = ((($__grp)) + 4|0);
   HEAP32[$139>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(442,($__grp|0),0);
  $141 = __THREW__; __THREW__ = 0;
  $142 = $141&1;
  if ($142) {
   $143 = ___cxa_find_matching_catch(0|0)|0;
   $144 = tempRet0;
   ___clang_call_terminate($143);
   // unreachable;
  }
  ;HEAP32[$__grp>>2]=HEAP32[$8>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
  $__i$0$i$i$i$26 = 0;
  while(1) {
   $exitcond$i$i$i$27 = ($__i$0$i$i$i$26|0)==(3);
   if ($exitcond$i$i$i$27) {
    break;
   }
   $145 = (($8) + ($__i$0$i$i$i$26<<2)|0);
   HEAP32[$145>>2] = 0;
   $146 = (($__i$0$i$i$i$26) + 1)|0;
   $__i$0$i$i$i$26 = $146;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
  $147 = HEAP32[$88>>2]|0;
  $148 = ((($147)) + 24|0);
  $149 = HEAP32[$148>>2]|0;
  FUNCTION_TABLE_vii[$149 & 1023]($9,$88);
  $150 = HEAP8[$__sym>>0]|0;
  $151 = $150 & 1;
  $152 = ($151<<24>>24)==(0);
  if ($152) {
   HEAP8[$__sym>>0] = 0;
  } else {
   $153 = ((($__sym)) + 8|0);
   $154 = HEAP32[$153>>2]|0;
   HEAP32[$154>>2] = 0;
  }
  $155 = ((($__sym)) + 4|0);
  HEAP32[$155>>2] = 0;
  __THREW__ = 0;
  invoke_vii(448,($__sym|0),0);
  $156 = __THREW__; __THREW__ = 0;
  $157 = $156&1;
  if ($157) {
   $158 = ___cxa_find_matching_catch(0|0)|0;
   $159 = tempRet0;
   ___clang_call_terminate($158);
   // unreachable;
  }
  ;HEAP32[$__sym>>2]=HEAP32[$9>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
  $__i$0$i$i$i$31 = 0;
  while(1) {
   $exitcond$i$i$i$32 = ($__i$0$i$i$i$31|0)==(3);
   if ($exitcond$i$i$i$32) {
    break;
   }
   $160 = (($9) + ($__i$0$i$i$i$31<<2)|0);
   HEAP32[$160>>2] = 0;
   $161 = (($__i$0$i$i$i$31) + 1)|0;
   $__i$0$i$i$i$31 = $161;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($9);
  $162 = HEAP32[$88>>2]|0;
  $163 = ((($162)) + 36|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = (FUNCTION_TABLE_ii[$164 & 1023]($88)|0);
  $storemerge = $165;
 }
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($this,$__s,$__intl,$__iob,$__fl,$__units) {
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pre = 0, $$pre23 = 0, $$pre23$pre = 0, $$pre25 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__i$0$i$i = 0, $__i$0$i$i$6 = 0, $__i$0$i$i$9 = 0;
 var $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $exitcond$i$i = 0, $exitcond$i$i$10 = 0, $exitcond$i$i$7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 76|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $__buf = sp + 288|0;
 $__bb = sp + 72|0;
 $__digits = sp + 188|0;
 $__loc = sp + 68|0;
 $__pat = sp + 184|0;
 $__dp = sp + 181|0;
 $__ts = sp + 180|0;
 $__grp = sp + 56|0;
 $__sym = sp + 44|0;
 $__sn = sp + 32|0;
 $__fd = sp + 28|0;
 $__mbuf = sp + 80|0;
 $__mi = sp + 24|0;
 $__me = sp + 20|0;
 $0 = sp + 16|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[$vararg_buffer>>3] = $__units;
 $1 = (_snprintf($__buf,100,20986,$vararg_buffer)|0);
 $2 = ($1>>>0)>(99);
 do {
  if ($2) {
   __THREW__ = 0;
   $3 = (invoke_i(417)|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $136 = 0;$137 = 0;
    label = 8;
   } else {
    __THREW__ = 0;
    HEAPF64[$vararg_buffer1>>3] = $__units;
    $6 = (invoke_iiiii(422,($__bb|0),($3|0),(20986|0),($vararg_buffer1|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $136 = 0;$137 = 0;
     label = 8;
    } else {
     $9 = HEAP32[$__bb>>2]|0;
     $10 = ($9|0)==(0|0);
     if ($10) {
      __THREW__ = 0;
      invoke_v(423);
      $12 = __THREW__; __THREW__ = 0;
      $13 = $12&1;
      if ($13) {
       $136 = 0;$137 = 0;
       label = 8;
       break;
      }
      $$pre = HEAP32[$__bb>>2]|0;
      $138 = $$pre;
     } else {
      $11 = $9;
      $138 = $11;
     }
     $16 = (_malloc($6)|0);
     $17 = $16;
     $18 = ($16|0)==(0|0);
     if ($18) {
      __THREW__ = 0;
      invoke_v(423);
      $19 = __THREW__; __THREW__ = 0;
      $20 = $19&1;
      if ($20) {
       $136 = $138;$137 = $17;
       label = 8;
      } else {
       $123 = $17;$126 = $138;$__db$0 = 0;$__n$0 = $6;
       label = 11;
      }
     } else {
      $123 = $17;$126 = $138;$__db$0 = $16;$__n$0 = $6;
      label = 11;
     }
    }
   }
  } else {
   $123 = 0;$126 = 0;$__db$0 = $__digits;$__n$0 = $1;
   label = 11;
  }
 } while(0);
 if ((label|0) == 11) {
  __THREW__ = 0;
  $21 = (invoke_ii(353,($__iob|0))|0);
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  if ($23) {
   $136 = $126;$137 = $123;
   label = 8;
  } else {
   HEAP32[$__loc>>2] = $21;
   __THREW__ = 0;
   $24 = (invoke_iii(354,($__loc|0),(8588|0))|0);
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if ($26) {
    label = 32;
   } else {
    $27 = HEAP32[$__bb>>2]|0;
    $28 = (($27) + ($__n$0)|0);
    $29 = HEAP32[$24>>2]|0;
    $30 = ((($29)) + 32|0);
    $31 = HEAP32[$30>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($31|0,($24|0),($27|0),($28|0),($__db$0|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     label = 32;
    } else {
     $34 = ($__n$0|0)==(0);
     if ($34) {
      $44 = 0;
     } else {
      $35 = HEAP32[$__bb>>2]|0;
      $36 = HEAP8[$35>>0]|0;
      $37 = ($36<<24>>24)==(45);
      $44 = $37;
     }
     $__i$0$i$i = 0;
     while(1) {
      $exitcond$i$i = ($__i$0$i$i|0)==(3);
      if ($exitcond$i$i) {
       break;
      }
      $38 = (($__grp) + ($__i$0$i$i<<2)|0);
      HEAP32[$38>>2] = 0;
      $39 = (($__i$0$i$i) + 1)|0;
      $__i$0$i$i = $39;
     }
     $__i$0$i$i$6 = 0;
     while(1) {
      $exitcond$i$i$7 = ($__i$0$i$i$6|0)==(3);
      if ($exitcond$i$i$7) {
       break;
      }
      $40 = (($__sym) + ($__i$0$i$i$6<<2)|0);
      HEAP32[$40>>2] = 0;
      $41 = (($__i$0$i$i$6) + 1)|0;
      $__i$0$i$i$6 = $41;
     }
     $__i$0$i$i$9 = 0;
     while(1) {
      $exitcond$i$i$10 = ($__i$0$i$i$9|0)==(3);
      if ($exitcond$i$i$10) {
       break;
      }
      $42 = (($__sn) + ($__i$0$i$i$9<<2)|0);
      HEAP32[$42>>2] = 0;
      $43 = (($__i$0$i$i$9) + 1)|0;
      $__i$0$i$i$9 = $43;
     }
     __THREW__ = 0;
     invoke_viiiiiiiiii(449,($__intl|0),($44|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $45 = __THREW__; __THREW__ = 0;
     $46 = $45&1;
     if ($46) {
      $99 = ___cxa_find_matching_catch()|0;
      $100 = tempRet0;
      $$0 = $99;$$01 = $100;$$pre23 = $21;
     } else {
      $47 = HEAP32[$__fd>>2]|0;
      $48 = ($__n$0|0)>($47|0);
      if ($48) {
       $49 = (($__n$0) - ($47))|0;
       $50 = $49 << 1;
       $51 = HEAP8[$__sn>>0]|0;
       $52 = $51 & 1;
       $53 = ($52<<24>>24)==(0);
       $54 = ((($__sn)) + 4|0);
       $55 = HEAP32[$54>>2]|0;
       $56 = $51&255;
       $57 = $56 >>> 1;
       $58 = $53 ? $57 : $55;
       $59 = HEAP8[$__sym>>0]|0;
       $60 = $59 & 1;
       $61 = ($60<<24>>24)==(0);
       $62 = ((($__sym)) + 4|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = $59&255;
       $65 = $64 >>> 1;
       $66 = $61 ? $65 : $63;
       $67 = $50 | 1;
       $68 = (($67) + ($47))|0;
       $69 = (($68) + ($58))|0;
       $70 = (($69) + ($66))|0;
       $90 = $70;
      } else {
       $71 = HEAP8[$__sn>>0]|0;
       $72 = $71 & 1;
       $73 = ($72<<24>>24)==(0);
       $74 = ((($__sn)) + 4|0);
       $75 = HEAP32[$74>>2]|0;
       $76 = $71&255;
       $77 = $76 >>> 1;
       $78 = $73 ? $77 : $75;
       $79 = HEAP8[$__sym>>0]|0;
       $80 = $79 & 1;
       $81 = ($80<<24>>24)==(0);
       $82 = ((($__sym)) + 4|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = $79&255;
       $85 = $84 >>> 1;
       $86 = $81 ? $85 : $83;
       $87 = (($47) + 2)|0;
       $88 = (($87) + ($78))|0;
       $89 = (($88) + ($86))|0;
       $90 = $89;
      }
      $91 = ($90>>>0)>(100);
      if ($91) {
       $92 = (_malloc($90)|0);
       $93 = $92;
       $94 = ($92|0)==(0|0);
       if ($94) {
        __THREW__ = 0;
        invoke_v(423);
        $95 = __THREW__; __THREW__ = 0;
        $96 = $95&1;
        if ($96) {
         $103 = $93;
        } else {
         $119 = $93;$__mb$0 = 0;
         label = 36;
        }
       } else {
        $119 = $93;$__mb$0 = $92;
        label = 36;
       }
      } else {
       $119 = 0;$__mb$0 = $__mbuf;
       label = 36;
      }
      if ((label|0) == 36) {
       $106 = ((($__iob)) + 4|0);
       $107 = HEAP32[$106>>2]|0;
       $108 = (($__db$0) + ($__n$0)|0);
       $109 = HEAP8[$__dp>>0]|0;
       $110 = HEAP8[$__ts>>0]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(450,($__mb$0|0),($__mi|0),($__me|0),($107|0),($__db$0|0),($108|0),($24|0),($44|0),($__pat|0),($109|0),($110|0),($__grp|0),($__sym|0),($__sn|0),($47|0));
       $111 = __THREW__; __THREW__ = 0;
       $112 = $111&1;
       if ($112) {
        $103 = $119;
       } else {
        $113 = HEAP32[$__s>>2]|0;
        HEAP32[$0>>2] = $113;
        $114 = HEAP32[$__mi>>2]|0;
        $115 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
        $116 = (invoke_iiiiiii(425,($$byval_copy|0),($__mb$0|0),($114|0),($115|0),($__iob|0),($__fl|0))|0);
        $117 = __THREW__; __THREW__ = 0;
        $118 = $117&1;
        if ($118) {
         $103 = $119;
        } else {
         $120 = ($119|0)==(0);
         if ($120) {
          $122 = $21;
         } else {
          $121 = $119;
          _free($121);
          $$pre25 = HEAP32[$__loc>>2]|0;
          $122 = $$pre25;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
         (__ZNSt3__114__shared_count16__release_sharedEv($122)|0);
         $124 = ($123|0)==(0);
         if (!($124)) {
          $125 = $123;
          _free($125);
         }
         $127 = ($126|0)==(0);
         if (!($127)) {
          $128 = $126;
          _free($128);
         }
         STACKTOP = sp;return ($116|0);
        }
       }
      }
      $101 = ___cxa_find_matching_catch()|0;
      $102 = tempRet0;
      $104 = ($103|0)==(0);
      if ($104) {
       $$0 = $101;$$01 = $102;$$pre23 = $21;
      } else {
       $105 = $103;
       _free($105);
       $$pre23$pre = HEAP32[$__loc>>2]|0;
       $$0 = $101;$$01 = $102;$$pre23 = $$pre23$pre;
      }
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
     $$1 = $$0;$$12 = $$01;$129 = $$pre23;
    }
   }
   if ((label|0) == 32) {
    $97 = ___cxa_find_matching_catch()|0;
    $98 = tempRet0;
    $$1 = $97;$$12 = $98;$129 = $21;
   }
   (__ZNSt3__114__shared_count16__release_sharedEv($129)|0);
   $$2 = $$1;$$23 = $$12;$130 = $123;$133 = $126;
  }
 }
 if ((label|0) == 8) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  $$2 = $14;$$23 = $15;$130 = $137;$133 = $136;
 }
 $131 = ($130|0)==(0);
 if (!($131)) {
  $132 = $130;
  _free($132);
 }
 $134 = ($133|0)==(0);
 if (!($134)) {
  $135 = $133;
  _free($135);
 }
 ___resumeException($$2|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$pre$phi39Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i$11 = 0, $__i$0$i$i$i$16 = 0, $__i$0$i$i$i$21 = 0, $__i$0$i$i$i$26 = 0, $__i$0$i$i$i$31 = 0, $__i$0$i$i$i$36 = 0, $__i$0$i$i$i$6 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i$12 = 0, $exitcond$i$i$i$17 = 0, $exitcond$i$i$i$22 = 0, $exitcond$i$i$i$27 = 0, $exitcond$i$i$i$32 = 0, $exitcond$i$i$i$37 = 0, $exitcond$i$i$i$7 = 0, $storemerge = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 108|0;
 $1 = sp + 96|0;
 $2 = sp + 92|0;
 $3 = sp + 80|0;
 $4 = sp + 68|0;
 $5 = sp + 56|0;
 $6 = sp + 52|0;
 $7 = sp + 40|0;
 $8 = sp + 36|0;
 $9 = sp + 24|0;
 $10 = sp + 12|0;
 $11 = sp;
 if ($__intl) {
  $12 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,8196)|0);
  $13 = HEAP32[$12>>2]|0;
  if ($__neg) {
   $14 = ((($13)) + 44|0);
   $15 = HEAP32[$14>>2]|0;
   FUNCTION_TABLE_vii[$15 & 1023]($0,$12);
   $16 = HEAP32[$0>>2]|0;
   HEAP8[$__pat>>0]=$16&255;HEAP8[$__pat+1>>0]=($16>>8)&255;HEAP8[$__pat+2>>0]=($16>>16)&255;HEAP8[$__pat+3>>0]=$16>>24;
   $17 = HEAP32[$12>>2]|0;
   $18 = ((($17)) + 32|0);
   $19 = HEAP32[$18>>2]|0;
   FUNCTION_TABLE_vii[$19 & 1023]($1,$12);
   $20 = HEAP8[$__sn>>0]|0;
   $21 = $20 & 1;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    $26 = ((($__sn)) + 1|0);
    HEAP8[$26>>0] = 0;
    HEAP8[$__sn>>0] = 0;
   } else {
    $23 = ((($__sn)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    HEAP8[$24>>0] = 0;
    $25 = ((($__sn)) + 4|0);
    HEAP32[$25>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(442,($__sn|0),0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    $29 = ___cxa_find_matching_catch(0|0)|0;
    $30 = tempRet0;
    ___clang_call_terminate($29);
    // unreachable;
   }
   ;HEAP32[$__sn>>2]=HEAP32[$1>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
   $__i$0$i$i$i = 0;
   while(1) {
    $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
    if ($exitcond$i$i$i) {
     break;
    }
    $31 = (($1) + ($__i$0$i$i$i<<2)|0);
    HEAP32[$31>>2] = 0;
    $32 = (($__i$0$i$i$i) + 1)|0;
    $__i$0$i$i$i = $32;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
   $$pre$phiZ2D = $12;
  } else {
   $33 = ((($13)) + 40|0);
   $34 = HEAP32[$33>>2]|0;
   FUNCTION_TABLE_vii[$34 & 1023]($2,$12);
   $35 = HEAP32[$2>>2]|0;
   HEAP8[$__pat>>0]=$35&255;HEAP8[$__pat+1>>0]=($35>>8)&255;HEAP8[$__pat+2>>0]=($35>>16)&255;HEAP8[$__pat+3>>0]=$35>>24;
   $36 = HEAP32[$12>>2]|0;
   $37 = ((($36)) + 28|0);
   $38 = HEAP32[$37>>2]|0;
   FUNCTION_TABLE_vii[$38 & 1023]($3,$12);
   $39 = HEAP8[$__sn>>0]|0;
   $40 = $39 & 1;
   $41 = ($40<<24>>24)==(0);
   if ($41) {
    $45 = ((($__sn)) + 1|0);
    HEAP8[$45>>0] = 0;
    HEAP8[$__sn>>0] = 0;
   } else {
    $42 = ((($__sn)) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    HEAP8[$43>>0] = 0;
    $44 = ((($__sn)) + 4|0);
    HEAP32[$44>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(442,($__sn|0),0);
   $46 = __THREW__; __THREW__ = 0;
   $47 = $46&1;
   if ($47) {
    $48 = ___cxa_find_matching_catch(0|0)|0;
    $49 = tempRet0;
    ___clang_call_terminate($48);
    // unreachable;
   }
   ;HEAP32[$__sn>>2]=HEAP32[$3>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
   $__i$0$i$i$i$6 = 0;
   while(1) {
    $exitcond$i$i$i$7 = ($__i$0$i$i$i$6|0)==(3);
    if ($exitcond$i$i$i$7) {
     break;
    }
    $50 = (($3) + ($__i$0$i$i$i$6<<2)|0);
    HEAP32[$50>>2] = 0;
    $51 = (($__i$0$i$i$i$6) + 1)|0;
    $__i$0$i$i$i$6 = $51;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   $$pre$phiZ2D = $12;
  }
  $52 = HEAP32[$12>>2]|0;
  $53 = ((($52)) + 12|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (FUNCTION_TABLE_ii[$54 & 1023]($12)|0);
  HEAP8[$__dp>>0] = $55;
  $56 = HEAP32[$12>>2]|0;
  $57 = ((($56)) + 16|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (FUNCTION_TABLE_ii[$58 & 1023]($12)|0);
  HEAP8[$__ts>>0] = $59;
  $60 = HEAP32[$$pre$phiZ2D>>2]|0;
  $61 = ((($60)) + 20|0);
  $62 = HEAP32[$61>>2]|0;
  FUNCTION_TABLE_vii[$62 & 1023]($4,$12);
  $63 = HEAP8[$__grp>>0]|0;
  $64 = $63 & 1;
  $65 = ($64<<24>>24)==(0);
  if ($65) {
   $69 = ((($__grp)) + 1|0);
   HEAP8[$69>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $66 = ((($__grp)) + 8|0);
   $67 = HEAP32[$66>>2]|0;
   HEAP8[$67>>0] = 0;
   $68 = ((($__grp)) + 4|0);
   HEAP32[$68>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(442,($__grp|0),0);
  $70 = __THREW__; __THREW__ = 0;
  $71 = $70&1;
  if ($71) {
   $72 = ___cxa_find_matching_catch(0|0)|0;
   $73 = tempRet0;
   ___clang_call_terminate($72);
   // unreachable;
  }
  ;HEAP32[$__grp>>2]=HEAP32[$4>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
  $__i$0$i$i$i$11 = 0;
  while(1) {
   $exitcond$i$i$i$12 = ($__i$0$i$i$i$11|0)==(3);
   if ($exitcond$i$i$i$12) {
    break;
   }
   $74 = (($4) + ($__i$0$i$i$i$11<<2)|0);
   HEAP32[$74>>2] = 0;
   $75 = (($__i$0$i$i$i$11) + 1)|0;
   $__i$0$i$i$i$11 = $75;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
  $76 = HEAP32[$$pre$phiZ2D>>2]|0;
  $77 = ((($76)) + 24|0);
  $78 = HEAP32[$77>>2]|0;
  FUNCTION_TABLE_vii[$78 & 1023]($5,$12);
  $79 = HEAP8[$__sym>>0]|0;
  $80 = $79 & 1;
  $81 = ($80<<24>>24)==(0);
  if ($81) {
   $85 = ((($__sym)) + 1|0);
   HEAP8[$85>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $82 = ((($__sym)) + 8|0);
   $83 = HEAP32[$82>>2]|0;
   HEAP8[$83>>0] = 0;
   $84 = ((($__sym)) + 4|0);
   HEAP32[$84>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(442,($__sym|0),0);
  $86 = __THREW__; __THREW__ = 0;
  $87 = $86&1;
  if ($87) {
   $88 = ___cxa_find_matching_catch(0|0)|0;
   $89 = tempRet0;
   ___clang_call_terminate($88);
   // unreachable;
  }
  ;HEAP32[$__sym>>2]=HEAP32[$5>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
  $__i$0$i$i$i$16 = 0;
  while(1) {
   $exitcond$i$i$i$17 = ($__i$0$i$i$i$16|0)==(3);
   if ($exitcond$i$i$i$17) {
    break;
   }
   $90 = (($5) + ($__i$0$i$i$i$16<<2)|0);
   HEAP32[$90>>2] = 0;
   $91 = (($__i$0$i$i$i$16) + 1)|0;
   $__i$0$i$i$i$16 = $91;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
  $92 = HEAP32[$12>>2]|0;
  $93 = ((($92)) + 36|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (FUNCTION_TABLE_ii[$94 & 1023]($12)|0);
  $storemerge = $95;
 } else {
  $96 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,8132)|0);
  $97 = HEAP32[$96>>2]|0;
  if ($__neg) {
   $98 = ((($97)) + 44|0);
   $99 = HEAP32[$98>>2]|0;
   FUNCTION_TABLE_vii[$99 & 1023]($6,$96);
   $100 = HEAP32[$6>>2]|0;
   HEAP8[$__pat>>0]=$100&255;HEAP8[$__pat+1>>0]=($100>>8)&255;HEAP8[$__pat+2>>0]=($100>>16)&255;HEAP8[$__pat+3>>0]=$100>>24;
   $101 = HEAP32[$96>>2]|0;
   $102 = ((($101)) + 32|0);
   $103 = HEAP32[$102>>2]|0;
   FUNCTION_TABLE_vii[$103 & 1023]($7,$96);
   $104 = HEAP8[$__sn>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $110 = ((($__sn)) + 1|0);
    HEAP8[$110>>0] = 0;
    HEAP8[$__sn>>0] = 0;
   } else {
    $107 = ((($__sn)) + 8|0);
    $108 = HEAP32[$107>>2]|0;
    HEAP8[$108>>0] = 0;
    $109 = ((($__sn)) + 4|0);
    HEAP32[$109>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(442,($__sn|0),0);
   $111 = __THREW__; __THREW__ = 0;
   $112 = $111&1;
   if ($112) {
    $113 = ___cxa_find_matching_catch(0|0)|0;
    $114 = tempRet0;
    ___clang_call_terminate($113);
    // unreachable;
   }
   ;HEAP32[$__sn>>2]=HEAP32[$7>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
   $__i$0$i$i$i$21 = 0;
   while(1) {
    $exitcond$i$i$i$22 = ($__i$0$i$i$i$21|0)==(3);
    if ($exitcond$i$i$i$22) {
     break;
    }
    $115 = (($7) + ($__i$0$i$i$i$21<<2)|0);
    HEAP32[$115>>2] = 0;
    $116 = (($__i$0$i$i$i$21) + 1)|0;
    $__i$0$i$i$i$21 = $116;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
   $$pre$phi39Z2D = $96;
  } else {
   $117 = ((($97)) + 40|0);
   $118 = HEAP32[$117>>2]|0;
   FUNCTION_TABLE_vii[$118 & 1023]($8,$96);
   $119 = HEAP32[$8>>2]|0;
   HEAP8[$__pat>>0]=$119&255;HEAP8[$__pat+1>>0]=($119>>8)&255;HEAP8[$__pat+2>>0]=($119>>16)&255;HEAP8[$__pat+3>>0]=$119>>24;
   $120 = HEAP32[$96>>2]|0;
   $121 = ((($120)) + 28|0);
   $122 = HEAP32[$121>>2]|0;
   FUNCTION_TABLE_vii[$122 & 1023]($9,$96);
   $123 = HEAP8[$__sn>>0]|0;
   $124 = $123 & 1;
   $125 = ($124<<24>>24)==(0);
   if ($125) {
    $129 = ((($__sn)) + 1|0);
    HEAP8[$129>>0] = 0;
    HEAP8[$__sn>>0] = 0;
   } else {
    $126 = ((($__sn)) + 8|0);
    $127 = HEAP32[$126>>2]|0;
    HEAP8[$127>>0] = 0;
    $128 = ((($__sn)) + 4|0);
    HEAP32[$128>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(442,($__sn|0),0);
   $130 = __THREW__; __THREW__ = 0;
   $131 = $130&1;
   if ($131) {
    $132 = ___cxa_find_matching_catch(0|0)|0;
    $133 = tempRet0;
    ___clang_call_terminate($132);
    // unreachable;
   }
   ;HEAP32[$__sn>>2]=HEAP32[$9>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
   $__i$0$i$i$i$26 = 0;
   while(1) {
    $exitcond$i$i$i$27 = ($__i$0$i$i$i$26|0)==(3);
    if ($exitcond$i$i$i$27) {
     break;
    }
    $134 = (($9) + ($__i$0$i$i$i$26<<2)|0);
    HEAP32[$134>>2] = 0;
    $135 = (($__i$0$i$i$i$26) + 1)|0;
    $__i$0$i$i$i$26 = $135;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
   $$pre$phi39Z2D = $96;
  }
  $136 = HEAP32[$96>>2]|0;
  $137 = ((($136)) + 12|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = (FUNCTION_TABLE_ii[$138 & 1023]($96)|0);
  HEAP8[$__dp>>0] = $139;
  $140 = HEAP32[$96>>2]|0;
  $141 = ((($140)) + 16|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = (FUNCTION_TABLE_ii[$142 & 1023]($96)|0);
  HEAP8[$__ts>>0] = $143;
  $144 = HEAP32[$$pre$phi39Z2D>>2]|0;
  $145 = ((($144)) + 20|0);
  $146 = HEAP32[$145>>2]|0;
  FUNCTION_TABLE_vii[$146 & 1023]($10,$96);
  $147 = HEAP8[$__grp>>0]|0;
  $148 = $147 & 1;
  $149 = ($148<<24>>24)==(0);
  if ($149) {
   $153 = ((($__grp)) + 1|0);
   HEAP8[$153>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $150 = ((($__grp)) + 8|0);
   $151 = HEAP32[$150>>2]|0;
   HEAP8[$151>>0] = 0;
   $152 = ((($__grp)) + 4|0);
   HEAP32[$152>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(442,($__grp|0),0);
  $154 = __THREW__; __THREW__ = 0;
  $155 = $154&1;
  if ($155) {
   $156 = ___cxa_find_matching_catch(0|0)|0;
   $157 = tempRet0;
   ___clang_call_terminate($156);
   // unreachable;
  }
  ;HEAP32[$__grp>>2]=HEAP32[$10>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
  $__i$0$i$i$i$31 = 0;
  while(1) {
   $exitcond$i$i$i$32 = ($__i$0$i$i$i$31|0)==(3);
   if ($exitcond$i$i$i$32) {
    break;
   }
   $158 = (($10) + ($__i$0$i$i$i$31<<2)|0);
   HEAP32[$158>>2] = 0;
   $159 = (($__i$0$i$i$i$31) + 1)|0;
   $__i$0$i$i$i$31 = $159;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  $160 = HEAP32[$$pre$phi39Z2D>>2]|0;
  $161 = ((($160)) + 24|0);
  $162 = HEAP32[$161>>2]|0;
  FUNCTION_TABLE_vii[$162 & 1023]($11,$96);
  $163 = HEAP8[$__sym>>0]|0;
  $164 = $163 & 1;
  $165 = ($164<<24>>24)==(0);
  if ($165) {
   $169 = ((($__sym)) + 1|0);
   HEAP8[$169>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $166 = ((($__sym)) + 8|0);
   $167 = HEAP32[$166>>2]|0;
   HEAP8[$167>>0] = 0;
   $168 = ((($__sym)) + 4|0);
   HEAP32[$168>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(442,($__sym|0),0);
  $170 = __THREW__; __THREW__ = 0;
  $171 = $170&1;
  if ($171) {
   $172 = ___cxa_find_matching_catch(0|0)|0;
   $173 = tempRet0;
   ___clang_call_terminate($172);
   // unreachable;
  }
  ;HEAP32[$__sym>>2]=HEAP32[$11>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
  $__i$0$i$i$i$36 = 0;
  while(1) {
   $exitcond$i$i$i$37 = ($__i$0$i$i$i$36|0)==(3);
   if ($exitcond$i$i$i$37) {
    break;
   }
   $174 = (($11) + ($__i$0$i$i$i$36<<2)|0);
   HEAP32[$174>>2] = 0;
   $175 = (($__i$0$i$i$i$36) + 1)|0;
   $__i$0$i$i$i$36 = $175;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  $176 = HEAP32[$96>>2]|0;
  $177 = ((($176)) + 36|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = (FUNCTION_TABLE_ii[$178 & 1023]($96)|0);
  $storemerge = $179;
 }
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$ = 0, $$$0 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$2 = 0, $$0$i$i$8 = 0, $$0$i$i$8$lcssa = 0, $$0$i$i$lcssa = 0, $$01$i$i = 0, $$2 = 0, $$lcssa35 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__d$0 = 0, $__d$0$lcssa = 0, $__d$1 = 0, $__d$2 = 0, $__d$3 = 0, $__f$0 = 0, $__f$1 = 0, $__gl$0 = 0, $__gl$1 = 0, $__ig$0 = 0, $__ig$1 = 0, $__ng$0 = 0, $__ng$1 = 0, $__p$0 = 0, $exitcond = 0, $isascii1$i = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = ((($__sn)) + 4|0);
 $1 = ((($__sn)) + 8|0);
 $2 = ((($__sn)) + 1|0);
 $3 = ((($__sym)) + 4|0);
 $4 = $__flags & 512;
 $5 = ($4|0)==(0);
 $6 = ((($__sym)) + 8|0);
 $7 = ((($__sym)) + 1|0);
 $8 = ((($__ct)) + 8|0);
 $9 = ($__fd|0)>(0);
 $10 = ((($__grp)) + 4|0);
 $11 = ((($__grp)) + 8|0);
 $12 = ((($__grp)) + 1|0);
 $$0 = $__db;$__p$0 = 0;
 while(1) {
  $exitcond = ($__p$0|0)==(4);
  if ($exitcond) {
   break;
  }
  $21 = (($__pat) + ($__p$0)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22 << 24 >> 24;
  L4: do {
   switch ($23|0) {
   case 0:  {
    $24 = HEAP32[$__me>>2]|0;
    HEAP32[$__mi>>2] = $24;
    $$2 = $$0;
    break;
   }
   case 1:  {
    $25 = HEAP32[$__me>>2]|0;
    HEAP32[$__mi>>2] = $25;
    $26 = HEAP32[$__ct>>2]|0;
    $27 = ((($26)) + 28|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (FUNCTION_TABLE_iii[$28 & 511]($__ct,32)|0);
    $30 = HEAP32[$__me>>2]|0;
    $31 = ((($30)) + 1|0);
    HEAP32[$__me>>2] = $31;
    HEAP8[$30>>0] = $29;
    $$2 = $$0;
    break;
   }
   case 3:  {
    $32 = HEAP8[$__sn>>0]|0;
    $33 = $32 & 1;
    $34 = ($33<<24>>24)==(0);
    $35 = HEAP32[$0>>2]|0;
    $36 = $32&255;
    $37 = $36 >>> 1;
    $38 = $34 ? $37 : $35;
    $39 = ($38|0)==(0);
    if ($39) {
     $$2 = $$0;
    } else {
     $40 = HEAP32[$1>>2]|0;
     $41 = $34 ? $2 : $40;
     $42 = HEAP8[$41>>0]|0;
     $43 = HEAP32[$__me>>2]|0;
     $44 = ((($43)) + 1|0);
     HEAP32[$__me>>2] = $44;
     HEAP8[$43>>0] = $42;
     $$2 = $$0;
    }
    break;
   }
   case 2:  {
    $45 = HEAP8[$__sym>>0]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    $48 = HEAP32[$3>>2]|0;
    $49 = $45&255;
    $50 = $49 >>> 1;
    $51 = $47 ? $50 : $48;
    $52 = ($51|0)==(0);
    $or$cond = $5 | $52;
    if ($or$cond) {
     $$2 = $$0;
    } else {
     $53 = HEAP32[$6>>2]|0;
     $54 = $47 ? $7 : $53;
     $55 = (($54) + ($51)|0);
     $56 = HEAP32[$__me>>2]|0;
     $$0$i$i$8 = $56;$57 = $54;
     while(1) {
      $58 = ($57|0)==($55|0);
      if ($58) {
       $$0$i$i$8$lcssa = $$0$i$i$8;
       break;
      }
      $59 = HEAP8[$57>>0]|0;
      HEAP8[$$0$i$i$8>>0] = $59;
      $60 = ((($57)) + 1|0);
      $61 = ((($$0$i$i$8)) + 1|0);
      $$0$i$i$8 = $61;$57 = $60;
     }
     HEAP32[$__me>>2] = $$0$i$i$8$lcssa;
     $$2 = $$0;
    }
    break;
   }
   case 4:  {
    $62 = HEAP32[$__me>>2]|0;
    $63 = ((($$0)) + 1|0);
    $$$0 = $__neg ? $63 : $$0;
    $64 = HEAP32[$8>>2]|0;
    $__d$0 = $$$0;
    while(1) {
     $65 = ($__d$0>>>0)<($__de>>>0);
     if (!($65)) {
      $__d$0$lcssa = $__d$0;
      break;
     }
     $66 = HEAP8[$__d$0>>0]|0;
     $isascii1$i = ($66<<24>>24)>(-1);
     if (!($isascii1$i)) {
      $__d$0$lcssa = $__d$0;
      break;
     }
     $67 = $66 << 24 >> 24;
     $68 = (($64) + ($67<<1)|0);
     $69 = HEAP16[$68>>1]|0;
     $70 = $69 & 2048;
     $71 = ($70<<16>>16)==(0);
     if ($71) {
      $__d$0$lcssa = $__d$0;
      break;
     }
     $72 = ((($__d$0)) + 1|0);
     $__d$0 = $72;
    }
    if ($9) {
     $__d$1 = $__d$0$lcssa;$__f$0 = $__fd;
     while(1) {
      $73 = ($__d$1>>>0)>($$$0>>>0);
      $74 = ($__f$0|0)>(0);
      $75 = $73 & $74;
      if (!($75)) {
       break;
      }
      $76 = ((($__d$1)) + -1|0);
      $77 = HEAP8[$76>>0]|0;
      $78 = HEAP32[$__me>>2]|0;
      $79 = ((($78)) + 1|0);
      HEAP32[$__me>>2] = $79;
      HEAP8[$78>>0] = $77;
      $80 = (($__f$0) + -1)|0;
      $__d$1 = $76;$__f$0 = $80;
     }
     if ($74) {
      $81 = HEAP32[$__ct>>2]|0;
      $82 = ((($81)) + 28|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = (FUNCTION_TABLE_iii[$83 & 511]($__ct,48)|0);
      $88 = $84;
     } else {
      $88 = 0;
     }
     $__f$1 = $__f$0;
     while(1) {
      $85 = ($__f$1|0)>(0);
      $86 = HEAP32[$__me>>2]|0;
      $87 = ((($86)) + 1|0);
      HEAP32[$__me>>2] = $87;
      if (!($85)) {
       $$lcssa35 = $86;
       break;
      }
      HEAP8[$86>>0] = $88;
      $89 = (($__f$1) + -1)|0;
      $__f$1 = $89;
     }
     HEAP8[$$lcssa35>>0] = $__dp;
     $__d$2 = $__d$1;
    } else {
     $__d$2 = $__d$0$lcssa;
    }
    $90 = ($__d$2|0)==($$$0|0);
    L35: do {
     if ($90) {
      $91 = HEAP32[$__ct>>2]|0;
      $92 = ((($91)) + 28|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = (FUNCTION_TABLE_iii[$93 & 511]($__ct,48)|0);
      $95 = HEAP32[$__me>>2]|0;
      $96 = ((($95)) + 1|0);
      HEAP32[$__me>>2] = $96;
      HEAP8[$95>>0] = $94;
     } else {
      $97 = HEAP8[$__grp>>0]|0;
      $98 = $97 & 1;
      $99 = ($98<<24>>24)==(0);
      $100 = HEAP32[$10>>2]|0;
      $101 = $97&255;
      $102 = $101 >>> 1;
      $103 = $99 ? $102 : $100;
      $104 = ($103|0)==(0);
      if ($104) {
       $__d$3 = $__d$2;$__gl$0 = -1;$__ig$0 = 0;$__ng$0 = 0;
      } else {
       $105 = HEAP32[$11>>2]|0;
       $106 = $99 ? $12 : $105;
       $107 = HEAP8[$106>>0]|0;
       $108 = $107 << 24 >> 24;
       $__d$3 = $__d$2;$__gl$0 = $108;$__ig$0 = 0;$__ng$0 = 0;
      }
      while(1) {
       $109 = ($__d$3|0)==($$$0|0);
       if ($109) {
        break L35;
       }
       $110 = ($__ng$0|0)==($__gl$0|0);
       if ($110) {
        $111 = HEAP32[$__me>>2]|0;
        $112 = ((($111)) + 1|0);
        HEAP32[$__me>>2] = $112;
        HEAP8[$111>>0] = $__ts;
        $113 = (($__ig$0) + 1)|0;
        $114 = HEAP8[$__grp>>0]|0;
        $115 = $114 & 1;
        $116 = ($115<<24>>24)==(0);
        $117 = HEAP32[$10>>2]|0;
        $118 = $114&255;
        $119 = $118 >>> 1;
        $120 = $116 ? $119 : $117;
        $121 = ($113>>>0)<($120>>>0);
        if ($121) {
         $122 = HEAP32[$11>>2]|0;
         $123 = $116 ? $12 : $122;
         $124 = (($123) + ($113)|0);
         $125 = HEAP8[$124>>0]|0;
         $126 = ($125<<24>>24)==(127);
         $127 = $125 << 24 >> 24;
         $$ = $126 ? -1 : $127;
         $__gl$1 = $$;$__ig$1 = $113;$__ng$1 = 0;
        } else {
         $__gl$1 = $__ng$0;$__ig$1 = $113;$__ng$1 = 0;
        }
       } else {
        $__gl$1 = $__gl$0;$__ig$1 = $__ig$0;$__ng$1 = $__ng$0;
       }
       $128 = ((($__d$3)) + -1|0);
       $129 = HEAP8[$128>>0]|0;
       $130 = HEAP32[$__me>>2]|0;
       $131 = ((($130)) + 1|0);
       HEAP32[$__me>>2] = $131;
       HEAP8[$130>>0] = $129;
       $132 = (($__ng$1) + 1)|0;
       $__d$3 = $128;$__gl$0 = $__gl$1;$__ig$0 = $__ig$1;$__ng$0 = $132;
      }
     }
    } while(0);
    $133 = HEAP32[$__me>>2]|0;
    $134 = ($62|0)==($133|0);
    if ($134) {
     $$2 = $$$0;
    } else {
     $$0$i$i$2 = $133;$$01$i$i = $62;
     while(1) {
      $135 = ((($$0$i$i$2)) + -1|0);
      $136 = ($$01$i$i>>>0)<($135>>>0);
      if (!($136)) {
       $$2 = $$$0;
       break L4;
      }
      $137 = HEAP8[$$01$i$i>>0]|0;
      $138 = HEAP8[$135>>0]|0;
      HEAP8[$$01$i$i>>0] = $138;
      HEAP8[$135>>0] = $137;
      $139 = ((($$01$i$i)) + 1|0);
      $$0$i$i$2 = $135;$$01$i$i = $139;
     }
    }
    break;
   }
   default: {
    $$2 = $$0;
   }
   }
  } while(0);
  $140 = (($__p$0) + 1)|0;
  $$0 = $$2;$__p$0 = $140;
 }
 $13 = HEAP8[$__sn>>0]|0;
 $14 = $13 & 1;
 $15 = ($14<<24>>24)==(0);
 $16 = HEAP32[$0>>2]|0;
 $17 = $13&255;
 $18 = $17 >>> 1;
 $19 = $15 ? $18 : $16;
 $20 = ($19>>>0)>(1);
 if ($20) {
  $141 = HEAP32[$1>>2]|0;
  $142 = $15 ? $2 : $141;
  $143 = (($142) + ($19)|0);
  $144 = HEAP32[$__me>>2]|0;
  $$0$i$i = $144;$$pn = $142;
  while(1) {
   $145 = ((($$pn)) + 1|0);
   $146 = ($145|0)==($143|0);
   if ($146) {
    $$0$i$i$lcssa = $$0$i$i;
    break;
   }
   $147 = HEAP8[$145>>0]|0;
   HEAP8[$$0$i$i>>0] = $147;
   $148 = ((($$0$i$i)) + 1|0);
   $$0$i$i = $148;$$pn = $145;
  }
  HEAP32[$__me>>2] = $$0$i$i$lcssa;
 }
 $149 = $__flags & 176;
 switch ($149|0) {
 case 32:  {
  $150 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $150;
  break;
 }
 case 16:  {
  break;
 }
 default: {
  HEAP32[$__mi>>2] = $__mb;
 }
 }
 return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pre = 0, $$pre18 = 0, $$pre19 = 0, $$pre19$pre = 0, $$pre21 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__dp = 0, $__fd = 0, $__grp = 0, $__i$0$i$i = 0, $__i$0$i$i$3 = 0, $__i$0$i$i$6 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $exitcond$i$i = 0, $exitcond$i$i$4 = 0, $exitcond$i$i$7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 56|0;
 $__loc = sp + 52|0;
 $__pat = sp + 164|0;
 $__dp = sp + 161|0;
 $__ts = sp + 160|0;
 $__grp = sp + 40|0;
 $__sym = sp + 28|0;
 $__sn = sp + 16|0;
 $__fd = sp + 12|0;
 $__mbuf = sp + 60|0;
 $__mi = sp + 8|0;
 $__me = sp + 4|0;
 $0 = sp;
 $1 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $1;
 __THREW__ = 0;
 $2 = (invoke_iii(354,($__loc|0),(8588|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   label = 22;
  } else {
   $5 = HEAP8[$__digits>>0]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   $8 = ((($__digits)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $5&255;
   $11 = $10 >>> 1;
   $12 = $7 ? $11 : $9;
   $13 = ($12|0)==(0);
   if ($13) {
    $32 = 0;
   } else {
    $14 = ((($__digits)) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ((($__digits)) + 1|0);
    $17 = $7 ? $16 : $15;
    $18 = HEAP8[$17>>0]|0;
    $19 = HEAP32[$2>>2]|0;
    $20 = ((($19)) + 28|0);
    $21 = HEAP32[$20>>2]|0;
    __THREW__ = 0;
    $22 = (invoke_iii($21|0,($2|0),45)|0);
    $23 = __THREW__; __THREW__ = 0;
    $24 = $23&1;
    if ($24) {
     label = 22;
     break;
    }
    $25 = ($18<<24>>24)==($22<<24>>24);
    $32 = $25;
   }
   $__i$0$i$i = 0;
   while(1) {
    $exitcond$i$i = ($__i$0$i$i|0)==(3);
    if ($exitcond$i$i) {
     break;
    }
    $26 = (($__grp) + ($__i$0$i$i<<2)|0);
    HEAP32[$26>>2] = 0;
    $27 = (($__i$0$i$i) + 1)|0;
    $__i$0$i$i = $27;
   }
   $__i$0$i$i$3 = 0;
   while(1) {
    $exitcond$i$i$4 = ($__i$0$i$i$3|0)==(3);
    if ($exitcond$i$i$4) {
     break;
    }
    $28 = (($__sym) + ($__i$0$i$i$3<<2)|0);
    HEAP32[$28>>2] = 0;
    $29 = (($__i$0$i$i$3) + 1)|0;
    $__i$0$i$i$3 = $29;
   }
   $__i$0$i$i$6 = 0;
   while(1) {
    $exitcond$i$i$7 = ($__i$0$i$i$6|0)==(3);
    if ($exitcond$i$i$7) {
     break;
    }
    $30 = (($__sn) + ($__i$0$i$i$6<<2)|0);
    HEAP32[$30>>2] = 0;
    $31 = (($__i$0$i$i$6) + 1)|0;
    $__i$0$i$i$6 = $31;
   }
   __THREW__ = 0;
   invoke_viiiiiiiiii(449,($__intl|0),($32|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if ($34) {
    $94 = ___cxa_find_matching_catch()|0;
    $95 = tempRet0;
    $$0 = $94;$$01 = $95;$$pre19 = $1;
   } else {
    $35 = HEAP8[$__digits>>0]|0;
    $36 = $35 & 1;
    $37 = ($36<<24>>24)==(0);
    $38 = HEAP32[$8>>2]|0;
    $39 = $35&255;
    $40 = $39 >>> 1;
    $41 = $37 ? $40 : $38;
    $42 = HEAP32[$__fd>>2]|0;
    $43 = ($41|0)>($42|0);
    if ($43) {
     $44 = (($41) - ($42))|0;
     $45 = $44 << 1;
     $46 = HEAP8[$__sn>>0]|0;
     $47 = $46 & 1;
     $48 = ($47<<24>>24)==(0);
     $49 = ((($__sn)) + 4|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = $46&255;
     $52 = $51 >>> 1;
     $53 = $48 ? $52 : $50;
     $54 = HEAP8[$__sym>>0]|0;
     $55 = $54 & 1;
     $56 = ($55<<24>>24)==(0);
     $57 = ((($__sym)) + 4|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = $54&255;
     $60 = $59 >>> 1;
     $61 = $56 ? $60 : $58;
     $62 = $45 | 1;
     $63 = (($62) + ($42))|0;
     $64 = (($63) + ($53))|0;
     $65 = (($64) + ($61))|0;
     $85 = $65;
    } else {
     $66 = HEAP8[$__sn>>0]|0;
     $67 = $66 & 1;
     $68 = ($67<<24>>24)==(0);
     $69 = ((($__sn)) + 4|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = $66&255;
     $72 = $71 >>> 1;
     $73 = $68 ? $72 : $70;
     $74 = HEAP8[$__sym>>0]|0;
     $75 = $74 & 1;
     $76 = ($75<<24>>24)==(0);
     $77 = ((($__sym)) + 4|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = $74&255;
     $80 = $79 >>> 1;
     $81 = $76 ? $80 : $78;
     $82 = (($42) + 2)|0;
     $83 = (($82) + ($73))|0;
     $84 = (($83) + ($81))|0;
     $85 = $84;
    }
    $86 = ($85>>>0)>(100);
    if ($86) {
     $87 = (_malloc($85)|0);
     $88 = $87;
     $89 = ($87|0)==(0|0);
     if ($89) {
      __THREW__ = 0;
      invoke_v(423);
      $90 = __THREW__; __THREW__ = 0;
      $91 = $90&1;
      if ($91) {
       $98 = $88;
      } else {
       $$pre = HEAP8[$__digits>>0]|0;
       $$pre18 = HEAP32[$8>>2]|0;
       $104 = $$pre;$112 = $$pre18;$125 = $88;$__mb$0 = 0;
       label = 26;
      }
     } else {
      $104 = $35;$112 = $38;$125 = $88;$__mb$0 = $87;
      label = 26;
     }
    } else {
     $104 = $35;$112 = $38;$125 = 0;$__mb$0 = $__mbuf;
     label = 26;
    }
    if ((label|0) == 26) {
     $101 = ((($__iob)) + 4|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = $104 & 1;
     $105 = ($103<<24>>24)==(0);
     $106 = ((($__digits)) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ((($__digits)) + 1|0);
     $109 = $105 ? $108 : $107;
     $110 = $104&255;
     $111 = $110 >>> 1;
     $113 = $105 ? $111 : $112;
     $114 = (($109) + ($113)|0);
     $115 = HEAP8[$__dp>>0]|0;
     $116 = HEAP8[$__ts>>0]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(450,($__mb$0|0),($__mi|0),($__me|0),($102|0),($109|0),($114|0),($2|0),($32|0),($__pat|0),($115|0),($116|0),($__grp|0),($__sym|0),($__sn|0),($42|0));
     $117 = __THREW__; __THREW__ = 0;
     $118 = $117&1;
     if ($118) {
      $98 = $125;
     } else {
      $119 = HEAP32[$__s>>2]|0;
      HEAP32[$0>>2] = $119;
      $120 = HEAP32[$__mi>>2]|0;
      $121 = HEAP32[$__me>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
      $122 = (invoke_iiiiiii(425,($$byval_copy|0),($__mb$0|0),($120|0),($121|0),($__iob|0),($__fl|0))|0);
      $123 = __THREW__; __THREW__ = 0;
      $124 = $123&1;
      if ($124) {
       $98 = $125;
      } else {
       $126 = ($125|0)==(0);
       if ($126) {
        $128 = $1;
       } else {
        $127 = $125;
        _free($127);
        $$pre21 = HEAP32[$__loc>>2]|0;
        $128 = $$pre21;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
       (__ZNSt3__114__shared_count16__release_sharedEv($128)|0);
       STACKTOP = sp;return ($122|0);
      }
     }
    }
    $96 = ___cxa_find_matching_catch()|0;
    $97 = tempRet0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0 = $96;$$01 = $97;$$pre19 = $1;
    } else {
     $100 = $98;
     _free($100);
     $$pre19$pre = HEAP32[$__loc>>2]|0;
     $$0 = $96;$$01 = $97;$$pre19 = $$pre19$pre;
    }
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
   $$1 = $$0;$$12 = $$01;$129 = $$pre19;
  }
 } while(0);
 if ((label|0) == 22) {
  $92 = ___cxa_find_matching_catch()|0;
  $93 = tempRet0;
  $$1 = $92;$$12 = $93;$129 = $1;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($129)|0);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($this,$__s,$__intl,$__iob,$__fl,$__units) {
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pre = 0, $$pre20 = 0, $$pre20$pre = 0, $$pre22 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__i$0$i$i = 0;
 var $__i$0$i$i$4 = 0, $__i$0$i$i$6 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $exitcond$i$i = 0, $exitcond$i$i$5 = 0, $exitcond$i$i$7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1008|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 892|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $__buf = sp + 900|0;
 $__bb = sp + 888|0;
 $__digits = sp + 488|0;
 $__loc = sp + 480|0;
 $__pat = sp + 896|0;
 $__dp = sp + 476|0;
 $__ts = sp + 472|0;
 $__grp = sp + 460|0;
 $__sym = sp + 448|0;
 $__sn = sp + 436|0;
 $__fd = sp + 432|0;
 $__mbuf = sp + 32|0;
 $__mi = sp + 24|0;
 $__me = sp + 20|0;
 $0 = sp + 16|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[$vararg_buffer>>3] = $__units;
 $1 = (_snprintf($__buf,100,20986,$vararg_buffer)|0);
 $2 = ($1>>>0)>(99);
 do {
  if ($2) {
   __THREW__ = 0;
   $3 = (invoke_i(417)|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $138 = 0;$139 = 0;
    label = 8;
   } else {
    __THREW__ = 0;
    HEAPF64[$vararg_buffer1>>3] = $__units;
    $6 = (invoke_iiiii(422,($__bb|0),($3|0),(20986|0),($vararg_buffer1|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $138 = 0;$139 = 0;
     label = 8;
    } else {
     $9 = HEAP32[$__bb>>2]|0;
     $10 = ($9|0)==(0|0);
     if ($10) {
      __THREW__ = 0;
      invoke_v(423);
      $12 = __THREW__; __THREW__ = 0;
      $13 = $12&1;
      if ($13) {
       $138 = 0;$139 = 0;
       label = 8;
       break;
      }
      $$pre = HEAP32[$__bb>>2]|0;
      $140 = $$pre;
     } else {
      $11 = $9;
      $140 = $11;
     }
     $16 = $6 << 2;
     $17 = (_malloc($16)|0);
     $18 = $17;
     $19 = ($17|0)==(0|0);
     if ($19) {
      __THREW__ = 0;
      invoke_v(423);
      $20 = __THREW__; __THREW__ = 0;
      $21 = $20&1;
      if ($21) {
       $138 = $140;$139 = $18;
       label = 8;
      } else {
       $125 = $18;$128 = $140;$__db$0 = 0;$__n$0 = $6;
       label = 11;
      }
     } else {
      $125 = $18;$128 = $140;$__db$0 = $17;$__n$0 = $6;
      label = 11;
     }
    }
   }
  } else {
   $125 = 0;$128 = 0;$__db$0 = $__digits;$__n$0 = $1;
   label = 11;
  }
 } while(0);
 if ((label|0) == 11) {
  __THREW__ = 0;
  $22 = (invoke_ii(353,($__iob|0))|0);
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   $138 = $128;$139 = $125;
   label = 8;
  } else {
   HEAP32[$__loc>>2] = $22;
   __THREW__ = 0;
   $25 = (invoke_iii(354,($__loc|0),(8580|0))|0);
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if ($27) {
    label = 32;
   } else {
    $28 = HEAP32[$__bb>>2]|0;
    $29 = (($28) + ($__n$0)|0);
    $30 = HEAP32[$25>>2]|0;
    $31 = ((($30)) + 48|0);
    $32 = HEAP32[$31>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($32|0,($25|0),($28|0),($29|0),($__db$0|0))|0);
    $33 = __THREW__; __THREW__ = 0;
    $34 = $33&1;
    if ($34) {
     label = 32;
    } else {
     $35 = ($__n$0|0)==(0);
     if ($35) {
      $45 = 0;
     } else {
      $36 = HEAP32[$__bb>>2]|0;
      $37 = HEAP8[$36>>0]|0;
      $38 = ($37<<24>>24)==(45);
      $45 = $38;
     }
     $__i$0$i$i = 0;
     while(1) {
      $exitcond$i$i = ($__i$0$i$i|0)==(3);
      if ($exitcond$i$i) {
       break;
      }
      $39 = (($__grp) + ($__i$0$i$i<<2)|0);
      HEAP32[$39>>2] = 0;
      $40 = (($__i$0$i$i) + 1)|0;
      $__i$0$i$i = $40;
     }
     $__i$0$i$i$4 = 0;
     while(1) {
      $exitcond$i$i$5 = ($__i$0$i$i$4|0)==(3);
      if ($exitcond$i$i$5) {
       break;
      }
      $41 = (($__sym) + ($__i$0$i$i$4<<2)|0);
      HEAP32[$41>>2] = 0;
      $42 = (($__i$0$i$i$4) + 1)|0;
      $__i$0$i$i$4 = $42;
     }
     $__i$0$i$i$6 = 0;
     while(1) {
      $exitcond$i$i$7 = ($__i$0$i$i$6|0)==(3);
      if ($exitcond$i$i$7) {
       break;
      }
      $43 = (($__sn) + ($__i$0$i$i$6<<2)|0);
      HEAP32[$43>>2] = 0;
      $44 = (($__i$0$i$i$6) + 1)|0;
      $__i$0$i$i$6 = $44;
     }
     __THREW__ = 0;
     invoke_viiiiiiiiii(451,($__intl|0),($45|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $46 = __THREW__; __THREW__ = 0;
     $47 = $46&1;
     if ($47) {
      $101 = ___cxa_find_matching_catch()|0;
      $102 = tempRet0;
      $$0 = $101;$$01 = $102;$$pre20 = $22;
     } else {
      $48 = HEAP32[$__fd>>2]|0;
      $49 = ($__n$0|0)>($48|0);
      if ($49) {
       $50 = (($__n$0) - ($48))|0;
       $51 = $50 << 1;
       $52 = HEAP8[$__sn>>0]|0;
       $53 = $52 & 1;
       $54 = ($53<<24>>24)==(0);
       $55 = ((($__sn)) + 4|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = $52&255;
       $58 = $57 >>> 1;
       $59 = $54 ? $58 : $56;
       $60 = HEAP8[$__sym>>0]|0;
       $61 = $60 & 1;
       $62 = ($61<<24>>24)==(0);
       $63 = ((($__sym)) + 4|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = $60&255;
       $66 = $65 >>> 1;
       $67 = $62 ? $66 : $64;
       $68 = $51 | 1;
       $69 = (($68) + ($48))|0;
       $70 = (($69) + ($59))|0;
       $71 = (($70) + ($67))|0;
       $91 = $71;
      } else {
       $72 = HEAP8[$__sn>>0]|0;
       $73 = $72 & 1;
       $74 = ($73<<24>>24)==(0);
       $75 = ((($__sn)) + 4|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = $72&255;
       $78 = $77 >>> 1;
       $79 = $74 ? $78 : $76;
       $80 = HEAP8[$__sym>>0]|0;
       $81 = $80 & 1;
       $82 = ($81<<24>>24)==(0);
       $83 = ((($__sym)) + 4|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = $80&255;
       $86 = $85 >>> 1;
       $87 = $82 ? $86 : $84;
       $88 = (($48) + 2)|0;
       $89 = (($88) + ($79))|0;
       $90 = (($89) + ($87))|0;
       $91 = $90;
      }
      $92 = ($91>>>0)>(100);
      if ($92) {
       $93 = $91 << 2;
       $94 = (_malloc($93)|0);
       $95 = $94;
       $96 = ($94|0)==(0|0);
       if ($96) {
        __THREW__ = 0;
        invoke_v(423);
        $97 = __THREW__; __THREW__ = 0;
        $98 = $97&1;
        if ($98) {
         $105 = $95;
        } else {
         $121 = $95;$__mb$0 = 0;
         label = 36;
        }
       } else {
        $121 = $95;$__mb$0 = $94;
        label = 36;
       }
      } else {
       $121 = 0;$__mb$0 = $__mbuf;
       label = 36;
      }
      if ((label|0) == 36) {
       $108 = ((($__iob)) + 4|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = (($__db$0) + ($__n$0<<2)|0);
       $111 = HEAP32[$__dp>>2]|0;
       $112 = HEAP32[$__ts>>2]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(452,($__mb$0|0),($__mi|0),($__me|0),($109|0),($__db$0|0),($110|0),($25|0),($45|0),($__pat|0),($111|0),($112|0),($__grp|0),($__sym|0),($__sn|0),($48|0));
       $113 = __THREW__; __THREW__ = 0;
       $114 = $113&1;
       if ($114) {
        $105 = $121;
       } else {
        $115 = HEAP32[$__s>>2]|0;
        HEAP32[$0>>2] = $115;
        $116 = HEAP32[$__mi>>2]|0;
        $117 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
        $118 = (invoke_iiiiiii(430,($$byval_copy|0),($__mb$0|0),($116|0),($117|0),($__iob|0),($__fl|0))|0);
        $119 = __THREW__; __THREW__ = 0;
        $120 = $119&1;
        if ($120) {
         $105 = $121;
        } else {
         $122 = ($121|0)==(0);
         if ($122) {
          $124 = $22;
         } else {
          $123 = $121;
          _free($123);
          $$pre22 = HEAP32[$__loc>>2]|0;
          $124 = $$pre22;
         }
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
         (__ZNSt3__114__shared_count16__release_sharedEv($124)|0);
         $126 = ($125|0)==(0);
         if (!($126)) {
          $127 = $125;
          _free($127);
         }
         $129 = ($128|0)==(0);
         if (!($129)) {
          $130 = $128;
          _free($130);
         }
         STACKTOP = sp;return ($118|0);
        }
       }
      }
      $103 = ___cxa_find_matching_catch()|0;
      $104 = tempRet0;
      $106 = ($105|0)==(0);
      if ($106) {
       $$0 = $103;$$01 = $104;$$pre20 = $22;
      } else {
       $107 = $105;
       _free($107);
       $$pre20$pre = HEAP32[$__loc>>2]|0;
       $$0 = $103;$$01 = $104;$$pre20 = $$pre20$pre;
      }
     }
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
     $$1 = $$0;$$12 = $$01;$131 = $$pre20;
    }
   }
   if ((label|0) == 32) {
    $99 = ___cxa_find_matching_catch()|0;
    $100 = tempRet0;
    $$1 = $99;$$12 = $100;$131 = $22;
   }
   (__ZNSt3__114__shared_count16__release_sharedEv($131)|0);
   $$2 = $$1;$$23 = $$12;$132 = $125;$135 = $128;
  }
 }
 if ((label|0) == 8) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  $$2 = $14;$$23 = $15;$132 = $139;$135 = $138;
 }
 $133 = ($132|0)==(0);
 if (!($133)) {
  $134 = $132;
  _free($134);
 }
 $136 = ($135|0)==(0);
 if (!($136)) {
  $137 = $135;
  _free($137);
 }
 ___resumeException($$2|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i$13 = 0, $__i$0$i$i$i$18 = 0, $__i$0$i$i$i$23 = 0, $__i$0$i$i$i$28 = 0, $__i$0$i$i$i$33 = 0;
 var $__i$0$i$i$i$6 = 0, $__i$0$i$i$i$9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i$10 = 0, $exitcond$i$i$i$14 = 0, $exitcond$i$i$i$19 = 0, $exitcond$i$i$i$24 = 0, $exitcond$i$i$i$29 = 0, $exitcond$i$i$i$34 = 0, $exitcond$i$i$i$7 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 108|0;
 $1 = sp + 96|0;
 $2 = sp + 92|0;
 $3 = sp + 80|0;
 $4 = sp + 68|0;
 $5 = sp + 56|0;
 $6 = sp + 52|0;
 $7 = sp + 40|0;
 $8 = sp + 36|0;
 $9 = sp + 24|0;
 $10 = sp + 12|0;
 $11 = sp;
 if ($__intl) {
  $12 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,8324)|0);
  $13 = HEAP32[$12>>2]|0;
  if ($__neg) {
   $14 = ((($13)) + 44|0);
   $15 = HEAP32[$14>>2]|0;
   FUNCTION_TABLE_vii[$15 & 1023]($0,$12);
   $16 = HEAP32[$0>>2]|0;
   HEAP8[$__pat>>0]=$16&255;HEAP8[$__pat+1>>0]=($16>>8)&255;HEAP8[$__pat+2>>0]=($16>>16)&255;HEAP8[$__pat+3>>0]=$16>>24;
   $17 = HEAP32[$12>>2]|0;
   $18 = ((($17)) + 32|0);
   $19 = HEAP32[$18>>2]|0;
   FUNCTION_TABLE_vii[$19 & 1023]($1,$12);
   $20 = HEAP8[$__sn>>0]|0;
   $21 = $20 & 1;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    HEAP8[$__sn>>0] = 0;
   } else {
    $23 = ((($__sn)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    HEAP32[$24>>2] = 0;
   }
   $25 = ((($__sn)) + 4|0);
   HEAP32[$25>>2] = 0;
   __THREW__ = 0;
   invoke_vii(448,($__sn|0),0);
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if ($27) {
    $28 = ___cxa_find_matching_catch(0|0)|0;
    $29 = tempRet0;
    ___clang_call_terminate($28);
    // unreachable;
   }
   ;HEAP32[$__sn>>2]=HEAP32[$1>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
   $__i$0$i$i$i = 0;
   while(1) {
    $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
    if ($exitcond$i$i$i) {
     break;
    }
    $30 = (($1) + ($__i$0$i$i$i<<2)|0);
    HEAP32[$30>>2] = 0;
    $31 = (($__i$0$i$i$i) + 1)|0;
    $__i$0$i$i$i = $31;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($1);
  } else {
   $32 = ((($13)) + 40|0);
   $33 = HEAP32[$32>>2]|0;
   FUNCTION_TABLE_vii[$33 & 1023]($2,$12);
   $34 = HEAP32[$2>>2]|0;
   HEAP8[$__pat>>0]=$34&255;HEAP8[$__pat+1>>0]=($34>>8)&255;HEAP8[$__pat+2>>0]=($34>>16)&255;HEAP8[$__pat+3>>0]=$34>>24;
   $35 = HEAP32[$12>>2]|0;
   $36 = ((($35)) + 28|0);
   $37 = HEAP32[$36>>2]|0;
   FUNCTION_TABLE_vii[$37 & 1023]($3,$12);
   $38 = HEAP8[$__sn>>0]|0;
   $39 = $38 & 1;
   $40 = ($39<<24>>24)==(0);
   if ($40) {
    HEAP8[$__sn>>0] = 0;
   } else {
    $41 = ((($__sn)) + 8|0);
    $42 = HEAP32[$41>>2]|0;
    HEAP32[$42>>2] = 0;
   }
   $43 = ((($__sn)) + 4|0);
   HEAP32[$43>>2] = 0;
   __THREW__ = 0;
   invoke_vii(448,($__sn|0),0);
   $44 = __THREW__; __THREW__ = 0;
   $45 = $44&1;
   if ($45) {
    $46 = ___cxa_find_matching_catch(0|0)|0;
    $47 = tempRet0;
    ___clang_call_terminate($46);
    // unreachable;
   }
   ;HEAP32[$__sn>>2]=HEAP32[$3>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
   $__i$0$i$i$i$6 = 0;
   while(1) {
    $exitcond$i$i$i$7 = ($__i$0$i$i$i$6|0)==(3);
    if ($exitcond$i$i$i$7) {
     break;
    }
    $48 = (($3) + ($__i$0$i$i$i$6<<2)|0);
    HEAP32[$48>>2] = 0;
    $49 = (($__i$0$i$i$i$6) + 1)|0;
    $__i$0$i$i$i$6 = $49;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($3);
  }
  $50 = HEAP32[$12>>2]|0;
  $51 = ((($50)) + 12|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (FUNCTION_TABLE_ii[$52 & 1023]($12)|0);
  HEAP32[$__dp>>2] = $53;
  $54 = HEAP32[$12>>2]|0;
  $55 = ((($54)) + 16|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (FUNCTION_TABLE_ii[$56 & 1023]($12)|0);
  HEAP32[$__ts>>2] = $57;
  $58 = HEAP32[$12>>2]|0;
  $59 = ((($58)) + 20|0);
  $60 = HEAP32[$59>>2]|0;
  FUNCTION_TABLE_vii[$60 & 1023]($4,$12);
  $61 = HEAP8[$__grp>>0]|0;
  $62 = $61 & 1;
  $63 = ($62<<24>>24)==(0);
  if ($63) {
   $67 = ((($__grp)) + 1|0);
   HEAP8[$67>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $64 = ((($__grp)) + 8|0);
   $65 = HEAP32[$64>>2]|0;
   HEAP8[$65>>0] = 0;
   $66 = ((($__grp)) + 4|0);
   HEAP32[$66>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(442,($__grp|0),0);
  $68 = __THREW__; __THREW__ = 0;
  $69 = $68&1;
  if ($69) {
   $70 = ___cxa_find_matching_catch(0|0)|0;
   $71 = tempRet0;
   ___clang_call_terminate($70);
   // unreachable;
  }
  ;HEAP32[$__grp>>2]=HEAP32[$4>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
  $__i$0$i$i$i$9 = 0;
  while(1) {
   $exitcond$i$i$i$10 = ($__i$0$i$i$i$9|0)==(3);
   if ($exitcond$i$i$i$10) {
    break;
   }
   $72 = (($4) + ($__i$0$i$i$i$9<<2)|0);
   HEAP32[$72>>2] = 0;
   $73 = (($__i$0$i$i$i$9) + 1)|0;
   $__i$0$i$i$i$9 = $73;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
  $74 = HEAP32[$12>>2]|0;
  $75 = ((($74)) + 24|0);
  $76 = HEAP32[$75>>2]|0;
  FUNCTION_TABLE_vii[$76 & 1023]($5,$12);
  $77 = HEAP8[$__sym>>0]|0;
  $78 = $77 & 1;
  $79 = ($78<<24>>24)==(0);
  if ($79) {
   HEAP8[$__sym>>0] = 0;
  } else {
   $80 = ((($__sym)) + 8|0);
   $81 = HEAP32[$80>>2]|0;
   HEAP32[$81>>2] = 0;
  }
  $82 = ((($__sym)) + 4|0);
  HEAP32[$82>>2] = 0;
  __THREW__ = 0;
  invoke_vii(448,($__sym|0),0);
  $83 = __THREW__; __THREW__ = 0;
  $84 = $83&1;
  if ($84) {
   $85 = ___cxa_find_matching_catch(0|0)|0;
   $86 = tempRet0;
   ___clang_call_terminate($85);
   // unreachable;
  }
  ;HEAP32[$__sym>>2]=HEAP32[$5>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
  $__i$0$i$i$i$13 = 0;
  while(1) {
   $exitcond$i$i$i$14 = ($__i$0$i$i$i$13|0)==(3);
   if ($exitcond$i$i$i$14) {
    break;
   }
   $87 = (($5) + ($__i$0$i$i$i$13<<2)|0);
   HEAP32[$87>>2] = 0;
   $88 = (($__i$0$i$i$i$13) + 1)|0;
   $__i$0$i$i$i$13 = $88;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($5);
  $89 = HEAP32[$12>>2]|0;
  $90 = ((($89)) + 36|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (FUNCTION_TABLE_ii[$91 & 1023]($12)|0);
  $storemerge = $92;
 } else {
  $93 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,8260)|0);
  $94 = HEAP32[$93>>2]|0;
  if ($__neg) {
   $95 = ((($94)) + 44|0);
   $96 = HEAP32[$95>>2]|0;
   FUNCTION_TABLE_vii[$96 & 1023]($6,$93);
   $97 = HEAP32[$6>>2]|0;
   HEAP8[$__pat>>0]=$97&255;HEAP8[$__pat+1>>0]=($97>>8)&255;HEAP8[$__pat+2>>0]=($97>>16)&255;HEAP8[$__pat+3>>0]=$97>>24;
   $98 = HEAP32[$93>>2]|0;
   $99 = ((($98)) + 32|0);
   $100 = HEAP32[$99>>2]|0;
   FUNCTION_TABLE_vii[$100 & 1023]($7,$93);
   $101 = HEAP8[$__sn>>0]|0;
   $102 = $101 & 1;
   $103 = ($102<<24>>24)==(0);
   if ($103) {
    HEAP8[$__sn>>0] = 0;
   } else {
    $104 = ((($__sn)) + 8|0);
    $105 = HEAP32[$104>>2]|0;
    HEAP32[$105>>2] = 0;
   }
   $106 = ((($__sn)) + 4|0);
   HEAP32[$106>>2] = 0;
   __THREW__ = 0;
   invoke_vii(448,($__sn|0),0);
   $107 = __THREW__; __THREW__ = 0;
   $108 = $107&1;
   if ($108) {
    $109 = ___cxa_find_matching_catch(0|0)|0;
    $110 = tempRet0;
    ___clang_call_terminate($109);
    // unreachable;
   }
   ;HEAP32[$__sn>>2]=HEAP32[$7>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
   $__i$0$i$i$i$18 = 0;
   while(1) {
    $exitcond$i$i$i$19 = ($__i$0$i$i$i$18|0)==(3);
    if ($exitcond$i$i$i$19) {
     break;
    }
    $111 = (($7) + ($__i$0$i$i$i$18<<2)|0);
    HEAP32[$111>>2] = 0;
    $112 = (($__i$0$i$i$i$18) + 1)|0;
    $__i$0$i$i$i$18 = $112;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($7);
  } else {
   $113 = ((($94)) + 40|0);
   $114 = HEAP32[$113>>2]|0;
   FUNCTION_TABLE_vii[$114 & 1023]($8,$93);
   $115 = HEAP32[$8>>2]|0;
   HEAP8[$__pat>>0]=$115&255;HEAP8[$__pat+1>>0]=($115>>8)&255;HEAP8[$__pat+2>>0]=($115>>16)&255;HEAP8[$__pat+3>>0]=$115>>24;
   $116 = HEAP32[$93>>2]|0;
   $117 = ((($116)) + 28|0);
   $118 = HEAP32[$117>>2]|0;
   FUNCTION_TABLE_vii[$118 & 1023]($9,$93);
   $119 = HEAP8[$__sn>>0]|0;
   $120 = $119 & 1;
   $121 = ($120<<24>>24)==(0);
   if ($121) {
    HEAP8[$__sn>>0] = 0;
   } else {
    $122 = ((($__sn)) + 8|0);
    $123 = HEAP32[$122>>2]|0;
    HEAP32[$123>>2] = 0;
   }
   $124 = ((($__sn)) + 4|0);
   HEAP32[$124>>2] = 0;
   __THREW__ = 0;
   invoke_vii(448,($__sn|0),0);
   $125 = __THREW__; __THREW__ = 0;
   $126 = $125&1;
   if ($126) {
    $127 = ___cxa_find_matching_catch(0|0)|0;
    $128 = tempRet0;
    ___clang_call_terminate($127);
    // unreachable;
   }
   ;HEAP32[$__sn>>2]=HEAP32[$9>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
   $__i$0$i$i$i$23 = 0;
   while(1) {
    $exitcond$i$i$i$24 = ($__i$0$i$i$i$23|0)==(3);
    if ($exitcond$i$i$i$24) {
     break;
    }
    $129 = (($9) + ($__i$0$i$i$i$23<<2)|0);
    HEAP32[$129>>2] = 0;
    $130 = (($__i$0$i$i$i$23) + 1)|0;
    $__i$0$i$i$i$23 = $130;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($9);
  }
  $131 = HEAP32[$93>>2]|0;
  $132 = ((($131)) + 12|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = (FUNCTION_TABLE_ii[$133 & 1023]($93)|0);
  HEAP32[$__dp>>2] = $134;
  $135 = HEAP32[$93>>2]|0;
  $136 = ((($135)) + 16|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = (FUNCTION_TABLE_ii[$137 & 1023]($93)|0);
  HEAP32[$__ts>>2] = $138;
  $139 = HEAP32[$93>>2]|0;
  $140 = ((($139)) + 20|0);
  $141 = HEAP32[$140>>2]|0;
  FUNCTION_TABLE_vii[$141 & 1023]($10,$93);
  $142 = HEAP8[$__grp>>0]|0;
  $143 = $142 & 1;
  $144 = ($143<<24>>24)==(0);
  if ($144) {
   $148 = ((($__grp)) + 1|0);
   HEAP8[$148>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $145 = ((($__grp)) + 8|0);
   $146 = HEAP32[$145>>2]|0;
   HEAP8[$146>>0] = 0;
   $147 = ((($__grp)) + 4|0);
   HEAP32[$147>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(442,($__grp|0),0);
  $149 = __THREW__; __THREW__ = 0;
  $150 = $149&1;
  if ($150) {
   $151 = ___cxa_find_matching_catch(0|0)|0;
   $152 = tempRet0;
   ___clang_call_terminate($151);
   // unreachable;
  }
  ;HEAP32[$__grp>>2]=HEAP32[$10>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
  $__i$0$i$i$i$28 = 0;
  while(1) {
   $exitcond$i$i$i$29 = ($__i$0$i$i$i$28|0)==(3);
   if ($exitcond$i$i$i$29) {
    break;
   }
   $153 = (($10) + ($__i$0$i$i$i$28<<2)|0);
   HEAP32[$153>>2] = 0;
   $154 = (($__i$0$i$i$i$28) + 1)|0;
   $__i$0$i$i$i$28 = $154;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  $155 = HEAP32[$93>>2]|0;
  $156 = ((($155)) + 24|0);
  $157 = HEAP32[$156>>2]|0;
  FUNCTION_TABLE_vii[$157 & 1023]($11,$93);
  $158 = HEAP8[$__sym>>0]|0;
  $159 = $158 & 1;
  $160 = ($159<<24>>24)==(0);
  if ($160) {
   HEAP8[$__sym>>0] = 0;
  } else {
   $161 = ((($__sym)) + 8|0);
   $162 = HEAP32[$161>>2]|0;
   HEAP32[$162>>2] = 0;
  }
  $163 = ((($__sym)) + 4|0);
  HEAP32[$163>>2] = 0;
  __THREW__ = 0;
  invoke_vii(448,($__sym|0),0);
  $164 = __THREW__; __THREW__ = 0;
  $165 = $164&1;
  if ($165) {
   $166 = ___cxa_find_matching_catch(0|0)|0;
   $167 = tempRet0;
   ___clang_call_terminate($166);
   // unreachable;
  }
  ;HEAP32[$__sym>>2]=HEAP32[$11>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
  $__i$0$i$i$i$33 = 0;
  while(1) {
   $exitcond$i$i$i$34 = ($__i$0$i$i$i$33|0)==(3);
   if ($exitcond$i$i$i$34) {
    break;
   }
   $168 = (($11) + ($__i$0$i$i$i$33<<2)|0);
   HEAP32[$168>>2] = 0;
   $169 = (($__i$0$i$i$i$33) + 1)|0;
   $__i$0$i$i$i$33 = $169;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  $170 = HEAP32[$93>>2]|0;
  $171 = ((($170)) + 36|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = (FUNCTION_TABLE_ii[$172 & 1023]($93)|0);
  $storemerge = $173;
 }
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$ = 0, $$$0 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$2 = 0, $$0$i$i$6 = 0, $$01$i$i = 0, $$2 = 0, $$lcssa34 = 0, $$lcssa35 = 0, $$pre27 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__d$0 = 0, $__d$0$lcssa = 0, $__d$1 = 0, $__d$2 = 0, $__d$3 = 0, $__f$0 = 0, $__f$1 = 0, $__gl$0 = 0, $__gl$1 = 0, $__ig$0 = 0, $__ig$1 = 0, $__me$promoted = 0, $__ng$0 = 0, $__ng$1 = 0, $__p$0 = 0, $exitcond = 0, $or$cond = 0, $scevgep$i = 0;
 var $scevgep$i$7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = ((($__sn)) + 4|0);
 $1 = ((($__sn)) + 8|0);
 $2 = ((($__sym)) + 4|0);
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 $5 = ((($__sym)) + 8|0);
 $6 = ($__fd|0)>(0);
 $7 = ((($__grp)) + 4|0);
 $8 = ((($__grp)) + 8|0);
 $9 = ((($__grp)) + 1|0);
 $$0 = $__db;$__p$0 = 0;
 while(1) {
  $exitcond = ($__p$0|0)==(4);
  if ($exitcond) {
   break;
  }
  $18 = (($__pat) + ($__p$0)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  L4: do {
   switch ($20|0) {
   case 0:  {
    $21 = HEAP32[$__me>>2]|0;
    HEAP32[$__mi>>2] = $21;
    $$2 = $$0;
    break;
   }
   case 1:  {
    $22 = HEAP32[$__me>>2]|0;
    HEAP32[$__mi>>2] = $22;
    $23 = HEAP32[$__ct>>2]|0;
    $24 = ((($23)) + 44|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (FUNCTION_TABLE_iii[$25 & 511]($__ct,32)|0);
    $27 = HEAP32[$__me>>2]|0;
    $28 = ((($27)) + 4|0);
    HEAP32[$__me>>2] = $28;
    HEAP32[$27>>2] = $26;
    $$2 = $$0;
    break;
   }
   case 3:  {
    $29 = HEAP8[$__sn>>0]|0;
    $30 = $29 & 1;
    $31 = ($30<<24>>24)==(0);
    $32 = HEAP32[$0>>2]|0;
    $33 = $29&255;
    $34 = $33 >>> 1;
    $35 = $31 ? $34 : $32;
    $36 = ($35|0)==(0);
    if ($36) {
     $$2 = $$0;
    } else {
     $37 = HEAP32[$1>>2]|0;
     $38 = $31 ? $0 : $37;
     $39 = HEAP32[$38>>2]|0;
     $40 = HEAP32[$__me>>2]|0;
     $41 = ((($40)) + 4|0);
     HEAP32[$__me>>2] = $41;
     HEAP32[$40>>2] = $39;
     $$2 = $$0;
    }
    break;
   }
   case 2:  {
    $42 = HEAP8[$__sym>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    $45 = HEAP32[$2>>2]|0;
    $46 = $42&255;
    $47 = $46 >>> 1;
    $48 = $44 ? $47 : $45;
    $49 = ($48|0)==(0);
    $or$cond = $4 | $49;
    if ($or$cond) {
     $$2 = $$0;
    } else {
     $50 = HEAP32[$5>>2]|0;
     $51 = $44 ? $2 : $50;
     $52 = (($51) + ($48<<2)|0);
     $53 = HEAP32[$__me>>2]|0;
     $$0$i$i$6 = $53;$54 = $51;
     while(1) {
      $55 = ($54|0)==($52|0);
      if ($55) {
       break;
      }
      $56 = HEAP32[$54>>2]|0;
      HEAP32[$$0$i$i$6>>2] = $56;
      $57 = ((($54)) + 4|0);
      $58 = ((($$0$i$i$6)) + 4|0);
      $$0$i$i$6 = $58;$54 = $57;
     }
     $scevgep$i$7 = (($53) + ($48<<2)|0);
     HEAP32[$__me>>2] = $scevgep$i$7;
     $$2 = $$0;
    }
    break;
   }
   case 4:  {
    $59 = HEAP32[$__me>>2]|0;
    $60 = ((($$0)) + 4|0);
    $$$0 = $__neg ? $60 : $$0;
    $__d$0 = $$$0;
    while(1) {
     $61 = ($__d$0>>>0)<($__de>>>0);
     if (!($61)) {
      $__d$0$lcssa = $__d$0;
      break;
     }
     $62 = HEAP32[$__d$0>>2]|0;
     $63 = HEAP32[$__ct>>2]|0;
     $64 = ((($63)) + 12|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = (FUNCTION_TABLE_iiii[$65 & 1023]($__ct,2048,$62)|0);
     if (!($66)) {
      $__d$0$lcssa = $__d$0;
      break;
     }
     $67 = ((($__d$0)) + 4|0);
     $__d$0 = $67;
    }
    if ($6) {
     $__d$1 = $__d$0$lcssa;$__f$0 = $__fd;
     while(1) {
      $68 = ($__d$1>>>0)>($$$0>>>0);
      $69 = ($__f$0|0)>(0);
      $70 = $68 & $69;
      if (!($70)) {
       break;
      }
      $71 = ((($__d$1)) + -4|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = HEAP32[$__me>>2]|0;
      $74 = ((($73)) + 4|0);
      HEAP32[$__me>>2] = $74;
      HEAP32[$73>>2] = $72;
      $75 = (($__f$0) + -1)|0;
      $__d$1 = $71;$__f$0 = $75;
     }
     if ($69) {
      $76 = HEAP32[$__ct>>2]|0;
      $77 = ((($76)) + 44|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = (FUNCTION_TABLE_iii[$78 & 511]($__ct,48)|0);
      $83 = $79;
     } else {
      $83 = 0;
     }
     $__me$promoted = HEAP32[$__me>>2]|0;
     $82 = $__me$promoted;$__f$1 = $__f$0;
     while(1) {
      $80 = ($__f$1|0)>(0);
      $81 = ((($82)) + 4|0);
      if (!($80)) {
       $$lcssa34 = $82;$$lcssa35 = $81;
       break;
      }
      HEAP32[$82>>2] = $83;
      $84 = (($__f$1) + -1)|0;
      $82 = $81;$__f$1 = $84;
     }
     HEAP32[$__me>>2] = $$lcssa35;
     HEAP32[$$lcssa34>>2] = $__dp;
     $__d$2 = $__d$1;
    } else {
     $__d$2 = $__d$0$lcssa;
    }
    $85 = ($__d$2|0)==($$$0|0);
    if ($85) {
     $86 = HEAP32[$__ct>>2]|0;
     $87 = ((($86)) + 44|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = (FUNCTION_TABLE_iii[$88 & 511]($__ct,48)|0);
     $90 = HEAP32[$__me>>2]|0;
     $91 = ((($90)) + 4|0);
     HEAP32[$__me>>2] = $91;
     HEAP32[$90>>2] = $89;
     $128 = $91;
    } else {
     $92 = HEAP8[$__grp>>0]|0;
     $93 = $92 & 1;
     $94 = ($93<<24>>24)==(0);
     $95 = HEAP32[$7>>2]|0;
     $96 = $92&255;
     $97 = $96 >>> 1;
     $98 = $94 ? $97 : $95;
     $99 = ($98|0)==(0);
     if ($99) {
      $__d$3 = $__d$2;$__gl$0 = -1;$__ig$0 = 0;$__ng$0 = 0;
     } else {
      $100 = HEAP32[$8>>2]|0;
      $101 = $94 ? $9 : $100;
      $102 = HEAP8[$101>>0]|0;
      $103 = $102 << 24 >> 24;
      $__d$3 = $__d$2;$__gl$0 = $103;$__ig$0 = 0;$__ng$0 = 0;
     }
     while(1) {
      $104 = ($__d$3|0)==($$$0|0);
      if ($104) {
       break;
      }
      $105 = ($__ng$0|0)==($__gl$0|0);
      $106 = HEAP32[$__me>>2]|0;
      if ($105) {
       $107 = ((($106)) + 4|0);
       HEAP32[$__me>>2] = $107;
       HEAP32[$106>>2] = $__ts;
       $108 = (($__ig$0) + 1)|0;
       $109 = HEAP8[$__grp>>0]|0;
       $110 = $109 & 1;
       $111 = ($110<<24>>24)==(0);
       $112 = $109&255;
       $113 = $112 >>> 1;
       $114 = $111 ? $113 : $95;
       $115 = ($108>>>0)<($114>>>0);
       if ($115) {
        $116 = HEAP32[$8>>2]|0;
        $117 = $111 ? $9 : $116;
        $118 = (($117) + ($108)|0);
        $119 = HEAP8[$118>>0]|0;
        $120 = ($119<<24>>24)==(127);
        $121 = $119 << 24 >> 24;
        $$ = $120 ? -1 : $121;
        $125 = $107;$__gl$1 = $$;$__ig$1 = $108;$__ng$1 = 0;
       } else {
        $125 = $107;$__gl$1 = $__ng$0;$__ig$1 = $108;$__ng$1 = 0;
       }
      } else {
       $125 = $106;$__gl$1 = $__gl$0;$__ig$1 = $__ig$0;$__ng$1 = $__ng$0;
      }
      $122 = ((($__d$3)) + -4|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = ((($125)) + 4|0);
      HEAP32[$__me>>2] = $124;
      HEAP32[$125>>2] = $123;
      $126 = (($__ng$1) + 1)|0;
      $__d$3 = $122;$__gl$0 = $__gl$1;$__ig$0 = $__ig$1;$__ng$0 = $126;
     }
     $$pre27 = HEAP32[$__me>>2]|0;
     $128 = $$pre27;
    }
    $127 = ($59|0)==($128|0);
    if ($127) {
     $$2 = $$$0;
    } else {
     $$0$i$i$2 = $128;$$01$i$i = $59;
     while(1) {
      $129 = ((($$0$i$i$2)) + -4|0);
      $130 = ($$01$i$i>>>0)<($129>>>0);
      if (!($130)) {
       $$2 = $$$0;
       break L4;
      }
      $131 = HEAP32[$$01$i$i>>2]|0;
      $132 = HEAP32[$129>>2]|0;
      HEAP32[$$01$i$i>>2] = $132;
      HEAP32[$129>>2] = $131;
      $133 = ((($$01$i$i)) + 4|0);
      $$0$i$i$2 = $129;$$01$i$i = $133;
     }
    }
    break;
   }
   default: {
    $$2 = $$0;
   }
   }
  } while(0);
  $134 = (($__p$0) + 1)|0;
  $$0 = $$2;$__p$0 = $134;
 }
 $10 = HEAP8[$__sn>>0]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 $13 = HEAP32[$0>>2]|0;
 $14 = $10&255;
 $15 = $14 >>> 1;
 $16 = $12 ? $15 : $13;
 $17 = ($16>>>0)>(1);
 if ($17) {
  $135 = HEAP32[$1>>2]|0;
  $136 = $12 ? $0 : $135;
  $137 = ((($136)) + 4|0);
  $138 = (($136) + ($16<<2)|0);
  $139 = HEAP32[$__me>>2]|0;
  $140 = $137;
  $141 = $138;
  $142 = (($141) - ($140))|0;
  $$0$i$i = $139;$143 = $137;
  while(1) {
   $144 = ($143|0)==($138|0);
   if ($144) {
    break;
   }
   $145 = HEAP32[$143>>2]|0;
   HEAP32[$$0$i$i>>2] = $145;
   $146 = ((($143)) + 4|0);
   $147 = ((($$0$i$i)) + 4|0);
   $$0$i$i = $147;$143 = $146;
  }
  $148 = $142 >>> 2;
  $scevgep$i = (($139) + ($148<<2)|0);
  HEAP32[$__me>>2] = $scevgep$i;
 }
 $149 = $__flags & 176;
 switch ($149|0) {
 case 32:  {
  $150 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $150;
  break;
 }
 case 16:  {
  break;
 }
 default: {
  HEAP32[$__mi>>2] = $__mb;
 }
 }
 return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pre = 0, $$pre17 = 0, $$pre18 = 0, $$pre18$pre = 0, $$pre20 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0;
 var $__fd = 0, $__grp = 0, $__i$0$i$i = 0, $__i$0$i$i$3 = 0, $__i$0$i$i$5 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $exitcond$i$i = 0, $exitcond$i$i$4 = 0, $exitcond$i$i$6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 468|0;
 $__loc = sp + 464|0;
 $__pat = sp + 472|0;
 $__dp = sp + 460|0;
 $__ts = sp + 456|0;
 $__grp = sp + 444|0;
 $__sym = sp + 432|0;
 $__sn = sp + 420|0;
 $__fd = sp + 416|0;
 $__mbuf = sp + 16|0;
 $__mi = sp + 8|0;
 $__me = sp + 4|0;
 $0 = sp;
 $1 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $1;
 __THREW__ = 0;
 $2 = (invoke_iii(354,($__loc|0),(8580|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   label = 22;
  } else {
   $5 = HEAP8[$__digits>>0]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   $8 = ((($__digits)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $5&255;
   $11 = $10 >>> 1;
   $12 = $7 ? $11 : $9;
   $13 = ($12|0)==(0);
   if ($13) {
    $31 = 0;
   } else {
    $14 = ((($__digits)) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $7 ? $8 : $15;
    $17 = HEAP32[$16>>2]|0;
    $18 = HEAP32[$2>>2]|0;
    $19 = ((($18)) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    __THREW__ = 0;
    $21 = (invoke_iii($20|0,($2|0),45)|0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     label = 22;
     break;
    }
    $24 = ($17|0)==($21|0);
    $31 = $24;
   }
   $__i$0$i$i = 0;
   while(1) {
    $exitcond$i$i = ($__i$0$i$i|0)==(3);
    if ($exitcond$i$i) {
     break;
    }
    $25 = (($__grp) + ($__i$0$i$i<<2)|0);
    HEAP32[$25>>2] = 0;
    $26 = (($__i$0$i$i) + 1)|0;
    $__i$0$i$i = $26;
   }
   $__i$0$i$i$3 = 0;
   while(1) {
    $exitcond$i$i$4 = ($__i$0$i$i$3|0)==(3);
    if ($exitcond$i$i$4) {
     break;
    }
    $27 = (($__sym) + ($__i$0$i$i$3<<2)|0);
    HEAP32[$27>>2] = 0;
    $28 = (($__i$0$i$i$3) + 1)|0;
    $__i$0$i$i$3 = $28;
   }
   $__i$0$i$i$5 = 0;
   while(1) {
    $exitcond$i$i$6 = ($__i$0$i$i$5|0)==(3);
    if ($exitcond$i$i$6) {
     break;
    }
    $29 = (($__sn) + ($__i$0$i$i$5<<2)|0);
    HEAP32[$29>>2] = 0;
    $30 = (($__i$0$i$i$5) + 1)|0;
    $__i$0$i$i$5 = $30;
   }
   __THREW__ = 0;
   invoke_viiiiiiiiii(451,($__intl|0),($31|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
   $32 = __THREW__; __THREW__ = 0;
   $33 = $32&1;
   if ($33) {
    $94 = ___cxa_find_matching_catch()|0;
    $95 = tempRet0;
    $$0 = $94;$$01 = $95;$$pre18 = $1;
   } else {
    $34 = HEAP8[$__digits>>0]|0;
    $35 = $34 & 1;
    $36 = ($35<<24>>24)==(0);
    $37 = HEAP32[$8>>2]|0;
    $38 = $34&255;
    $39 = $38 >>> 1;
    $40 = $36 ? $39 : $37;
    $41 = HEAP32[$__fd>>2]|0;
    $42 = ($40|0)>($41|0);
    if ($42) {
     $43 = (($40) - ($41))|0;
     $44 = $43 << 1;
     $45 = HEAP8[$__sn>>0]|0;
     $46 = $45 & 1;
     $47 = ($46<<24>>24)==(0);
     $48 = ((($__sn)) + 4|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = $45&255;
     $51 = $50 >>> 1;
     $52 = $47 ? $51 : $49;
     $53 = HEAP8[$__sym>>0]|0;
     $54 = $53 & 1;
     $55 = ($54<<24>>24)==(0);
     $56 = ((($__sym)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = $53&255;
     $59 = $58 >>> 1;
     $60 = $55 ? $59 : $57;
     $61 = $44 | 1;
     $62 = (($61) + ($41))|0;
     $63 = (($62) + ($52))|0;
     $64 = (($63) + ($60))|0;
     $84 = $64;
    } else {
     $65 = HEAP8[$__sn>>0]|0;
     $66 = $65 & 1;
     $67 = ($66<<24>>24)==(0);
     $68 = ((($__sn)) + 4|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = $65&255;
     $71 = $70 >>> 1;
     $72 = $67 ? $71 : $69;
     $73 = HEAP8[$__sym>>0]|0;
     $74 = $73 & 1;
     $75 = ($74<<24>>24)==(0);
     $76 = ((($__sym)) + 4|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = $73&255;
     $79 = $78 >>> 1;
     $80 = $75 ? $79 : $77;
     $81 = (($41) + 2)|0;
     $82 = (($81) + ($72))|0;
     $83 = (($82) + ($80))|0;
     $84 = $83;
    }
    $85 = ($84>>>0)>(100);
    if ($85) {
     $86 = $84 << 2;
     $87 = (_malloc($86)|0);
     $88 = $87;
     $89 = ($87|0)==(0|0);
     if ($89) {
      __THREW__ = 0;
      invoke_v(423);
      $90 = __THREW__; __THREW__ = 0;
      $91 = $90&1;
      if ($91) {
       $98 = $88;
      } else {
       $$pre = HEAP8[$__digits>>0]|0;
       $$pre17 = HEAP32[$8>>2]|0;
       $104 = $$pre;$111 = $$pre17;$124 = $88;$__mb$0 = 0;
       label = 26;
      }
     } else {
      $104 = $34;$111 = $37;$124 = $88;$__mb$0 = $87;
      label = 26;
     }
    } else {
     $104 = $34;$111 = $37;$124 = 0;$__mb$0 = $__mbuf;
     label = 26;
    }
    if ((label|0) == 26) {
     $101 = ((($__iob)) + 4|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = $104 & 1;
     $105 = ($103<<24>>24)==(0);
     $106 = ((($__digits)) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = $105 ? $8 : $107;
     $109 = $104&255;
     $110 = $109 >>> 1;
     $112 = $105 ? $110 : $111;
     $113 = (($108) + ($112<<2)|0);
     $114 = HEAP32[$__dp>>2]|0;
     $115 = HEAP32[$__ts>>2]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(452,($__mb$0|0),($__mi|0),($__me|0),($102|0),($108|0),($113|0),($2|0),($31|0),($__pat|0),($114|0),($115|0),($__grp|0),($__sym|0),($__sn|0),($41|0));
     $116 = __THREW__; __THREW__ = 0;
     $117 = $116&1;
     if ($117) {
      $98 = $124;
     } else {
      $118 = HEAP32[$__s>>2]|0;
      HEAP32[$0>>2] = $118;
      $119 = HEAP32[$__mi>>2]|0;
      $120 = HEAP32[$__me>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
      $121 = (invoke_iiiiiii(430,($$byval_copy|0),($__mb$0|0),($119|0),($120|0),($__iob|0),($__fl|0))|0);
      $122 = __THREW__; __THREW__ = 0;
      $123 = $122&1;
      if ($123) {
       $98 = $124;
      } else {
       $125 = ($124|0)==(0);
       if ($125) {
        $127 = $1;
       } else {
        $126 = $124;
        _free($126);
        $$pre20 = HEAP32[$__loc>>2]|0;
        $127 = $$pre20;
       }
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
       (__ZNSt3__114__shared_count16__release_sharedEv($127)|0);
       STACKTOP = sp;return ($121|0);
      }
     }
    }
    $96 = ___cxa_find_matching_catch()|0;
    $97 = tempRet0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0 = $96;$$01 = $97;$$pre18 = $1;
    } else {
     $100 = $98;
     _free($100);
     $$pre18$pre = HEAP32[$__loc>>2]|0;
     $$0 = $96;$$01 = $97;$$pre18 = $$pre18$pre;
    }
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
   $$1 = $$0;$$12 = $$01;$128 = $$pre18;
  }
 } while(0);
 if ((label|0) == 22) {
  $92 = ___cxa_find_matching_catch()|0;
  $93 = tempRet0;
  $$1 = $92;$$12 = $93;$128 = $1;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($128)|0);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__18messagesIcED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18messagesIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 $4 = ((($__nm)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($__nm)) + 1|0);
 $7 = $3 ? $6 : $5;
 $8 = (_catopen($7,1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 return ($$|0);
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$0$i = 0, $$0$i$8 = 0, $$02 = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$i$i = 0, $__i$0$i$i$4 = 0, $__ndflt = 0, $exitcond$i$i = 0, $exitcond$i$i$5 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__ndflt = sp;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($__ndflt) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 $2 = HEAP8[$__dflt>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 $5 = ((($__dflt)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($__dflt)) + 1|0);
 $8 = $4 ? $7 : $6;
 $9 = ((($__dflt)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2&255;
 $12 = $11 >>> 1;
 $13 = $4 ? $12 : $10;
 $14 = (($8) + ($13)|0);
 $$0$i$8 = $8;
 while(1) {
  $15 = ($$0$i$8>>>0)<($14>>>0);
  if (!($15)) {
   label = 8;
   break;
  }
  $16 = HEAP8[$$0$i$8>>0]|0;
  __THREW__ = 0;
  invoke_vii(375,($__ndflt|0),($16|0));
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if ($18) {
   label = 9;
   break;
  }
  $19 = ((($$0$i$8)) + 1|0);
  $$0$i$8 = $19;
 }
 do {
  if ((label|0) == 8) {
   $20 = ($__c|0)==(-1);
   $21 = $__c << 1;
   $22 = $21;
   $23 = $20 ? (-1) : $22;
   $24 = HEAP8[$__ndflt>>0]|0;
   $25 = $24 & 1;
   $26 = ($25<<24>>24)==(0);
   $27 = ((($__ndflt)) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ((($__ndflt)) + 1|0);
   $30 = $26 ? $29 : $28;
   __THREW__ = 0;
   $31 = (invoke_iiiii(453,($23|0),($__set|0),($__msgid|0),($30|0))|0);
   $32 = __THREW__; __THREW__ = 0;
   $33 = $32&1;
   if ($33) {
    $36 = ___cxa_find_matching_catch()|0;
    $37 = tempRet0;
    $lpad$phi$index = $36;$lpad$phi$index2 = $37;
    label = 11;
    break;
   }
   $__i$0$i$i$4 = 0;
   while(1) {
    $exitcond$i$i$5 = ($__i$0$i$i$4|0)==(3);
    if ($exitcond$i$i$5) {
     break;
    }
    $38 = (($agg$result) + ($__i$0$i$i$4<<2)|0);
    HEAP32[$38>>2] = 0;
    $39 = (($__i$0$i$i$4) + 1)|0;
    $__i$0$i$i$4 = $39;
   }
   $40 = (_strlen($31)|0);
   $41 = (($31) + ($40)|0);
   $$0$i = $31;
   while(1) {
    $42 = ($$0$i>>>0)<($41>>>0);
    if (!($42)) {
     label = 20;
     break;
    }
    $43 = HEAP8[$$0$i>>0]|0;
    __THREW__ = 0;
    invoke_vii(375,($agg$result|0),($43|0));
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     label = 19;
     break;
    }
    $46 = ((($$0$i)) + 1|0);
    $$0$i = $46;
   }
   if ((label|0) == 19) {
    $47 = ___cxa_find_matching_catch()|0;
    $48 = tempRet0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
    $$02 = $47;$$03 = $48;
    break;
   }
   else if ((label|0) == 20) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
    STACKTOP = sp;return;
   }
  }
  else if ((label|0) == 9) {
   $34 = ___cxa_find_matching_catch()|0;
   $35 = tempRet0;
   $lpad$phi$index = $34;$lpad$phi$index2 = $35;
   label = 11;
  }
 } while(0);
 if ((label|0) == 11) {
  $$02 = $lpad$phi$index;$$03 = $lpad$phi$index2;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
 ___resumeException($$02|0);
 // unreachable;
}
function __ZNKSt3__18messagesIcE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18messagesIwED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18messagesIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 $4 = ((($__nm)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($__nm)) + 1|0);
 $7 = $3 ? $6 : $5;
 $8 = (_catopen($7,1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 return ($$|0);
}
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$0$i = 0, $$0$i$14 = 0, $$1 = 0, $$14 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $__bn$i = 0, $__bn$i$12 = 0, $__buf$i = 0, $__buf$i$11 = 0, $__i$0$i$i = 0, $__i$0$i$i$8 = 0, $__mb$i = 0, $__mb$i$10 = 0, $__ndflt = 0, $__nn$i = 0, $__p$0$i = 0, $__p$0$i$16 = 0, $__r$0$i = 0, $__r$0$i$13 = 0, $__wn$i = 0, $exitcond$i$i = 0, $exitcond$i$i$9 = 0, $lpad$phi$index = 0;
 var $lpad$phi$index10 = 0, $lpad$phi30$index = 0, $lpad$phi30$index3 = 0, $or$cond$i = 0, $or$cond$i$15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__mb$i$10 = sp + 184|0;
 $__buf$i$11 = sp + 192|0;
 $__bn$i$12 = sp + 180|0;
 $__wn$i = sp + 176|0;
 $__mb$i = sp + 168|0;
 $__buf$i = sp + 40|0;
 $__bn$i = sp + 32|0;
 $__nn$i = sp + 28|0;
 $__ndflt = sp + 16|0;
 $0 = sp + 8|0;
 $1 = sp;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($__ndflt) + ($__i$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $3;
 }
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = 0;
 HEAP32[$0>>2] = (9064);
 $5 = HEAP8[$__dflt>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 $8 = ((($__dflt)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($__dflt)) + 4|0);
 $11 = $7 ? $10 : $9;
 $12 = HEAP32[$10>>2]|0;
 $13 = $5&255;
 $14 = $13 >>> 1;
 $15 = $7 ? $14 : $12;
 $16 = (($11) + ($15<<2)|0);
 $17 = ((($__buf$i$11)) + 32|0);
 $$0$i$14 = $11;$__r$0$i$13 = 0;
 L5: while(1) {
  $18 = ($$0$i$14>>>0)<($16>>>0);
  $19 = ($__r$0$i$13|0)!=(2);
  $20 = $19 & $18;
  if (!($20)) {
   label = 13;
   break;
  }
  HEAP32[$__wn$i>>2] = $$0$i$14;
  $21 = HEAP32[$0>>2]|0;
  $22 = ((($21)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  __THREW__ = 0;
  $24 = (invoke_iiiiiiiii($23|0,($0|0),($__mb$i$10|0),($$0$i$14|0),($16|0),($__wn$i|0),($__buf$i$11|0),($17|0),($__bn$i$12|0))|0);
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if ($26) {
   label = 16;
   break;
  }
  $27 = ($24|0)==(2);
  $28 = HEAP32[$__wn$i>>2]|0;
  $29 = ($28|0)==($$0$i$14|0);
  $or$cond$i$15 = $27 | $29;
  if ($or$cond$i$15) {
   label = 8;
   break;
  } else {
   $__p$0$i$16 = $__buf$i$11;
  }
  while(1) {
   $33 = HEAP32[$__bn$i$12>>2]|0;
   $34 = ($__p$0$i$16>>>0)<($33>>>0);
   if (!($34)) {
    break;
   }
   $36 = HEAP8[$__p$0$i$16>>0]|0;
   __THREW__ = 0;
   invoke_vii(375,($__ndflt|0),($36|0));
   $37 = __THREW__; __THREW__ = 0;
   $38 = $37&1;
   if ($38) {
    label = 15;
    break L5;
   }
   $39 = ((($__p$0$i$16)) + 1|0);
   $__p$0$i$16 = $39;
  }
  $35 = HEAP32[$__wn$i>>2]|0;
  $$0$i$14 = $35;$__r$0$i$13 = $24;
 }
 do {
  if ((label|0) == 8) {
   __THREW__ = 0;
   invoke_vi(436,(20923|0));
   $30 = __THREW__; __THREW__ = 0;
   $31 = ___cxa_find_matching_catch()|0;
   $32 = tempRet0;
   $lpad$phi30$index = $31;$lpad$phi30$index3 = $32;
   label = 17;
  }
  else if ((label|0) == 13) {
   $40 = ($__c|0)==(-1);
   $41 = $__c << 1;
   $42 = $41;
   $43 = $40 ? (-1) : $42;
   $44 = HEAP8[$__ndflt>>0]|0;
   $45 = $44 & 1;
   $46 = ($45<<24>>24)==(0);
   $47 = ((($__ndflt)) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ((($__ndflt)) + 1|0);
   $50 = $46 ? $49 : $48;
   __THREW__ = 0;
   $51 = (invoke_iiiii(453,($43|0),($__set|0),($__msgid|0),($50|0))|0);
   $52 = __THREW__; __THREW__ = 0;
   $53 = $52&1;
   if ($53) {
    $54 = ___cxa_find_matching_catch()|0;
    $55 = tempRet0;
    $$1 = $54;$$14 = $55;
    break;
   }
   $__i$0$i$i$8 = 0;
   while(1) {
    $exitcond$i$i$9 = ($__i$0$i$i$8|0)==(3);
    if ($exitcond$i$i$9) {
     break;
    }
    $60 = (($agg$result) + ($__i$0$i$i$8<<2)|0);
    HEAP32[$60>>2] = 0;
    $61 = (($__i$0$i$i$8) + 1)|0;
    $__i$0$i$i$8 = $61;
   }
   $62 = ((($1)) + 4|0);
   HEAP32[$62>>2] = 0;
   HEAP32[$1>>2] = (9112);
   $63 = (_strlen($51)|0);
   $64 = (($51) + ($63)|0);
   $65 = $64;
   $66 = ((($__buf$i)) + 128|0);
   $$0$i = $51;$__r$0$i = 0;
   L23: while(1) {
    $67 = ($$0$i>>>0)<($64>>>0);
    $68 = ($__r$0$i|0)!=(2);
    $69 = $68 & $67;
    if (!($69)) {
     label = 30;
     break;
    }
    HEAP32[$__nn$i>>2] = $$0$i;
    $70 = HEAP32[$1>>2]|0;
    $71 = ((($70)) + 16|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = $$0$i;
    $74 = (($65) - ($73))|0;
    $75 = ($74|0)>(32);
    $76 = ((($$0$i)) + 32|0);
    $77 = $75 ? $76 : $64;
    __THREW__ = 0;
    $78 = (invoke_iiiiiiiii($72|0,($1|0),($__mb$i|0),($$0$i|0),($77|0),($__nn$i|0),($__buf$i|0),($66|0),($__bn$i|0))|0);
    $79 = __THREW__; __THREW__ = 0;
    $80 = $79&1;
    if ($80) {
     label = 32;
     break;
    }
    $81 = ($78|0)==(2);
    $82 = HEAP32[$__nn$i>>2]|0;
    $83 = ($82|0)==($$0$i|0);
    $or$cond$i = $81 | $83;
    if ($or$cond$i) {
     label = 25;
     break;
    } else {
     $__p$0$i = $__buf$i;
    }
    while(1) {
     $87 = HEAP32[$__bn$i>>2]|0;
     $88 = ($__p$0$i>>>0)<($87>>>0);
     if (!($88)) {
      break;
     }
     $90 = HEAP32[$__p$0$i>>2]|0;
     __THREW__ = 0;
     invoke_vii(445,($agg$result|0),($90|0));
     $91 = __THREW__; __THREW__ = 0;
     $92 = $91&1;
     if ($92) {
      label = 31;
      break L23;
     }
     $93 = ((($__p$0$i)) + 4|0);
     $__p$0$i = $93;
    }
    $89 = HEAP32[$__nn$i>>2]|0;
    $$0$i = $89;$__r$0$i = $78;
   }
   if ((label|0) == 25) {
    __THREW__ = 0;
    invoke_vi(436,(20923|0));
    $84 = __THREW__; __THREW__ = 0;
    $85 = ___cxa_find_matching_catch()|0;
    $86 = tempRet0;
    $lpad$phi$index = $85;$lpad$phi$index10 = $86;
   }
   else if ((label|0) == 30) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
    STACKTOP = sp;return;
   }
   else if ((label|0) == 31) {
    $94 = ___cxa_find_matching_catch()|0;
    $95 = tempRet0;
    $lpad$phi$index = $94;$lpad$phi$index10 = $95;
   }
   else if ((label|0) == 32) {
    $96 = ___cxa_find_matching_catch()|0;
    $97 = tempRet0;
    $lpad$phi$index = $96;$lpad$phi$index10 = $97;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($agg$result);
   $$1 = $lpad$phi$index;$$14 = $lpad$phi$index10;
  }
  else if ((label|0) == 15) {
   $56 = ___cxa_find_matching_catch()|0;
   $57 = tempRet0;
   $lpad$phi30$index = $56;$lpad$phi30$index3 = $57;
   label = 17;
  }
  else if ((label|0) == 16) {
   $58 = ___cxa_find_matching_catch()|0;
   $59 = tempRet0;
   $lpad$phi30$index = $58;$lpad$phi30$index3 = $59;
   label = 17;
  }
 } while(0);
 if ((label|0) == 17) {
  $$1 = $lpad$phi30$index;$$14 = $lpad$phi30$index3;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNKSt3__18messagesIwE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(454,($0|0),(20992|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = (2948);
  ___cxa_throw(($0|0),(248|0),(31|0));
  // unreachable;
 }
}
function __ZNSt3__16locale5__impC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = ((($this)) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = (8564);
 $2 = ((($this)) + 8|0);
 __THREW__ = 0;
 invoke_vii(455,($2|0),28);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $82 = ___cxa_find_matching_catch()|0;
  $83 = tempRet0;
  $$1 = $83;$$12 = $82;
 } else {
  $5 = ((($this)) + 144|0);
  __THREW__ = 0;
  invoke_viii(345,($5|0),(20853|0),1);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   $84 = ___cxa_find_matching_catch()|0;
   $85 = tempRet0;
   $$0 = $85;$$01 = $84;
  } else {
   $8 = HEAP32[$2>>2]|0;
   $9 = ((($this)) + 12|0);
   $$pre$i$i$i = HEAP32[$9>>2]|0;
   $10 = $$pre$i$i$i;
   while(1) {
    $11 = ($10|0)==($8|0);
    if ($11) {
     break;
    }
    $12 = ((($10)) + -4|0);
    HEAP32[$9>>2] = $12;
    $10 = $12;
   }
   HEAP32[(1420)>>2] = 0;
   HEAP32[354] = (7492);
   __THREW__ = 0;
   invoke_vii(456,($this|0),(1416|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   do {
    if ($14) {
     label = 42;
    } else {
     HEAP32[(1428)>>2] = 0;
     HEAP32[356] = (7532);
     __THREW__ = 0;
     invoke_vii(457,($this|0),(1424|0));
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if ($16) {
      label = 42;
     } else {
      HEAP32[(1436)>>2] = 0;
      HEAP32[358] = (8604);
      HEAP32[(1440)>>2] = 0;
      HEAP8[(1444)>>0] = 0;
      $17 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
      HEAP32[(1440)>>2] = $17;
      __THREW__ = 0;
      invoke_vii(458,($this|0),(1432|0));
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if ($19) {
       label = 42;
      } else {
       HEAP32[(1452)>>2] = 0;
       HEAP32[362] = (8852);
       __THREW__ = 0;
       invoke_vii(459,($this|0),(1448|0));
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if ($21) {
        label = 42;
       } else {
        HEAP32[(1460)>>2] = 0;
        HEAP32[364] = (8920);
        __THREW__ = 0;
        invoke_vii(460,($this|0),(1456|0));
        $22 = __THREW__; __THREW__ = 0;
        $23 = $22&1;
        if ($23) {
         label = 42;
        } else {
         __THREW__ = 0;
         invoke_vii(461,(1464|0),1);
         $24 = __THREW__; __THREW__ = 0;
         $25 = $24&1;
         if ($25) {
          label = 42;
         } else {
          __THREW__ = 0;
          invoke_vii(462,($this|0),(1464|0));
          $26 = __THREW__; __THREW__ = 0;
          $27 = $26&1;
          if ($27) {
           label = 42;
          } else {
           HEAP32[(1484)>>2] = 0;
           HEAP32[370] = (8968);
           __THREW__ = 0;
           invoke_vii(463,($this|0),(1480|0));
           $28 = __THREW__; __THREW__ = 0;
           $29 = $28&1;
           if ($29) {
            label = 42;
           } else {
            HEAP32[(1492)>>2] = 0;
            HEAP32[372] = (9016);
            __THREW__ = 0;
            invoke_vii(464,($this|0),(1488|0));
            $30 = __THREW__; __THREW__ = 0;
            $31 = $30&1;
            if ($31) {
             label = 42;
            } else {
             __ZNSt3__18numpunctIcEC2Ej(1496,1);
             __THREW__ = 0;
             invoke_vii(465,($this|0),(1496|0));
             $32 = __THREW__; __THREW__ = 0;
             $33 = $32&1;
             if ($33) {
              label = 42;
             } else {
              __ZNSt3__18numpunctIwEC2Ej(1520,1);
              __THREW__ = 0;
              invoke_vii(466,($this|0),(1520|0));
              $34 = __THREW__; __THREW__ = 0;
              $35 = $34&1;
              if ($35) {
               label = 42;
              } else {
               HEAP32[(1556)>>2] = 0;
               HEAP32[388] = (7572);
               __THREW__ = 0;
               invoke_vii(467,($this|0),(1552|0));
               $36 = __THREW__; __THREW__ = 0;
               $37 = $36&1;
               if ($37) {
                label = 42;
               } else {
                HEAP32[(1564)>>2] = 0;
                HEAP32[390] = (7644);
                __THREW__ = 0;
                invoke_vii(468,($this|0),(1560|0));
                $38 = __THREW__; __THREW__ = 0;
                $39 = $38&1;
                if ($39) {
                 label = 42;
                } else {
                 HEAP32[(1572)>>2] = 0;
                 HEAP32[392] = (7716);
                 __THREW__ = 0;
                 invoke_vii(469,($this|0),(1568|0));
                 $40 = __THREW__; __THREW__ = 0;
                 $41 = $40&1;
                 if ($41) {
                  label = 42;
                 } else {
                  HEAP32[(1580)>>2] = 0;
                  HEAP32[394] = (7776);
                  __THREW__ = 0;
                  invoke_vii(470,($this|0),(1576|0));
                  $42 = __THREW__; __THREW__ = 0;
                  $43 = $42&1;
                  if ($43) {
                   label = 42;
                  } else {
                   HEAP32[(1588)>>2] = 0;
                   HEAP32[396] = (8084);
                   __THREW__ = 0;
                   invoke_vii(471,($this|0),(1584|0));
                   $44 = __THREW__; __THREW__ = 0;
                   $45 = $44&1;
                   if ($45) {
                    label = 42;
                    break;
                   }
                   HEAP32[(1596)>>2] = 0;
                   HEAP32[398] = (8148);
                   __THREW__ = 0;
                   invoke_vii(472,($this|0),(1592|0));
                   $46 = __THREW__; __THREW__ = 0;
                   $47 = $46&1;
                   if ($47) {
                    label = 42;
                    break;
                   }
                   HEAP32[(1604)>>2] = 0;
                   HEAP32[400] = (8212);
                   __THREW__ = 0;
                   invoke_vii(473,($this|0),(1600|0));
                   $48 = __THREW__; __THREW__ = 0;
                   $49 = $48&1;
                   if ($49) {
                    label = 42;
                    break;
                   }
                   HEAP32[(1612)>>2] = 0;
                   HEAP32[402] = (8276);
                   __THREW__ = 0;
                   invoke_vii(474,($this|0),(1608|0));
                   $50 = __THREW__; __THREW__ = 0;
                   $51 = $50&1;
                   if ($51) {
                    label = 42;
                    break;
                   }
                   HEAP32[(1620)>>2] = 0;
                   HEAP32[404] = (8340);
                   __THREW__ = 0;
                   invoke_vii(475,($this|0),(1616|0));
                   $52 = __THREW__; __THREW__ = 0;
                   $53 = $52&1;
                   if ($53) {
                    label = 42;
                    break;
                   }
                   HEAP32[(1628)>>2] = 0;
                   HEAP32[406] = (8376);
                   __THREW__ = 0;
                   invoke_vii(476,($this|0),(1624|0));
                   $54 = __THREW__; __THREW__ = 0;
                   $55 = $54&1;
                   if ($55) {
                    label = 42;
                    break;
                   }
                   HEAP32[(1636)>>2] = 0;
                   HEAP32[408] = (8412);
                   __THREW__ = 0;
                   invoke_vii(477,($this|0),(1632|0));
                   $56 = __THREW__; __THREW__ = 0;
                   $57 = $56&1;
                   if ($57) {
                    label = 42;
                    break;
                   }
                   HEAP32[(1644)>>2] = 0;
                   HEAP32[410] = (8448);
                   __THREW__ = 0;
                   invoke_vii(478,($this|0),(1640|0));
                   $58 = __THREW__; __THREW__ = 0;
                   $59 = $58&1;
                   if ($59) {
                    label = 42;
                    break;
                   }
                   HEAP32[(1652)>>2] = 0;
                   HEAP32[412] = (7836);
                   HEAP32[(1656)>>2] = (7884);
                   __THREW__ = 0;
                   invoke_vii(479,($this|0),(1648|0));
                   $60 = __THREW__; __THREW__ = 0;
                   $61 = $60&1;
                   if ($61) {
                    label = 42;
                    break;
                   }
                   HEAP32[(1668)>>2] = 0;
                   HEAP32[416] = (7928);
                   HEAP32[(1672)>>2] = (7976);
                   __THREW__ = 0;
                   invoke_vii(480,($this|0),(1664|0));
                   $62 = __THREW__; __THREW__ = 0;
                   $63 = $62&1;
                   if ($63) {
                    label = 42;
                    break;
                   }
                   HEAP32[(1684)>>2] = 0;
                   HEAP32[420] = (8832);
                   __THREW__ = 0;
                   $64 = (invoke_i(417)|0);
                   $65 = __THREW__; __THREW__ = 0;
                   $66 = $65&1;
                   if ($66) {
                    $67 = ___cxa_find_matching_catch()|0;
                    $68 = tempRet0;
                    $eh$lpad$body$index3Z2D = $68;$eh$lpad$body$indexZ2D = $67;
                    break;
                   }
                   HEAP32[(1688)>>2] = $64;
                   HEAP32[420] = (8020);
                   __THREW__ = 0;
                   invoke_vii(481,($this|0),(1680|0));
                   $69 = __THREW__; __THREW__ = 0;
                   $70 = $69&1;
                   if ($70) {
                    label = 42;
                    break;
                   }
                   HEAP32[(1700)>>2] = 0;
                   HEAP32[424] = (8832);
                   __THREW__ = 0;
                   $71 = (invoke_i(417)|0);
                   $72 = __THREW__; __THREW__ = 0;
                   $73 = $72&1;
                   if ($73) {
                    $74 = ___cxa_find_matching_catch()|0;
                    $75 = tempRet0;
                    $eh$lpad$body$index3Z2D = $75;$eh$lpad$body$indexZ2D = $74;
                    break;
                   }
                   HEAP32[(1704)>>2] = $71;
                   HEAP32[424] = (8052);
                   __THREW__ = 0;
                   invoke_vii(482,($this|0),(1696|0));
                   $76 = __THREW__; __THREW__ = 0;
                   $77 = $76&1;
                   if ($77) {
                    label = 42;
                    break;
                   }
                   HEAP32[(1716)>>2] = 0;
                   HEAP32[428] = (8484);
                   __THREW__ = 0;
                   invoke_vii(483,($this|0),(1712|0));
                   $78 = __THREW__; __THREW__ = 0;
                   $79 = $78&1;
                   if ($79) {
                    label = 42;
                    break;
                   }
                   HEAP32[(1724)>>2] = 0;
                   HEAP32[430] = (8524);
                   __THREW__ = 0;
                   invoke_vii(484,($this|0),(1720|0));
                   $80 = __THREW__; __THREW__ = 0;
                   $81 = $80&1;
                   if ($81) {
                    label = 42;
                    break;
                   }
                   return;
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 42) {
    $86 = ___cxa_find_matching_catch()|0;
    $87 = tempRet0;
    $eh$lpad$body$index3Z2D = $87;$eh$lpad$body$indexZ2D = $86;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
   $$0 = $eh$lpad$body$index3Z2D;$$01 = $eh$lpad$body$indexZ2D;
  }
  __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($2);
  $$1 = $$0;$$12 = $$01;
 }
 ___resumeException($$12|0);
 // unreachable;
}
function __ZNSt3__16locale7classicEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[1728]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((1728|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    (invoke_i(485)|0);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $7 = ___cxa_find_matching_catch()|0;
     $8 = tempRet0;
     ___cxa_guard_abort((1728|0));
     ___resumeException($7|0);
     // unreachable;
    } else {
     HEAP32[2338] = 9348;
     ___cxa_guard_release((1728|0));
     break;
    }
   }
  }
 } while(0);
 $6 = HEAP32[2338]|0;
 return ($6|0);
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$id) {
 $this = $this|0;
 $f = $f|0;
 $id = $id|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__shared_count12__add_sharedEv($f);
 $0 = ((($this)) + 8|0);
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($2) - ($3))|0;
 $5 = $4 >> 2;
 $6 = ($5>>>0)>($id>>>0);
 do {
  if ($6) {
   $7 = $3;
   $$pre$phiZ2D = $0;$15 = $7;
  } else {
   $8 = (($id) + 1)|0;
   __THREW__ = 0;
   invoke_vii(486,($0|0),($8|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    $$pre = HEAP32[$0>>2]|0;
    $$pre$phiZ2D = $0;$15 = $$pre;
    break;
   }
   $11 = ___cxa_find_matching_catch()|0;
   $12 = tempRet0;
   $13 = ($f|0)==(0|0);
   if (!($13)) {
    (__ZNSt3__114__shared_count16__release_sharedEv($f)|0);
   }
   ___resumeException($11|0);
   // unreachable;
  }
 } while(0);
 $14 = (($15) + ($id<<2)|0);
 $16 = HEAP32[$14>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $19 = $15;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
  $$pre2 = HEAP32[$$pre$phiZ2D>>2]|0;
  $19 = $$pre2;
 }
 $18 = (($19) + ($id<<2)|0);
 HEAP32[$18>>2] = $f;
 return;
}
function __ZNSt3__16locale5__impD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8564);
 $0 = ((($this)) + 8|0);
 $1 = ((($this)) + 12|0);
 $i$0 = 0;
 while(1) {
  $2 = HEAP32[$1>>2]|0;
  $3 = HEAP32[$0>>2]|0;
  $4 = (($2) - ($3))|0;
  $5 = $4 >> 2;
  $6 = ($i$0>>>0)<($5>>>0);
  if (!($6)) {
   break;
  }
  $8 = $3;
  $9 = (($8) + ($i$0<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if (!($11)) {
   (__ZNSt3__114__shared_count16__release_sharedEv($10)|0);
  }
  $12 = (($i$0) + 1)|0;
  $i$0 = $12;
 }
 $7 = ((($this)) + 144|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($0);
 return;
}
function __ZNSt3__16locale5__impD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__16locale5__imp9use_facetEl($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale5__imp9has_facetEl($this,$id)|0);
 if ($0) {
  $2 = ((($this)) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($id<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  return ($5|0);
 } else {
  $1 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($1);
  ___cxa_throw(($1|0),(288|0),(38|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZNSt3__16locale5__imp12make_classicEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impC2Ej(1736,1);
 HEAP32[2337] = 1736;
 return (9348|0);
}
function __ZNSt3__16locale5__imp11make_globalEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale7classicEv()|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[2339] = $1;
 __ZNSt3__114__shared_count12__add_sharedEv($1);
 return (9356|0);
}
function __ZNSt3__16locale8__globalEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[1896]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((1896|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    (invoke_i(487)|0);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $7 = ___cxa_find_matching_catch()|0;
     $8 = tempRet0;
     ___cxa_guard_abort((1896|0));
     ___resumeException($7|0);
     // unreachable;
    } else {
     HEAP32[2340] = 9356;
     ___cxa_guard_release((1896|0));
     break;
    }
   }
  }
 } while(0);
 $6 = HEAP32[2340]|0;
 return ($6|0);
}
function __ZNSt3__16localeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(488)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  HEAP32[$this>>2] = $3;
  __ZNSt3__114__shared_count12__add_sharedEv($3);
  return;
 }
}
function __ZNSt3__16localeC2ERKS0_($this,$l) {
 $this = $this|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$l>>2]|0;
 HEAP32[$this>>2] = $0;
 __ZNSt3__114__shared_count12__add_sharedEv($0);
 return;
}
function __ZNSt3__16localeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 return;
}
function __ZNKSt3__16locale9has_facetERNS0_2idE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (__ZNSt3__16locale2id5__getEv($x)|0);
 $2 = (__ZNKSt3__16locale5__imp9has_facetEl($0,$1)|0);
 return ($2|0);
}
function __ZNSt3__16locale2id5__getEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__p$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p$i = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(-1);
 if (!($1)) {
  HEAP32[$__p$i>>2] = $this;
  $2 = ((($__p$i)) + 4|0);
  HEAP32[$2>>2] = (489);
  $3 = ((($__p$i)) + 8|0);
  HEAP32[$3>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($this,$__p$i,490);
 }
 $4 = ((($this)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 STACKTOP = sp;return ($6|0);
}
function __ZNKSt3__16locale9use_facetERNS0_2idE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (__ZNSt3__16locale2id5__getEv($x)|0);
 $2 = (__ZNKSt3__16locale5__imp9use_facetEl($0,$1)|0);
 return ($2|0);
}
function __ZNSt3__16locale5facetD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  $1 = HEAP32[$this>>2]|0;
  $2 = ((($1)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  FUNCTION_TABLE_vi[$3 & 1023]($this);
 }
 return;
}
function __ZNSt3__16locale2id6__initEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[2144]|0;HEAP32[2144] = (($0+1)|0);
 $1 = (($0) + 1)|0;
 $2 = ((($this)) + 4|0);
 HEAP32[$2>>2] = $1;
 return;
}
function __ZNSt3__15ctypeIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__15ctypeIwE5do_isEtw($this,$m,$c) {
 $this = $this|0;
 $m = $m|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if ($isascii) {
  $0 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
  $1 = (($0) + ($c<<1)|0);
  $2 = HEAP16[$1>>1]|0;
  $3 = $2 & $m;
  $4 = ($3<<16>>16)!=(0);
  $5 = $4;
 } else {
  $5 = 0;
 }
 return ($5|0);
}
function __ZNSt3__15ctypeIcE13classic_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(491)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  return ($3|0);
 }
 return (0)|0;
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $vec = $vec|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low3 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low3 = $low;
 $0 = $high;
 $1 = (($0) - ($low3))|0;
 $2 = $1 >>> 2;
 $$0 = $vec;$$01 = $low;
 while(1) {
  $3 = ($$01|0)==($high|0);
  if ($3) {
   break;
  }
  $4 = HEAP32[$$01>>2]|0;
  $isascii = ($4>>>0)<(128);
  if ($isascii) {
   $5 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
   $6 = (($5) + ($4<<1)|0);
   $7 = HEAP16[$6>>1]|0;
   $8 = $7&65535;
   $10 = $8;
  } else {
   $10 = 0;
  }
  $9 = $10&65535;
  HEAP16[$$0>>1] = $9;
  $11 = ((($$01)) + 4|0);
  $12 = ((($$0)) + 2|0);
  $$0 = $12;$$01 = $11;
 }
 $scevgep = (($low) + ($2<<2)|0);
 return ($scevgep|0);
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0 = 0, $$0$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $low;
 while(1) {
  $0 = ($$0|0)==($high|0);
  if ($0) {
   $$0$lcssa = $high;
   break;
  }
  $1 = HEAP32[$$0>>2]|0;
  $isascii = ($1>>>0)<(128);
  if ($isascii) {
   $2 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
   $3 = (($2) + ($1<<1)|0);
   $4 = HEAP16[$3>>1]|0;
   $5 = $4 & $m;
   $6 = ($5<<16>>16)==(0);
   if (!($6)) {
    $$0$lcssa = $$0;
    break;
   }
  }
  $7 = ((($$0)) + 4|0);
  $$0 = $7;
 }
 return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0 = 0, $$0$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $low;
 while(1) {
  $0 = ($$0|0)==($high|0);
  if ($0) {
   $$0$lcssa = $high;
   break;
  }
  $1 = HEAP32[$$0>>2]|0;
  $isascii = ($1>>>0)<(128);
  if (!($isascii)) {
   $$0$lcssa = $$0;
   break;
  }
  $2 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
  $3 = (($2) + ($1<<1)|0);
  $4 = HEAP16[$3>>1]|0;
  $5 = $4 & $m;
  $6 = ($5<<16>>16)==(0);
  if ($6) {
   $$0$lcssa = $$0;
   break;
  }
  $7 = ((($$0)) + 4|0);
  $$0 = $7;
 }
 return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if ($isascii) {
  $0 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
  $1 = (($0) + ($c<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = $2;
 } else {
  $3 = $c;
 }
 return ($3|0);
}
function __ZNSt3__15ctypeIcE21__classic_upper_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(492)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  return ($3|0);
 }
 return (0)|0;
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low2 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low2 = $low;
 $0 = $high;
 $1 = (($0) - ($low2))|0;
 $2 = $1 >>> 2;
 $$0 = $low;
 while(1) {
  $3 = ($$0|0)==($high|0);
  if ($3) {
   break;
  }
  $4 = HEAP32[$$0>>2]|0;
  $isascii = ($4>>>0)<(128);
  if ($isascii) {
   $5 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
   $6 = (($5) + ($4<<2)|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $7;
  } else {
   $8 = $4;
  }
  HEAP32[$$0>>2] = $8;
  $9 = ((($$0)) + 4|0);
  $$0 = $9;
 }
 $scevgep = (($low) + ($2<<2)|0);
 return ($scevgep|0);
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if ($isascii) {
  $0 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
  $1 = (($0) + ($c<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = $2;
 } else {
  $3 = $c;
 }
 return ($3|0);
}
function __ZNSt3__15ctypeIcE21__classic_lower_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(493)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  return ($3|0);
 }
 return (0)|0;
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low2 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low2 = $low;
 $0 = $high;
 $1 = (($0) - ($low2))|0;
 $2 = $1 >>> 2;
 $$0 = $low;
 while(1) {
  $3 = ($$0|0)==($high|0);
  if ($3) {
   break;
  }
  $4 = HEAP32[$$0>>2]|0;
  $isascii = ($4>>>0)<(128);
  if ($isascii) {
   $5 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
   $6 = (($5) + ($4<<2)|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $7;
  } else {
   $8 = $4;
  }
  HEAP32[$$0>>2] = $8;
  $9 = ((($$0)) + 4|0);
  $$0 = $9;
 }
 $scevgep = (($low) + ($2<<2)|0);
 return ($scevgep|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c << 24 >> 24;
 return ($0|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $dest;$$01 = $low;
 while(1) {
  $0 = ($$01|0)==($high|0);
  if ($0) {
   break;
  }
  $1 = HEAP8[$$01>>0]|0;
  $2 = $1 << 24 >> 24;
  HEAP32[$$0>>2] = $2;
  $3 = ((($$01)) + 1|0);
  $4 = ((($$0)) + 4|0);
  $$0 = $4;$$01 = $3;
 }
 return ($high|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $$0 = 0, $0 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 $0 = $c&255;
 $$0 = $isascii ? $0 : $dfault;
 return ($$0|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$0 = 0, $$01 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $isascii = 0, $low3 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low3 = $low;
 $0 = $high;
 $1 = (($0) - ($low3))|0;
 $2 = $1 >>> 2;
 $$0 = $dest;$$01 = $low;
 while(1) {
  $3 = ($$01|0)==($high|0);
  if ($3) {
   break;
  }
  $4 = HEAP32[$$01>>2]|0;
  $isascii = ($4>>>0)<(128);
  $5 = $4&255;
  $$dfault = $isascii ? $5 : $dfault;
  HEAP8[$$0>>0] = $$dfault;
  $6 = ((($$01)) + 4|0);
  $7 = ((($$0)) + 1|0);
  $$0 = $7;$$01 = $6;
 }
 $scevgep = (($low) + ($2<<2)|0);
 return ($scevgep|0);
}
function __ZNSt3__15ctypeIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8604);
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($this)) + 12|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if (!($5)) {
   __ZdaPv($1);
  }
 }
 return;
}
function __ZNSt3__15ctypeIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__15ctypeIcED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__15ctypeIcE10do_toupperEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if ($isascii1) {
  $0 = $c&255;
  $1 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
  $2 = (($1) + ($0<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3&255;
  $5 = $4;
 } else {
  $5 = $c;
 }
 return ($5|0);
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $low;
 while(1) {
  $0 = ($$0|0)==($high|0);
  if ($0) {
   break;
  }
  $1 = HEAP8[$$0>>0]|0;
  $isascii1 = ($1<<24>>24)>(-1);
  if ($isascii1) {
   $2 = $1 << 24 >> 24;
   $3 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
   $4 = (($3) + ($2<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = $5&255;
   $7 = $6;
  } else {
   $7 = $1;
  }
  HEAP8[$$0>>0] = $7;
  $8 = ((($$0)) + 1|0);
  $$0 = $8;
 }
 return ($high|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if ($isascii1) {
  $0 = $c << 24 >> 24;
  $1 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
  $2 = (($1) + ($0<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3&255;
  $5 = $4;
 } else {
  $5 = $c;
 }
 return ($5|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $low;
 while(1) {
  $0 = ($$0|0)==($high|0);
  if ($0) {
   break;
  }
  $1 = HEAP8[$$0>>0]|0;
  $isascii1 = ($1<<24>>24)>(-1);
  if ($isascii1) {
   $2 = $1 << 24 >> 24;
   $3 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
   $4 = (($3) + ($2<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = $5&255;
   $7 = $6;
  } else {
   $7 = $1;
  }
  HEAP8[$$0>>0] = $7;
  $8 = ((($$0)) + 1|0);
  $$0 = $8;
 }
 return ($high|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($c|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $dest;$$01 = $low;
 while(1) {
  $0 = ($$01|0)==($high|0);
  if ($0) {
   break;
  }
  $1 = HEAP8[$$01>>0]|0;
  HEAP8[$$0>>0] = $1;
  $2 = ((($$01)) + 1|0);
  $3 = ((($$0)) + 1|0);
  $$0 = $3;$$01 = $2;
 }
 return ($high|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $c$dfault = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 $c$dfault = $isascii1 ? $c : $dfault;
 return ($c$dfault|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$0 = 0, $$01 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isascii2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $dest;$$01 = $low;
 while(1) {
  $0 = ($$01|0)==($high|0);
  if ($0) {
   break;
  }
  $1 = HEAP8[$$01>>0]|0;
  $isascii2 = ($1<<24>>24)>(-1);
  $$dfault = $isascii2 ? $1 : $dfault;
  HEAP8[$$0>>0] = $$dfault;
  $2 = ((($$01)) + 1|0);
  $3 = ((($$0)) + 1|0);
  $$0 = $3;$$01 = $2;
 }
 return ($high|0);
}
function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $end = $end|0;
 $mx = $mx|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $end;
 $2 = $frm;
 $3 = (($1) - ($2))|0;
 $4 = ($3>>>0)<($mx>>>0);
 $5 = $4 ? $3 : $mx;
 return ($5|0);
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNSt3__17codecvtIwc11__mbstate_tEC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = ((($this)) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = (8672);
 __THREW__ = 0;
 $2 = (invoke_i(417)|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  ___resumeException($6|0);
  // unreachable;
 } else {
  $5 = ((($this)) + 8|0);
  HEAP32[$5>>2] = $2;
  return;
 }
}
function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$03 = 0, $$03$lcssa203 = 0, $$05 = 0, $$05$lcssa195 = 0, $$12$ph = 0, $$14 = 0, $$14$lcssa = 0, $$3$ph = 0, $$4 = 0, $$lcssa = 0, $$lcssa209 = 0, $$lcssa217 = 0, $$pre = 0, $$pre98 = 0, $$pre99 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $fend$0 = 0, $fend$0$lcssa = 0, $fend$1 = 0, $fend$2 = 0, $fend$2$lcssa = 0, $fend$5$ph = 0, $n$0 = 0, $not$ = 0, $or$cond = 0, $p$0 = 0, $save_state = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $save_state = sp;
 $tmp = sp + 8|0;
 $fend$0 = $frm;
 while(1) {
  $0 = ($fend$0|0)==($frm_end|0);
  if ($0) {
   $fend$0$lcssa = $frm_end;
   break;
  }
  $1 = HEAP32[$fend$0>>2]|0;
  $2 = ($1|0)==(0);
  if ($2) {
   $fend$0$lcssa = $fend$0;
   break;
  }
  $3 = ((($fend$0)) + 4|0);
  $fend$0 = $3;
 }
 HEAP32[$to_nxt>>2] = $to;
 HEAP32[$frm_nxt>>2] = $frm;
 $4 = $to_end;
 $5 = ((($this)) + 8|0);
 $$03 = $frm;$$05 = $to;$fend$1 = $fend$0$lcssa;
 L6: while(1) {
  $6 = ($$03|0)==($frm_end|0);
  $7 = ($$05|0)==($to_end|0);
  $or$cond = $7 | $6;
  if ($or$cond) {
   $103 = $$03;
   label = 53;
   break;
  }
  $8 = $st;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) + 4)|0;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = $save_state;
  $15 = $14;
  HEAP32[$15>>2] = $10;
  $16 = (($14) + 4)|0;
  $17 = $16;
  HEAP32[$17>>2] = $13;
  $18 = $fend$1;
  $19 = $$03;
  $20 = (($18) - ($19))|0;
  $21 = $20 >> 2;
  $22 = $$05;
  $23 = (($4) - ($22))|0;
  $24 = HEAP32[$5>>2]|0;
  $25 = (_uselocale($24)|0);
  __THREW__ = 0;
  $26 = (invoke_iiiiii(494,($$05|0),($frm_nxt|0),($21|0),($23|0),($st|0))|0);
  $27 = __THREW__; __THREW__ = 0;
  $28 = $27&1;
  if ($28) {
   $$lcssa209 = $25;
   label = 11;
   break;
  }
  $29 = ($25|0)==(0|0);
  if (!($29)) {
   __THREW__ = 0;
   (invoke_ii(433,($25|0))|0);
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    label = 10;
    break;
   }
  }
  switch ($26|0) {
  case -1:  {
   $$03$lcssa203 = $$03;$$05$lcssa195 = $$05;
   label = 16;
   break L6;
   break;
  }
  case 0:  {
   $$3$ph = 1;
   label = 50;
   break L6;
   break;
  }
  default: {
  }
  }
  $66 = HEAP32[$to_nxt>>2]|0;
  $67 = (($66) + ($26)|0);
  HEAP32[$to_nxt>>2] = $67;
  $68 = ($67|0)==($to_end|0);
  if ($68) {
   label = 51;
   break;
  }
  $69 = ($fend$1|0)==($frm_end|0);
  if ($69) {
   $$pre = HEAP32[$frm_nxt>>2]|0;
   $105 = $67;$106 = $$pre;$fend$5$ph = $frm_end;
  } else {
   $70 = HEAP32[$5>>2]|0;
   $71 = (_uselocale($70)|0);
   __THREW__ = 0;
   $72 = (invoke_iiii(495,($tmp|0),0,($st|0))|0);
   $73 = __THREW__; __THREW__ = 0;
   $74 = $73&1;
   if ($74) {
    $$lcssa217 = $71;
    label = 36;
    break;
   }
   $75 = ($71|0)==(0|0);
   if (!($75)) {
    __THREW__ = 0;
    (invoke_ii(433,($71|0))|0);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     label = 35;
     break;
    }
   }
   $87 = ($72|0)==(-1);
   if ($87) {
    $$12$ph = 2;
    label = 49;
    break;
   }
   $88 = HEAP32[$to_nxt>>2]|0;
   $89 = (($4) - ($88))|0;
   $90 = ($72>>>0)>($89>>>0);
   if ($90) {
    $$12$ph = 1;
    label = 49;
    break;
   } else {
    $n$0 = $72;$p$0 = $tmp;
   }
   while(1) {
    $91 = ($n$0|0)==(0);
    if ($91) {
     break;
    }
    $94 = ((($p$0)) + 1|0);
    $95 = HEAP8[$p$0>>0]|0;
    $96 = HEAP32[$to_nxt>>2]|0;
    $97 = ((($96)) + 1|0);
    HEAP32[$to_nxt>>2] = $97;
    HEAP8[$96>>0] = $95;
    $98 = (($n$0) + -1)|0;
    $n$0 = $98;$p$0 = $94;
   }
   $92 = HEAP32[$frm_nxt>>2]|0;
   $93 = ((($92)) + 4|0);
   HEAP32[$frm_nxt>>2] = $93;
   $fend$2 = $93;
   while(1) {
    $99 = ($fend$2|0)==($frm_end|0);
    if ($99) {
     $fend$2$lcssa = $frm_end;
     break;
    }
    $100 = HEAP32[$fend$2>>2]|0;
    $101 = ($100|0)==(0);
    if ($101) {
     $fend$2$lcssa = $fend$2;
     break;
    }
    $102 = ((($fend$2)) + 4|0);
    $fend$2 = $102;
   }
   $$pre98 = HEAP32[$to_nxt>>2]|0;
   $105 = $$pre98;$106 = $93;$fend$5$ph = $fend$2$lcssa;
  }
  $$03 = $106;$$05 = $105;$fend$1 = $fend$5$ph;
 }
 do {
  if ((label|0) == 10) {
   $32 = ___cxa_find_matching_catch(0|0)|0;
   $33 = tempRet0;
   ___clang_call_terminate($32);
   // unreachable;
  }
  else if ((label|0) == 11) {
   $34 = ___cxa_find_matching_catch()|0;
   $35 = tempRet0;
   $36 = ($$lcssa209|0)==(0|0);
   if (!($36)) {
    __THREW__ = 0;
    (invoke_ii(433,($$lcssa209|0))|0);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if ($38) {
     $39 = ___cxa_find_matching_catch(0|0)|0;
     $40 = tempRet0;
     ___clang_call_terminate($39);
     // unreachable;
    }
   }
   ___resumeException($34|0);
   // unreachable;
  }
  else if ((label|0) == 16) {
   HEAP32[$to_nxt>>2] = $$05$lcssa195;
   $$14 = $$03$lcssa203;$46 = $$05$lcssa195;
   while(1) {
    $41 = HEAP32[$frm_nxt>>2]|0;
    $42 = ($$14|0)==($41|0);
    if ($42) {
     $$14$lcssa = $$14;
     label = 28;
     break;
    }
    $43 = HEAP32[$$14>>2]|0;
    $44 = HEAP32[$5>>2]|0;
    $45 = (_uselocale($44)|0);
    __THREW__ = 0;
    $47 = (invoke_iiii(495,($46|0),($43|0),($save_state|0))|0);
    $48 = __THREW__; __THREW__ = 0;
    $49 = $48&1;
    if ($49) {
     $$lcssa = $45;
     label = 22;
     break;
    }
    $50 = ($45|0)==(0|0);
    if (!($50)) {
     __THREW__ = 0;
     (invoke_ii(433,($45|0))|0);
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      label = 21;
      break;
     }
    }
    $62 = ($47|0)==(-1);
    if ($62) {
     $$14$lcssa = $$14;
     label = 28;
     break;
    }
    $63 = HEAP32[$to_nxt>>2]|0;
    $64 = (($63) + ($47)|0);
    HEAP32[$to_nxt>>2] = $64;
    $65 = ((($$14)) + 4|0);
    $$14 = $65;$46 = $64;
   }
   if ((label|0) == 21) {
    $53 = ___cxa_find_matching_catch(0|0)|0;
    $54 = tempRet0;
    ___clang_call_terminate($53);
    // unreachable;
   }
   else if ((label|0) == 22) {
    $55 = ___cxa_find_matching_catch()|0;
    $56 = tempRet0;
    $57 = ($$lcssa|0)==(0|0);
    if (!($57)) {
     __THREW__ = 0;
     (invoke_ii(433,($$lcssa|0))|0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      $60 = ___cxa_find_matching_catch(0|0)|0;
      $61 = tempRet0;
      ___clang_call_terminate($60);
      // unreachable;
     }
    }
    ___resumeException($55|0);
    // unreachable;
   }
   else if ((label|0) == 28) {
    HEAP32[$frm_nxt>>2] = $$14$lcssa;
    $$3$ph = 2;
    label = 50;
    break;
   }
  }
  else if ((label|0) == 35) {
   $78 = ___cxa_find_matching_catch(0|0)|0;
   $79 = tempRet0;
   ___clang_call_terminate($78);
   // unreachable;
  }
  else if ((label|0) == 36) {
   $80 = ___cxa_find_matching_catch()|0;
   $81 = tempRet0;
   $82 = ($$lcssa217|0)==(0|0);
   if (!($82)) {
    __THREW__ = 0;
    (invoke_ii(433,($$lcssa217|0))|0);
    $83 = __THREW__; __THREW__ = 0;
    $84 = $83&1;
    if ($84) {
     $85 = ___cxa_find_matching_catch(0|0)|0;
     $86 = tempRet0;
     ___clang_call_terminate($85);
     // unreachable;
    }
   }
   ___resumeException($80|0);
   // unreachable;
  }
  else if ((label|0) == 49) {
   $$3$ph = $$12$ph;
   label = 50;
  }
  else if ((label|0) == 51) {
   $$pre99 = HEAP32[$frm_nxt>>2]|0;
   $103 = $$pre99;
   label = 53;
  }
 } while(0);
 if ((label|0) == 50) {
  $$4 = $$3$ph;
 }
 else if ((label|0) == 53) {
  $not$ = ($103|0)!=($frm_end|0);
  $104 = $not$&1;
  $$4 = $104;
 }
 STACKTOP = sp;return ($$4|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$02 = 0, $$02$lcssa231 = 0, $$05 = 0, $$05$lcssa224 = 0, $$1$ph = 0, $$13 = 0, $$13$lcssa = 0, $$13$lcssa217 = 0, $$13$lcssa218 = 0, $$2 = 0, $$24 = 0, $$lcssa = 0, $$lcssa238 = 0, $$lcssa243 = 0, $$lcssa250 = 0, $$pre = 0, $$pre102 = 0, $$pre103 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fend$0 = 0;
 var $fend$0$lcssa = 0, $fend$1 = 0, $fend$2 = 0, $fend$2$lcssa = 0, $fend$4$ph = 0, $not$ = 0, $not$6 = 0, $or$cond = 0, $save_state = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $save_state = sp;
 $fend$0 = $frm;
 while(1) {
  $0 = ($fend$0|0)==($frm_end|0);
  if ($0) {
   $fend$0$lcssa = $frm_end;
   break;
  }
  $1 = HEAP8[$fend$0>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $fend$0$lcssa = $fend$0;
   break;
  }
  $3 = ((($fend$0)) + 1|0);
  $fend$0 = $3;
 }
 HEAP32[$to_nxt>>2] = $to;
 HEAP32[$frm_nxt>>2] = $frm;
 $4 = $to_end;
 $5 = ((($this)) + 8|0);
 $$02 = $frm;$$05 = $to;$fend$1 = $fend$0$lcssa;
 L6: while(1) {
  $6 = ($$02|0)==($frm_end|0);
  $7 = ($$05|0)==($to_end|0);
  $or$cond = $7 | $6;
  if ($or$cond) {
   $97 = $$02;
   label = 52;
   break;
  }
  $8 = $st;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) + 4)|0;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = $save_state;
  $15 = $14;
  HEAP32[$15>>2] = $10;
  $16 = (($14) + 4)|0;
  $17 = $16;
  HEAP32[$17>>2] = $13;
  $18 = $fend$1;
  $19 = $$02;
  $20 = (($18) - ($19))|0;
  $21 = $$05;
  $22 = (($4) - ($21))|0;
  $23 = $22 >> 2;
  $24 = HEAP32[$5>>2]|0;
  $25 = (_uselocale($24)|0);
  __THREW__ = 0;
  $26 = (invoke_iiiiii(496,($$05|0),($frm_nxt|0),($20|0),($23|0),($st|0))|0);
  $27 = __THREW__; __THREW__ = 0;
  $28 = $27&1;
  if ($28) {
   $$lcssa243 = $25;
   label = 11;
   break;
  }
  $29 = ($25|0)==(0|0);
  if (!($29)) {
   __THREW__ = 0;
   (invoke_ii(433,($25|0))|0);
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    label = 10;
    break;
   }
  }
  switch ($26|0) {
  case -1:  {
   $$02$lcssa231 = $$02;$$05$lcssa224 = $$05;$$lcssa238 = $18;
   label = 16;
   break L6;
   break;
  }
  case 0:  {
   $$1$ph = 2;
   label = 48;
   break L6;
   break;
  }
  default: {
  }
  }
  $67 = HEAP32[$to_nxt>>2]|0;
  $68 = (($67) + ($26<<2)|0);
  HEAP32[$to_nxt>>2] = $68;
  $69 = ($68|0)==($to_end|0);
  if ($69) {
   label = 49;
   break;
  }
  $70 = ($fend$1|0)==($frm_end|0);
  $$pre = HEAP32[$frm_nxt>>2]|0;
  if ($70) {
   $100 = $$pre;$99 = $68;$fend$4$ph = $frm_end;
  } else {
   $71 = HEAP32[$5>>2]|0;
   $72 = (_uselocale($71)|0);
   __THREW__ = 0;
   $73 = (invoke_iiiii(497,($68|0),($$pre|0),1,($st|0))|0);
   $74 = __THREW__; __THREW__ = 0;
   $75 = $74&1;
   if ($75) {
    $$lcssa250 = $72;
    label = 39;
    break;
   }
   $76 = ($72|0)==(0|0);
   if (!($76)) {
    __THREW__ = 0;
    (invoke_ii(433,($72|0))|0);
    $77 = __THREW__; __THREW__ = 0;
    $78 = $77&1;
    if ($78) {
     label = 38;
     break;
    }
   }
   $88 = ($73|0)==(0);
   if (!($88)) {
    $$1$ph = 2;
    label = 48;
    break;
   }
   $89 = HEAP32[$to_nxt>>2]|0;
   $90 = ((($89)) + 4|0);
   HEAP32[$to_nxt>>2] = $90;
   $91 = HEAP32[$frm_nxt>>2]|0;
   $92 = ((($91)) + 1|0);
   HEAP32[$frm_nxt>>2] = $92;
   $fend$2 = $92;
   while(1) {
    $93 = ($fend$2|0)==($frm_end|0);
    if ($93) {
     $fend$2$lcssa = $frm_end;
     break;
    }
    $94 = HEAP8[$fend$2>>0]|0;
    $95 = ($94<<24>>24)==(0);
    if ($95) {
     $fend$2$lcssa = $fend$2;
     break;
    }
    $96 = ((($fend$2)) + 1|0);
    $fend$2 = $96;
   }
   $$pre102 = HEAP32[$to_nxt>>2]|0;
   $100 = $92;$99 = $$pre102;$fend$4$ph = $fend$2$lcssa;
  }
  $$02 = $100;$$05 = $99;$fend$1 = $fend$4$ph;
 }
 do {
  if ((label|0) == 10) {
   $32 = ___cxa_find_matching_catch(0|0)|0;
   $33 = tempRet0;
   ___clang_call_terminate($32);
   // unreachable;
  }
  else if ((label|0) == 11) {
   $34 = ___cxa_find_matching_catch()|0;
   $35 = tempRet0;
   $36 = ($$lcssa243|0)==(0|0);
   if (!($36)) {
    __THREW__ = 0;
    (invoke_ii(433,($$lcssa243|0))|0);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if ($38) {
     $39 = ___cxa_find_matching_catch(0|0)|0;
     $40 = tempRet0;
     ___clang_call_terminate($39);
     // unreachable;
    }
   }
   ___resumeException($34|0);
   // unreachable;
  }
  else if ((label|0) == 16) {
   $$13 = $$02$lcssa231;$storemerge = $$05$lcssa224;
   L31: while(1) {
    HEAP32[$to_nxt>>2] = $storemerge;
    $41 = HEAP32[$frm_nxt>>2]|0;
    $42 = ($$13|0)==($41|0);
    if ($42) {
     $$13$lcssa = $$13;
     label = 32;
     break;
    }
    $43 = $$13;
    $44 = (($$lcssa238) - ($43))|0;
    $45 = HEAP32[$5>>2]|0;
    $46 = (_uselocale($45)|0);
    __THREW__ = 0;
    $47 = (invoke_iiiii(497,($storemerge|0),($$13|0),($44|0),($save_state|0))|0);
    $48 = __THREW__; __THREW__ = 0;
    $49 = $48&1;
    if ($49) {
     $$lcssa = $46;
     label = 22;
     break;
    }
    $50 = ($46|0)==(0|0);
    if (!($50)) {
     __THREW__ = 0;
     (invoke_ii(433,($46|0))|0);
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      label = 21;
      break;
     }
    }
    switch ($47|0) {
    case -1:  {
     $$13$lcssa217 = $$13;
     label = 28;
     break L31;
     break;
    }
    case -2:  {
     $$13$lcssa218 = $$13;
     label = 29;
     break L31;
     break;
    }
    case 0:  {
     $62 = ((($$13)) + 1|0);
     $$24 = $62;
     break;
    }
    default: {
     $63 = (($$13) + ($47)|0);
     $$24 = $63;
    }
    }
    $64 = HEAP32[$to_nxt>>2]|0;
    $65 = ((($64)) + 4|0);
    $$13 = $$24;$storemerge = $65;
   }
   if ((label|0) == 21) {
    $53 = ___cxa_find_matching_catch(0|0)|0;
    $54 = tempRet0;
    ___clang_call_terminate($53);
    // unreachable;
   }
   else if ((label|0) == 22) {
    $55 = ___cxa_find_matching_catch()|0;
    $56 = tempRet0;
    $57 = ($$lcssa|0)==(0|0);
    if (!($57)) {
     __THREW__ = 0;
     (invoke_ii(433,($$lcssa|0))|0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      $60 = ___cxa_find_matching_catch(0|0)|0;
      $61 = tempRet0;
      ___clang_call_terminate($60);
      // unreachable;
     }
    }
    ___resumeException($55|0);
    // unreachable;
   }
   else if ((label|0) == 28) {
    HEAP32[$frm_nxt>>2] = $$13$lcssa217;
    $$1$ph = 2;
    label = 48;
    break;
   }
   else if ((label|0) == 29) {
    HEAP32[$frm_nxt>>2] = $$13$lcssa218;
    $$1$ph = 1;
    label = 48;
    break;
   }
   else if ((label|0) == 32) {
    HEAP32[$frm_nxt>>2] = $$13$lcssa;
    $not$6 = ($$13$lcssa|0)!=($frm_end|0);
    $66 = $not$6&1;
    $$1$ph = $66;
    label = 48;
    break;
   }
  }
  else if ((label|0) == 38) {
   $79 = ___cxa_find_matching_catch(0|0)|0;
   $80 = tempRet0;
   ___clang_call_terminate($79);
   // unreachable;
  }
  else if ((label|0) == 39) {
   $81 = ___cxa_find_matching_catch()|0;
   $82 = tempRet0;
   $83 = ($$lcssa250|0)==(0|0);
   if (!($83)) {
    __THREW__ = 0;
    (invoke_ii(433,($$lcssa250|0))|0);
    $84 = __THREW__; __THREW__ = 0;
    $85 = $84&1;
    if ($85) {
     $86 = ___cxa_find_matching_catch(0|0)|0;
     $87 = tempRet0;
     ___clang_call_terminate($86);
     // unreachable;
    }
   }
   ___resumeException($81|0);
   // unreachable;
  }
  else if ((label|0) == 49) {
   $$pre103 = HEAP32[$frm_nxt>>2]|0;
   $97 = $$pre103;
   label = 52;
  }
 } while(0);
 if ((label|0) == 48) {
  $$2 = $$1$ph;
 }
 else if ((label|0) == 52) {
  $not$ = ($97|0)!=($frm_end|0);
  $98 = $not$&1;
  $$2 = $98;
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0 = 0, $p$0 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp;
 HEAP32[$to_nxt>>2] = $to;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_uselocale($1)|0);
 __THREW__ = 0;
 $3 = (invoke_iiii(495,($tmp|0),0,($st|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $13 = ($2|0)==(0|0);
  if (!($13)) {
   __THREW__ = 0;
   (invoke_ii(433,($2|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $16 = ___cxa_find_matching_catch(0|0)|0;
    $17 = tempRet0;
    ___clang_call_terminate($16);
    // unreachable;
   }
  }
  ___resumeException($11|0);
  // unreachable;
 }
 $6 = ($2|0)==(0|0);
 if (!($6)) {
  __THREW__ = 0;
  (invoke_ii(433,($2|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $9 = ___cxa_find_matching_catch(0|0)|0;
   $10 = tempRet0;
   ___clang_call_terminate($9);
   // unreachable;
  }
 }
 L12: do {
  switch ($3|0) {
  case 0: case -1:  {
   $$0 = 2;
   break;
  }
  default: {
   $18 = (($3) + -1)|0;
   $19 = HEAP32[$to_nxt>>2]|0;
   $20 = $to_end;
   $21 = (($20) - ($19))|0;
   $22 = ($18>>>0)>($21>>>0);
   if ($22) {
    $$0 = 1;
   } else {
    $n$0 = $18;$p$0 = $tmp;
    while(1) {
     $23 = ($n$0|0)==(0);
     if ($23) {
      $$0 = 0;
      break L12;
     }
     $24 = ((($p$0)) + 1|0);
     $25 = HEAP8[$p$0>>0]|0;
     $26 = HEAP32[$to_nxt>>2]|0;
     $27 = ((($26)) + 1|0);
     HEAP32[$to_nxt>>2] = $27;
     HEAP8[$26>>0] = $25;
     $28 = (($n$0) + -1)|0;
     $n$0 = $28;$p$0 = $24;
    }
   }
  }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_ii(433,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   label = 16;
  } else {
   __THREW__ = 0;
   $5 = (invoke_iiii(498,(0|0),(0|0),4)|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if ($7) {
    $13 = ___cxa_find_matching_catch(0|0)|0;
    $14 = tempRet0;
    $15 = ($2|0)==(0|0);
    if ($15) {
     $eh$lpad$body$indexZ2D = $13;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(433,($2|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     $eh$lpad$body$indexZ2D = $13;
     break;
    }
    $18 = ___cxa_find_matching_catch(0|0)|0;
    $19 = tempRet0;
    ___clang_call_terminate($18);
    // unreachable;
   }
   $8 = ($2|0)==(0|0);
   if (!($8)) {
    __THREW__ = 0;
    (invoke_ii(433,($2|0))|0);
    $9 = __THREW__; __THREW__ = 0;
    $10 = $9&1;
    if ($10) {
     $11 = ___cxa_find_matching_catch(0|0)|0;
     $12 = tempRet0;
     ___clang_call_terminate($11);
     // unreachable;
    }
   }
   $20 = ($5|0)==(0);
   if ($20) {
    $21 = HEAP32[$0>>2]|0;
    $22 = ($21|0)==(0|0);
    if ($22) {
     $$0 = 1;
    } else {
     __THREW__ = 0;
     $23 = (invoke_ii(433,($21|0))|0);
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if ($25) {
      label = 16;
      break;
     }
     $26 = ($23|0)==(0|0);
     if ($26) {
      $$0 = 0;
     } else {
      __THREW__ = 0;
      (invoke_ii(433,($23|0))|0);
      $27 = __THREW__; __THREW__ = 0;
      $28 = $27&1;
      if ($28) {
       $29 = ___cxa_find_matching_catch(0|0)|0;
       $30 = tempRet0;
       ___clang_call_terminate($29);
       // unreachable;
      } else {
       $$0 = 0;
      }
     }
    }
   } else {
    $$0 = -1;
   }
   return ($$0|0);
  }
 } while(0);
 if ((label|0) == 16) {
  $31 = ___cxa_find_matching_catch(0|0)|0;
  $32 = tempRet0;
  $eh$lpad$body$indexZ2D = $31;
 }
 ___clang_call_terminate($eh$lpad$body$indexZ2D);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$st,$frm,$frm_end,$mx) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $$04 = 0, $$15 = 0, $$lcssa = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nbytes$0 = 0, $nbytes$0$lcssa = 0, $nbytes$1 = 0, $nwchar_t$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $frm_end;
 $1 = ((($this)) + 8|0);
 $$04 = $frm;$nbytes$0 = 0;$nwchar_t$0 = 0;
 L1: while(1) {
  $2 = ($nwchar_t$0>>>0)>=($mx>>>0);
  $3 = ($$04|0)==($frm_end|0);
  $or$cond = $3 | $2;
  if ($or$cond) {
   $nbytes$0$lcssa = $nbytes$0;
   label = 15;
   break;
  }
  $4 = $$04;
  $5 = (($0) - ($4))|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = (_uselocale($6)|0);
  __THREW__ = 0;
  $8 = (invoke_iiii(499,($$04|0),($5|0),($st|0))|0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $$lcssa = $7;
   label = 7;
   break;
  }
  $11 = ($7|0)==(0|0);
  if (!($11)) {
   __THREW__ = 0;
   (invoke_ii(433,($7|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    label = 6;
    break;
   }
  }
  switch ($8|0) {
  case -2: case -1:  {
   $nbytes$0$lcssa = $nbytes$0;
   label = 15;
   break L1;
   break;
  }
  case 0:  {
   $23 = ((($$04)) + 1|0);
   $$15 = $23;$$pn = 1;
   break;
  }
  default: {
   $24 = (($$04) + ($8)|0);
   $$15 = $24;$$pn = $8;
  }
  }
  $nbytes$1 = (($$pn) + ($nbytes$0))|0;
  $25 = (($nwchar_t$0) + 1)|0;
  $$04 = $$15;$nbytes$0 = $nbytes$1;$nwchar_t$0 = $25;
 }
 if ((label|0) == 6) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 }
 else if ((label|0) == 7) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  $18 = ($$lcssa|0)==(0|0);
  if (!($18)) {
   __THREW__ = 0;
   (invoke_ii(433,($$lcssa|0))|0);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $21 = ___cxa_find_matching_catch(0|0)|0;
    $22 = tempRet0;
    ___clang_call_terminate($21);
    // unreachable;
   }
  }
  ___resumeException($16|0);
  // unreachable;
 }
 else if ((label|0) == 15) {
  return ($nbytes$0$lcssa|0);
 }
 return (0)|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $11 = 1;
 } else {
  __THREW__ = 0;
  $3 = (invoke_ii(433,($1|0))|0);
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $12 = ___cxa_find_matching_catch(0|0)|0;
   $13 = tempRet0;
   ___clang_call_terminate($12);
   // unreachable;
  }
  $6 = ($3|0)==(0|0);
  if ($6) {
   $11 = 4;
  } else {
   __THREW__ = 0;
   (invoke_ii(433,($3|0))|0);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $9 = ___cxa_find_matching_catch(0|0)|0;
    $10 = tempRet0;
    ___clang_call_terminate($9);
    // unreachable;
   } else {
    $11 = 4;
   }
  }
 }
 return ($11|0);
}
function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $3 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $2;
 $3 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $3 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $2;
 $3 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 return ($1|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $3 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $2;
 $3 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $3 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $2;
 $3 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 return ($1|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__18numpunctIcEC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = ((($this)) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = (8752);
 $2 = ((($this)) + 8|0);
 HEAP8[$2>>0] = 46;
 $3 = ((($this)) + 9|0);
 HEAP8[$3>>0] = 44;
 $4 = ((($this)) + 12|0);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $5 = (($4) + ($__i$0$i$i<<2)|0);
  HEAP32[$5>>2] = 0;
  $6 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $6;
 }
 return;
}
function __ZNSt3__18numpunctIwEC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = ((($this)) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = (8792);
 $2 = ((($this)) + 8|0);
 HEAP32[$2>>2] = 46;
 $3 = ((($this)) + 12|0);
 HEAP32[$3>>2] = 44;
 $4 = ((($this)) + 16|0);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $5 = (($4) + ($__i$0$i$i<<2)|0);
  HEAP32[$5>>2] = 0;
  $6 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $6;
 }
 return;
}
function __ZNSt3__18numpunctIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8752);
 $0 = ((($this)) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
 return;
}
function __ZNSt3__18numpunctIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18numpunctIcED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__18numpunctIwED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8792);
 $0 = ((($this)) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
 return;
}
function __ZNSt3__18numpunctIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18numpunctIwED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP8[$0>>0]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 9|0);
 $1 = HEAP8[$0>>0]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIcE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result,$0);
 return;
}
function __ZNKSt3__18numpunctIwE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result,$0);
 return;
}
function __ZNKSt3__18numpunctIcE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,20999,4);
 return;
}
function __ZNKSt3__18numpunctIwE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(9364)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,9364,$0);
 return;
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,21004,5);
 return;
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(9384)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,9384,$0);
 return;
}
function __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($iob) {
 $iob = $iob|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($iob)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 switch ($2|0) {
 case 64:  {
  $$0 = 8;
  break;
 }
 case 8:  {
  $$0 = 16;
  break;
 }
 case 0:  {
  $$0 = 0;
  break;
 }
 default: {
  $$0 = 10;
 }
 }
 return ($$0|0);
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$i$i$i = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[1904]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((1904|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[1912]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((1912|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $9 = 9408;
      while(1) {
       $__i$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $8 = (($9) + ($__i$0$i$i$i<<2)|0);
        HEAP32[$8>>2] = 0;
        $10 = (($__i$0$i$i$i) + 1)|0;
        $__i$0$i$i$i = $10;
       }
       $11 = ((($9)) + 12|0);
       $12 = ($11|0)==((9576)|0);
       if ($12) {
        break;
       } else {
        $9 = $11;
       }
      }
      (___cxa_atexit((500|0),(0|0),(___dso_handle|0))|0);
      ___cxa_guard_release((1912|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(501,(9408|0),(21010|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     __THREW__ = 0;
     (invoke_iii(501,((9420)|0),(21017|0))|0);
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if (!($16)) {
      __THREW__ = 0;
      (invoke_iii(501,((9432)|0),(21024|0))|0);
      $17 = __THREW__; __THREW__ = 0;
      $18 = $17&1;
      if (!($18)) {
       __THREW__ = 0;
       (invoke_iii(501,((9444)|0),(21032|0))|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if (!($20)) {
        __THREW__ = 0;
        (invoke_iii(501,((9456)|0),(21042|0))|0);
        $21 = __THREW__; __THREW__ = 0;
        $22 = $21&1;
        if (!($22)) {
         __THREW__ = 0;
         (invoke_iii(501,((9468)|0),(21051|0))|0);
         $23 = __THREW__; __THREW__ = 0;
         $24 = $23&1;
         if (!($24)) {
          __THREW__ = 0;
          (invoke_iii(501,((9480)|0),(21058|0))|0);
          $25 = __THREW__; __THREW__ = 0;
          $26 = $25&1;
          if (!($26)) {
           __THREW__ = 0;
           (invoke_iii(501,((9492)|0),(21067|0))|0);
           $27 = __THREW__; __THREW__ = 0;
           $28 = $27&1;
           if (!($28)) {
            __THREW__ = 0;
            (invoke_iii(501,((9504)|0),(21071|0))|0);
            $29 = __THREW__; __THREW__ = 0;
            $30 = $29&1;
            if (!($30)) {
             __THREW__ = 0;
             (invoke_iii(501,((9516)|0),(21075|0))|0);
             $31 = __THREW__; __THREW__ = 0;
             $32 = $31&1;
             if (!($32)) {
              __THREW__ = 0;
              (invoke_iii(501,((9528)|0),(21079|0))|0);
              $33 = __THREW__; __THREW__ = 0;
              $34 = $33&1;
              if (!($34)) {
               __THREW__ = 0;
               (invoke_iii(501,((9540)|0),(21083|0))|0);
               $35 = __THREW__; __THREW__ = 0;
               $36 = $35&1;
               if (!($36)) {
                __THREW__ = 0;
                (invoke_iii(501,((9552)|0),(21087|0))|0);
                $37 = __THREW__; __THREW__ = 0;
                $38 = $37&1;
                if (!($38)) {
                 __THREW__ = 0;
                 (invoke_iii(501,((9564)|0),(21091|0))|0);
                 $39 = __THREW__; __THREW__ = 0;
                 $40 = $39&1;
                 if (!($40)) {
                  HEAP32[2394] = 9408;
                  ___cxa_guard_release((1904|0));
                  break;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
    $42 = ___cxa_find_matching_catch()|0;
    $43 = tempRet0;
    ___cxa_guard_abort((1904|0));
    ___resumeException($42|0);
    // unreachable;
   }
  }
 } while(0);
 $41 = HEAP32[2394]|0;
 return ($41|0);
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$i$i$i = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[1920]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((1920|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[1928]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((1928|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $9 = 9580;
      while(1) {
       $__i$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $8 = (($9) + ($__i$0$i$i$i<<2)|0);
        HEAP32[$8>>2] = 0;
        $10 = (($__i$0$i$i$i) + 1)|0;
        $__i$0$i$i$i = $10;
       }
       $11 = ((($9)) + 12|0);
       $12 = ($11|0)==((9748)|0);
       if ($12) {
        break;
       } else {
        $9 = $11;
       }
      }
      (___cxa_atexit((502|0),(0|0),(___dso_handle|0))|0);
      ___cxa_guard_release((1928|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(503,(9580|0),(9748|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     __THREW__ = 0;
     (invoke_iii(503,((9592)|0),(9776|0))|0);
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if (!($16)) {
      __THREW__ = 0;
      (invoke_iii(503,((9604)|0),(9804|0))|0);
      $17 = __THREW__; __THREW__ = 0;
      $18 = $17&1;
      if (!($18)) {
       __THREW__ = 0;
       (invoke_iii(503,((9616)|0),(9836|0))|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if (!($20)) {
        __THREW__ = 0;
        (invoke_iii(503,((9628)|0),(9876|0))|0);
        $21 = __THREW__; __THREW__ = 0;
        $22 = $21&1;
        if (!($22)) {
         __THREW__ = 0;
         (invoke_iii(503,((9640)|0),(9912|0))|0);
         $23 = __THREW__; __THREW__ = 0;
         $24 = $23&1;
         if (!($24)) {
          __THREW__ = 0;
          (invoke_iii(503,((9652)|0),(9940|0))|0);
          $25 = __THREW__; __THREW__ = 0;
          $26 = $25&1;
          if (!($26)) {
           __THREW__ = 0;
           (invoke_iii(503,((9664)|0),(9976|0))|0);
           $27 = __THREW__; __THREW__ = 0;
           $28 = $27&1;
           if (!($28)) {
            __THREW__ = 0;
            (invoke_iii(503,((9676)|0),(9992|0))|0);
            $29 = __THREW__; __THREW__ = 0;
            $30 = $29&1;
            if (!($30)) {
             __THREW__ = 0;
             (invoke_iii(503,((9688)|0),(10008|0))|0);
             $31 = __THREW__; __THREW__ = 0;
             $32 = $31&1;
             if (!($32)) {
              __THREW__ = 0;
              (invoke_iii(503,((9700)|0),(10024|0))|0);
              $33 = __THREW__; __THREW__ = 0;
              $34 = $33&1;
              if (!($34)) {
               __THREW__ = 0;
               (invoke_iii(503,((9712)|0),(10040|0))|0);
               $35 = __THREW__; __THREW__ = 0;
               $36 = $35&1;
               if (!($36)) {
                __THREW__ = 0;
                (invoke_iii(503,((9724)|0),(10056|0))|0);
                $37 = __THREW__; __THREW__ = 0;
                $38 = $37&1;
                if (!($38)) {
                 __THREW__ = 0;
                 (invoke_iii(503,((9736)|0),(10072|0))|0);
                 $39 = __THREW__; __THREW__ = 0;
                 $40 = $39&1;
                 if (!($40)) {
                  HEAP32[2522] = 9580;
                  ___cxa_guard_release((1920|0));
                  break;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
    $42 = ___cxa_find_matching_catch()|0;
    $43 = tempRet0;
    ___cxa_guard_abort((1920|0));
    ___resumeException($42|0);
    // unreachable;
   }
  }
 } while(0);
 $41 = HEAP32[2522]|0;
 return ($41|0);
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$i$i$i = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[1936]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $2 = (___cxa_guard_acquire((1936|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[1944]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((1944|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $9 = 10092;
      while(1) {
       $__i$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $8 = (($9) + ($__i$0$i$i$i<<2)|0);
        HEAP32[$8>>2] = 0;
        $10 = (($__i$0$i$i$i) + 1)|0;
        $__i$0$i$i$i = $10;
       }
       $11 = ((($9)) + 12|0);
       $12 = ($11|0)==((10380)|0);
       if ($12) {
        break;
       } else {
        $9 = $11;
       }
      }
      (___cxa_atexit((504|0),(0|0),(___dso_handle|0))|0);
      ___cxa_guard_release((1944|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(501,(10092|0),(21095|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    do {
     if (!($14)) {
      __THREW__ = 0;
      (invoke_iii(501,((10104)|0),(21103|0))|0);
      $15 = __THREW__; __THREW__ = 0;
      $16 = $15&1;
      if (!($16)) {
       __THREW__ = 0;
       (invoke_iii(501,((10116)|0),(21112|0))|0);
       $17 = __THREW__; __THREW__ = 0;
       $18 = $17&1;
       if (!($18)) {
        __THREW__ = 0;
        (invoke_iii(501,((10128)|0),(21118|0))|0);
        $19 = __THREW__; __THREW__ = 0;
        $20 = $19&1;
        if (!($20)) {
         __THREW__ = 0;
         (invoke_iii(501,((10140)|0),(21124|0))|0);
         $21 = __THREW__; __THREW__ = 0;
         $22 = $21&1;
         if (!($22)) {
          __THREW__ = 0;
          (invoke_iii(501,((10152)|0),(21128|0))|0);
          $23 = __THREW__; __THREW__ = 0;
          $24 = $23&1;
          if (!($24)) {
           __THREW__ = 0;
           (invoke_iii(501,((10164)|0),(21133|0))|0);
           $25 = __THREW__; __THREW__ = 0;
           $26 = $25&1;
           if (!($26)) {
            __THREW__ = 0;
            (invoke_iii(501,((10176)|0),(21138|0))|0);
            $27 = __THREW__; __THREW__ = 0;
            $28 = $27&1;
            if (!($28)) {
             __THREW__ = 0;
             (invoke_iii(501,((10188)|0),(21145|0))|0);
             $29 = __THREW__; __THREW__ = 0;
             $30 = $29&1;
             if (!($30)) {
              __THREW__ = 0;
              (invoke_iii(501,((10200)|0),(21155|0))|0);
              $31 = __THREW__; __THREW__ = 0;
              $32 = $31&1;
              if (!($32)) {
               __THREW__ = 0;
               (invoke_iii(501,((10212)|0),(21163|0))|0);
               $33 = __THREW__; __THREW__ = 0;
               $34 = $33&1;
               if (!($34)) {
                __THREW__ = 0;
                (invoke_iii(501,((10224)|0),(21172|0))|0);
                $35 = __THREW__; __THREW__ = 0;
                $36 = $35&1;
                if (!($36)) {
                 __THREW__ = 0;
                 (invoke_iii(501,((10236)|0),(21181|0))|0);
                 $37 = __THREW__; __THREW__ = 0;
                 $38 = $37&1;
                 if (!($38)) {
                  __THREW__ = 0;
                  (invoke_iii(501,((10248)|0),(21185|0))|0);
                  $39 = __THREW__; __THREW__ = 0;
                  $40 = $39&1;
                  if (!($40)) {
                   __THREW__ = 0;
                   (invoke_iii(501,((10260)|0),(21189|0))|0);
                   $41 = __THREW__; __THREW__ = 0;
                   $42 = $41&1;
                   if (!($42)) {
                    __THREW__ = 0;
                    (invoke_iii(501,((10272)|0),(21193|0))|0);
                    $43 = __THREW__; __THREW__ = 0;
                    $44 = $43&1;
                    if ($44) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(501,((10284)|0),(21124|0))|0);
                    $45 = __THREW__; __THREW__ = 0;
                    $46 = $45&1;
                    if ($46) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(501,((10296)|0),(21197|0))|0);
                    $47 = __THREW__; __THREW__ = 0;
                    $48 = $47&1;
                    if ($48) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(501,((10308)|0),(21201|0))|0);
                    $49 = __THREW__; __THREW__ = 0;
                    $50 = $49&1;
                    if ($50) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(501,((10320)|0),(21205|0))|0);
                    $51 = __THREW__; __THREW__ = 0;
                    $52 = $51&1;
                    if ($52) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(501,((10332)|0),(21209|0))|0);
                    $53 = __THREW__; __THREW__ = 0;
                    $54 = $53&1;
                    if ($54) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(501,((10344)|0),(21213|0))|0);
                    $55 = __THREW__; __THREW__ = 0;
                    $56 = $55&1;
                    if ($56) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(501,((10356)|0),(21217|0))|0);
                    $57 = __THREW__; __THREW__ = 0;
                    $58 = $57&1;
                    if ($58) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(501,((10368)|0),(21221|0))|0);
                    $59 = __THREW__; __THREW__ = 0;
                    $60 = $59&1;
                    if ($60) {
                     break;
                    }
                    HEAP32[2595] = 10092;
                    ___cxa_guard_release((1936|0));
                    break L1;
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    } while(0);
    $62 = ___cxa_find_matching_catch()|0;
    $63 = tempRet0;
    ___cxa_guard_abort((1936|0));
    ___resumeException($62|0);
    // unreachable;
   }
  }
 } while(0);
 $61 = HEAP32[2595]|0;
 return ($61|0);
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$i$i$i = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[1952]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $2 = (___cxa_guard_acquire((1952|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[1960]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((1960|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $9 = 10384;
      while(1) {
       $__i$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $8 = (($9) + ($__i$0$i$i$i<<2)|0);
        HEAP32[$8>>2] = 0;
        $10 = (($__i$0$i$i$i) + 1)|0;
        $__i$0$i$i$i = $10;
       }
       $11 = ((($9)) + 12|0);
       $12 = ($11|0)==((10672)|0);
       if ($12) {
        break;
       } else {
        $9 = $11;
       }
      }
      (___cxa_atexit((505|0),(0|0),(___dso_handle|0))|0);
      ___cxa_guard_release((1960|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(503,(10384|0),(10672|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    do {
     if (!($14)) {
      __THREW__ = 0;
      (invoke_iii(503,((10396)|0),(10704|0))|0);
      $15 = __THREW__; __THREW__ = 0;
      $16 = $15&1;
      if (!($16)) {
       __THREW__ = 0;
       (invoke_iii(503,((10408)|0),(10740|0))|0);
       $17 = __THREW__; __THREW__ = 0;
       $18 = $17&1;
       if (!($18)) {
        __THREW__ = 0;
        (invoke_iii(503,((10420)|0),(10764|0))|0);
        $19 = __THREW__; __THREW__ = 0;
        $20 = $19&1;
        if (!($20)) {
         __THREW__ = 0;
         (invoke_iii(503,((10432)|0),(10788|0))|0);
         $21 = __THREW__; __THREW__ = 0;
         $22 = $21&1;
         if (!($22)) {
          __THREW__ = 0;
          (invoke_iii(503,((10444)|0),(10804|0))|0);
          $23 = __THREW__; __THREW__ = 0;
          $24 = $23&1;
          if (!($24)) {
           __THREW__ = 0;
           (invoke_iii(503,((10456)|0),(10824|0))|0);
           $25 = __THREW__; __THREW__ = 0;
           $26 = $25&1;
           if (!($26)) {
            __THREW__ = 0;
            (invoke_iii(503,((10468)|0),(10844|0))|0);
            $27 = __THREW__; __THREW__ = 0;
            $28 = $27&1;
            if (!($28)) {
             __THREW__ = 0;
             (invoke_iii(503,((10480)|0),(10872|0))|0);
             $29 = __THREW__; __THREW__ = 0;
             $30 = $29&1;
             if (!($30)) {
              __THREW__ = 0;
              (invoke_iii(503,((10492)|0),(10912|0))|0);
              $31 = __THREW__; __THREW__ = 0;
              $32 = $31&1;
              if (!($32)) {
               __THREW__ = 0;
               (invoke_iii(503,((10504)|0),(10944|0))|0);
               $33 = __THREW__; __THREW__ = 0;
               $34 = $33&1;
               if (!($34)) {
                __THREW__ = 0;
                (invoke_iii(503,((10516)|0),(10980|0))|0);
                $35 = __THREW__; __THREW__ = 0;
                $36 = $35&1;
                if (!($36)) {
                 __THREW__ = 0;
                 (invoke_iii(503,((10528)|0),(11016|0))|0);
                 $37 = __THREW__; __THREW__ = 0;
                 $38 = $37&1;
                 if (!($38)) {
                  __THREW__ = 0;
                  (invoke_iii(503,((10540)|0),(11032|0))|0);
                  $39 = __THREW__; __THREW__ = 0;
                  $40 = $39&1;
                  if (!($40)) {
                   __THREW__ = 0;
                   (invoke_iii(503,((10552)|0),(11048|0))|0);
                   $41 = __THREW__; __THREW__ = 0;
                   $42 = $41&1;
                   if (!($42)) {
                    __THREW__ = 0;
                    (invoke_iii(503,((10564)|0),(11064|0))|0);
                    $43 = __THREW__; __THREW__ = 0;
                    $44 = $43&1;
                    if ($44) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(503,((10576)|0),(10788|0))|0);
                    $45 = __THREW__; __THREW__ = 0;
                    $46 = $45&1;
                    if ($46) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(503,((10588)|0),(11080|0))|0);
                    $47 = __THREW__; __THREW__ = 0;
                    $48 = $47&1;
                    if ($48) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(503,((10600)|0),(11096|0))|0);
                    $49 = __THREW__; __THREW__ = 0;
                    $50 = $49&1;
                    if ($50) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(503,((10612)|0),(11112|0))|0);
                    $51 = __THREW__; __THREW__ = 0;
                    $52 = $51&1;
                    if ($52) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(503,((10624)|0),(11128|0))|0);
                    $53 = __THREW__; __THREW__ = 0;
                    $54 = $53&1;
                    if ($54) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(503,((10636)|0),(11144|0))|0);
                    $55 = __THREW__; __THREW__ = 0;
                    $56 = $55&1;
                    if ($56) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(503,((10648)|0),(11160|0))|0);
                    $57 = __THREW__; __THREW__ = 0;
                    $58 = $57&1;
                    if ($58) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(503,((10660)|0),(11176|0))|0);
                    $59 = __THREW__; __THREW__ = 0;
                    $60 = $59&1;
                    if ($60) {
                     break;
                    }
                    HEAP32[2798] = 10384;
                    ___cxa_guard_release((1952|0));
                    break L1;
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    } while(0);
    $62 = ___cxa_find_matching_catch()|0;
    $63 = tempRet0;
    ___cxa_guard_abort((1952|0));
    ___resumeException($62|0);
    // unreachable;
   }
  }
 } while(0);
 $61 = HEAP32[2798]|0;
 return ($61|0);
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__i$0$i$i$i = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[1968]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((1968|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[1976]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((1976|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $9 = 11196;
      while(1) {
       $__i$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $8 = (($9) + ($__i$0$i$i$i<<2)|0);
        HEAP32[$8>>2] = 0;
        $10 = (($__i$0$i$i$i) + 1)|0;
        $__i$0$i$i$i = $10;
       }
       $11 = ((($9)) + 12|0);
       $12 = ($11|0)==((11484)|0);
       if ($12) {
        break;
       } else {
        $9 = $11;
       }
      }
      (___cxa_atexit((506|0),(0|0),(___dso_handle|0))|0);
      ___cxa_guard_release((1976|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(501,(11196|0),(21225|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     __THREW__ = 0;
     (invoke_iii(501,((11208)|0),(21228|0))|0);
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if (!($16)) {
      HEAP32[2871] = 11196;
      ___cxa_guard_release((1968|0));
      break;
     }
    }
    $18 = ___cxa_find_matching_catch()|0;
    $19 = tempRet0;
    ___cxa_guard_abort((1968|0));
    ___resumeException($18|0);
    // unreachable;
   }
  }
 } while(0);
 $17 = HEAP32[2871]|0;
 return ($17|0);
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__i$0$i$i$i = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[1984]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((1984|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[1992]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((1992|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $9 = 11488;
      while(1) {
       $__i$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $8 = (($9) + ($__i$0$i$i$i<<2)|0);
        HEAP32[$8>>2] = 0;
        $10 = (($__i$0$i$i$i) + 1)|0;
        $__i$0$i$i$i = $10;
       }
       $11 = ((($9)) + 12|0);
       $12 = ($11|0)==((11776)|0);
       if ($12) {
        break;
       } else {
        $9 = $11;
       }
      }
      (___cxa_atexit((507|0),(0|0),(___dso_handle|0))|0);
      ___cxa_guard_release((1992|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(503,(11488|0),(11776|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     __THREW__ = 0;
     (invoke_iii(503,((11500)|0),(11788|0))|0);
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if (!($16)) {
      HEAP32[2950] = 11488;
      ___cxa_guard_release((1984|0));
      break;
     }
    }
    $18 = ___cxa_find_matching_catch()|0;
    $19 = tempRet0;
    ___cxa_guard_abort((1984|0));
    ___resumeException($18|0);
    // unreachable;
   }
  }
 } while(0);
 $17 = HEAP32[2950]|0;
 return ($17|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2000]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2000|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_viii(345,(11804|0),(21231|0),8);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $6 = ___cxa_find_matching_catch()|0;
     $7 = tempRet0;
     ___cxa_guard_abort((2000|0));
     ___resumeException($6|0);
     // unreachable;
    } else {
     (___cxa_atexit((508|0),(11804|0),(___dso_handle|0))|0);
     ___cxa_guard_release((2000|0));
     break;
    }
   }
  }
 } while(0);
 return (11804|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2008]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2008|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_ii(509,(11816|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     __THREW__ = 0;
     invoke_viii(510,(11852|0),(11816|0),($4|0));
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if (!($8)) {
      (___cxa_atexit((511|0),(11852|0),(___dso_handle|0))|0);
      ___cxa_guard_release((2008|0));
      break;
     }
    }
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    ___cxa_guard_abort((2008|0));
    ___resumeException($9|0);
    // unreachable;
   }
  }
 } while(0);
 return (11852|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2016]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2016|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_viii(345,(11864|0),(21240|0),8);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $6 = ___cxa_find_matching_catch()|0;
     $7 = tempRet0;
     ___cxa_guard_abort((2016|0));
     ___resumeException($6|0);
     // unreachable;
    } else {
     (___cxa_atexit((508|0),(11864|0),(___dso_handle|0))|0);
     ___cxa_guard_release((2016|0));
     break;
    }
   }
  }
 } while(0);
 return (11864|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2024]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2024|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_ii(509,(11876|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     __THREW__ = 0;
     invoke_viii(510,(11912|0),(11876|0),($4|0));
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if (!($8)) {
      (___cxa_atexit((511|0),(11912|0),(___dso_handle|0))|0);
      ___cxa_guard_release((2024|0));
      break;
     }
    }
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    ___cxa_guard_abort((2024|0));
    ___resumeException($9|0);
    // unreachable;
   }
  }
 } while(0);
 return (11912|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2032]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2032|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_viii(345,(11924|0),(21249|0),20);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $6 = ___cxa_find_matching_catch()|0;
     $7 = tempRet0;
     ___cxa_guard_abort((2032|0));
     ___resumeException($6|0);
     // unreachable;
    } else {
     (___cxa_atexit((508|0),(11924|0),(___dso_handle|0))|0);
     ___cxa_guard_release((2032|0));
     break;
    }
   }
  }
 } while(0);
 return (11924|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2040]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2040|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_ii(509,(11936|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     __THREW__ = 0;
     invoke_viii(510,(12020|0),(11936|0),($4|0));
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if (!($8)) {
      (___cxa_atexit((511|0),(12020|0),(___dso_handle|0))|0);
      ___cxa_guard_release((2040|0));
      break;
     }
    }
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    ___cxa_guard_abort((2040|0));
    ___resumeException($9|0);
    // unreachable;
   }
  }
 } while(0);
 return (12020|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2048]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2048|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_viii(345,(12032|0),(21270|0),11);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $6 = ___cxa_find_matching_catch()|0;
     $7 = tempRet0;
     ___cxa_guard_abort((2048|0));
     ___resumeException($6|0);
     // unreachable;
    } else {
     (___cxa_atexit((508|0),(12032|0),(___dso_handle|0))|0);
     ___cxa_guard_release((2048|0));
     break;
    }
   }
  }
 } while(0);
 return (12032|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2056]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2056|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_ii(509,(12044|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     __THREW__ = 0;
     invoke_viii(510,(12092|0),(12044|0),($4|0));
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if (!($8)) {
      (___cxa_atexit((511|0),(12092|0),(___dso_handle|0))|0);
      ___cxa_guard_release((2056|0));
      break;
     }
    }
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    ___cxa_guard_abort((2056|0));
    ___resumeException($9|0);
    // unreachable;
   }
  }
 } while(0);
 return (12092|0);
}
function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8672);
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_i(417)|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if (!($4)) {
   $5 = ($1|0)==($2|0);
   if (!($5)) {
    $6 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi(431,($6|0));
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     break;
    }
   }
   return;
  }
 } while(0);
 $9 = ___cxa_find_matching_catch(0|0)|0;
 $10 = tempRet0;
 ___clang_call_terminate($9);
 // unreachable;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$0 = 0, $$0$i$i = 0, $$041 = 0, $$lcssa = 0, $$lcssa99 = 0, $$ph$ph = 0, $$pre$i$2$i$i$11 = 0, $$pre$i$2$i$i$11$lcssa = 0, $$pre$i$i$i = 0, $$pre$i$i$i$7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0;
 var $__consume$0$off0 = 0, $__consume$2$off0 = 0, $__indx$0 = 0, $__kc$0 = 0, $__ky$0 = 0, $__ky1$0 = 0, $__ky2$0 = 0, $__n_does_match$0 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$3 = 0, $__n_does_match$5 = 0, $__n_does_match$6 = 0, $__n_does_match$7 = 0, $__n_might_match$0 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$3 = 0;
 var $__n_might_match$5 = 0, $__st$0 = 0, $__st$1 = 0, $__st$2 = 0, $__st$3 = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 do {
  if ($4) {
   $5 = (_malloc($3)|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    __THREW__ = 0;
    invoke_v(423);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $$ph$ph = 0;
     label = 6;
     break;
    }
   }
   $18 = $5;
   $186 = $18;$__status$0 = $5;
   label = 11;
  } else {
   $186 = 0;$__status$0 = $__statbuf;
   label = 11;
  }
 } while(0);
 L6: do {
  if ((label|0) == 11) {
   $__ky$0 = $__kb;$__n_does_match$0 = 0;$__n_might_match$0 = $3;$__st$0 = $__status$0;
   while(1) {
    $19 = ($__ky$0|0)==($__ke|0);
    if ($19) {
     $__n_does_match$0$lcssa = $__n_does_match$0;$__n_might_match$0$lcssa = $__n_might_match$0;
     break;
    }
    $20 = HEAP8[$__ky$0>>0]|0;
    $21 = $20 & 1;
    $22 = ($21<<24>>24)==(0);
    if ($22) {
     $25 = $20&255;
     $26 = $25 >>> 1;
     $27 = $26;
    } else {
     $23 = ((($__ky$0)) + 4|0);
     $24 = HEAP32[$23>>2]|0;
     $27 = $24;
    }
    $28 = ($27|0)==(0);
    if ($28) {
     HEAP8[$__st$0>>0] = 2;
     $29 = (($__n_might_match$0) + -1)|0;
     $30 = (($__n_does_match$0) + 1)|0;
     $__n_does_match$1 = $30;$__n_might_match$1 = $29;
    } else {
     HEAP8[$__st$0>>0] = 1;
     $__n_does_match$1 = $__n_does_match$0;$__n_might_match$1 = $__n_might_match$0;
    }
    $31 = ((($__ky$0)) + 12|0);
    $32 = ((($__st$0)) + 1|0);
    $__ky$0 = $31;$__n_does_match$0 = $__n_does_match$1;$__n_might_match$0 = $__n_might_match$1;$__st$0 = $32;
   }
   $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
   L20: while(1) {
    $33 = HEAP32[$__b>>2]|0;
    $34 = ($33|0)==(0|0);
    do {
     if ($34) {
      $47 = 0;
     } else {
      $35 = ((($33)) + 12|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = ((($33)) + 16|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = ($36|0)==($38|0);
      if ($39) {
       $40 = HEAP32[$33>>2]|0;
       $41 = ((($40)) + 36|0);
       $42 = HEAP32[$41>>2]|0;
       __THREW__ = 0;
       $43 = (invoke_ii($42|0,($33|0))|0);
       $44 = __THREW__; __THREW__ = 0;
       $45 = $44&1;
       if ($45) {
        label = 5;
        break L20;
       }
       $46 = ($43|0)==(-1);
       if ($46) {
        HEAP32[$__b>>2] = 0;
        $47 = 0;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $47 = $$pre$i$i$i;
        break;
       }
      } else {
       $47 = $33;
      }
     }
    } while(0);
    $48 = ($47|0)==(0|0);
    $49 = HEAP32[$__e>>2]|0;
    $50 = ($49|0)==(0|0);
    if ($50) {
     $$pre$i$2$i$i$11 = 0;
    } else {
     $51 = ((($49)) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ((($49)) + 16|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($52|0)==($54|0);
     if ($55) {
      $56 = HEAP32[$49>>2]|0;
      $57 = ((($56)) + 36|0);
      $58 = HEAP32[$57>>2]|0;
      __THREW__ = 0;
      $59 = (invoke_ii($58|0,($49|0))|0);
      $60 = __THREW__; __THREW__ = 0;
      $61 = $60&1;
      if ($61) {
       label = 5;
       break;
      }
      $62 = ($59|0)==(-1);
      if ($62) {
       HEAP32[$__e>>2] = 0;
       $$pre$i$2$i$i$11 = 0;
      } else {
       $$pre$i$2$i$i$11 = $49;
      }
     } else {
      $$pre$i$2$i$i$11 = $49;
     }
    }
    $63 = ($$pre$i$2$i$i$11|0)==(0|0);
    $tmp$i$i = $48 ^ $63;
    $64 = ($__n_might_match$2|0)!=(0);
    $65 = $64 & $tmp$i$i;
    $66 = HEAP32[$__b>>2]|0;
    if (!($65)) {
     $$lcssa = $63;$$lcssa99 = $66;$$pre$i$2$i$i$11$lcssa = $$pre$i$2$i$i$11;
     label = 33;
     break;
    }
    $94 = ((($66)) + 12|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ((($66)) + 16|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($95|0)==($97|0);
    if ($98) {
     $99 = HEAP32[$66>>2]|0;
     $100 = ((($99)) + 36|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     $102 = (invoke_ii($101|0,($66|0))|0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 5;
      break;
     } else {
      $$0$i$i = $102;
     }
    } else {
     $105 = HEAP8[$95>>0]|0;
     $106 = $105&255;
     $$0$i$i = $106;
    }
    $107 = $$0$i$i&255;
    if ($__case_sensitive) {
     $__c$0 = $107;
    } else {
     $108 = HEAP32[$__ct>>2]|0;
     $109 = ((($108)) + 12|0);
     $110 = HEAP32[$109>>2]|0;
     __THREW__ = 0;
     $111 = (invoke_iii($110|0,($__ct|0),($107|0))|0);
     $112 = __THREW__; __THREW__ = 0;
     $113 = $112&1;
     if ($113) {
      label = 5;
      break;
     } else {
      $__c$0 = $111;
     }
    }
    $114 = (($__indx$0) + 1)|0;
    $__consume$0$off0 = 0;$__ky1$0 = $__kb;$__n_does_match$3 = $__n_does_match$2;$__n_might_match$3 = $__n_might_match$2;$__st$1 = $__status$0;
    while(1) {
     $115 = ($__ky1$0|0)==($__ke|0);
     if ($115) {
      break;
     }
     $116 = HEAP8[$__st$1>>0]|0;
     $117 = ($116<<24>>24)==(1);
     do {
      if ($117) {
       $118 = HEAP8[$__ky1$0>>0]|0;
       $119 = $118 & 1;
       $120 = ($119<<24>>24)==(0);
       if ($120) {
        $123 = ((($__ky1$0)) + 1|0);
        $125 = $123;
       } else {
        $121 = ((($__ky1$0)) + 8|0);
        $122 = HEAP32[$121>>2]|0;
        $125 = $122;
       }
       $124 = (($125) + ($__indx$0)|0);
       $126 = HEAP8[$124>>0]|0;
       if ($__case_sensitive) {
        $__kc$0 = $126;
       } else {
        $127 = HEAP32[$__ct>>2]|0;
        $128 = ((($127)) + 12|0);
        $129 = HEAP32[$128>>2]|0;
        __THREW__ = 0;
        $130 = (invoke_iii($129|0,($__ct|0),($126|0))|0);
        $131 = __THREW__; __THREW__ = 0;
        $132 = $131&1;
        if ($132) {
         label = 4;
         break L20;
        } else {
         $__kc$0 = $130;
        }
       }
       $133 = ($__c$0<<24>>24)==($__kc$0<<24>>24);
       if (!($133)) {
        HEAP8[$__st$1>>0] = 0;
        $145 = (($__n_might_match$3) + -1)|0;
        $__consume$2$off0 = $__consume$0$off0;$__n_does_match$5 = $__n_does_match$3;$__n_might_match$5 = $145;
        break;
       }
       $134 = HEAP8[$__ky1$0>>0]|0;
       $135 = $134 & 1;
       $136 = ($135<<24>>24)==(0);
       if ($136) {
        $139 = $134&255;
        $140 = $139 >>> 1;
        $141 = $140;
       } else {
        $137 = ((($__ky1$0)) + 4|0);
        $138 = HEAP32[$137>>2]|0;
        $141 = $138;
       }
       $142 = ($141|0)==($114|0);
       if ($142) {
        HEAP8[$__st$1>>0] = 2;
        $143 = (($__n_might_match$3) + -1)|0;
        $144 = (($__n_does_match$3) + 1)|0;
        $__consume$2$off0 = 1;$__n_does_match$5 = $144;$__n_might_match$5 = $143;
       } else {
        $__consume$2$off0 = 1;$__n_does_match$5 = $__n_does_match$3;$__n_might_match$5 = $__n_might_match$3;
       }
      } else {
       $__consume$2$off0 = $__consume$0$off0;$__n_does_match$5 = $__n_does_match$3;$__n_might_match$5 = $__n_might_match$3;
      }
     } while(0);
     $146 = ((($__ky1$0)) + 12|0);
     $147 = ((($__st$1)) + 1|0);
     $__consume$0$off0 = $__consume$2$off0;$__ky1$0 = $146;$__n_does_match$3 = $__n_does_match$5;$__n_might_match$3 = $__n_might_match$5;$__st$1 = $147;
    }
    if (!($__consume$0$off0)) {
     $__indx$0 = $114;$__n_does_match$2 = $__n_does_match$3;$__n_might_match$2 = $__n_might_match$3;
     continue;
    }
    $148 = HEAP32[$__b>>2]|0;
    $149 = ((($148)) + 12|0);
    $150 = HEAP32[$149>>2]|0;
    $151 = ((($148)) + 16|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($150|0)==($152|0);
    if ($153) {
     $154 = HEAP32[$148>>2]|0;
     $155 = ((($154)) + 40|0);
     $156 = HEAP32[$155>>2]|0;
     __THREW__ = 0;
     (invoke_ii($156|0,($148|0))|0);
     $157 = __THREW__; __THREW__ = 0;
     $158 = $157&1;
     if ($158) {
      label = 5;
      break;
     }
    } else {
     $159 = ((($150)) + 1|0);
     HEAP32[$149>>2] = $159;
    }
    $160 = (($__n_does_match$3) + ($__n_might_match$3))|0;
    $161 = ($160>>>0)>(1);
    if ($161) {
     $__ky2$0 = $__kb;$__n_does_match$6 = $__n_does_match$3;$__st$2 = $__status$0;
    } else {
     $__indx$0 = $114;$__n_does_match$2 = $__n_does_match$3;$__n_might_match$2 = $__n_might_match$3;
     continue;
    }
    while(1) {
     $162 = ($__ky2$0|0)==($__ke|0);
     if ($162) {
      $__indx$0 = $114;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$3;
      continue L20;
     }
     $163 = HEAP8[$__st$2>>0]|0;
     $164 = ($163<<24>>24)==(2);
     if ($164) {
      $165 = HEAP8[$__ky2$0>>0]|0;
      $166 = $165 & 1;
      $167 = ($166<<24>>24)==(0);
      if ($167) {
       $170 = $165&255;
       $171 = $170 >>> 1;
       $172 = $171;
      } else {
       $168 = ((($__ky2$0)) + 4|0);
       $169 = HEAP32[$168>>2]|0;
       $172 = $169;
      }
      $173 = ($172|0)==($114|0);
      if ($173) {
       $__n_does_match$7 = $__n_does_match$6;
      } else {
       HEAP8[$__st$2>>0] = 0;
       $174 = (($__n_does_match$6) + -1)|0;
       $__n_does_match$7 = $174;
      }
     } else {
      $__n_does_match$7 = $__n_does_match$6;
     }
     $175 = ((($__ky2$0)) + 12|0);
     $176 = ((($__st$2)) + 1|0);
     $__ky2$0 = $175;$__n_does_match$6 = $__n_does_match$7;$__st$2 = $176;
    }
   }
   if ((label|0) == 4) {
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    $15 = $186;$lpad$phi$index = $9;$lpad$phi$index3 = $10;
    break;
   }
   else if ((label|0) == 5) {
    $11 = ___cxa_find_matching_catch()|0;
    $12 = tempRet0;
    $15 = $186;$lpad$phi$index = $11;$lpad$phi$index3 = $12;
    break;
   }
   else if ((label|0) == 33) {
    $67 = ($$lcssa99|0)==(0|0);
    do {
     if ($67) {
      $80 = 0;
     } else {
      $68 = ((($$lcssa99)) + 12|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ((($$lcssa99)) + 16|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = ($69|0)==($71|0);
      if ($72) {
       $73 = HEAP32[$$lcssa99>>2]|0;
       $74 = ((($73)) + 36|0);
       $75 = HEAP32[$74>>2]|0;
       __THREW__ = 0;
       $76 = (invoke_ii($75|0,($$lcssa99|0))|0);
       $77 = __THREW__; __THREW__ = 0;
       $78 = $77&1;
       if ($78) {
        $$ph$ph = $186;
        label = 6;
        break L6;
       }
       $79 = ($76|0)==(-1);
       if ($79) {
        HEAP32[$__b>>2] = 0;
        $80 = 0;
        break;
       } else {
        $$pre$i$i$i$7 = HEAP32[$__b>>2]|0;
        $80 = $$pre$i$i$i$7;
        break;
       }
      } else {
       $80 = $$lcssa99;
      }
     }
    } while(0);
    $81 = ($80|0)==(0|0);
    do {
     if ($$lcssa) {
      label = 79;
     } else {
      $82 = ((($$pre$i$2$i$i$11$lcssa)) + 12|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = ((($$pre$i$2$i$i$11$lcssa)) + 16|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = ($83|0)==($85|0);
      if ($86) {
       $87 = HEAP32[$$pre$i$2$i$i$11$lcssa>>2]|0;
       $88 = ((($87)) + 36|0);
       $89 = HEAP32[$88>>2]|0;
       __THREW__ = 0;
       $90 = (invoke_ii($89|0,($$pre$i$2$i$i$11$lcssa|0))|0);
       $91 = __THREW__; __THREW__ = 0;
       $92 = $91&1;
       if ($92) {
        $$ph$ph = $186;
        label = 6;
        break L6;
       }
       $93 = ($90|0)==(-1);
       if ($93) {
        HEAP32[$__e>>2] = 0;
        label = 79;
        break;
       }
      }
      if ($81) {
       $$0 = $__kb;$__st$3 = $__status$0;
      } else {
       label = 80;
      }
     }
    } while(0);
    if ((label|0) == 79) {
     if ($81) {
      label = 80;
     } else {
      $$0 = $__kb;$__st$3 = $__status$0;
     }
    }
    if ((label|0) == 80) {
     $177 = HEAP32[$__err>>2]|0;
     $178 = $177 | 2;
     HEAP32[$__err>>2] = $178;
     $$0 = $__kb;$__st$3 = $__status$0;
    }
    while(1) {
     $179 = ($$0|0)==($__ke|0);
     if ($179) {
      label = 84;
      break;
     }
     $180 = HEAP8[$__st$3>>0]|0;
     $181 = ($180<<24>>24)==(2);
     if ($181) {
      $$041 = $$0;
      break;
     }
     $182 = ((($$0)) + 12|0);
     $183 = ((($__st$3)) + 1|0);
     $$0 = $182;$__st$3 = $183;
    }
    if ((label|0) == 84) {
     $184 = HEAP32[$__err>>2]|0;
     $185 = $184 | 4;
     HEAP32[$__err>>2] = $185;
     $$041 = $__ke;
    }
    $187 = ($186|0)==(0);
    if (!($187)) {
     $188 = $186;
     _free($188);
    }
    STACKTOP = sp;return ($$041|0);
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $15 = $$ph$ph;$lpad$phi$index = $13;$lpad$phi$index3 = $14;
 }
 $16 = ($15|0)==(0);
 if (!($16)) {
  $17 = $15;
  _free($17);
 }
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$2$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$4 = 0, $$pre$i$i$i$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i$19 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(416,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L8: do {
  if ($10) {
   label = 28;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i$4 = $$pre;$__a$0 = $17;
   L10: while(1) {
    $20 = ($$pre$i$i$i$4|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i$4)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i$4)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i$4>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i$4|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 27;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i$4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i$4;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 19;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$2$i$i = $34;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
        break L10;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 27;
       break L10;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 19;
       break;
      } else {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$2$i$i = $34;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
        break L10;
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     if ($33) {
      $$pre$i$2$i$i = 0;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$18>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 27;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i$19 = (($65) + -1)|0;
      $66 = $phitmp$i$19;
     }
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 27;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$14>>2]|0;
     $73 = $71 ? $16 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 27;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$2$i$i = $156;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 27;
      break;
     } else {
      $$pre$i$i$i$4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i$4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 27) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   if (!($112)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = ((($113)) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(512,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 28;
   } else {
    HEAP32[$__v>>2] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($125) {
     $138 = 0;
    } else {
     $126 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $132 = ((($131)) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($$pre$i$i$i$lcssa|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       label = 28;
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $138 = 0;
      } else {
       $138 = $$pre$i$i$i$lcssa;
      }
     } else {
      $138 = $$pre$i$i$i$lcssa;
     }
    }
    $139 = ($138|0)==(0|0);
    $140 = ($$pre$i$2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 52;
     } else {
      $141 = ((($$pre$i$2$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i$2$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i$2$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i$2$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 28;
        break L8;
       }
       $152 = ($149|0)==(-1);
       if ($152) {
        HEAP32[$__e>>2] = 0;
        label = 52;
        break;
       }
      }
      if (!($139)) {
       label = 53;
      }
     }
    } while(0);
    if ((label|0) == 52) {
     if ($139) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $153 = HEAP32[$__err>>2]|0;
     $154 = $153 | 2;
     HEAP32[$__err>>2] = $154;
    }
    $155 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($155|0);
   }
  }
 } while(0);
 if ((label|0) == 28) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$2$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$4 = 0, $$pre$i$i$i$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0;
 var $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i$19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(416,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L8: do {
  if ($10) {
   label = 28;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i$4 = $$pre;$__a$0 = $17;
   L10: while(1) {
    $20 = ($$pre$i$i$i$4|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i$4)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i$4)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i$4>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i$4|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 27;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i$4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i$4;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 19;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $161 = $34;
        break;
       } else {
        $$pre$i$2$i$i = $34;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
        break L10;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 27;
       break L10;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 19;
       break;
      } else {
       if ($33) {
        $161 = $34;
        break;
       } else {
        $$pre$i$2$i$i = $34;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
        break L10;
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     if ($33) {
      $$pre$i$2$i$i = 0;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$18>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 27;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i$19 = (($65) + -1)|0;
      $66 = $phitmp$i$19;
     }
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 27;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$14>>2]|0;
     $73 = $71 ? $16 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 27;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$2$i$i = $161;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 27;
      break;
     } else {
      $$pre$i$i$i$4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i$4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 27) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   if (!($112)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = ((($113)) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(513,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = tempRet0;
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 28;
   } else {
    $125 = $__v;
    $126 = $125;
    HEAP32[$126>>2] = $121;
    $127 = (($125) + 4)|0;
    $128 = $127;
    HEAP32[$128>>2] = $122;
    $129 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$129,$__err);
    $130 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($130) {
     $143 = 0;
    } else {
     $131 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ($132|0)==($134|0);
     if ($135) {
      $136 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $137 = ((($136)) + 36|0);
      $138 = HEAP32[$137>>2]|0;
      __THREW__ = 0;
      $139 = (invoke_ii($138|0,($$pre$i$i$i$lcssa|0))|0);
      $140 = __THREW__; __THREW__ = 0;
      $141 = $140&1;
      if ($141) {
       label = 28;
       break;
      }
      $142 = ($139|0)==(-1);
      if ($142) {
       HEAP32[$__b>>2] = 0;
       $143 = 0;
      } else {
       $143 = $$pre$i$i$i$lcssa;
      }
     } else {
      $143 = $$pre$i$i$i$lcssa;
     }
    }
    $144 = ($143|0)==(0|0);
    $145 = ($$pre$i$2$i$i|0)==(0|0);
    do {
     if ($145) {
      label = 52;
     } else {
      $146 = ((($$pre$i$2$i$i)) + 12|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ((($$pre$i$2$i$i)) + 16|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ($147|0)==($149|0);
      if ($150) {
       $151 = HEAP32[$$pre$i$2$i$i>>2]|0;
       $152 = ((($151)) + 36|0);
       $153 = HEAP32[$152>>2]|0;
       __THREW__ = 0;
       $154 = (invoke_ii($153|0,($$pre$i$2$i$i|0))|0);
       $155 = __THREW__; __THREW__ = 0;
       $156 = $155&1;
       if ($156) {
        label = 28;
        break L8;
       }
       $157 = ($154|0)==(-1);
       if ($157) {
        HEAP32[$__e>>2] = 0;
        label = 52;
        break;
       }
      }
      if (!($144)) {
       label = 53;
      }
     }
    } while(0);
    if ((label|0) == 52) {
     if ($144) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $158 = HEAP32[$__err>>2]|0;
     $159 = $158 | 2;
     HEAP32[$__err>>2] = $159;
    }
    $160 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($160|0);
   }
  }
 } while(0);
 if ((label|0) == 28) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$2$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$4 = 0, $$pre$i$i$i$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i$19 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(416,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L8: do {
  if ($10) {
   label = 28;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i$4 = $$pre;$__a$0 = $17;
   L10: while(1) {
    $20 = ($$pre$i$i$i$4|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i$4)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i$4)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i$4>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i$4|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 27;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i$4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i$4;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 19;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$2$i$i = $34;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
        break L10;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 27;
       break L10;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 19;
       break;
      } else {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$2$i$i = $34;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
        break L10;
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     if ($33) {
      $$pre$i$2$i$i = 0;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$18>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 27;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i$19 = (($65) + -1)|0;
      $66 = $phitmp$i$19;
     }
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 27;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$14>>2]|0;
     $73 = $71 ? $16 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 27;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$2$i$i = $156;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 27;
      break;
     } else {
      $$pre$i$i$i$4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i$4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 27) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   if (!($112)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = ((($113)) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(514,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 28;
   } else {
    HEAP16[$__v>>1] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($125) {
     $138 = 0;
    } else {
     $126 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $132 = ((($131)) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($$pre$i$i$i$lcssa|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       label = 28;
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $138 = 0;
      } else {
       $138 = $$pre$i$i$i$lcssa;
      }
     } else {
      $138 = $$pre$i$i$i$lcssa;
     }
    }
    $139 = ($138|0)==(0|0);
    $140 = ($$pre$i$2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 52;
     } else {
      $141 = ((($$pre$i$2$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i$2$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i$2$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i$2$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 28;
        break L8;
       }
       $152 = ($149|0)==(-1);
       if ($152) {
        HEAP32[$__e>>2] = 0;
        label = 52;
        break;
       }
      }
      if (!($139)) {
       label = 53;
      }
     }
    } while(0);
    if ((label|0) == 52) {
     if ($139) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $153 = HEAP32[$__err>>2]|0;
     $154 = $153 | 2;
     HEAP32[$__err>>2] = $154;
    }
    $155 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($155|0);
   }
  }
 } while(0);
 if ((label|0) == 28) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$2$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$4 = 0, $$pre$i$i$i$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i$19 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(416,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L8: do {
  if ($10) {
   label = 28;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i$4 = $$pre;$__a$0 = $17;
   L10: while(1) {
    $20 = ($$pre$i$i$i$4|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i$4)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i$4)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i$4>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i$4|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 27;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i$4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i$4;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 19;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$2$i$i = $34;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
        break L10;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 27;
       break L10;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 19;
       break;
      } else {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$2$i$i = $34;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
        break L10;
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     if ($33) {
      $$pre$i$2$i$i = 0;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$18>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 27;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i$19 = (($65) + -1)|0;
      $66 = $phitmp$i$19;
     }
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 27;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$14>>2]|0;
     $73 = $71 ? $16 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 27;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$2$i$i = $156;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 27;
      break;
     } else {
      $$pre$i$i$i$4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i$4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 27) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   if (!($112)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = ((($113)) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(515,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 28;
   } else {
    HEAP32[$__v>>2] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($125) {
     $138 = 0;
    } else {
     $126 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $132 = ((($131)) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($$pre$i$i$i$lcssa|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       label = 28;
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $138 = 0;
      } else {
       $138 = $$pre$i$i$i$lcssa;
      }
     } else {
      $138 = $$pre$i$i$i$lcssa;
     }
    }
    $139 = ($138|0)==(0|0);
    $140 = ($$pre$i$2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 52;
     } else {
      $141 = ((($$pre$i$2$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i$2$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i$2$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i$2$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 28;
        break L8;
       }
       $152 = ($149|0)==(-1);
       if ($152) {
        HEAP32[$__e>>2] = 0;
        label = 52;
        break;
       }
      }
      if (!($139)) {
       label = 53;
      }
     }
    } while(0);
    if ((label|0) == 52) {
     if ($139) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $153 = HEAP32[$__err>>2]|0;
     $154 = $153 | 2;
     HEAP32[$__err>>2] = $154;
    }
    $155 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($155|0);
   }
  }
 } while(0);
 if ((label|0) == 28) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$2$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$4 = 0, $$pre$i$i$i$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i$19 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(416,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L8: do {
  if ($10) {
   label = 28;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i$4 = $$pre;$__a$0 = $17;
   L10: while(1) {
    $20 = ($$pre$i$i$i$4|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i$4)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i$4)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i$4>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i$4|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 27;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i$4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i$4;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 19;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$2$i$i = $34;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
        break L10;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 27;
       break L10;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 19;
       break;
      } else {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$2$i$i = $34;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
        break L10;
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     if ($33) {
      $$pre$i$2$i$i = 0;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$18>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 27;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i$19 = (($65) + -1)|0;
      $66 = $phitmp$i$19;
     }
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 27;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$14>>2]|0;
     $73 = $71 ? $16 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 27;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$2$i$i = $156;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 27;
      break;
     } else {
      $$pre$i$i$i$4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i$4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 27) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   if (!($112)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = ((($113)) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(516,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 28;
   } else {
    HEAP32[$__v>>2] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($125) {
     $138 = 0;
    } else {
     $126 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $132 = ((($131)) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($$pre$i$i$i$lcssa|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       label = 28;
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $138 = 0;
      } else {
       $138 = $$pre$i$i$i$lcssa;
      }
     } else {
      $138 = $$pre$i$i$i$lcssa;
     }
    }
    $139 = ($138|0)==(0|0);
    $140 = ($$pre$i$2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 52;
     } else {
      $141 = ((($$pre$i$2$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i$2$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i$2$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i$2$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 28;
        break L8;
       }
       $152 = ($149|0)==(-1);
       if ($152) {
        HEAP32[$__e>>2] = 0;
        label = 52;
        break;
       }
      }
      if (!($139)) {
       label = 53;
      }
     }
    } while(0);
    if ((label|0) == 52) {
     if ($139) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $153 = HEAP32[$__err>>2]|0;
     $154 = $153 | 2;
     HEAP32[$__err>>2] = $154;
    }
    $155 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($155|0);
   }
  }
 } while(0);
 if ((label|0) == 28) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$2$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$4 = 0, $$pre$i$i$i$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0;
 var $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i$19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(416,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L8: do {
  if ($10) {
   label = 28;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i$4 = $$pre;$__a$0 = $17;
   L10: while(1) {
    $20 = ($$pre$i$i$i$4|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i$4)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i$4)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i$4>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i$4|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 27;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i$4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i$4;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 19;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $161 = $34;
        break;
       } else {
        $$pre$i$2$i$i = $34;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
        break L10;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 27;
       break L10;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 19;
       break;
      } else {
       if ($33) {
        $161 = $34;
        break;
       } else {
        $$pre$i$2$i$i = $34;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
        break L10;
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     if ($33) {
      $$pre$i$2$i$i = 0;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$18>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 27;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i$19 = (($65) + -1)|0;
      $66 = $phitmp$i$19;
     }
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 27;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$14>>2]|0;
     $73 = $71 ? $16 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 27;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$2$i$i = $161;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 27;
      break;
     } else {
      $$pre$i$i$i$4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i$4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 27) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   if (!($112)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = ((($113)) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(517,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = tempRet0;
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 28;
   } else {
    $125 = $__v;
    $126 = $125;
    HEAP32[$126>>2] = $121;
    $127 = (($125) + 4)|0;
    $128 = $127;
    HEAP32[$128>>2] = $122;
    $129 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$129,$__err);
    $130 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($130) {
     $143 = 0;
    } else {
     $131 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ($132|0)==($134|0);
     if ($135) {
      $136 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $137 = ((($136)) + 36|0);
      $138 = HEAP32[$137>>2]|0;
      __THREW__ = 0;
      $139 = (invoke_ii($138|0,($$pre$i$i$i$lcssa|0))|0);
      $140 = __THREW__; __THREW__ = 0;
      $141 = $140&1;
      if ($141) {
       label = 28;
       break;
      }
      $142 = ($139|0)==(-1);
      if ($142) {
       HEAP32[$__b>>2] = 0;
       $143 = 0;
      } else {
       $143 = $$pre$i$i$i$lcssa;
      }
     } else {
      $143 = $$pre$i$i$i$lcssa;
     }
    }
    $144 = ($143|0)==(0|0);
    $145 = ($$pre$i$2$i$i|0)==(0|0);
    do {
     if ($145) {
      label = 52;
     } else {
      $146 = ((($$pre$i$2$i$i)) + 12|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ((($$pre$i$2$i$i)) + 16|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ($147|0)==($149|0);
      if ($150) {
       $151 = HEAP32[$$pre$i$2$i$i>>2]|0;
       $152 = ((($151)) + 36|0);
       $153 = HEAP32[$152>>2]|0;
       __THREW__ = 0;
       $154 = (invoke_ii($153|0,($$pre$i$2$i$i|0))|0);
       $155 = __THREW__; __THREW__ = 0;
       $156 = $155&1;
       if ($156) {
        label = 28;
        break L8;
       }
       $157 = ($154|0)==(-1);
       if ($157) {
        HEAP32[$__e>>2] = 0;
        label = 52;
        break;
       }
      }
      if (!($144)) {
       label = 53;
      }
     }
    } while(0);
    if ((label|0) == 52) {
     if ($144) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $158 = HEAP32[$__err>>2]|0;
     $159 = $158 | 2;
     HEAP32[$__err>>2] = $159;
    }
    $160 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($160|0);
   }
  }
 } while(0);
 if ((label|0) == 28) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$2$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$5 = 0, $$pre$i$i$i$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0;
 var $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i$20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(416,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L8: do {
  if ($9) {
   label = 28;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP8[$__decimal_point>>0]|0;
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i$5 = $$pre;$__a$0 = $16;
   L10: while(1) {
    $20 = ($$pre$i$i$i$5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i$5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i$5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i$5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i$5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 27;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i$5;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i$5;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 19;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$2$i$i = $34;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
        break L10;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 27;
       break L10;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 19;
       break;
      } else {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$2$i$i = $34;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
        break L10;
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     if ($33) {
      $$pre$i$2$i$i = 0;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$17>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 27;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i$20 = (($65) + -1)|0;
      $66 = $phitmp$i$20;
     }
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 27;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$13>>2]|0;
     $73 = $71 ? $15 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 27;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$2$i$i = $158;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 27;
      break;
     } else {
      $$pre$i$i$i$5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i$5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 27) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   $113 = HEAP8[$__in_units>>0]|0;
   $114 = ($113<<24>>24)==(0);
   $or$cond = $114 | $112;
   if (!($or$cond)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = ((($115)) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(518,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 28;
   } else {
    HEAPF32[$__v>>2] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($127) {
     $140 = 0;
    } else {
     $128 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $134 = ((($133)) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($$pre$i$i$i$lcssa|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       label = 28;
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $140 = 0;
      } else {
       $140 = $$pre$i$i$i$lcssa;
      }
     } else {
      $140 = $$pre$i$i$i$lcssa;
     }
    }
    $141 = ($140|0)==(0|0);
    $142 = ($$pre$i$2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 52;
     } else {
      $143 = ((($$pre$i$2$i$i)) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$pre$i$2$i$i)) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i$2$i$i>>2]|0;
       $149 = ((($148)) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i$2$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 28;
        break L8;
       }
       $154 = ($151|0)==(-1);
       if ($154) {
        HEAP32[$__e>>2] = 0;
        label = 52;
        break;
       }
      }
      if (!($141)) {
       label = 53;
      }
     }
    } while(0);
    if ((label|0) == 52) {
     if ($141) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $155 = HEAP32[$__err>>2]|0;
     $156 = $155 | 2;
     HEAP32[$__err>>2] = $156;
    }
    $157 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($157|0);
   }
  }
 } while(0);
 if ((label|0) == 28) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$2$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$5 = 0, $$pre$i$i$i$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0;
 var $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i$20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(416,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L8: do {
  if ($9) {
   label = 28;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP8[$__decimal_point>>0]|0;
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i$5 = $$pre;$__a$0 = $16;
   L10: while(1) {
    $20 = ($$pre$i$i$i$5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i$5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i$5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i$5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i$5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 27;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i$5;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i$5;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 19;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$2$i$i = $34;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
        break L10;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 27;
       break L10;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 19;
       break;
      } else {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$2$i$i = $34;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
        break L10;
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     if ($33) {
      $$pre$i$2$i$i = 0;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$17>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 27;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i$20 = (($65) + -1)|0;
      $66 = $phitmp$i$20;
     }
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 27;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$13>>2]|0;
     $73 = $71 ? $15 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 27;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$2$i$i = $158;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 27;
      break;
     } else {
      $$pre$i$i$i$5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i$5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 27) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   $113 = HEAP8[$__in_units>>0]|0;
   $114 = ($113<<24>>24)==(0);
   $or$cond = $114 | $112;
   if (!($or$cond)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = ((($115)) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(519,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 28;
   } else {
    HEAPF64[$__v>>3] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($127) {
     $140 = 0;
    } else {
     $128 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $134 = ((($133)) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($$pre$i$i$i$lcssa|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       label = 28;
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $140 = 0;
      } else {
       $140 = $$pre$i$i$i$lcssa;
      }
     } else {
      $140 = $$pre$i$i$i$lcssa;
     }
    }
    $141 = ($140|0)==(0|0);
    $142 = ($$pre$i$2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 52;
     } else {
      $143 = ((($$pre$i$2$i$i)) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$pre$i$2$i$i)) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i$2$i$i>>2]|0;
       $149 = ((($148)) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i$2$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 28;
        break L8;
       }
       $154 = ($151|0)==(-1);
       if ($154) {
        HEAP32[$__e>>2] = 0;
        label = 52;
        break;
       }
      }
      if (!($141)) {
       label = 53;
      }
     }
    } while(0);
    if ((label|0) == 52) {
     if ($141) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $155 = HEAP32[$__err>>2]|0;
     $156 = $155 | 2;
     HEAP32[$__err>>2] = $156;
    }
    $157 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($157|0);
   }
  }
 } while(0);
 if ((label|0) == 28) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$2$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$5 = 0, $$pre$i$i$i$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0;
 var $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i$20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(416,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L8: do {
  if ($9) {
   label = 28;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP8[$__decimal_point>>0]|0;
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i$5 = $$pre;$__a$0 = $16;
   L10: while(1) {
    $20 = ($$pre$i$i$i$5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i$5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i$5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i$5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i$5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 27;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i$5;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i$5;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 19;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$2$i$i = $34;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
        break L10;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 27;
       break L10;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 19;
       break;
      } else {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$2$i$i = $34;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
        break L10;
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     if ($33) {
      $$pre$i$2$i$i = 0;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$17>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 27;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i$20 = (($65) + -1)|0;
      $66 = $phitmp$i$20;
     }
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 27;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$13>>2]|0;
     $73 = $71 ? $15 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 27;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$2$i$i = $158;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 27;
      break;
     } else {
      $$pre$i$i$i$5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i$5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 27) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   $113 = HEAP8[$__in_units>>0]|0;
   $114 = ($113<<24>>24)==(0);
   $or$cond = $114 | $112;
   if (!($or$cond)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = ((($115)) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(520,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 28;
   } else {
    HEAPF64[$__v>>3] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($127) {
     $140 = 0;
    } else {
     $128 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $134 = ((($133)) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($$pre$i$i$i$lcssa|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       label = 28;
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $140 = 0;
      } else {
       $140 = $$pre$i$i$i$lcssa;
      }
     } else {
      $140 = $$pre$i$i$i$lcssa;
     }
    }
    $141 = ($140|0)==(0|0);
    $142 = ($$pre$i$2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 52;
     } else {
      $143 = ((($$pre$i$2$i$i)) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$pre$i$2$i$i)) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i$2$i$i>>2]|0;
       $149 = ((($148)) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i$2$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 28;
        break L8;
       }
       $154 = ($151|0)==(-1);
       if ($154) {
        HEAP32[$__e>>2] = 0;
        label = 52;
        break;
       }
      }
      if (!($141)) {
       label = 53;
      }
     }
    } while(0);
    if ((label|0) == 52) {
     if ($141) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $155 = HEAP32[$__err>>2]|0;
     $156 = $155 | 2;
     HEAP32[$__err>>2] = $156;
    }
    $157 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($157|0);
   }
  }
 } while(0);
 if ((label|0) == 28) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale($__l)|0);
 $1 = (_vsscanf($__s,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if (!($2)) {
  __THREW__ = 0;
  (invoke_ii(433,($0|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if ($4) {
   $5 = ___cxa_find_matching_catch(0|0)|0;
   $6 = tempRet0;
   ___clang_call_terminate($5);
   // unreachable;
  }
 }
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$1$i$i = 0, $$0$i$i$1$i$i$12 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$6 = 0, $$045 = 0, $$lcssa = 0, $$ph$ph = 0, $$pre$i$3$i$i$14 = 0, $$pre$i$3$i$i$14$lcssa = 0, $$pre$i$i$i = 0, $$pre$i$i$i$8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off0 = 0, $__consume$2$off0 = 0, $__indx$0 = 0, $__kc$0 = 0, $__ky$0 = 0, $__ky1$0 = 0, $__ky2$0 = 0, $__n_does_match$0 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$3 = 0, $__n_does_match$5 = 0, $__n_does_match$6 = 0, $__n_does_match$7 = 0, $__n_might_match$0 = 0;
 var $__n_might_match$0$lcssa = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$3 = 0, $__n_might_match$5 = 0, $__st$0 = 0, $__st$1 = 0, $__st$2 = 0, $__st$3 = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i$9 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 do {
  if ($4) {
   $5 = (_malloc($3)|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    __THREW__ = 0;
    invoke_v(423);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $$ph$ph = 0;
     label = 6;
     break;
    }
   }
   $18 = $5;
   $186 = $18;$__status$0 = $5;
   label = 11;
  } else {
   $186 = 0;$__status$0 = $__statbuf;
   label = 11;
  }
 } while(0);
 L6: do {
  if ((label|0) == 11) {
   $__ky$0 = $__kb;$__n_does_match$0 = 0;$__n_might_match$0 = $3;$__st$0 = $__status$0;
   while(1) {
    $19 = ($__ky$0|0)==($__ke|0);
    if ($19) {
     $__n_does_match$0$lcssa = $__n_does_match$0;$__n_might_match$0$lcssa = $__n_might_match$0;
     break;
    }
    $20 = HEAP8[$__ky$0>>0]|0;
    $21 = $20 & 1;
    $22 = ($21<<24>>24)==(0);
    if ($22) {
     $25 = $20&255;
     $26 = $25 >>> 1;
     $27 = $26;
    } else {
     $23 = ((($__ky$0)) + 4|0);
     $24 = HEAP32[$23>>2]|0;
     $27 = $24;
    }
    $28 = ($27|0)==(0);
    if ($28) {
     HEAP8[$__st$0>>0] = 2;
     $29 = (($__n_might_match$0) + -1)|0;
     $30 = (($__n_does_match$0) + 1)|0;
     $__n_does_match$1 = $30;$__n_might_match$1 = $29;
    } else {
     HEAP8[$__st$0>>0] = 1;
     $__n_does_match$1 = $__n_does_match$0;$__n_might_match$1 = $__n_might_match$0;
    }
    $31 = ((($__ky$0)) + 12|0);
    $32 = ((($__st$0)) + 1|0);
    $__ky$0 = $31;$__n_does_match$0 = $__n_does_match$1;$__n_might_match$0 = $__n_might_match$1;$__st$0 = $32;
   }
   $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
   L20: while(1) {
    $33 = HEAP32[$__b>>2]|0;
    $34 = ($33|0)==(0|0);
    do {
     if ($34) {
      $64 = 1;
     } else {
      $35 = ((($33)) + 12|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = ((($33)) + 16|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = ($36|0)==($38|0);
      if ($39) {
       $40 = HEAP32[$33>>2]|0;
       $41 = ((($40)) + 36|0);
       $42 = HEAP32[$41>>2]|0;
       __THREW__ = 0;
       $43 = (invoke_ii($42|0,($33|0))|0);
       $44 = __THREW__; __THREW__ = 0;
       $45 = $44&1;
       if ($45) {
        label = 5;
        break L20;
       } else {
        $$0$i$i$i$i = $43;
       }
      } else {
       $46 = HEAP32[$36>>2]|0;
       $$0$i$i$i$i = $46;
      }
      $47 = ($$0$i$i$i$i|0)==(-1);
      if ($47) {
       HEAP32[$__b>>2] = 0;
       $64 = 1;
       break;
      } else {
       $$pre$i$i$i = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
       $64 = $phitmp$i$i$i;
       break;
      }
     }
    } while(0);
    $48 = HEAP32[$__e>>2]|0;
    $49 = ($48|0)==(0|0);
    if ($49) {
     $$pre$i$3$i$i$14 = 0;$63 = 1;
    } else {
     $50 = ((($48)) + 12|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ((($48)) + 16|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($51|0)==($53|0);
     if ($54) {
      $55 = HEAP32[$48>>2]|0;
      $56 = ((($55)) + 36|0);
      $57 = HEAP32[$56>>2]|0;
      __THREW__ = 0;
      $58 = (invoke_ii($57|0,($48|0))|0);
      $59 = __THREW__; __THREW__ = 0;
      $60 = $59&1;
      if ($60) {
       label = 5;
       break;
      } else {
       $$0$i$i$1$i$i = $58;
      }
     } else {
      $61 = HEAP32[$51>>2]|0;
      $$0$i$i$1$i$i = $61;
     }
     $62 = ($$0$i$i$1$i$i|0)==(-1);
     if ($62) {
      HEAP32[$__e>>2] = 0;
      $$pre$i$3$i$i$14 = 0;$63 = 1;
     } else {
      $$pre$i$3$i$i$14 = $48;$63 = 0;
     }
    }
    $tmp$i$i = $64 ^ $63;
    $65 = ($__n_might_match$2|0)!=(0);
    $66 = $65 & $tmp$i$i;
    $67 = HEAP32[$__b>>2]|0;
    if (!($66)) {
     $$lcssa = $67;$$pre$i$3$i$i$14$lcssa = $$pre$i$3$i$i$14;
     label = 35;
     break;
    }
    $96 = ((($67)) + 12|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ((($67)) + 16|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($97|0)==($99|0);
    if ($100) {
     $101 = HEAP32[$67>>2]|0;
     $102 = ((($101)) + 36|0);
     $103 = HEAP32[$102>>2]|0;
     __THREW__ = 0;
     $104 = (invoke_ii($103|0,($67|0))|0);
     $105 = __THREW__; __THREW__ = 0;
     $106 = $105&1;
     if ($106) {
      label = 5;
      break;
     } else {
      $$0$i$i = $104;
     }
    } else {
     $107 = HEAP32[$97>>2]|0;
     $$0$i$i = $107;
    }
    if ($__case_sensitive) {
     $__c$0 = $$0$i$i;
    } else {
     $108 = HEAP32[$__ct>>2]|0;
     $109 = ((($108)) + 28|0);
     $110 = HEAP32[$109>>2]|0;
     __THREW__ = 0;
     $111 = (invoke_iii($110|0,($__ct|0),($$0$i$i|0))|0);
     $112 = __THREW__; __THREW__ = 0;
     $113 = $112&1;
     if ($113) {
      label = 5;
      break;
     } else {
      $__c$0 = $111;
     }
    }
    $114 = (($__indx$0) + 1)|0;
    $__consume$0$off0 = 0;$__ky1$0 = $__kb;$__n_does_match$3 = $__n_does_match$2;$__n_might_match$3 = $__n_might_match$2;$__st$1 = $__status$0;
    while(1) {
     $115 = ($__ky1$0|0)==($__ke|0);
     if ($115) {
      break;
     }
     $116 = HEAP8[$__st$1>>0]|0;
     $117 = ($116<<24>>24)==(1);
     do {
      if ($117) {
       $118 = HEAP8[$__ky1$0>>0]|0;
       $119 = $118 & 1;
       $120 = ($119<<24>>24)==(0);
       if ($120) {
        $123 = ((($__ky1$0)) + 4|0);
        $125 = $123;
       } else {
        $121 = ((($__ky1$0)) + 8|0);
        $122 = HEAP32[$121>>2]|0;
        $125 = $122;
       }
       $124 = (($125) + ($__indx$0<<2)|0);
       $126 = HEAP32[$124>>2]|0;
       if ($__case_sensitive) {
        $__kc$0 = $126;
       } else {
        $127 = HEAP32[$__ct>>2]|0;
        $128 = ((($127)) + 28|0);
        $129 = HEAP32[$128>>2]|0;
        __THREW__ = 0;
        $130 = (invoke_iii($129|0,($__ct|0),($126|0))|0);
        $131 = __THREW__; __THREW__ = 0;
        $132 = $131&1;
        if ($132) {
         label = 4;
         break L20;
        } else {
         $__kc$0 = $130;
        }
       }
       $133 = ($__c$0|0)==($__kc$0|0);
       if (!($133)) {
        HEAP8[$__st$1>>0] = 0;
        $145 = (($__n_might_match$3) + -1)|0;
        $__consume$2$off0 = $__consume$0$off0;$__n_does_match$5 = $__n_does_match$3;$__n_might_match$5 = $145;
        break;
       }
       $134 = HEAP8[$__ky1$0>>0]|0;
       $135 = $134 & 1;
       $136 = ($135<<24>>24)==(0);
       if ($136) {
        $139 = $134&255;
        $140 = $139 >>> 1;
        $141 = $140;
       } else {
        $137 = ((($__ky1$0)) + 4|0);
        $138 = HEAP32[$137>>2]|0;
        $141 = $138;
       }
       $142 = ($141|0)==($114|0);
       if ($142) {
        HEAP8[$__st$1>>0] = 2;
        $143 = (($__n_might_match$3) + -1)|0;
        $144 = (($__n_does_match$3) + 1)|0;
        $__consume$2$off0 = 1;$__n_does_match$5 = $144;$__n_might_match$5 = $143;
       } else {
        $__consume$2$off0 = 1;$__n_does_match$5 = $__n_does_match$3;$__n_might_match$5 = $__n_might_match$3;
       }
      } else {
       $__consume$2$off0 = $__consume$0$off0;$__n_does_match$5 = $__n_does_match$3;$__n_might_match$5 = $__n_might_match$3;
      }
     } while(0);
     $146 = ((($__ky1$0)) + 12|0);
     $147 = ((($__st$1)) + 1|0);
     $__consume$0$off0 = $__consume$2$off0;$__ky1$0 = $146;$__n_does_match$3 = $__n_does_match$5;$__n_might_match$3 = $__n_might_match$5;$__st$1 = $147;
    }
    if (!($__consume$0$off0)) {
     $__indx$0 = $114;$__n_does_match$2 = $__n_does_match$3;$__n_might_match$2 = $__n_might_match$3;
     continue;
    }
    $148 = HEAP32[$__b>>2]|0;
    $149 = ((($148)) + 12|0);
    $150 = HEAP32[$149>>2]|0;
    $151 = ((($148)) + 16|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($150|0)==($152|0);
    if ($153) {
     $154 = HEAP32[$148>>2]|0;
     $155 = ((($154)) + 40|0);
     $156 = HEAP32[$155>>2]|0;
     __THREW__ = 0;
     (invoke_ii($156|0,($148|0))|0);
     $157 = __THREW__; __THREW__ = 0;
     $158 = $157&1;
     if ($158) {
      label = 5;
      break;
     }
    } else {
     $159 = ((($150)) + 4|0);
     HEAP32[$149>>2] = $159;
    }
    $160 = (($__n_does_match$3) + ($__n_might_match$3))|0;
    $161 = ($160>>>0)>(1);
    if ($161) {
     $__ky2$0 = $__kb;$__n_does_match$6 = $__n_does_match$3;$__st$2 = $__status$0;
    } else {
     $__indx$0 = $114;$__n_does_match$2 = $__n_does_match$3;$__n_might_match$2 = $__n_might_match$3;
     continue;
    }
    while(1) {
     $162 = ($__ky2$0|0)==($__ke|0);
     if ($162) {
      $__indx$0 = $114;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$3;
      continue L20;
     }
     $163 = HEAP8[$__st$2>>0]|0;
     $164 = ($163<<24>>24)==(2);
     if ($164) {
      $165 = HEAP8[$__ky2$0>>0]|0;
      $166 = $165 & 1;
      $167 = ($166<<24>>24)==(0);
      if ($167) {
       $170 = $165&255;
       $171 = $170 >>> 1;
       $172 = $171;
      } else {
       $168 = ((($__ky2$0)) + 4|0);
       $169 = HEAP32[$168>>2]|0;
       $172 = $169;
      }
      $173 = ($172|0)==($114|0);
      if ($173) {
       $__n_does_match$7 = $__n_does_match$6;
      } else {
       HEAP8[$__st$2>>0] = 0;
       $174 = (($__n_does_match$6) + -1)|0;
       $__n_does_match$7 = $174;
      }
     } else {
      $__n_does_match$7 = $__n_does_match$6;
     }
     $175 = ((($__ky2$0)) + 12|0);
     $176 = ((($__st$2)) + 1|0);
     $__ky2$0 = $175;$__n_does_match$6 = $__n_does_match$7;$__st$2 = $176;
    }
   }
   if ((label|0) == 4) {
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    $15 = $186;$lpad$phi$index = $9;$lpad$phi$index3 = $10;
    break;
   }
   else if ((label|0) == 5) {
    $11 = ___cxa_find_matching_catch()|0;
    $12 = tempRet0;
    $15 = $186;$lpad$phi$index = $11;$lpad$phi$index3 = $12;
    break;
   }
   else if ((label|0) == 35) {
    $68 = ($$lcssa|0)==(0|0);
    do {
     if ($68) {
      $189 = 1;
     } else {
      $69 = ((($$lcssa)) + 12|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ((($$lcssa)) + 16|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = ($70|0)==($72|0);
      if ($73) {
       $74 = HEAP32[$$lcssa>>2]|0;
       $75 = ((($74)) + 36|0);
       $76 = HEAP32[$75>>2]|0;
       __THREW__ = 0;
       $77 = (invoke_ii($76|0,($$lcssa|0))|0);
       $78 = __THREW__; __THREW__ = 0;
       $79 = $78&1;
       if ($79) {
        $$ph$ph = $186;
        label = 6;
        break L6;
       } else {
        $$0$i$i$i$i$6 = $77;
       }
      } else {
       $80 = HEAP32[$70>>2]|0;
       $$0$i$i$i$i$6 = $80;
      }
      $81 = ($$0$i$i$i$i$6|0)==(-1);
      if ($81) {
       HEAP32[$__b>>2] = 0;
       $189 = 1;
       break;
      } else {
       $$pre$i$i$i$8 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i$9 = ($$pre$i$i$i$8|0)==(0|0);
       $189 = $phitmp$i$i$i$9;
       break;
      }
     }
    } while(0);
    $82 = ($$pre$i$3$i$i$14$lcssa|0)==(0|0);
    do {
     if ($82) {
      label = 82;
     } else {
      $83 = ((($$pre$i$3$i$i$14$lcssa)) + 12|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = ((($$pre$i$3$i$i$14$lcssa)) + 16|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = ($84|0)==($86|0);
      if ($87) {
       $88 = HEAP32[$$pre$i$3$i$i$14$lcssa>>2]|0;
       $89 = ((($88)) + 36|0);
       $90 = HEAP32[$89>>2]|0;
       __THREW__ = 0;
       $91 = (invoke_ii($90|0,($$pre$i$3$i$i$14$lcssa|0))|0);
       $92 = __THREW__; __THREW__ = 0;
       $93 = $92&1;
       if ($93) {
        $$ph$ph = $186;
        label = 6;
        break L6;
       } else {
        $$0$i$i$1$i$i$12 = $91;
       }
      } else {
       $94 = HEAP32[$84>>2]|0;
       $$0$i$i$1$i$i$12 = $94;
      }
      $95 = ($$0$i$i$1$i$i$12|0)==(-1);
      if ($95) {
       HEAP32[$__e>>2] = 0;
       label = 82;
       break;
      } else {
       if ($189) {
        $$0 = $__kb;$__st$3 = $__status$0;
        break;
       } else {
        label = 84;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 82) {
     if ($189) {
      label = 84;
     } else {
      $$0 = $__kb;$__st$3 = $__status$0;
     }
    }
    if ((label|0) == 84) {
     $177 = HEAP32[$__err>>2]|0;
     $178 = $177 | 2;
     HEAP32[$__err>>2] = $178;
     $$0 = $__kb;$__st$3 = $__status$0;
    }
    while(1) {
     $179 = ($$0|0)==($__ke|0);
     if ($179) {
      label = 88;
      break;
     }
     $180 = HEAP8[$__st$3>>0]|0;
     $181 = ($180<<24>>24)==(2);
     if ($181) {
      $$045 = $$0;
      break;
     }
     $182 = ((($$0)) + 12|0);
     $183 = ((($__st$3)) + 1|0);
     $$0 = $182;$__st$3 = $183;
    }
    if ((label|0) == 88) {
     $184 = HEAP32[$__err>>2]|0;
     $185 = $184 | 4;
     HEAP32[$__err>>2] = $185;
     $$045 = $__ke;
    }
    $187 = ($186|0)==(0);
    if (!($187)) {
     $188 = $186;
     _free($188);
    }
    STACKTOP = sp;return ($$045|0);
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $15 = $$ph$ph;$lpad$phi$index = $13;$lpad$phi$index3 = $14;
 }
 $16 = ($15|0)==(0);
 if (!($16)) {
  $17 = $15;
  _free($17);
 }
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$1$i$i = 0, $$0$i$i$1$i$i$9 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$3 = 0, $$pre = 0, $$pre$i$3$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$5 = 0, $$pre$i$i$i$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0;
 var $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i$23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(416,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L8: do {
  if ($10) {
   label = 29;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i$5 = $$pre;$__a$0 = $17;
   L10: while(1) {
    $20 = ($$pre$i$i$i$5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$155 = 1;
    } else {
     $21 = ((($$pre$i$i$i$5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i$5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i$5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i$5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 28;
       break;
      } else {
       $$0$i$i$i$i$3 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i$3 = $32;
     }
     $33 = ($$0$i$i$i$i$3|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$155 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i$5;$155 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 20;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 28;
        break L10;
       } else {
        $$0$i$i$1$i$i$9 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i$1$i$i$9 = $47;
      }
      $48 = ($$0$i$i$1$i$i$9|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 20;
       break;
      } else {
       if ($155) {
        $156 = $34;
        break;
       } else {
        $$pre$i$3$i$i = $34;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
        break L10;
       }
      }
     }
    } while(0);
    if ((label|0) == 20) {
     label = 0;
     if ($155) {
      $$pre$i$3$i$i = 0;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$18>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 28;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i$23 = (($66) + -1)|0;
      $67 = $phitmp$i$23;
     }
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 28;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$14>>2]|0;
     $74 = $72 ? $16 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 28;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$3$i$i = $156;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 28;
      break;
     } else {
      $$pre$i$i$i$5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i$5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 28) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   if (!($111)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = ((($112)) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(512,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if ($122) {
    label = 29;
   } else {
    HEAP32[$__v>>2] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($124) {
     $157 = 1;
    } else {
     $125 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $131 = ((($130)) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($$pre$i$i$i$lcssa|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       label = 29;
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $157 = 1;
     } else {
      $157 = 0;
     }
    }
    $138 = ($$pre$i$3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 54;
     } else {
      $139 = ((($$pre$i$3$i$i)) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($$pre$i$3$i$i)) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i$3$i$i>>2]|0;
       $145 = ((($144)) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i$3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        label = 29;
        break L8;
       } else {
        $$0$i$i$1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i$1$i$i = $150;
      }
      $151 = ($$0$i$i$1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 54;
       break;
      } else {
       if ($157) {
        break;
       } else {
        label = 56;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 54) {
     if ($157) {
      label = 56;
     }
    }
    if ((label|0) == 56) {
     $152 = HEAP32[$__err>>2]|0;
     $153 = $152 | 2;
     HEAP32[$__err>>2] = $153;
    }
    $154 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($154|0);
   }
  }
 } while(0);
 if ((label|0) == 29) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$1$i$i = 0, $$0$i$i$1$i$i$9 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$3 = 0, $$pre = 0, $$pre$i$3$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$5 = 0, $$pre$i$i$i$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0;
 var $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i$23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(416,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L8: do {
  if ($10) {
   label = 29;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i$5 = $$pre;$__a$0 = $17;
   L10: while(1) {
    $20 = ($$pre$i$i$i$5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$160 = 1;
    } else {
     $21 = ((($$pre$i$i$i$5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i$5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i$5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i$5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 28;
       break;
      } else {
       $$0$i$i$i$i$3 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i$3 = $32;
     }
     $33 = ($$0$i$i$i$i$3|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$160 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i$5;$160 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 20;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 28;
        break L10;
       } else {
        $$0$i$i$1$i$i$9 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i$1$i$i$9 = $47;
      }
      $48 = ($$0$i$i$1$i$i$9|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 20;
       break;
      } else {
       if ($160) {
        $161 = $34;
        break;
       } else {
        $$pre$i$3$i$i = $34;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
        break L10;
       }
      }
     }
    } while(0);
    if ((label|0) == 20) {
     label = 0;
     if ($160) {
      $$pre$i$3$i$i = 0;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$18>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 28;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i$23 = (($66) + -1)|0;
      $67 = $phitmp$i$23;
     }
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 28;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$14>>2]|0;
     $74 = $72 ? $16 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 28;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$3$i$i = $161;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 28;
      break;
     } else {
      $$pre$i$i$i$5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i$5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 28) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   if (!($111)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = ((($112)) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(513,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = tempRet0;
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 29;
   } else {
    $124 = $__v;
    $125 = $124;
    HEAP32[$125>>2] = $120;
    $126 = (($124) + 4)|0;
    $127 = $126;
    HEAP32[$127>>2] = $121;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($129) {
     $162 = 1;
    } else {
     $130 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $136 = ((($135)) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($$pre$i$i$i$lcssa|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       label = 29;
       break;
      } else {
       $$0$i$i$i$i = $138;
      }
     } else {
      $141 = HEAP32[$131>>2]|0;
      $$0$i$i$i$i = $141;
     }
     $142 = ($$0$i$i$i$i|0)==(-1);
     if ($142) {
      HEAP32[$__b>>2] = 0;
      $162 = 1;
     } else {
      $162 = 0;
     }
    }
    $143 = ($$pre$i$3$i$i|0)==(0|0);
    do {
     if ($143) {
      label = 54;
     } else {
      $144 = ((($$pre$i$3$i$i)) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = ((($$pre$i$3$i$i)) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($145|0)==($147|0);
      if ($148) {
       $149 = HEAP32[$$pre$i$3$i$i>>2]|0;
       $150 = ((($149)) + 36|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       $152 = (invoke_ii($151|0,($$pre$i$3$i$i|0))|0);
       $153 = __THREW__; __THREW__ = 0;
       $154 = $153&1;
       if ($154) {
        label = 29;
        break L8;
       } else {
        $$0$i$i$1$i$i = $152;
       }
      } else {
       $155 = HEAP32[$145>>2]|0;
       $$0$i$i$1$i$i = $155;
      }
      $156 = ($$0$i$i$1$i$i|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 54;
       break;
      } else {
       if ($162) {
        break;
       } else {
        label = 56;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 54) {
     if ($162) {
      label = 56;
     }
    }
    if ((label|0) == 56) {
     $157 = HEAP32[$__err>>2]|0;
     $158 = $157 | 2;
     HEAP32[$__err>>2] = $158;
    }
    $159 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($159|0);
   }
  }
 } while(0);
 if ((label|0) == 29) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$1$i$i = 0, $$0$i$i$1$i$i$9 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$3 = 0, $$pre = 0, $$pre$i$3$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$5 = 0, $$pre$i$i$i$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0;
 var $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i$23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(416,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L8: do {
  if ($10) {
   label = 29;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i$5 = $$pre;$__a$0 = $17;
   L10: while(1) {
    $20 = ($$pre$i$i$i$5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$155 = 1;
    } else {
     $21 = ((($$pre$i$i$i$5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i$5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i$5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i$5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 28;
       break;
      } else {
       $$0$i$i$i$i$3 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i$3 = $32;
     }
     $33 = ($$0$i$i$i$i$3|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$155 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i$5;$155 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 20;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 28;
        break L10;
       } else {
        $$0$i$i$1$i$i$9 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i$1$i$i$9 = $47;
      }
      $48 = ($$0$i$i$1$i$i$9|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 20;
       break;
      } else {
       if ($155) {
        $156 = $34;
        break;
       } else {
        $$pre$i$3$i$i = $34;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
        break L10;
       }
      }
     }
    } while(0);
    if ((label|0) == 20) {
     label = 0;
     if ($155) {
      $$pre$i$3$i$i = 0;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$18>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 28;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i$23 = (($66) + -1)|0;
      $67 = $phitmp$i$23;
     }
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 28;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$14>>2]|0;
     $74 = $72 ? $16 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 28;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$3$i$i = $156;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 28;
      break;
     } else {
      $$pre$i$i$i$5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i$5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 28) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   if (!($111)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = ((($112)) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(514,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if ($122) {
    label = 29;
   } else {
    HEAP16[$__v>>1] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($124) {
     $157 = 1;
    } else {
     $125 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $131 = ((($130)) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($$pre$i$i$i$lcssa|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       label = 29;
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $157 = 1;
     } else {
      $157 = 0;
     }
    }
    $138 = ($$pre$i$3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 54;
     } else {
      $139 = ((($$pre$i$3$i$i)) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($$pre$i$3$i$i)) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i$3$i$i>>2]|0;
       $145 = ((($144)) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i$3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        label = 29;
        break L8;
       } else {
        $$0$i$i$1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i$1$i$i = $150;
      }
      $151 = ($$0$i$i$1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 54;
       break;
      } else {
       if ($157) {
        break;
       } else {
        label = 56;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 54) {
     if ($157) {
      label = 56;
     }
    }
    if ((label|0) == 56) {
     $152 = HEAP32[$__err>>2]|0;
     $153 = $152 | 2;
     HEAP32[$__err>>2] = $153;
    }
    $154 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($154|0);
   }
  }
 } while(0);
 if ((label|0) == 29) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$1$i$i = 0, $$0$i$i$1$i$i$9 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$3 = 0, $$pre = 0, $$pre$i$3$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$5 = 0, $$pre$i$i$i$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0;
 var $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i$23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(416,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L8: do {
  if ($10) {
   label = 29;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i$5 = $$pre;$__a$0 = $17;
   L10: while(1) {
    $20 = ($$pre$i$i$i$5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$155 = 1;
    } else {
     $21 = ((($$pre$i$i$i$5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i$5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i$5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i$5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 28;
       break;
      } else {
       $$0$i$i$i$i$3 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i$3 = $32;
     }
     $33 = ($$0$i$i$i$i$3|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$155 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i$5;$155 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 20;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 28;
        break L10;
       } else {
        $$0$i$i$1$i$i$9 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i$1$i$i$9 = $47;
      }
      $48 = ($$0$i$i$1$i$i$9|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 20;
       break;
      } else {
       if ($155) {
        $156 = $34;
        break;
       } else {
        $$pre$i$3$i$i = $34;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
        break L10;
       }
      }
     }
    } while(0);
    if ((label|0) == 20) {
     label = 0;
     if ($155) {
      $$pre$i$3$i$i = 0;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$18>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 28;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i$23 = (($66) + -1)|0;
      $67 = $phitmp$i$23;
     }
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 28;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$14>>2]|0;
     $74 = $72 ? $16 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 28;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$3$i$i = $156;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 28;
      break;
     } else {
      $$pre$i$i$i$5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i$5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 28) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   if (!($111)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = ((($112)) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(515,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if ($122) {
    label = 29;
   } else {
    HEAP32[$__v>>2] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($124) {
     $157 = 1;
    } else {
     $125 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $131 = ((($130)) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($$pre$i$i$i$lcssa|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       label = 29;
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $157 = 1;
     } else {
      $157 = 0;
     }
    }
    $138 = ($$pre$i$3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 54;
     } else {
      $139 = ((($$pre$i$3$i$i)) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($$pre$i$3$i$i)) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i$3$i$i>>2]|0;
       $145 = ((($144)) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i$3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        label = 29;
        break L8;
       } else {
        $$0$i$i$1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i$1$i$i = $150;
      }
      $151 = ($$0$i$i$1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 54;
       break;
      } else {
       if ($157) {
        break;
       } else {
        label = 56;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 54) {
     if ($157) {
      label = 56;
     }
    }
    if ((label|0) == 56) {
     $152 = HEAP32[$__err>>2]|0;
     $153 = $152 | 2;
     HEAP32[$__err>>2] = $153;
    }
    $154 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($154|0);
   }
  }
 } while(0);
 if ((label|0) == 29) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$1$i$i = 0, $$0$i$i$1$i$i$9 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$3 = 0, $$pre = 0, $$pre$i$3$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$5 = 0, $$pre$i$i$i$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0;
 var $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i$23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(416,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L8: do {
  if ($10) {
   label = 29;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i$5 = $$pre;$__a$0 = $17;
   L10: while(1) {
    $20 = ($$pre$i$i$i$5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$155 = 1;
    } else {
     $21 = ((($$pre$i$i$i$5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i$5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i$5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i$5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 28;
       break;
      } else {
       $$0$i$i$i$i$3 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i$3 = $32;
     }
     $33 = ($$0$i$i$i$i$3|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$155 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i$5;$155 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 20;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 28;
        break L10;
       } else {
        $$0$i$i$1$i$i$9 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i$1$i$i$9 = $47;
      }
      $48 = ($$0$i$i$1$i$i$9|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 20;
       break;
      } else {
       if ($155) {
        $156 = $34;
        break;
       } else {
        $$pre$i$3$i$i = $34;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
        break L10;
       }
      }
     }
    } while(0);
    if ((label|0) == 20) {
     label = 0;
     if ($155) {
      $$pre$i$3$i$i = 0;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$18>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 28;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i$23 = (($66) + -1)|0;
      $67 = $phitmp$i$23;
     }
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 28;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$14>>2]|0;
     $74 = $72 ? $16 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 28;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$3$i$i = $156;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 28;
      break;
     } else {
      $$pre$i$i$i$5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i$5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 28) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   if (!($111)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = ((($112)) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(516,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if ($122) {
    label = 29;
   } else {
    HEAP32[$__v>>2] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($124) {
     $157 = 1;
    } else {
     $125 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $131 = ((($130)) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($$pre$i$i$i$lcssa|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       label = 29;
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $157 = 1;
     } else {
      $157 = 0;
     }
    }
    $138 = ($$pre$i$3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 54;
     } else {
      $139 = ((($$pre$i$3$i$i)) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($$pre$i$3$i$i)) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i$3$i$i>>2]|0;
       $145 = ((($144)) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i$3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        label = 29;
        break L8;
       } else {
        $$0$i$i$1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i$1$i$i = $150;
      }
      $151 = ($$0$i$i$1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 54;
       break;
      } else {
       if ($157) {
        break;
       } else {
        label = 56;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 54) {
     if ($157) {
      label = 56;
     }
    }
    if ((label|0) == 56) {
     $152 = HEAP32[$__err>>2]|0;
     $153 = $152 | 2;
     HEAP32[$__err>>2] = $153;
    }
    $154 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($154|0);
   }
  }
 } while(0);
 if ((label|0) == 29) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$1$i$i = 0, $$0$i$i$1$i$i$9 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$3 = 0, $$pre = 0, $$pre$i$3$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$5 = 0, $$pre$i$i$i$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0;
 var $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i$23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(416,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L8: do {
  if ($10) {
   label = 29;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i$5 = $$pre;$__a$0 = $17;
   L10: while(1) {
    $20 = ($$pre$i$i$i$5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$160 = 1;
    } else {
     $21 = ((($$pre$i$i$i$5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i$5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i$5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i$5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 28;
       break;
      } else {
       $$0$i$i$i$i$3 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i$3 = $32;
     }
     $33 = ($$0$i$i$i$i$3|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$160 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i$5;$160 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 20;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 28;
        break L10;
       } else {
        $$0$i$i$1$i$i$9 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i$1$i$i$9 = $47;
      }
      $48 = ($$0$i$i$1$i$i$9|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 20;
       break;
      } else {
       if ($160) {
        $161 = $34;
        break;
       } else {
        $$pre$i$3$i$i = $34;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
        break L10;
       }
      }
     }
    } while(0);
    if ((label|0) == 20) {
     label = 0;
     if ($160) {
      $$pre$i$3$i$i = 0;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$18>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 28;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i$23 = (($66) + -1)|0;
      $67 = $phitmp$i$23;
     }
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 28;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$14>>2]|0;
     $74 = $72 ? $16 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 28;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$3$i$i = $161;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 28;
      break;
     } else {
      $$pre$i$i$i$5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i$5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 28) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   if (!($111)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = ((($112)) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(517,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = tempRet0;
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 29;
   } else {
    $124 = $__v;
    $125 = $124;
    HEAP32[$125>>2] = $120;
    $126 = (($124) + 4)|0;
    $127 = $126;
    HEAP32[$127>>2] = $121;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($129) {
     $162 = 1;
    } else {
     $130 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $136 = ((($135)) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($$pre$i$i$i$lcssa|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       label = 29;
       break;
      } else {
       $$0$i$i$i$i = $138;
      }
     } else {
      $141 = HEAP32[$131>>2]|0;
      $$0$i$i$i$i = $141;
     }
     $142 = ($$0$i$i$i$i|0)==(-1);
     if ($142) {
      HEAP32[$__b>>2] = 0;
      $162 = 1;
     } else {
      $162 = 0;
     }
    }
    $143 = ($$pre$i$3$i$i|0)==(0|0);
    do {
     if ($143) {
      label = 54;
     } else {
      $144 = ((($$pre$i$3$i$i)) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = ((($$pre$i$3$i$i)) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($145|0)==($147|0);
      if ($148) {
       $149 = HEAP32[$$pre$i$3$i$i>>2]|0;
       $150 = ((($149)) + 36|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       $152 = (invoke_ii($151|0,($$pre$i$3$i$i|0))|0);
       $153 = __THREW__; __THREW__ = 0;
       $154 = $153&1;
       if ($154) {
        label = 29;
        break L8;
       } else {
        $$0$i$i$1$i$i = $152;
       }
      } else {
       $155 = HEAP32[$145>>2]|0;
       $$0$i$i$1$i$i = $155;
      }
      $156 = ($$0$i$i$1$i$i|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 54;
       break;
      } else {
       if ($162) {
        break;
       } else {
        label = 56;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 54) {
     if ($162) {
      label = 56;
     }
    }
    if ((label|0) == 56) {
     $157 = HEAP32[$__err>>2]|0;
     $158 = $157 | 2;
     HEAP32[$__err>>2] = $158;
    }
    $159 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($159|0);
   }
  }
 } while(0);
 if ((label|0) == 29) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$1$i$i = 0, $$0$i$i$1$i$i$10 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$4 = 0, $$pre = 0, $$pre$i$3$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$6 = 0, $$pre$i$i$i$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i$24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(416,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L8: do {
  if ($9) {
   label = 29;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP32[$__decimal_point>>2]|0;
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i$6 = $$pre;$__a$0 = $16;
   L10: while(1) {
    $20 = ($$pre$i$i$i$6|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$157 = 1;
    } else {
     $21 = ((($$pre$i$i$i$6)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i$6)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i$6>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i$6|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 28;
       break;
      } else {
       $$0$i$i$i$i$4 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i$4 = $32;
     }
     $33 = ($$0$i$i$i$i$4|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$157 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i$6;$157 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 20;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 28;
        break L10;
       } else {
        $$0$i$i$1$i$i$10 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i$1$i$i$10 = $47;
      }
      $48 = ($$0$i$i$1$i$i$10|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 20;
       break;
      } else {
       if ($157) {
        $158 = $34;
        break;
       } else {
        $$pre$i$3$i$i = $34;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
        break L10;
       }
      }
     }
    } while(0);
    if ((label|0) == 20) {
     label = 0;
     if ($157) {
      $$pre$i$3$i$i = 0;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$17>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 28;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i$24 = (($66) + -1)|0;
      $67 = $phitmp$i$24;
     }
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 28;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$13>>2]|0;
     $74 = $72 ? $15 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 28;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$3$i$i = $158;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 28;
      break;
     } else {
      $$pre$i$i$i$6 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i$6 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 28) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   $112 = HEAP8[$__in_units>>0]|0;
   $113 = ($112<<24>>24)==(0);
   $or$cond = $113 | $111;
   if (!($or$cond)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = ((($114)) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(518,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 29;
   } else {
    HEAPF32[$__v>>2] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($126) {
     $159 = 1;
    } else {
     $127 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $133 = ((($132)) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($$pre$i$i$i$lcssa|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 29;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;
     } else {
      $159 = 0;
     }
    }
    $140 = ($$pre$i$3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 54;
     } else {
      $141 = ((($$pre$i$3$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i$3$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i$3$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i$3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 29;
        break L8;
       } else {
        $$0$i$i$1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i$1$i$i = $152;
      }
      $153 = ($$0$i$i$1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 54;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 56;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 54) {
     if ($159) {
      label = 56;
     }
    }
    if ((label|0) == 56) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    $156 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($156|0);
   }
  }
 } while(0);
 if ((label|0) == 29) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$1$i$i = 0, $$0$i$i$1$i$i$10 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$4 = 0, $$pre = 0, $$pre$i$3$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$6 = 0, $$pre$i$i$i$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i$24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(416,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L8: do {
  if ($9) {
   label = 29;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP32[$__decimal_point>>2]|0;
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i$6 = $$pre;$__a$0 = $16;
   L10: while(1) {
    $20 = ($$pre$i$i$i$6|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$157 = 1;
    } else {
     $21 = ((($$pre$i$i$i$6)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i$6)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i$6>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i$6|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 28;
       break;
      } else {
       $$0$i$i$i$i$4 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i$4 = $32;
     }
     $33 = ($$0$i$i$i$i$4|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$157 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i$6;$157 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 20;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 28;
        break L10;
       } else {
        $$0$i$i$1$i$i$10 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i$1$i$i$10 = $47;
      }
      $48 = ($$0$i$i$1$i$i$10|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 20;
       break;
      } else {
       if ($157) {
        $158 = $34;
        break;
       } else {
        $$pre$i$3$i$i = $34;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
        break L10;
       }
      }
     }
    } while(0);
    if ((label|0) == 20) {
     label = 0;
     if ($157) {
      $$pre$i$3$i$i = 0;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$17>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 28;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i$24 = (($66) + -1)|0;
      $67 = $phitmp$i$24;
     }
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 28;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$13>>2]|0;
     $74 = $72 ? $15 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 28;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$3$i$i = $158;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 28;
      break;
     } else {
      $$pre$i$i$i$6 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i$6 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 28) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   $112 = HEAP8[$__in_units>>0]|0;
   $113 = ($112<<24>>24)==(0);
   $or$cond = $113 | $111;
   if (!($or$cond)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = ((($114)) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(519,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 29;
   } else {
    HEAPF64[$__v>>3] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($126) {
     $159 = 1;
    } else {
     $127 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $133 = ((($132)) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($$pre$i$i$i$lcssa|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 29;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;
     } else {
      $159 = 0;
     }
    }
    $140 = ($$pre$i$3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 54;
     } else {
      $141 = ((($$pre$i$3$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i$3$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i$3$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i$3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 29;
        break L8;
       } else {
        $$0$i$i$1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i$1$i$i = $152;
      }
      $153 = ($$0$i$i$1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 54;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 56;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 54) {
     if ($159) {
      label = 56;
     }
    }
    if ((label|0) == 56) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    $156 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($156|0);
   }
  }
 } while(0);
 if ((label|0) == 29) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$1$i$i = 0, $$0$i$i$1$i$i$10 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$4 = 0, $$pre = 0, $$pre$i$3$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$6 = 0, $$pre$i$i$i$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i$24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(416,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L8: do {
  if ($9) {
   label = 29;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP32[$__decimal_point>>2]|0;
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i$6 = $$pre;$__a$0 = $16;
   L10: while(1) {
    $20 = ($$pre$i$i$i$6|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$157 = 1;
    } else {
     $21 = ((($$pre$i$i$i$6)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i$6)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i$6>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i$6|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 28;
       break;
      } else {
       $$0$i$i$i$i$4 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i$4 = $32;
     }
     $33 = ($$0$i$i$i$i$4|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$157 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i$6;$157 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 20;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 28;
        break L10;
       } else {
        $$0$i$i$1$i$i$10 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i$1$i$i$10 = $47;
      }
      $48 = ($$0$i$i$1$i$i$10|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 20;
       break;
      } else {
       if ($157) {
        $158 = $34;
        break;
       } else {
        $$pre$i$3$i$i = $34;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
        break L10;
       }
      }
     }
    } while(0);
    if ((label|0) == 20) {
     label = 0;
     if ($157) {
      $$pre$i$3$i$i = 0;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$17>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 28;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i$24 = (($66) + -1)|0;
      $67 = $phitmp$i$24;
     }
     __THREW__ = 0;
     invoke_viii(416,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 28;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$13>>2]|0;
     $74 = $72 ? $15 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 28;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$3$i$i = $158;$$pre$i$i$i$lcssa = $$pre$i$i$i;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 28;
      break;
     } else {
      $$pre$i$i$i$6 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i$6 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 28) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   $112 = HEAP8[$__in_units>>0]|0;
   $113 = ($112<<24>>24)==(0);
   $or$cond = $113 | $111;
   if (!($or$cond)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = ((($114)) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(520,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 29;
   } else {
    HEAPF64[$__v>>3] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($126) {
     $159 = 1;
    } else {
     $127 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $133 = ((($132)) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($$pre$i$i$i$lcssa|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 29;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;
     } else {
      $159 = 0;
     }
    }
    $140 = ($$pre$i$3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 54;
     } else {
      $141 = ((($$pre$i$3$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i$3$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i$3$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i$3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 29;
        break L8;
       } else {
        $$0$i$i$1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i$1$i$i = $152;
      }
      $153 = ($$0$i$i$1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 54;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 56;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 54) {
     if ($159) {
      label = 56;
     }
    }
    if ((label|0) == 56) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    $156 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($156|0);
   }
  }
 } while(0);
 if ((label|0) == 29) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s,$__n,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__n = $__n|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale($__l)|0);
 $1 = (_vsnprintf($__s,$__n,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if (!($2)) {
  __THREW__ = 0;
  (invoke_ii(433,($0|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if ($4) {
   $5 = ___cxa_find_matching_catch(0|0)|0;
   $6 = tempRet0;
   ___clang_call_terminate($5);
   // unreachable;
  }
 }
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $$sroa$0$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__ns$0 = 0, $__sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__sp = sp;
 $0 = HEAP32[$__s>>2]|0;
 $1 = ($0|0)==(0|0);
 L1: do {
  if ($1) {
   $$sroa$0$2 = 0;
  } else {
   $2 = $__oe;
   $3 = $__ob;
   $4 = (($2) - ($3))|0;
   $5 = ((($__iob)) + 12|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)>($4|0);
   $8 = (($6) - ($4))|0;
   $__ns$0 = $7 ? $8 : 0;
   $9 = $__op;
   $10 = (($9) - ($3))|0;
   $11 = ($10|0)>(0);
   if ($11) {
    $12 = HEAP32[$0>>2]|0;
    $13 = ((($12)) + 48|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (FUNCTION_TABLE_iiii[$14 & 1023]($0,$__ob,$10)|0);
    $16 = ($15|0)==($10|0);
    if (!($16)) {
     HEAP32[$__s>>2] = 0;
     $$sroa$0$2 = 0;
     break;
    }
   }
   $17 = ($__ns$0|0)>(0);
   do {
    if ($17) {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($__sp,$__ns$0,$__fl);
     $18 = HEAP8[$__sp>>0]|0;
     $19 = $18 & 1;
     $20 = ($19<<24>>24)==(0);
     $21 = ((($__sp)) + 8|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($__sp)) + 1|0);
     $24 = $20 ? $23 : $22;
     $25 = HEAP32[$0>>2]|0;
     $26 = ((($25)) + 48|0);
     $27 = HEAP32[$26>>2]|0;
     __THREW__ = 0;
     $28 = (invoke_iiii($27|0,($0|0),($24|0),($__ns$0|0))|0);
     $29 = __THREW__; __THREW__ = 0;
     $30 = $29&1;
     if ($30) {
      $32 = ___cxa_find_matching_catch()|0;
      $33 = tempRet0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sp);
      ___resumeException($32|0);
      // unreachable;
     }
     $31 = ($28|0)==($__ns$0|0);
     if ($31) {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sp);
      break;
     } else {
      HEAP32[$__s>>2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sp);
      $$sroa$0$2 = 0;
      break L1;
     }
    }
   } while(0);
   $34 = (($2) - ($9))|0;
   $35 = ($34|0)>(0);
   if ($35) {
    $36 = HEAP32[$0>>2]|0;
    $37 = ((($36)) + 48|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (FUNCTION_TABLE_iiii[$38 & 1023]($0,$__op,$34)|0);
    $40 = ($39|0)==($34|0);
    if (!($40)) {
     HEAP32[$__s>>2] = 0;
     $$sroa$0$2 = 0;
     break;
    }
   }
   HEAP32[$5>>2] = 0;
   $$sroa$0$2 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$0$2|0);
}
function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale($__l)|0);
 __THREW__ = 0;
 $1 = (invoke_iiii(521,($__s|0),($__format|0),($__va|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = ($0|0)==(0|0);
  if (!($11)) {
   __THREW__ = 0;
   (invoke_ii(433,($0|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $14 = ___cxa_find_matching_catch(0|0)|0;
    $15 = tempRet0;
    ___clang_call_terminate($14);
    // unreachable;
   }
  }
  ___resumeException($9|0);
  // unreachable;
 } else {
  $4 = ($0|0)==(0|0);
  if (!($4)) {
   __THREW__ = 0;
   (invoke_ii(433,($0|0))|0);
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if ($6) {
    $7 = ___cxa_find_matching_catch(0|0)|0;
    $8 = tempRet0;
    ___clang_call_terminate($7);
    // unreachable;
   }
  }
  STACKTOP = sp;return ($1|0);
 }
 return (0)|0;
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $$sroa$0$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ns$0 = 0, $__sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__sp = sp;
 $0 = HEAP32[$__s>>2]|0;
 $1 = ($0|0)==(0|0);
 L1: do {
  if ($1) {
   $$sroa$0$2 = 0;
  } else {
   $2 = $__oe;
   $3 = $__ob;
   $4 = (($2) - ($3))|0;
   $5 = $4 >> 2;
   $6 = ((($__iob)) + 12|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)>($5|0);
   $9 = (($7) - ($5))|0;
   $__ns$0 = $8 ? $9 : 0;
   $10 = $__op;
   $11 = (($10) - ($3))|0;
   $12 = $11 >> 2;
   $13 = ($11|0)>(0);
   if ($13) {
    $14 = HEAP32[$0>>2]|0;
    $15 = ((($14)) + 48|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 1023]($0,$__ob,$12)|0);
    $18 = ($17|0)==($12|0);
    if (!($18)) {
     HEAP32[$__s>>2] = 0;
     $$sroa$0$2 = 0;
     break;
    }
   }
   $19 = ($__ns$0|0)>(0);
   do {
    if ($19) {
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp,$__ns$0,$__fl);
     $20 = HEAP8[$__sp>>0]|0;
     $21 = $20 & 1;
     $22 = ($21<<24>>24)==(0);
     $23 = ((($__sp)) + 8|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($__sp)) + 4|0);
     $26 = $22 ? $25 : $24;
     $27 = HEAP32[$0>>2]|0;
     $28 = ((($27)) + 48|0);
     $29 = HEAP32[$28>>2]|0;
     __THREW__ = 0;
     $30 = (invoke_iiii($29|0,($0|0),($26|0),($__ns$0|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if ($32) {
      $34 = ___cxa_find_matching_catch()|0;
      $35 = tempRet0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp);
      ___resumeException($34|0);
      // unreachable;
     }
     $33 = ($30|0)==($__ns$0|0);
     if ($33) {
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp);
      break;
     } else {
      HEAP32[$__s>>2] = 0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp);
      $$sroa$0$2 = 0;
      break L1;
     }
    }
   } while(0);
   $36 = (($2) - ($10))|0;
   $37 = $36 >> 2;
   $38 = ($36|0)>(0);
   if ($38) {
    $39 = HEAP32[$0>>2]|0;
    $40 = ((($39)) + 48|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($0,$__op,$37)|0);
    $43 = ($42|0)==($37|0);
    if (!($43)) {
     HEAP32[$__s>>2] = 0;
     $$sroa$0$2 = 0;
     break;
    }
   }
   HEAP32[$6>>2] = 0;
   $$sroa$0$2 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$0$2|0);
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$10 = 0, $$0$in = 0, $$2 = 0, $$lcssa = 0, $$pre$i$2$i$i$20 = 0, $$pre$i$2$i$i$20$lcssa = 0, $$pre$i$2$i$i$7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i$16 = 0, $$pre$i$i$i$3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $__r$0$lcssa = 0, $isascii1$i = 0, $isascii1$i$12 = 0, $sext = 0, $sext24 = 0, $tmp$i$i$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $12 = 0;
  } else {
   $2 = ((($0)) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ((($0)) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = ((($7)) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $12 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $12 = $$pre$i$i$i;
     break;
    }
   } else {
    $12 = $0;
   }
  }
 } while(0);
 $13 = ($12|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = ((($14)) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($14)) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = ((($21)) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 1023]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($13) {
    $157 = $14;
    label = 13;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($13) {
   label = 12;
  } else {
   $157 = 0;
   label = 13;
  }
 }
 L16: do {
  if ((label|0) == 12) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
   $$2 = 0;
  }
  else if ((label|0) == 13) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($28)) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = ((($34)) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP8[$30>>0]|0;
    $39 = $38&255;
    $$0$i$i = $39;
   }
   $40 = $$0$i$i&255;
   $isascii1$i = ($40<<24>>24)>(-1);
   if ($isascii1$i) {
    $sext = $$0$i$i << 24;
    $41 = $sext >> 24;
    $42 = ((($__ct)) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (($43) + ($41<<1)|0);
    $45 = HEAP16[$44>>1]|0;
    $46 = $45 & 2048;
    $47 = ($46<<16>>16)==(0);
    if (!($47)) {
     $50 = HEAP32[$__ct>>2]|0;
     $51 = ((($50)) + 36|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (FUNCTION_TABLE_iiii[$52 & 1023]($__ct,$40,0)|0);
     $54 = $53 << 24 >> 24;
     $55 = HEAP32[$__b>>2]|0;
     $56 = ((($55)) + 12|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ((($55)) + 16|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = ($57|0)==($59|0);
     if ($60) {
      $61 = HEAP32[$55>>2]|0;
      $62 = ((($61)) + 40|0);
      $63 = HEAP32[$62>>2]|0;
      (FUNCTION_TABLE_ii[$63 & 1023]($55)|0);
      $$0$in = $__n;$$pre$i$2$i$i$7 = $157;$79 = $157;$__r$0$in = $54;
     } else {
      $64 = ((($57)) + 1|0);
      HEAP32[$56>>2] = $64;
      $$0$in = $__n;$$pre$i$2$i$i$7 = $157;$79 = $157;$__r$0$in = $54;
     }
     while(1) {
      $__r$0 = (($__r$0$in) + -48)|0;
      $$0 = (($$0$in) + -1)|0;
      $65 = HEAP32[$__b>>2]|0;
      $66 = ($65|0)==(0|0);
      do {
       if ($66) {
        $77 = 0;
       } else {
        $67 = ((($65)) + 12|0);
        $68 = HEAP32[$67>>2]|0;
        $69 = ((($65)) + 16|0);
        $70 = HEAP32[$69>>2]|0;
        $71 = ($68|0)==($70|0);
        if ($71) {
         $72 = HEAP32[$65>>2]|0;
         $73 = ((($72)) + 36|0);
         $74 = HEAP32[$73>>2]|0;
         $75 = (FUNCTION_TABLE_ii[$74 & 1023]($65)|0);
         $76 = ($75|0)==(-1);
         if ($76) {
          HEAP32[$__b>>2] = 0;
          $77 = 0;
          break;
         } else {
          $$pre$i$i$i$3 = HEAP32[$__b>>2]|0;
          $77 = $$pre$i$i$i$3;
          break;
         }
        } else {
         $77 = $65;
        }
       }
      } while(0);
      $78 = ($77|0)==(0|0);
      $80 = ($79|0)==(0|0);
      if ($80) {
       $$pre$i$2$i$i$20 = $$pre$i$2$i$i$7;$91 = 0;
      } else {
       $81 = ((($79)) + 12|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = ((($79)) + 16|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = ($82|0)==($84|0);
       if ($85) {
        $86 = HEAP32[$79>>2]|0;
        $87 = ((($86)) + 36|0);
        $88 = HEAP32[$87>>2]|0;
        $89 = (FUNCTION_TABLE_ii[$88 & 1023]($79)|0);
        $90 = ($89|0)==(-1);
        if ($90) {
         HEAP32[$__e>>2] = 0;
         $$pre$i$2$i$i$20 = 0;$91 = 0;
        } else {
         $$pre$i$2$i$i$20 = $$pre$i$2$i$i$7;$91 = $$pre$i$2$i$i$7;
        }
       } else {
        $$pre$i$2$i$i$20 = $$pre$i$2$i$i$7;$91 = $79;
       }
      }
      $92 = ($91|0)==(0|0);
      $tmp$i$i$9 = $78 ^ $92;
      $93 = ($$0$in|0)>(1);
      $94 = $93 & $tmp$i$i$9;
      $95 = HEAP32[$__b>>2]|0;
      if (!($94)) {
       $$lcssa = $95;$$pre$i$2$i$i$20$lcssa = $$pre$i$2$i$i$20;$__r$0$lcssa = $__r$0;
       break;
      }
      $96 = ((($95)) + 12|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = ((($95)) + 16|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = ($97|0)==($99|0);
      if ($100) {
       $101 = HEAP32[$95>>2]|0;
       $102 = ((($101)) + 36|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = (FUNCTION_TABLE_ii[$103 & 1023]($95)|0);
       $$0$i$i$10 = $104;
      } else {
       $105 = HEAP8[$97>>0]|0;
       $106 = $105&255;
       $$0$i$i$10 = $106;
      }
      $107 = $$0$i$i$10&255;
      $isascii1$i$12 = ($107<<24>>24)>(-1);
      if (!($isascii1$i$12)) {
       $$2 = $__r$0;
       break L16;
      }
      $sext24 = $$0$i$i$10 << 24;
      $108 = $sext24 >> 24;
      $109 = HEAP32[$42>>2]|0;
      $110 = (($109) + ($108<<1)|0);
      $111 = HEAP16[$110>>1]|0;
      $112 = $111 & 2048;
      $113 = ($112<<16>>16)==(0);
      if ($113) {
       $$2 = $__r$0;
       break L16;
      }
      $114 = ($__r$0*10)|0;
      $115 = HEAP32[$__ct>>2]|0;
      $116 = ((($115)) + 36|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = (FUNCTION_TABLE_iiii[$117 & 1023]($__ct,$107,0)|0);
      $119 = $118 << 24 >> 24;
      $120 = (($119) + ($114))|0;
      $121 = HEAP32[$__b>>2]|0;
      $122 = ((($121)) + 12|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = ((($121)) + 16|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = ($123|0)==($125|0);
      if ($126) {
       $127 = HEAP32[$121>>2]|0;
       $128 = ((($127)) + 40|0);
       $129 = HEAP32[$128>>2]|0;
       (FUNCTION_TABLE_ii[$129 & 1023]($121)|0);
       $$0$in = $$0;$$pre$i$2$i$i$7 = $$pre$i$2$i$i$20;$79 = $91;$__r$0$in = $120;
       continue;
      } else {
       $130 = ((($123)) + 1|0);
       HEAP32[$122>>2] = $130;
       $$0$in = $$0;$$pre$i$2$i$i$7 = $$pre$i$2$i$i$20;$79 = $91;$__r$0$in = $120;
       continue;
      }
     }
     $131 = ($$lcssa|0)==(0|0);
     do {
      if ($131) {
       $142 = 0;
      } else {
       $132 = ((($$lcssa)) + 12|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = ((($$lcssa)) + 16|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = ($133|0)==($135|0);
       if ($136) {
        $137 = HEAP32[$$lcssa>>2]|0;
        $138 = ((($137)) + 36|0);
        $139 = HEAP32[$138>>2]|0;
        $140 = (FUNCTION_TABLE_ii[$139 & 1023]($$lcssa)|0);
        $141 = ($140|0)==(-1);
        if ($141) {
         HEAP32[$__b>>2] = 0;
         $142 = 0;
         break;
        } else {
         $$pre$i$i$i$16 = HEAP32[$__b>>2]|0;
         $142 = $$pre$i$i$i$16;
         break;
        }
       } else {
        $142 = $$lcssa;
       }
      }
     } while(0);
     $143 = ($142|0)==(0|0);
     $144 = ($$pre$i$2$i$i$20$lcssa|0)==(0|0);
     do {
      if ($144) {
       label = 50;
      } else {
       $145 = ((($$pre$i$2$i$i$20$lcssa)) + 12|0);
       $146 = HEAP32[$145>>2]|0;
       $147 = ((($$pre$i$2$i$i$20$lcssa)) + 16|0);
       $148 = HEAP32[$147>>2]|0;
       $149 = ($146|0)==($148|0);
       if ($149) {
        $150 = HEAP32[$$pre$i$2$i$i$20$lcssa>>2]|0;
        $151 = ((($150)) + 36|0);
        $152 = HEAP32[$151>>2]|0;
        $153 = (FUNCTION_TABLE_ii[$152 & 1023]($$pre$i$2$i$i$20$lcssa)|0);
        $154 = ($153|0)==(-1);
        if ($154) {
         HEAP32[$__e>>2] = 0;
         label = 50;
         break;
        }
       }
       if ($143) {
        $$2 = $__r$0$lcssa;
        break L16;
       }
      }
     } while(0);
     if ((label|0) == 50) {
      if (!($143)) {
       $$2 = $__r$0$lcssa;
       break;
      }
     }
     $155 = HEAP32[$__err>>2]|0;
     $156 = $155 | 2;
     HEAP32[$__err>>2] = $156;
     $$2 = $__r$0$lcssa;
     break;
    }
   }
   $48 = HEAP32[$__err>>2]|0;
   $49 = $48 | 4;
   HEAP32[$__err>>2] = $49;
   $$2 = 0;
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$1$i$i = 0, $$0$i$i$1$i$i$23 = 0, $$0$i$i$1$i$i$8 = 0, $$0$i$i$14 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$17 = 0, $$0$i$i$i$i$2 = 0, $$0$in = 0, $$2 = 0, $$lcssa = 0, $$pre$i$3$i$i$10 = 0, $$pre$i$3$i$i$25 = 0, $$pre$i$3$i$i$25$lcssa = 0, $$pre$i$i$i = 0, $$pre$i$i$i$19 = 0, $$pre$i$i$i$4 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $__r$0$lcssa = 0, $phitmp$i$4$i$i$11 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i$20 = 0, $phitmp$i$i$i$5 = 0, $tmp$i$i$13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $148 = 1;
  } else {
   $2 = ((($0)) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ((($0)) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = ((($7)) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $148 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $148 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = ((($13)) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($13)) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = ((($20)) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
    $$0$i$i$1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i$1$i$i = $24;
   }
   $25 = ($$0$i$i$1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($148) {
     $149 = $13;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($148) {
   label = 16;
  } else {
   $149 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
   $$2 = 0;
  }
  else if ((label|0) == 17) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($28)) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = ((($34)) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP32[$30>>2]|0;
    $$0$i$i = $38;
   }
   $39 = HEAP32[$__ct>>2]|0;
   $40 = ((($39)) + 12|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($__ct,2048,$$0$i$i)|0);
   if (!($42)) {
    $43 = HEAP32[$__err>>2]|0;
    $44 = $43 | 4;
    HEAP32[$__err>>2] = $44;
    $$2 = 0;
    break;
   }
   $45 = HEAP32[$__ct>>2]|0;
   $46 = ((($45)) + 52|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (FUNCTION_TABLE_iiii[$47 & 1023]($__ct,$$0$i$i,0)|0);
   $49 = $48 << 24 >> 24;
   $50 = HEAP32[$__b>>2]|0;
   $51 = ((($50)) + 12|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ((($50)) + 16|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($52|0)==($54|0);
   if ($55) {
    $56 = HEAP32[$50>>2]|0;
    $57 = ((($56)) + 40|0);
    $58 = HEAP32[$57>>2]|0;
    (FUNCTION_TABLE_ii[$58 & 1023]($50)|0);
    $$0$in = $__n;$$pre$i$3$i$i$10 = $149;$73 = $149;$__r$0$in = $49;
   } else {
    $59 = ((($52)) + 4|0);
    HEAP32[$51>>2] = $59;
    $$0$in = $__n;$$pre$i$3$i$i$10 = $149;$73 = $149;$__r$0$in = $49;
   }
   while(1) {
    $__r$0 = (($__r$0$in) + -48)|0;
    $$0 = (($$0$in) + -1)|0;
    $60 = HEAP32[$__b>>2]|0;
    $61 = ($60|0)==(0|0);
    do {
     if ($61) {
      $87 = 1;
     } else {
      $62 = ((($60)) + 12|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ((($60)) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($63|0)==($65|0);
      if ($66) {
       $67 = HEAP32[$60>>2]|0;
       $68 = ((($67)) + 36|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = (FUNCTION_TABLE_ii[$69 & 1023]($60)|0);
       $$0$i$i$i$i$2 = $70;
      } else {
       $71 = HEAP32[$63>>2]|0;
       $$0$i$i$i$i$2 = $71;
      }
      $72 = ($$0$i$i$i$i$2|0)==(-1);
      if ($72) {
       HEAP32[$__b>>2] = 0;
       $87 = 1;
       break;
      } else {
       $$pre$i$i$i$4 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i$5 = ($$pre$i$i$i$4|0)==(0|0);
       $87 = $phitmp$i$i$i$5;
       break;
      }
     }
    } while(0);
    $74 = ($73|0)==(0|0);
    do {
     if ($74) {
      $$pre$i$3$i$i$25 = $$pre$i$3$i$i$10;$150 = 0;$86 = 1;
     } else {
      $75 = ((($73)) + 12|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ((($73)) + 16|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = ($76|0)==($78|0);
      if ($79) {
       $80 = HEAP32[$73>>2]|0;
       $81 = ((($80)) + 36|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = (FUNCTION_TABLE_ii[$82 & 1023]($73)|0);
       $$0$i$i$1$i$i$8 = $83;
      } else {
       $84 = HEAP32[$76>>2]|0;
       $$0$i$i$1$i$i$8 = $84;
      }
      $85 = ($$0$i$i$1$i$i$8|0)==(-1);
      if ($85) {
       HEAP32[$__e>>2] = 0;
       $$pre$i$3$i$i$25 = 0;$150 = 0;$86 = 1;
       break;
      } else {
       $phitmp$i$4$i$i$11 = ($$pre$i$3$i$i$10|0)==(0|0);
       $$pre$i$3$i$i$25 = $$pre$i$3$i$i$10;$150 = $$pre$i$3$i$i$10;$86 = $phitmp$i$4$i$i$11;
       break;
      }
     }
    } while(0);
    $tmp$i$i$13 = $87 ^ $86;
    $88 = ($$0$in|0)>(1);
    $89 = $88 & $tmp$i$i$13;
    $90 = HEAP32[$__b>>2]|0;
    if (!($89)) {
     $$lcssa = $90;$$pre$i$3$i$i$25$lcssa = $$pre$i$3$i$i$25;$__r$0$lcssa = $__r$0;
     break;
    }
    $91 = ((($90)) + 12|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ((($90)) + 16|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($92|0)==($94|0);
    if ($95) {
     $96 = HEAP32[$90>>2]|0;
     $97 = ((($96)) + 36|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = (FUNCTION_TABLE_ii[$98 & 1023]($90)|0);
     $$0$i$i$14 = $99;
    } else {
     $100 = HEAP32[$92>>2]|0;
     $$0$i$i$14 = $100;
    }
    $101 = HEAP32[$__ct>>2]|0;
    $102 = ((($101)) + 12|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = (FUNCTION_TABLE_iiii[$103 & 1023]($__ct,2048,$$0$i$i$14)|0);
    if (!($104)) {
     $$2 = $__r$0;
     break L22;
    }
    $105 = ($__r$0*10)|0;
    $106 = HEAP32[$__ct>>2]|0;
    $107 = ((($106)) + 52|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = (FUNCTION_TABLE_iiii[$108 & 1023]($__ct,$$0$i$i$14,0)|0);
    $110 = $109 << 24 >> 24;
    $111 = (($110) + ($105))|0;
    $112 = HEAP32[$__b>>2]|0;
    $113 = ((($112)) + 12|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ((($112)) + 16|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ($114|0)==($116|0);
    if ($117) {
     $118 = HEAP32[$112>>2]|0;
     $119 = ((($118)) + 40|0);
     $120 = HEAP32[$119>>2]|0;
     (FUNCTION_TABLE_ii[$120 & 1023]($112)|0);
     $$0$in = $$0;$$pre$i$3$i$i$10 = $$pre$i$3$i$i$25;$73 = $150;$__r$0$in = $111;
     continue;
    } else {
     $121 = ((($114)) + 4|0);
     HEAP32[$113>>2] = $121;
     $$0$in = $$0;$$pre$i$3$i$i$10 = $$pre$i$3$i$i$25;$73 = $150;$__r$0$in = $111;
     continue;
    }
   }
   $122 = ($$lcssa|0)==(0|0);
   do {
    if ($122) {
     $151 = 1;
    } else {
     $123 = ((($$lcssa)) + 12|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($$lcssa)) + 16|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = ($124|0)==($126|0);
     if ($127) {
      $128 = HEAP32[$$lcssa>>2]|0;
      $129 = ((($128)) + 36|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = (FUNCTION_TABLE_ii[$130 & 1023]($$lcssa)|0);
      $$0$i$i$i$i$17 = $131;
     } else {
      $132 = HEAP32[$124>>2]|0;
      $$0$i$i$i$i$17 = $132;
     }
     $133 = ($$0$i$i$i$i$17|0)==(-1);
     if ($133) {
      HEAP32[$__b>>2] = 0;
      $151 = 1;
      break;
     } else {
      $$pre$i$i$i$19 = HEAP32[$__b>>2]|0;
      $phitmp$i$i$i$20 = ($$pre$i$i$i$19|0)==(0|0);
      $151 = $phitmp$i$i$i$20;
      break;
     }
    }
   } while(0);
   $134 = ($$pre$i$3$i$i$25$lcssa|0)==(0|0);
   do {
    if ($134) {
     label = 60;
    } else {
     $135 = ((($$pre$i$3$i$i$25$lcssa)) + 12|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = ((($$pre$i$3$i$i$25$lcssa)) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($136|0)==($138|0);
     if ($139) {
      $140 = HEAP32[$$pre$i$3$i$i$25$lcssa>>2]|0;
      $141 = ((($140)) + 36|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (FUNCTION_TABLE_ii[$142 & 1023]($$pre$i$3$i$i$25$lcssa)|0);
      $$0$i$i$1$i$i$23 = $143;
     } else {
      $144 = HEAP32[$136>>2]|0;
      $$0$i$i$1$i$i$23 = $144;
     }
     $145 = ($$0$i$i$1$i$i$23|0)==(-1);
     if ($145) {
      HEAP32[$__e>>2] = 0;
      label = 60;
      break;
     } else {
      if ($151) {
       $$2 = $__r$0$lcssa;
       break L22;
      } else {
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 60) {
    if (!($151)) {
     $$2 = $__r$0$lcssa;
     break;
    }
   }
   $146 = HEAP32[$__err>>2]|0;
   $147 = $146 | 2;
   HEAP32[$__err>>2] = $147;
   $$2 = $__r$0$lcssa;
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__b)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(434|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = ($5>>>0)<(2147483647);
 $7 = $5 << 1;
 $$ = $6 ? $7 : -1;
 $8 = HEAP32[$__n>>2]|0;
 $9 = $4;
 $10 = (($8) - ($4))|0;
 $11 = $2 ? $9 : 0;
 $12 = (_realloc($11,$$)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   $14 = $12;
   HEAP32[$__b>>2] = $14;
   $23 = $12;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   $15 = $12;
   HEAP32[$__b>>2] = $15;
   $16 = ($$pr|0)==(0|0);
   if ($16) {
    $23 = $12;
   } else {
    $17 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($17|0,($$pr|0));
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     $20 = ___cxa_find_matching_catch(0|0)|0;
     $21 = tempRet0;
     ___clang_call_terminate($20);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $23 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = (522);
 $22 = (($23) + ($10)|0);
 HEAP32[$__n>>2] = $22;
 $24 = HEAP32[$__b>>2]|0;
 $25 = (($24) + ($$)|0);
 HEAP32[$__e>>2] = $25;
 return;
}
function __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__b)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(434|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = ($5>>>0)<(2147483647);
 $7 = $5 << 1;
 $$ = $6 ? $7 : -1;
 $8 = HEAP32[$__n>>2]|0;
 $9 = (($8) - ($4))|0;
 $10 = $9 >> 2;
 $phitmp = $4;
 $11 = $2 ? $phitmp : 0;
 $12 = (_realloc($11,$$)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   $14 = $12;
   HEAP32[$__b>>2] = $14;
   $24 = $12;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   $15 = $12;
   HEAP32[$__b>>2] = $15;
   $16 = ($$pr|0)==(0|0);
   if ($16) {
    $24 = $12;
   } else {
    $17 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($17|0,($$pr|0));
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     $20 = ___cxa_find_matching_catch(0|0)|0;
     $21 = tempRet0;
     ___clang_call_terminate($20);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $24 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = (522);
 $22 = $$ >>> 2;
 $23 = (($24) + ($10<<2)|0);
 HEAP32[$__n>>2] = $23;
 $25 = HEAP32[$__b>>2]|0;
 $26 = (($25) + ($22<<2)|0);
 HEAP32[$__e>>2] = $26;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep1 = 0, $scevgep2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $15 = $5;$16 = 10;$40 = $1;
 } else {
  $6 = ((($this)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $15 = $7;$16 = $phitmp$i;$40 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = ($__last|0)==($__first|0);
 do {
  if (!($13)) {
   $14 = (($16) - ($15))|0;
   $17 = ($14>>>0)<($12>>>0);
   if ($17) {
    $18 = (($15) + ($12))|0;
    $19 = (($18) - ($16))|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$16,$19,$15,$15,0,0);
    $$pre = HEAP8[$this>>0]|0;
    $21 = $$pre;
   } else {
    $21 = $40;
   }
   $20 = $21 & 1;
   $22 = ($20<<24>>24)==(0);
   if ($22) {
    $25 = ((($this)) + 1|0);
    $27 = $25;
   } else {
    $23 = ((($this)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $27 = $24;
   }
   $26 = (($27) + ($15)|0);
   $28 = (($15) - ($0))|0;
   $scevgep = (($__last) + ($28)|0);
   $scevgep1 = $scevgep;
   $$0 = $__first;$__p$0 = $26;
   while(1) {
    $29 = ($$0|0)==($__last|0);
    if ($29) {
     break;
    }
    $30 = HEAP8[$$0>>0]|0;
    HEAP8[$__p$0>>0] = $30;
    $31 = ((($__p$0)) + 1|0);
    $32 = ((($$0)) + 1|0);
    $$0 = $32;$__p$0 = $31;
   }
   $scevgep2 = (($27) + ($scevgep1)|0);
   HEAP8[$scevgep2>>0] = 0;
   $33 = (($15) + ($12))|0;
   $34 = HEAP8[$this>>0]|0;
   $35 = $34 & 1;
   $36 = ($35<<24>>24)==(0);
   if ($36) {
    $38 = $33 << 1;
    $39 = $38&255;
    HEAP8[$this>>0] = $39;
    break;
   } else {
    $37 = ((($this)) + 4|0);
    HEAP32[$37>>2] = $33;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__b)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(434|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = ($5>>>0)<(2147483647);
 $7 = $5 << 1;
 $$ = $6 ? $7 : -1;
 $8 = HEAP32[$__n>>2]|0;
 $9 = (($8) - ($4))|0;
 $10 = $9 >> 2;
 $phitmp = $4;
 $11 = $2 ? $phitmp : 0;
 $12 = (_realloc($11,$$)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   $14 = $12;
   HEAP32[$__b>>2] = $14;
   $24 = $12;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   $15 = $12;
   HEAP32[$__b>>2] = $15;
   $16 = ($$pr|0)==(0|0);
   if ($16) {
    $24 = $12;
   } else {
    $17 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($17|0,($$pr|0));
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     $20 = ___cxa_find_matching_catch(0|0)|0;
     $21 = tempRet0;
     ___clang_call_terminate($20);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $24 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = (522);
 $22 = $$ >>> 2;
 $23 = (($24) + ($10<<2)|0);
 HEAP32[$__n>>2] = $23;
 $25 = HEAP32[$__b>>2]|0;
 $26 = (($25) + ($22<<2)|0);
 HEAP32[$__e>>2] = $26;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, $phitmp$i = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $16 = $5;$17 = 1;$44 = $1;
 } else {
  $6 = ((($this)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $16 = $7;$17 = $phitmp$i;$44 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = $12 >> 2;
 $14 = ($13|0)==(0);
 do {
  if (!($14)) {
   $15 = (($17) - ($16))|0;
   $18 = ($15>>>0)<($13>>>0);
   if ($18) {
    $19 = (($16) + ($13))|0;
    $20 = (($19) - ($17))|0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$17,$20,$16,$16,0,0);
    $$pre = HEAP8[$this>>0]|0;
    $22 = $$pre;
   } else {
    $22 = $44;
   }
   $21 = $22 & 1;
   $23 = ($21<<24>>24)==(0);
   if ($23) {
    $26 = ((($this)) + 4|0);
    $28 = $26;
   } else {
    $24 = ((($this)) + 8|0);
    $25 = HEAP32[$24>>2]|0;
    $28 = $25;
   }
   $27 = (($28) + ($16<<2)|0);
   $29 = $__last;
   $30 = (($29) - ($0))|0;
   $31 = $30 >>> 2;
   $32 = (($16) + ($31))|0;
   $$0 = $__first;$__p$0 = $27;
   while(1) {
    $33 = ($$0|0)==($__last|0);
    if ($33) {
     break;
    }
    $34 = HEAP32[$$0>>2]|0;
    HEAP32[$__p$0>>2] = $34;
    $35 = ((($__p$0)) + 4|0);
    $36 = ((($$0)) + 4|0);
    $$0 = $36;$__p$0 = $35;
   }
   $scevgep = (($28) + ($32<<2)|0);
   HEAP32[$scevgep>>2] = 0;
   $37 = (($16) + ($13))|0;
   $38 = HEAP8[$this>>0]|0;
   $39 = $38 & 1;
   $40 = ($39<<24>>24)==(0);
   if ($40) {
    $42 = $37 << 1;
    $43 = $42&255;
    HEAP8[$this>>0] = $43;
    break;
   } else {
    $41 = ((($this)) + 4|0);
    HEAP32[$41>>2] = $37;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 128|0);
 HEAP8[$2>>0] = 0;
 $3 = ($__n|0)==(0);
 do {
  if (!($3)) {
   __THREW__ = 0;
   invoke_vii(523,($this|0),($__n|0));
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $6 = ___cxa_find_matching_catch()|0;
    $7 = tempRet0;
    __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this);
    ___resumeException($6|0);
    // unreachable;
   } else {
    __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(7516)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(7556)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(8588)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(8580)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(8648)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(8656)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(8712)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(8720)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(8728)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(8736)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(7628)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(7700)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(7760)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(7820)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(8132)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(8196)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(8260)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(8324)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(8360)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(8396)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(8432)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(8468)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(7912)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(8004)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(8036)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(8068)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(8508)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(8548)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this|0;
 var $$pre$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if (!($1)) {
   $2 = ((($this)) + 4|0);
   $$pre$i$i = HEAP32[$2>>2]|0;
   $3 = $$pre$i$i;
   while(1) {
    $4 = ($3|0)==($0|0);
    if ($4) {
     break;
    }
    $5 = ((($3)) + -4|0);
    HEAP32[$2>>2] = $5;
    $3 = $5;
   }
   $6 = ((($this)) + 16|0);
   $7 = ($6|0)==($0|0);
   if ($7) {
    $8 = ((($this)) + 128|0);
    HEAP8[$8>>0] = 0;
    break;
   } else {
    __ZdlPv($0);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$this>>2]|0;
 $3 = (($1) - ($2))|0;
 $4 = $3 >> 2;
 $5 = ($4>>>0)<($__sz>>>0);
 $6 = $2;
 $7 = $1;
 L1: do {
  if ($5) {
   $8 = (($__sz) - ($4))|0;
   __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$8);
  } else {
   $9 = ($4>>>0)>($__sz>>>0);
   if ($9) {
    $10 = (($6) + ($__sz<<2)|0);
    $11 = $7;
    while(1) {
     $12 = ($11|0)==($10|0);
     if ($12) {
      break L1;
     }
     $13 = ((($11)) + -4|0);
     HEAP32[$0>>2] = $13;
     $11 = $13;
    }
   }
  }
 } while(0);
 return;
}
function __ZNKSt3__16locale5__imp9has_facetEl($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($2) - ($3))|0;
 $5 = $4 >> 2;
 $6 = ($5>>>0)>($id>>>0);
 if ($6) {
  $7 = $3;
  $8 = (($7) + ($id<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)!=(0|0);
  $11 = $10;
 } else {
  $11 = 0;
 }
 return ($11|0);
}
function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp) {
 $__vp = $__vp|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__vp)) + 4|0);
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $1 = HEAP32[$__vp>>2]|0;
 $2 = $$field2 >> 1;
 $3 = (($1) + ($2)|0);
 $4 = $$field2 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $9 = $$field;
  $10 = $9;
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + ($$field)|0);
  $8 = HEAP32[$7>>2]|0;
  $10 = $8;
 }
 FUNCTION_TABLE_vi[$10 & 1023]($3);
 return;
}
function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$4 = 0, $$pre = 0, $$pre11 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 $$pre11 = $to_end;
 if ($1) {
  label = 4;
 } else {
  $2 = $to;
  $3 = (($$pre11) - ($2))|0;
  $4 = ($3|0)<(3);
  if ($4) {
   $$4 = 1;
  } else {
   $5 = ((($to)) + 1|0);
   HEAP32[$to_nxt>>2] = $5;
   HEAP8[$to>>0] = -17;
   $6 = HEAP32[$to_nxt>>2]|0;
   $7 = ((($6)) + 1|0);
   HEAP32[$to_nxt>>2] = $7;
   HEAP8[$6>>0] = -69;
   $8 = HEAP32[$to_nxt>>2]|0;
   $9 = ((($8)) + 1|0);
   HEAP32[$to_nxt>>2] = $9;
   HEAP8[$8>>0] = -65;
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $10 = $frm_end;
   $$pre = HEAP32[$frm_nxt>>2]|0;
   $11 = $$pre;
   while(1) {
    $12 = ($11>>>0)<($frm_end>>>0);
    if (!($12)) {
     $$4 = 0;
     break L4;
    }
    $13 = HEAP16[$11>>1]|0;
    $14 = $13&65535;
    $15 = ($14>>>0)>($Maxcode>>>0);
    if ($15) {
     $$4 = 2;
     break L4;
    }
    $16 = ($13&65535)<(128);
    do {
     if ($16) {
      $17 = HEAP32[$to_nxt>>2]|0;
      $18 = $17;
      $19 = (($$pre11) - ($18))|0;
      $20 = ($19|0)<(1);
      if ($20) {
       $$4 = 1;
       break L4;
      }
      $21 = $13&255;
      $22 = ((($17)) + 1|0);
      HEAP32[$to_nxt>>2] = $22;
      HEAP8[$17>>0] = $21;
     } else {
      $23 = ($13&65535)<(2048);
      if ($23) {
       $24 = HEAP32[$to_nxt>>2]|0;
       $25 = $24;
       $26 = (($$pre11) - ($25))|0;
       $27 = ($26|0)<(2);
       if ($27) {
        $$4 = 1;
        break L4;
       }
       $28 = $14 >>> 6;
       $29 = $28 | 192;
       $30 = $29&255;
       $31 = ((($24)) + 1|0);
       HEAP32[$to_nxt>>2] = $31;
       HEAP8[$24>>0] = $30;
       $32 = $14 & 63;
       $33 = $32 | 128;
       $34 = $33&255;
       $35 = HEAP32[$to_nxt>>2]|0;
       $36 = ((($35)) + 1|0);
       HEAP32[$to_nxt>>2] = $36;
       HEAP8[$35>>0] = $34;
       break;
      }
      $37 = ($13&65535)<(55296);
      if ($37) {
       $38 = HEAP32[$to_nxt>>2]|0;
       $39 = $38;
       $40 = (($$pre11) - ($39))|0;
       $41 = ($40|0)<(3);
       if ($41) {
        $$4 = 1;
        break L4;
       }
       $42 = $14 >>> 12;
       $43 = $42 | 224;
       $44 = $43&255;
       $45 = ((($38)) + 1|0);
       HEAP32[$to_nxt>>2] = $45;
       HEAP8[$38>>0] = $44;
       $46 = $14 >>> 6;
       $47 = $46 & 63;
       $48 = $47 | 128;
       $49 = $48&255;
       $50 = HEAP32[$to_nxt>>2]|0;
       $51 = ((($50)) + 1|0);
       HEAP32[$to_nxt>>2] = $51;
       HEAP8[$50>>0] = $49;
       $52 = $14 & 63;
       $53 = $52 | 128;
       $54 = $53&255;
       $55 = HEAP32[$to_nxt>>2]|0;
       $56 = ((($55)) + 1|0);
       HEAP32[$to_nxt>>2] = $56;
       HEAP8[$55>>0] = $54;
       break;
      }
      $57 = ($13&65535)<(56320);
      if (!($57)) {
       $108 = ($13&65535)<(57344);
       if ($108) {
        $$4 = 2;
        break L4;
       }
       $109 = HEAP32[$to_nxt>>2]|0;
       $110 = $109;
       $111 = (($$pre11) - ($110))|0;
       $112 = ($111|0)<(3);
       if ($112) {
        $$4 = 1;
        break L4;
       }
       $113 = $14 >>> 12;
       $114 = $113 | 224;
       $115 = $114&255;
       $116 = ((($109)) + 1|0);
       HEAP32[$to_nxt>>2] = $116;
       HEAP8[$109>>0] = $115;
       $117 = $14 >>> 6;
       $118 = $117 & 63;
       $119 = $118 | 128;
       $120 = $119&255;
       $121 = HEAP32[$to_nxt>>2]|0;
       $122 = ((($121)) + 1|0);
       HEAP32[$to_nxt>>2] = $122;
       HEAP8[$121>>0] = $120;
       $123 = $14 & 63;
       $124 = $123 | 128;
       $125 = $124&255;
       $126 = HEAP32[$to_nxt>>2]|0;
       $127 = ((($126)) + 1|0);
       HEAP32[$to_nxt>>2] = $127;
       HEAP8[$126>>0] = $125;
       break;
      }
      $58 = $11;
      $59 = (($10) - ($58))|0;
      $60 = ($59|0)<(4);
      if ($60) {
       $$4 = 1;
       break L4;
      }
      $61 = ((($11)) + 2|0);
      $62 = HEAP16[$61>>1]|0;
      $63 = $62&65535;
      $64 = $63 & 64512;
      $65 = ($64|0)==(56320);
      if (!($65)) {
       $$4 = 2;
       break L4;
      }
      $66 = HEAP32[$to_nxt>>2]|0;
      $67 = (($$pre11) - ($66))|0;
      $68 = ($67|0)<(4);
      if ($68) {
       $$4 = 1;
       break L4;
      }
      $69 = $14 & 960;
      $70 = $69 << 10;
      $71 = (($70) + 65536)|0;
      $72 = $14 << 10;
      $73 = $72 & 64512;
      $74 = $71 | $73;
      $75 = $63 & 1023;
      $76 = $74 | $75;
      $77 = ($76>>>0)>($Maxcode>>>0);
      if ($77) {
       $$4 = 2;
       break L4;
      }
      HEAP32[$frm_nxt>>2] = $61;
      $78 = $69 >>> 6;
      $79 = (($78) + 1)|0;
      $80 = $79 >>> 2;
      $81 = $80 | 240;
      $82 = $81&255;
      $83 = HEAP32[$to_nxt>>2]|0;
      $84 = ((($83)) + 1|0);
      HEAP32[$to_nxt>>2] = $84;
      HEAP8[$83>>0] = $82;
      $85 = $79 << 4;
      $86 = $85 & 48;
      $87 = $14 >>> 2;
      $88 = $87 & 15;
      $89 = $88 | $86;
      $90 = $89 | 128;
      $91 = $90&255;
      $92 = HEAP32[$to_nxt>>2]|0;
      $93 = ((($92)) + 1|0);
      HEAP32[$to_nxt>>2] = $93;
      HEAP8[$92>>0] = $91;
      $94 = $14 << 4;
      $95 = $94 & 48;
      $96 = $63 >>> 6;
      $97 = $96 & 15;
      $98 = $95 | $97;
      $99 = $98 | 128;
      $100 = $99&255;
      $101 = HEAP32[$to_nxt>>2]|0;
      $102 = ((($101)) + 1|0);
      HEAP32[$to_nxt>>2] = $102;
      HEAP8[$101>>0] = $100;
      $103 = $63 & 63;
      $104 = $103 | 128;
      $105 = $104&255;
      $106 = HEAP32[$to_nxt>>2]|0;
      $107 = ((($106)) + 1|0);
      HEAP32[$to_nxt>>2] = $107;
      HEAP8[$106>>0] = $105;
     }
    } while(0);
    $128 = HEAP32[$frm_nxt>>2]|0;
    $129 = ((($128)) + 2|0);
    HEAP32[$frm_nxt>>2] = $129;
    $11 = $129;
   }
  }
 } while(0);
 return ($$4|0);
}
function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$8 = 0, $$lcssa = 0, $$off = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $$pre = $frm_end;
  $$pre$phiZ2D = $$pre;
 } else {
  $2 = HEAP32[$frm_nxt>>2]|0;
  $3 = $frm_end;
  $4 = $2;
  $5 = (($3) - ($4))|0;
  $6 = ($5|0)>(2);
  if ($6) {
   $7 = HEAP8[$2>>0]|0;
   $8 = ($7<<24>>24)==(-17);
   if ($8) {
    $9 = ((($2)) + 1|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)==(-69);
    if ($11) {
     $12 = ((($2)) + 2|0);
     $13 = HEAP8[$12>>0]|0;
     $14 = ($13<<24>>24)==(-65);
     if ($14) {
      $15 = ((($2)) + 3|0);
      HEAP32[$frm_nxt>>2] = $15;
      $$pre$phiZ2D = $3;
     } else {
      $$pre$phiZ2D = $3;
     }
    } else {
     $$pre$phiZ2D = $3;
    }
   } else {
    $$pre$phiZ2D = $3;
   }
  } else {
   $$pre$phiZ2D = $3;
  }
 }
 $16 = $to_end;
 L9: while(1) {
  $17 = HEAP32[$frm_nxt>>2]|0;
  $18 = ($17>>>0)<($frm_end>>>0);
  if (!($18)) {
   $$lcssa = $18;
   label = 41;
   break;
  }
  $19 = HEAP32[$to_nxt>>2]|0;
  $20 = ($19>>>0)<($to_end>>>0);
  if (!($20)) {
   $$lcssa = $18;
   label = 41;
   break;
  }
  $21 = HEAP8[$17>>0]|0;
  $22 = $21&255;
  $23 = ($22>>>0)>($Maxcode>>>0);
  if ($23) {
   $$8 = 2;
   break;
  }
  $24 = ($21<<24>>24)>(-1);
  do {
   if ($24) {
    $25 = $21&255;
    HEAP16[$19>>1] = $25;
    $26 = ((($17)) + 1|0);
    HEAP32[$frm_nxt>>2] = $26;
   } else {
    $27 = ($21&255)<(194);
    if ($27) {
     $$8 = 2;
     break L9;
    }
    $28 = ($21&255)<(224);
    if ($28) {
     $29 = $17;
     $30 = (($$pre$phiZ2D) - ($29))|0;
     $31 = ($30|0)<(2);
     if ($31) {
      $$8 = 1;
      break L9;
     }
     $32 = ((($17)) + 1|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = $33&255;
     $35 = $34 & 192;
     $36 = ($35|0)==(128);
     if (!($36)) {
      $$8 = 2;
      break L9;
     }
     $37 = $22 << 6;
     $38 = $37 & 1984;
     $39 = $34 & 63;
     $40 = $39 | $38;
     $41 = ($40>>>0)>($Maxcode>>>0);
     if ($41) {
      $$8 = 2;
      break L9;
     }
     $42 = $40&65535;
     HEAP16[$19>>1] = $42;
     $43 = ((($17)) + 2|0);
     HEAP32[$frm_nxt>>2] = $43;
     break;
    }
    $44 = ($21&255)<(240);
    if ($44) {
     $45 = $17;
     $46 = (($$pre$phiZ2D) - ($45))|0;
     $47 = ($46|0)<(3);
     if ($47) {
      $$8 = 1;
      break L9;
     }
     $48 = ((($17)) + 1|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = ((($17)) + 2|0);
     $51 = HEAP8[$50>>0]|0;
     switch ($22|0) {
     case 224:  {
      $52 = $49 & -32;
      $53 = ($52<<24>>24)==(-96);
      if (!($53)) {
       $$8 = 2;
       break L9;
      }
      break;
     }
     case 237:  {
      $54 = $49 & -32;
      $55 = ($54<<24>>24)==(-128);
      if (!($55)) {
       $$8 = 2;
       break L9;
      }
      break;
     }
     default: {
      $56 = $49 & -64;
      $57 = ($56<<24>>24)==(-128);
      if (!($57)) {
       $$8 = 2;
       break L9;
      }
     }
     }
     $58 = $51&255;
     $59 = $58 & 192;
     $60 = ($59|0)==(128);
     if (!($60)) {
      $$8 = 2;
      break L9;
     }
     $61 = $22 << 12;
     $62 = $49&255;
     $63 = $62 << 6;
     $64 = $63 & 4032;
     $65 = $64 | $61;
     $66 = $58 & 63;
     $67 = $65 | $66;
     $68 = $67 & 65535;
     $69 = ($68>>>0)>($Maxcode>>>0);
     if ($69) {
      $$8 = 2;
      break L9;
     }
     $70 = $67&65535;
     HEAP16[$19>>1] = $70;
     $71 = ((($17)) + 3|0);
     HEAP32[$frm_nxt>>2] = $71;
     break;
    }
    $72 = ($21&255)<(245);
    if (!($72)) {
     $$8 = 2;
     break L9;
    }
    $73 = $17;
    $74 = (($$pre$phiZ2D) - ($73))|0;
    $75 = ($74|0)<(4);
    if ($75) {
     $$8 = 1;
     break L9;
    }
    $76 = ((($17)) + 1|0);
    $77 = HEAP8[$76>>0]|0;
    $78 = ((($17)) + 2|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = ((($17)) + 3|0);
    $81 = HEAP8[$80>>0]|0;
    switch ($22|0) {
    case 240:  {
     $$off = (($77) + 112)<<24>>24;
     $82 = ($$off&255)<(48);
     if (!($82)) {
      $$8 = 2;
      break L9;
     }
     break;
    }
    case 244:  {
     $83 = $77 & -16;
     $84 = ($83<<24>>24)==(-128);
     if (!($84)) {
      $$8 = 2;
      break L9;
     }
     break;
    }
    default: {
     $85 = $77 & -64;
     $86 = ($85<<24>>24)==(-128);
     if (!($86)) {
      $$8 = 2;
      break L9;
     }
    }
    }
    $87 = $79&255;
    $88 = $87 & 192;
    $89 = ($88|0)==(128);
    if (!($89)) {
     $$8 = 2;
     break L9;
    }
    $90 = $81&255;
    $91 = $90 & 192;
    $92 = ($91|0)==(128);
    if (!($92)) {
     $$8 = 2;
     break L9;
    }
    $93 = $19;
    $94 = (($16) - ($93))|0;
    $95 = ($94|0)<(4);
    if ($95) {
     $$8 = 1;
     break L9;
    }
    $96 = $22 & 7;
    $97 = $96 << 18;
    $98 = $77&255;
    $99 = $98 << 12;
    $100 = $99 & 258048;
    $101 = $100 | $97;
    $102 = $87 << 6;
    $103 = $102 & 4032;
    $104 = $101 | $103;
    $105 = $90 & 63;
    $106 = $104 | $105;
    $107 = ($106>>>0)>($Maxcode>>>0);
    if ($107) {
     $$8 = 2;
     break L9;
    }
    $108 = $96 << 2;
    $109 = $98 >>> 4;
    $110 = $109 & 3;
    $111 = $110 | $108;
    $112 = $111 << 6;
    $113 = (($112) + 16320)|0;
    $114 = $98 << 2;
    $115 = $114 & 60;
    $116 = $87 >>> 4;
    $117 = $116 & 3;
    $118 = $115 | $117;
    $119 = $118 | $113;
    $120 = $119 | 55296;
    $121 = $120&65535;
    HEAP16[$19>>1] = $121;
    $122 = $102 & 960;
    $123 = $105 | $122;
    $124 = $123 | 56320;
    $125 = $124&65535;
    $126 = ((($19)) + 2|0);
    HEAP32[$to_nxt>>2] = $126;
    HEAP16[$126>>1] = $125;
    $127 = HEAP32[$frm_nxt>>2]|0;
    $128 = ((($127)) + 4|0);
    HEAP32[$frm_nxt>>2] = $128;
   }
  } while(0);
  $129 = HEAP32[$to_nxt>>2]|0;
  $130 = ((($129)) + 2|0);
  HEAP32[$to_nxt>>2] = $130;
 }
 if ((label|0) == 41) {
  $131 = $$lcssa&1;
  $$8 = $131;
 }
 return ($$8|0);
}
function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$49 = 0, $$5 = 0, $$6 = 0, $$frm = 0, $$lcssa = 0, $$lcssa89 = 0, $$lcssa90 = 0, $$lcssa91 = 0, $$lcssa92 = 0, $$lcssa93 = 0, $$off = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre44 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $frm_nxt$1 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$lcssa82 = 0, $frm_nxt$1$lcssa83 = 0, $frm_nxt$1$lcssa84 = 0, $frm_nxt$1$lcssa85 = 0, $frm_nxt$1$lcssa86 = 0, $frm_nxt$1$lcssa87 = 0, $frm_nxt$188 = 0, $frm_nxt$5 = 0;
 var $nchar16_t$0 = 0, $nchar16_t$2 = 0, $or$cond = 0, $or$cond11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre44 = $frm_end;
 if ($1) {
  $frm_nxt$1 = $frm;$nchar16_t$0 = 0;
 } else {
  $2 = $frm;
  $3 = (($$pre44) - ($2))|0;
  $4 = ($3|0)>(2);
  if ($4) {
   $5 = HEAP8[$frm>>0]|0;
   $6 = ($5<<24>>24)==(-17);
   if ($6) {
    $7 = ((($frm)) + 1|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = ($8<<24>>24)==(-69);
    if ($9) {
     $10 = ((($frm)) + 2|0);
     $11 = HEAP8[$10>>0]|0;
     $12 = ($11<<24>>24)==(-65);
     $13 = ((($frm)) + 3|0);
     $$frm = $12 ? $13 : $frm;
     $frm_nxt$1 = $$frm;$nchar16_t$0 = 0;
    } else {
     $frm_nxt$1 = $frm;$nchar16_t$0 = 0;
    }
   } else {
    $frm_nxt$1 = $frm;$nchar16_t$0 = 0;
   }
  } else {
   $frm_nxt$1 = $frm;$nchar16_t$0 = 0;
  }
 }
 L6: while(1) {
  $14 = ($frm_nxt$1>>>0)<($frm_end>>>0);
  $15 = ($nchar16_t$0>>>0)<($mx>>>0);
  $or$cond = $15 & $14;
  if (!($or$cond)) {
   $frm_nxt$1$lcssa = $frm_nxt$1;
   label = 40;
   break;
  }
  $16 = HEAP8[$frm_nxt$1>>0]|0;
  $17 = $16&255;
  $18 = ($17>>>0)>($Maxcode>>>0);
  if ($18) {
   $frm_nxt$1$lcssa = $frm_nxt$1;
   label = 40;
   break;
  }
  $19 = ($16<<24>>24)>(-1);
  do {
   if ($19) {
    $20 = ((($frm_nxt$1)) + 1|0);
    $frm_nxt$5 = $20;$nchar16_t$2 = $nchar16_t$0;
   } else {
    $21 = ($16&255)<(194);
    if ($21) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $22 = ($16&255)<(224);
    if ($22) {
     $23 = $frm_nxt$1;
     $24 = (($$pre44) - ($23))|0;
     $25 = ($24|0)<(2);
     if ($25) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     }
     $26 = ((($frm_nxt$1)) + 1|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = $27&255;
     $29 = $28 & 192;
     $30 = ($29|0)==(128);
     if (!($30)) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     }
     $31 = $17 << 6;
     $32 = $31 & 1984;
     $33 = $28 & 63;
     $34 = $33 | $32;
     $35 = ($34>>>0)>($Maxcode>>>0);
     $36 = ((($frm_nxt$1)) + 2|0);
     if ($35) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     } else {
      $frm_nxt$5 = $36;$nchar16_t$2 = $nchar16_t$0;
      break;
     }
    }
    $37 = ($16&255)<(240);
    if ($37) {
     $38 = $frm_nxt$1;
     $39 = (($$pre44) - ($38))|0;
     $40 = ($39|0)<(3);
     if ($40) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     }
     $41 = ((($frm_nxt$1)) + 1|0);
     $42 = HEAP8[$41>>0]|0;
     $43 = ((($frm_nxt$1)) + 2|0);
     $44 = HEAP8[$43>>0]|0;
     switch ($17|0) {
     case 224:  {
      $45 = $42 & -32;
      $46 = ($45<<24>>24)==(-96);
      if (!($46)) {
       $$lcssa92 = $38;$frm_nxt$1$lcssa86 = $frm_nxt$1;
       label = 19;
       break L6;
      }
      break;
     }
     case 237:  {
      $49 = $42 & -32;
      $50 = ($49<<24>>24)==(-128);
      if (!($50)) {
       $$lcssa91 = $38;$frm_nxt$1$lcssa85 = $frm_nxt$1;
       label = 21;
       break L6;
      }
      break;
     }
     default: {
      $53 = $42 & -64;
      $54 = ($53<<24>>24)==(-128);
      if (!($54)) {
       $$lcssa93 = $38;$frm_nxt$1$lcssa87 = $frm_nxt$1;
       label = 23;
       break L6;
      }
     }
     }
     $57 = $44&255;
     $58 = $57 & 192;
     $59 = ($58|0)==(128);
     if (!($59)) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     }
     $60 = $17 << 12;
     $61 = $60 & 61440;
     $62 = $42&255;
     $63 = $62 << 6;
     $64 = $63 & 4032;
     $65 = $64 | $61;
     $66 = $57 & 63;
     $67 = $65 | $66;
     $68 = ($67>>>0)>($Maxcode>>>0);
     $69 = ((($frm_nxt$1)) + 3|0);
     if ($68) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     } else {
      $frm_nxt$5 = $69;$nchar16_t$2 = $nchar16_t$0;
      break;
     }
    }
    $70 = ($16&255)<(245);
    if (!($70)) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $71 = $frm_nxt$1;
    $72 = (($$pre44) - ($71))|0;
    $73 = ($72|0)<(4);
    $74 = (($mx) - ($nchar16_t$0))|0;
    $75 = ($74>>>0)<(2);
    $or$cond11 = $75 | $73;
    if ($or$cond11) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $76 = ((($frm_nxt$1)) + 1|0);
    $77 = HEAP8[$76>>0]|0;
    $78 = ((($frm_nxt$1)) + 2|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = ((($frm_nxt$1)) + 3|0);
    $81 = HEAP8[$80>>0]|0;
    switch ($17|0) {
    case 240:  {
     $$off = (($77) + 112)<<24>>24;
     $82 = ($$off&255)<(48);
     if (!($82)) {
      $$lcssa89 = $71;$frm_nxt$1$lcssa83 = $frm_nxt$1;
      label = 30;
      break L6;
     }
     break;
    }
    case 244:  {
     $85 = $77 & -16;
     $86 = ($85<<24>>24)==(-128);
     if (!($86)) {
      $$lcssa = $71;$frm_nxt$1$lcssa82 = $frm_nxt$1;
      label = 32;
      break L6;
     }
     break;
    }
    default: {
     $89 = $77 & -64;
     $90 = ($89<<24>>24)==(-128);
     if (!($90)) {
      $$lcssa90 = $71;$frm_nxt$1$lcssa84 = $frm_nxt$1;
      label = 34;
      break L6;
     }
    }
    }
    $93 = $79&255;
    $94 = $93 & 192;
    $95 = ($94|0)==(128);
    if (!($95)) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $96 = $81&255;
    $97 = $96 & 192;
    $98 = ($97|0)==(128);
    if (!($98)) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $99 = $17 << 18;
    $100 = $99 & 1835008;
    $101 = $77&255;
    $102 = $101 << 12;
    $103 = $102 & 258048;
    $104 = $103 | $100;
    $105 = $93 << 6;
    $106 = $105 & 4032;
    $107 = $104 | $106;
    $108 = $96 & 63;
    $109 = $107 | $108;
    $110 = ($109>>>0)>($Maxcode>>>0);
    if ($110) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $111 = (($nchar16_t$0) + 1)|0;
    $112 = ((($frm_nxt$1)) + 4|0);
    $frm_nxt$5 = $112;$nchar16_t$2 = $111;
   }
  } while(0);
  $113 = (($nchar16_t$2) + 1)|0;
  $frm_nxt$1 = $frm_nxt$5;$nchar16_t$0 = $113;
 }
 if ((label|0) == 19) {
  $47 = $frm;
  $48 = (($$lcssa92) - ($47))|0;
  $$49 = 0;$$5 = $48;$$pre$phiZ2D = $47;$frm_nxt$188 = $frm_nxt$1$lcssa86;
 }
 else if ((label|0) == 21) {
  $51 = $frm;
  $52 = (($$lcssa91) - ($51))|0;
  $$49 = 0;$$5 = $52;$$pre$phiZ2D = $51;$frm_nxt$188 = $frm_nxt$1$lcssa85;
 }
 else if ((label|0) == 23) {
  $55 = $frm;
  $56 = (($$lcssa93) - ($55))|0;
  $$49 = 0;$$5 = $56;$$pre$phiZ2D = $55;$frm_nxt$188 = $frm_nxt$1$lcssa87;
 }
 else if ((label|0) == 30) {
  $83 = $frm;
  $84 = (($$lcssa89) - ($83))|0;
  $$49 = 0;$$5 = $84;$$pre$phiZ2D = $83;$frm_nxt$188 = $frm_nxt$1$lcssa83;
 }
 else if ((label|0) == 32) {
  $87 = $frm;
  $88 = (($$lcssa) - ($87))|0;
  $$49 = 0;$$5 = $88;$$pre$phiZ2D = $87;$frm_nxt$188 = $frm_nxt$1$lcssa82;
 }
 else if ((label|0) == 34) {
  $91 = $frm;
  $92 = (($$lcssa90) - ($91))|0;
  $$49 = 0;$$5 = $92;$$pre$phiZ2D = $91;$frm_nxt$188 = $frm_nxt$1$lcssa84;
 }
 else if ((label|0) == 40) {
  $$pre = $frm;
  $$49 = 1;$$5 = 0;$$pre$phiZ2D = $$pre;$frm_nxt$188 = $frm_nxt$1$lcssa;
 }
 $114 = $frm_nxt$188;
 $115 = (($114) - ($$pre$phiZ2D))|0;
 $$6 = $$49 ? $115 : $$5;
 return ($$6|0);
}
function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$2 = 0, $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 $$pre2 = $to_end;
 if ($1) {
  label = 4;
 } else {
  $2 = $to;
  $3 = (($$pre2) - ($2))|0;
  $4 = ($3|0)<(3);
  if ($4) {
   $$2 = 1;
  } else {
   $5 = ((($to)) + 1|0);
   HEAP32[$to_nxt>>2] = $5;
   HEAP8[$to>>0] = -17;
   $6 = HEAP32[$to_nxt>>2]|0;
   $7 = ((($6)) + 1|0);
   HEAP32[$to_nxt>>2] = $7;
   HEAP8[$6>>0] = -69;
   $8 = HEAP32[$to_nxt>>2]|0;
   $9 = ((($8)) + 1|0);
   HEAP32[$to_nxt>>2] = $9;
   HEAP8[$8>>0] = -65;
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $$pre = HEAP32[$frm_nxt>>2]|0;
   $10 = $$pre;
   while(1) {
    $11 = ($10>>>0)<($frm_end>>>0);
    if (!($11)) {
     $$2 = 0;
     break L4;
    }
    $12 = HEAP32[$10>>2]|0;
    $13 = $12 & -2048;
    $14 = ($13|0)==(55296);
    $15 = ($12>>>0)>($Maxcode>>>0);
    $or$cond = $15 | $14;
    if ($or$cond) {
     $$2 = 2;
     break L4;
    }
    $16 = ($12>>>0)<(128);
    do {
     if ($16) {
      $17 = HEAP32[$to_nxt>>2]|0;
      $18 = $17;
      $19 = (($$pre2) - ($18))|0;
      $20 = ($19|0)<(1);
      if ($20) {
       $$2 = 1;
       break L4;
      }
      $21 = $12&255;
      $22 = ((($17)) + 1|0);
      HEAP32[$to_nxt>>2] = $22;
      HEAP8[$17>>0] = $21;
     } else {
      $23 = ($12>>>0)<(2048);
      if ($23) {
       $24 = HEAP32[$to_nxt>>2]|0;
       $25 = $24;
       $26 = (($$pre2) - ($25))|0;
       $27 = ($26|0)<(2);
       if ($27) {
        $$2 = 1;
        break L4;
       }
       $28 = $12 >>> 6;
       $29 = $28 | 192;
       $30 = $29&255;
       $31 = ((($24)) + 1|0);
       HEAP32[$to_nxt>>2] = $31;
       HEAP8[$24>>0] = $30;
       $32 = $12 & 63;
       $33 = $32 | 128;
       $34 = $33&255;
       $35 = HEAP32[$to_nxt>>2]|0;
       $36 = ((($35)) + 1|0);
       HEAP32[$to_nxt>>2] = $36;
       HEAP8[$35>>0] = $34;
       break;
      }
      $37 = ($12>>>0)<(65536);
      $38 = HEAP32[$to_nxt>>2]|0;
      $39 = $38;
      $40 = (($$pre2) - ($39))|0;
      if ($37) {
       $41 = ($40|0)<(3);
       if ($41) {
        $$2 = 1;
        break L4;
       }
       $42 = $12 >>> 12;
       $43 = $42 | 224;
       $44 = $43&255;
       $45 = ((($38)) + 1|0);
       HEAP32[$to_nxt>>2] = $45;
       HEAP8[$38>>0] = $44;
       $46 = $12 >>> 6;
       $47 = $46 & 63;
       $48 = $47 | 128;
       $49 = $48&255;
       $50 = HEAP32[$to_nxt>>2]|0;
       $51 = ((($50)) + 1|0);
       HEAP32[$to_nxt>>2] = $51;
       HEAP8[$50>>0] = $49;
       $52 = $12 & 63;
       $53 = $52 | 128;
       $54 = $53&255;
       $55 = HEAP32[$to_nxt>>2]|0;
       $56 = ((($55)) + 1|0);
       HEAP32[$to_nxt>>2] = $56;
       HEAP8[$55>>0] = $54;
       break;
      } else {
       $57 = ($40|0)<(4);
       if ($57) {
        $$2 = 1;
        break L4;
       }
       $58 = $12 >>> 18;
       $59 = $58 | 240;
       $60 = $59&255;
       $61 = ((($38)) + 1|0);
       HEAP32[$to_nxt>>2] = $61;
       HEAP8[$38>>0] = $60;
       $62 = $12 >>> 12;
       $63 = $62 & 63;
       $64 = $63 | 128;
       $65 = $64&255;
       $66 = HEAP32[$to_nxt>>2]|0;
       $67 = ((($66)) + 1|0);
       HEAP32[$to_nxt>>2] = $67;
       HEAP8[$66>>0] = $65;
       $68 = $12 >>> 6;
       $69 = $68 & 63;
       $70 = $69 | 128;
       $71 = $70&255;
       $72 = HEAP32[$to_nxt>>2]|0;
       $73 = ((($72)) + 1|0);
       HEAP32[$to_nxt>>2] = $73;
       HEAP8[$72>>0] = $71;
       $74 = $12 & 63;
       $75 = $74 | 128;
       $76 = $75&255;
       $77 = HEAP32[$to_nxt>>2]|0;
       $78 = ((($77)) + 1|0);
       HEAP32[$to_nxt>>2] = $78;
       HEAP8[$77>>0] = $76;
       break;
      }
     }
    } while(0);
    $79 = HEAP32[$frm_nxt>>2]|0;
    $80 = ((($79)) + 4|0);
    HEAP32[$frm_nxt>>2] = $80;
    $10 = $80;
   }
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$9 = 0, $$lcssa = 0, $$off = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $$pre = $frm_end;
  $$pre$phiZ2D = $$pre;
 } else {
  $2 = HEAP32[$frm_nxt>>2]|0;
  $3 = $frm_end;
  $4 = $2;
  $5 = (($3) - ($4))|0;
  $6 = ($5|0)>(2);
  if ($6) {
   $7 = HEAP8[$2>>0]|0;
   $8 = ($7<<24>>24)==(-17);
   if ($8) {
    $9 = ((($2)) + 1|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)==(-69);
    if ($11) {
     $12 = ((($2)) + 2|0);
     $13 = HEAP8[$12>>0]|0;
     $14 = ($13<<24>>24)==(-65);
     if ($14) {
      $15 = ((($2)) + 3|0);
      HEAP32[$frm_nxt>>2] = $15;
      $$pre$phiZ2D = $3;
     } else {
      $$pre$phiZ2D = $3;
     }
    } else {
     $$pre$phiZ2D = $3;
    }
   } else {
    $$pre$phiZ2D = $3;
   }
  } else {
   $$pre$phiZ2D = $3;
  }
 }
 L9: while(1) {
  $16 = HEAP32[$frm_nxt>>2]|0;
  $17 = ($16>>>0)<($frm_end>>>0);
  if (!($17)) {
   $$lcssa = $17;
   label = 40;
   break;
  }
  $18 = HEAP32[$to_nxt>>2]|0;
  $19 = ($18>>>0)<($to_end>>>0);
  if (!($19)) {
   $$lcssa = $17;
   label = 40;
   break;
  }
  $20 = HEAP8[$16>>0]|0;
  $21 = $20&255;
  $22 = ($20<<24>>24)>(-1);
  do {
   if ($22) {
    $23 = ($21>>>0)>($Maxcode>>>0);
    if ($23) {
     $$9 = 2;
     break L9;
    }
    HEAP32[$18>>2] = $21;
    $24 = ((($16)) + 1|0);
    HEAP32[$frm_nxt>>2] = $24;
   } else {
    $25 = ($20&255)<(194);
    if ($25) {
     $$9 = 2;
     break L9;
    }
    $26 = ($20&255)<(224);
    if ($26) {
     $27 = $16;
     $28 = (($$pre$phiZ2D) - ($27))|0;
     $29 = ($28|0)<(2);
     if ($29) {
      $$9 = 1;
      break L9;
     }
     $30 = ((($16)) + 1|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = $31&255;
     $33 = $32 & 192;
     $34 = ($33|0)==(128);
     if (!($34)) {
      $$9 = 2;
      break L9;
     }
     $35 = $21 << 6;
     $36 = $35 & 1984;
     $37 = $32 & 63;
     $38 = $37 | $36;
     $39 = ($38>>>0)>($Maxcode>>>0);
     if ($39) {
      $$9 = 2;
      break L9;
     }
     HEAP32[$18>>2] = $38;
     $40 = ((($16)) + 2|0);
     HEAP32[$frm_nxt>>2] = $40;
     break;
    }
    $41 = ($20&255)<(240);
    if ($41) {
     $42 = $16;
     $43 = (($$pre$phiZ2D) - ($42))|0;
     $44 = ($43|0)<(3);
     if ($44) {
      $$9 = 1;
      break L9;
     }
     $45 = ((($16)) + 1|0);
     $46 = HEAP8[$45>>0]|0;
     $47 = ((($16)) + 2|0);
     $48 = HEAP8[$47>>0]|0;
     switch ($21|0) {
     case 224:  {
      $49 = $46 & -32;
      $50 = ($49<<24>>24)==(-96);
      if (!($50)) {
       $$9 = 2;
       break L9;
      }
      break;
     }
     case 237:  {
      $51 = $46 & -32;
      $52 = ($51<<24>>24)==(-128);
      if (!($52)) {
       $$9 = 2;
       break L9;
      }
      break;
     }
     default: {
      $53 = $46 & -64;
      $54 = ($53<<24>>24)==(-128);
      if (!($54)) {
       $$9 = 2;
       break L9;
      }
     }
     }
     $55 = $48&255;
     $56 = $55 & 192;
     $57 = ($56|0)==(128);
     if (!($57)) {
      $$9 = 2;
      break L9;
     }
     $58 = $21 << 12;
     $59 = $58 & 61440;
     $60 = $46&255;
     $61 = $60 << 6;
     $62 = $61 & 4032;
     $63 = $62 | $59;
     $64 = $55 & 63;
     $65 = $63 | $64;
     $66 = ($65>>>0)>($Maxcode>>>0);
     if ($66) {
      $$9 = 2;
      break L9;
     }
     HEAP32[$18>>2] = $65;
     $67 = ((($16)) + 3|0);
     HEAP32[$frm_nxt>>2] = $67;
     break;
    }
    $68 = ($20&255)<(245);
    if (!($68)) {
     $$9 = 2;
     break L9;
    }
    $69 = $16;
    $70 = (($$pre$phiZ2D) - ($69))|0;
    $71 = ($70|0)<(4);
    if ($71) {
     $$9 = 1;
     break L9;
    }
    $72 = ((($16)) + 1|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = ((($16)) + 2|0);
    $75 = HEAP8[$74>>0]|0;
    $76 = ((($16)) + 3|0);
    $77 = HEAP8[$76>>0]|0;
    switch ($21|0) {
    case 240:  {
     $$off = (($73) + 112)<<24>>24;
     $78 = ($$off&255)<(48);
     if (!($78)) {
      $$9 = 2;
      break L9;
     }
     break;
    }
    case 244:  {
     $79 = $73 & -16;
     $80 = ($79<<24>>24)==(-128);
     if (!($80)) {
      $$9 = 2;
      break L9;
     }
     break;
    }
    default: {
     $81 = $73 & -64;
     $82 = ($81<<24>>24)==(-128);
     if (!($82)) {
      $$9 = 2;
      break L9;
     }
    }
    }
    $83 = $75&255;
    $84 = $83 & 192;
    $85 = ($84|0)==(128);
    if (!($85)) {
     $$9 = 2;
     break L9;
    }
    $86 = $77&255;
    $87 = $86 & 192;
    $88 = ($87|0)==(128);
    if (!($88)) {
     $$9 = 2;
     break L9;
    }
    $89 = $21 << 18;
    $90 = $89 & 1835008;
    $91 = $73&255;
    $92 = $91 << 12;
    $93 = $92 & 258048;
    $94 = $93 | $90;
    $95 = $83 << 6;
    $96 = $95 & 4032;
    $97 = $94 | $96;
    $98 = $86 & 63;
    $99 = $97 | $98;
    $100 = ($99>>>0)>($Maxcode>>>0);
    if ($100) {
     $$9 = 2;
     break L9;
    }
    HEAP32[$18>>2] = $99;
    $101 = ((($16)) + 4|0);
    HEAP32[$frm_nxt>>2] = $101;
   }
  } while(0);
  $102 = HEAP32[$to_nxt>>2]|0;
  $103 = ((($102)) + 4|0);
  HEAP32[$to_nxt>>2] = $103;
 }
 if ((label|0) == 40) {
  $104 = $$lcssa&1;
  $$9 = $104;
 }
 return ($$9|0);
}
function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$37 = 0, $$frm = 0, $$lcssa = 0, $$lcssa100 = 0, $$lcssa101 = 0, $$lcssa102 = 0, $$lcssa98 = 0, $$lcssa99 = 0, $$off = 0, $$pre = 0, $$pre53 = 0, $$pre55 = 0, $$pre57 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $frm_nxt$1 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$5$ph24 = 0, $nchar32_t$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre57 = $frm_end;
 if ($1) {
  $frm_nxt$1 = $frm;$nchar32_t$0 = 0;
 } else {
  $2 = $frm;
  $3 = (($$pre57) - ($2))|0;
  $4 = ($3|0)>(2);
  if ($4) {
   $5 = HEAP8[$frm>>0]|0;
   $6 = ($5<<24>>24)==(-17);
   if ($6) {
    $7 = ((($frm)) + 1|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = ($8<<24>>24)==(-69);
    if ($9) {
     $10 = ((($frm)) + 2|0);
     $11 = HEAP8[$10>>0]|0;
     $12 = ($11<<24>>24)==(-65);
     $13 = ((($frm)) + 3|0);
     $$frm = $12 ? $13 : $frm;
     $frm_nxt$1 = $$frm;$nchar32_t$0 = 0;
    } else {
     $frm_nxt$1 = $frm;$nchar32_t$0 = 0;
    }
   } else {
    $frm_nxt$1 = $frm;$nchar32_t$0 = 0;
   }
  } else {
   $frm_nxt$1 = $frm;$nchar32_t$0 = 0;
  }
 }
 L6: while(1) {
  $14 = ($frm_nxt$1>>>0)<($frm_end>>>0);
  $15 = ($nchar32_t$0>>>0)<($mx>>>0);
  $or$cond = $15 & $14;
  if (!($or$cond)) {
   $frm_nxt$1$lcssa = $frm_nxt$1;
   label = 40;
   break;
  }
  $16 = HEAP8[$frm_nxt$1>>0]|0;
  $17 = $16&255;
  $18 = ($16<<24>>24)>(-1);
  do {
   if ($18) {
    $19 = ($17>>>0)>($Maxcode>>>0);
    if ($19) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $20 = ((($frm_nxt$1)) + 1|0);
    $frm_nxt$5$ph24 = $20;
   } else {
    $21 = ($16&255)<(194);
    if ($21) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $22 = ($16&255)<(224);
    if ($22) {
     $23 = $frm_nxt$1;
     $24 = (($$pre57) - ($23))|0;
     $25 = ($24|0)<(2);
     if ($25) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     }
     $26 = ((($frm_nxt$1)) + 1|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = $27&255;
     $29 = $28 & 192;
     $30 = ($29|0)==(128);
     if (!($30)) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     }
     $31 = $17 << 6;
     $32 = $31 & 1984;
     $33 = $28 & 63;
     $34 = $33 | $32;
     $35 = ($34>>>0)>($Maxcode>>>0);
     if ($35) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     }
     $36 = ((($frm_nxt$1)) + 2|0);
     $frm_nxt$5$ph24 = $36;
     break;
    }
    $37 = ($16&255)<(240);
    if ($37) {
     $38 = $frm_nxt$1;
     $39 = (($$pre57) - ($38))|0;
     $40 = ($39|0)<(3);
     if ($40) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     }
     $41 = ((($frm_nxt$1)) + 1|0);
     $42 = HEAP8[$41>>0]|0;
     $43 = ((($frm_nxt$1)) + 2|0);
     $44 = HEAP8[$43>>0]|0;
     switch ($17|0) {
     case 224:  {
      $45 = $42 & -32;
      $46 = ($45<<24>>24)==(-96);
      if (!($46)) {
       $$lcssa101 = $38;
       label = 20;
       break L6;
      }
      break;
     }
     case 237:  {
      $49 = $42 & -32;
      $50 = ($49<<24>>24)==(-128);
      if (!($50)) {
       $$lcssa100 = $38;
       label = 22;
       break L6;
      }
      break;
     }
     default: {
      $53 = $42 & -64;
      $54 = ($53<<24>>24)==(-128);
      if (!($54)) {
       $$lcssa102 = $38;
       label = 24;
       break L6;
      }
     }
     }
     $57 = $44&255;
     $58 = $57 & 192;
     $59 = ($58|0)==(128);
     if (!($59)) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     }
     $60 = $17 << 12;
     $61 = $60 & 61440;
     $62 = $42&255;
     $63 = $62 << 6;
     $64 = $63 & 4032;
     $65 = $64 | $61;
     $66 = $57 & 63;
     $67 = $65 | $66;
     $68 = ($67>>>0)>($Maxcode>>>0);
     $69 = ((($frm_nxt$1)) + 3|0);
     if ($68) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     } else {
      $frm_nxt$5$ph24 = $69;
      break;
     }
    }
    $70 = ($16&255)<(245);
    if (!($70)) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $71 = $frm_nxt$1;
    $72 = (($$pre57) - ($71))|0;
    $73 = ($72|0)<(4);
    if ($73) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $74 = ((($frm_nxt$1)) + 1|0);
    $75 = HEAP8[$74>>0]|0;
    $76 = ((($frm_nxt$1)) + 2|0);
    $77 = HEAP8[$76>>0]|0;
    $78 = ((($frm_nxt$1)) + 3|0);
    $79 = HEAP8[$78>>0]|0;
    switch ($17|0) {
    case 240:  {
     $$off = (($75) + 112)<<24>>24;
     $80 = ($$off&255)<(48);
     if (!($80)) {
      $$lcssa98 = $71;
      label = 31;
      break L6;
     }
     break;
    }
    case 244:  {
     $83 = $75 & -16;
     $84 = ($83<<24>>24)==(-128);
     if (!($84)) {
      $$lcssa = $71;
      label = 33;
      break L6;
     }
     break;
    }
    default: {
     $87 = $75 & -64;
     $88 = ($87<<24>>24)==(-128);
     if (!($88)) {
      $$lcssa99 = $71;
      label = 35;
      break L6;
     }
    }
    }
    $91 = $77&255;
    $92 = $91 & 192;
    $93 = ($92|0)==(128);
    if (!($93)) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $94 = $79&255;
    $95 = $94 & 192;
    $96 = ($95|0)==(128);
    if (!($96)) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $97 = $17 << 18;
    $98 = $97 & 1835008;
    $99 = $75&255;
    $100 = $99 << 12;
    $101 = $100 & 258048;
    $102 = $101 | $98;
    $103 = $91 << 6;
    $104 = $103 & 4032;
    $105 = $102 | $104;
    $106 = $94 & 63;
    $107 = $105 | $106;
    $108 = ($107>>>0)>($Maxcode>>>0);
    $109 = ((($frm_nxt$1)) + 4|0);
    if ($108) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    } else {
     $frm_nxt$5$ph24 = $109;
    }
   }
  } while(0);
  $110 = (($nchar32_t$0) + 1)|0;
  $frm_nxt$1 = $frm_nxt$5$ph24;$nchar32_t$0 = $110;
 }
 if ((label|0) == 20) {
  $47 = $frm;
  $48 = (($$lcssa101) - ($47))|0;
  $$37 = $48;
 }
 else if ((label|0) == 22) {
  $51 = $frm;
  $52 = (($$lcssa100) - ($51))|0;
  $$37 = $52;
 }
 else if ((label|0) == 24) {
  $55 = $frm;
  $56 = (($$lcssa102) - ($55))|0;
  $$37 = $56;
 }
 else if ((label|0) == 31) {
  $81 = $frm;
  $82 = (($$lcssa98) - ($81))|0;
  $$37 = $82;
 }
 else if ((label|0) == 33) {
  $85 = $frm;
  $86 = (($$lcssa) - ($85))|0;
  $$37 = $86;
 }
 else if ((label|0) == 35) {
  $89 = $frm;
  $90 = (($$lcssa99) - ($89))|0;
  $$37 = $90;
 }
 else if ((label|0) == 40) {
  $$pre = $frm_nxt$1$lcssa;
  $$pre53 = $frm;
  $$pre55 = (($$pre) - ($$pre53))|0;
  $$37 = $$pre55;
 }
 return ($$37|0);
}
function ___cxx_global_array_dtor($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9564));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9552));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9540));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9528));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9516));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9504));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9492));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9480));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9468));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9456));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9444));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9432));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((9420));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(9408);
 return;
}
function ___cxx_global_array_dtor_54($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9736));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9724));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9712));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9700));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9688));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9676));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9664));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9652));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9640));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9628));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9616));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9604));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((9592));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(9580);
 return;
}
function ___cxx_global_array_dtor_69($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10368));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10356));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10344));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10332));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10320));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10308));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10296));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10284));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10272));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10260));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10248));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10236));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10224));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10212));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10200));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10188));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10176));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10164));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10152));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10140));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10128));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10116));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((10104));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10092);
 return;
}
function ___cxx_global_array_dtor_93($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10660));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10648));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10636));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10624));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10612));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10600));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10588));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10576));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10564));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10552));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10540));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10528));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10516));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10504));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10492));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10480));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10468));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10456));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10444));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10432));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10420));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10408));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((10396));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10384);
 return;
}
function ___cxx_global_array_dtor_117($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((11472));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((11460));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((11448));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((11436));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((11424));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((11412));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((11400));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((11388));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((11376));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((11364));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((11352));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((11340));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((11328));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((11316));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((11304));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((11292));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((11280));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((11268));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((11256));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((11244));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((11232));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((11220));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((11208));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11196);
 return;
}
function ___cxx_global_array_dtor_120($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((11764));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((11752));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((11740));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((11728));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((11716));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((11704));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((11692));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((11680));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((11668));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((11656));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((11644));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((11632));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((11620));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((11608));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((11596));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((11584));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((11572));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((11560));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((11548));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((11536));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((11524));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((11512));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((11500));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11488);
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i$1 = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__v = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 $5 = $4 >> 2;
 $6 = ($5>>>0)<($__n>>>0);
 if ($6) {
  $7 = ((($this)) + 16|0);
  $8 = HEAP32[$this>>2]|0;
  $9 = (($3) - ($8))|0;
  $10 = $9 >> 2;
  $11 = (($10) + ($__n))|0;
  $12 = ($11>>>0)>(1073741823);
  if ($12) {
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
   // unreachable;
  }
  $13 = (($1) - ($8))|0;
  $14 = $13 >> 2;
  $15 = ($14>>>0)<(536870911);
  if ($15) {
   $16 = $13 >> 1;
   $17 = ($16>>>0)<($11>>>0);
   $18 = $17 ? $11 : $16;
   $$0$i$1 = $18;
  } else {
   $$0$i$1 = 1073741823;
  }
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($__v,$$0$i$1,$10,$7);
  $19 = ((($__v)) + 8|0);
  $$pre$i = HEAP32[$19>>2]|0;
  $20 = $__n << 2;
  _memset(($$pre$i|0),0,($20|0))|0;
  $scevgep = (($$pre$i) + ($__n<<2)|0);
  HEAP32[$19>>2] = $scevgep;
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v);
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($__v);
 } else {
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $$pre = HEAP32[$0>>2]|0;
 $$0 = $__n;$1 = $$pre;
 while(1) {
  HEAP32[$1>>2] = 0;
  $2 = HEAP32[$0>>2]|0;
  $3 = ((($2)) + 4|0);
  HEAP32[$0>>2] = $3;
  $4 = (($$0) + -1)|0;
  $5 = ($4|0)==(0);
  if ($5) {
   break;
  } else {
   $$0 = $4;$1 = $3;
  }
 }
 return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $$not$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 do {
  if ($2) {
   $8 = 0;
  } else {
   $3 = ((($__a)) + 112|0);
   $4 = HEAP8[$3>>0]|0;
   $$not$i$i = ($4<<24>>24)==(0);
   $5 = ($__cap>>>0)<(29);
   $or$cond$i$i = $5 & $$not$i$i;
   if ($or$cond$i$i) {
    HEAP8[$3>>0] = 1;
    $8 = $__a;
    break;
   } else {
    $6 = $__cap << 2;
    $7 = (__Znwj($6)|0);
    $8 = $7;
    break;
   }
  }
 } while(0);
 HEAP32[$this>>2] = $8;
 $9 = (($8) + ($__start<<2)|0);
 $10 = ((($this)) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($this)) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = (($8) + ($__cap<<2)|0);
 $13 = ((($this)) + 12|0);
 HEAP32[$13>>2] = $12;
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($this)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($__v)) + 4|0);
 $4 = $0;
 $5 = (($2) - ($4))|0;
 $6 = $5 >> 2;
 $7 = HEAP32[$3>>2]|0;
 $8 = (0 - ($6))|0;
 $9 = (($7) + ($8<<2)|0);
 HEAP32[$3>>2] = $9;
 _memcpy(($9|0),($0|0),($5|0))|0;
 $10 = HEAP32[$this>>2]|0;
 $11 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $11;
 HEAP32[$3>>2] = $10;
 $12 = ((($__v)) + 8|0);
 $13 = HEAP32[$1>>2]|0;
 $14 = HEAP32[$12>>2]|0;
 HEAP32[$1>>2] = $14;
 HEAP32[$12>>2] = $13;
 $15 = ((($this)) + 8|0);
 $16 = ((($__v)) + 12|0);
 $17 = HEAP32[$15>>2]|0;
 $18 = HEAP32[$16>>2]|0;
 HEAP32[$15>>2] = $18;
 HEAP32[$16>>2] = $17;
 $19 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $19;
 return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this|0;
 var $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 8|0);
 $$pre$i$i$i = HEAP32[$2>>2]|0;
 $3 = $$pre$i$i$i;
 while(1) {
  $4 = ($3|0)==($1|0);
  if ($4) {
   break;
  }
  $5 = ((($3)) + -4|0);
  HEAP32[$2>>2] = $5;
  $3 = $5;
 }
 $6 = HEAP32[$this>>2]|0;
 $7 = ($6|0)==(0|0);
 do {
  if (!($7)) {
   $8 = ((($this)) + 16|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==($6|0);
   if ($10) {
    $11 = ((($9)) + 112|0);
    HEAP8[$11>>0] = 0;
    break;
   } else {
    __ZdlPv($6);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i$i = 0, $$not$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741823);
 if ($0) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ((($this)) + 128|0);
 $2 = HEAP8[$1>>0]|0;
 $$not$i$i = ($2<<24>>24)==(0);
 $3 = ($__n>>>0)<(29);
 $or$cond$i$i = $3 & $$not$i$i;
 if ($or$cond$i$i) {
  $4 = ((($this)) + 16|0);
  HEAP8[$1>>0] = 1;
  $$0$i$i = $4;
 } else {
  $5 = $__n << 2;
  $6 = (__Znwj($5)|0);
  $$0$i$i = $6;
 }
 $7 = ((($this)) + 4|0);
 HEAP32[$7>>2] = $$0$i$i;
 HEAP32[$this>>2] = $$0$i$i;
 $8 = (($$0$i$i) + ($__n<<2)|0);
 $9 = ((($this)) + 8|0);
 HEAP32[$9>>2] = $8;
 return;
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $$1 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$1 = 0.0;
 } else {
  $1 = (___errno_location()|0);
  $2 = HEAP32[$1>>2]|0;
  HEAP32[$1>>2] = 0;
  $3 = (__ZNSt3__16__clocEv()|0);
  $4 = (+_strtold_l($__a,$__p2,$3));
  $5 = HEAP32[$1>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   HEAP32[$1>>2] = $2;
  }
  $7 = HEAP32[$__p2>>2]|0;
  $8 = ($7|0)==($__a_end|0);
  if ($8) {
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  } else {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;return (+$$1);
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $$1 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$1 = 0.0;
 } else {
  $1 = (___errno_location()|0);
  $2 = HEAP32[$1>>2]|0;
  HEAP32[$1>>2] = 0;
  $3 = (__ZNSt3__16__clocEv()|0);
  $4 = (+_strtold_l($__a,$__p2,$3));
  $5 = HEAP32[$1>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   HEAP32[$1>>2] = $2;
  }
  $7 = HEAP32[$__p2>>2]|0;
  $8 = ($7|0)==($__a_end|0);
  if ($8) {
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  } else {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;return (+$$1);
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $$1 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$1 = 0.0;
 } else {
  $1 = (___errno_location()|0);
  $2 = HEAP32[$1>>2]|0;
  HEAP32[$1>>2] = 0;
  $3 = (__ZNSt3__16__clocEv()|0);
  $4 = (+_strtold_l($__a,$__p2,$3));
  $5 = HEAP32[$1>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   HEAP32[$1>>2] = $2;
  }
  $7 = HEAP32[$__p2>>2]|0;
  $8 = ($7|0)==($__a_end|0);
  if ($8) {
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
   }
   $10 = $4;
   $$0 = $10;
  } else {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;return (+$$1);
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $13 = 0;$14 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $13 = 0;$14 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   if ($11) {
    $12 = ($8|0)==(34);
    if ($12) {
     HEAP32[$__err>>2] = 4;
     $15 = -1;$16 = -1;
    } else {
     $15 = $6;$16 = $7;
    }
   } else {
    HEAP32[$__err>>2] = 4;
    $15 = 0;$16 = 0;
   }
   $13 = $16;$14 = $15;
  }
 } while(0);
 tempRet0 = ($13);
 STACKTOP = sp;return ($14|0);
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$1 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $$1 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   do {
    if ($11) {
     $12 = ($8|0)==(34);
     $13 = ($7>>>0)>(0);
     $14 = ($6>>>0)>(4294967295);
     $15 = ($7|0)==(0);
     $16 = $15 & $14;
     $17 = $13 | $16;
     $or$cond = $17 | $12;
     if ($or$cond) {
      HEAP32[$__err>>2] = 4;
      $$0 = -1;
      break;
     } else {
      $$0 = $6;
      break;
     }
    } else {
     HEAP32[$__err>>2] = 4;
     $$0 = 0;
    }
   } while(0);
   $$1 = $$0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$1 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $$1 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   do {
    if ($11) {
     $12 = ($8|0)==(34);
     $13 = ($7>>>0)>(0);
     $14 = ($6>>>0)>(4294967295);
     $15 = ($7|0)==(0);
     $16 = $15 & $14;
     $17 = $13 | $16;
     $or$cond = $17 | $12;
     if ($or$cond) {
      HEAP32[$__err>>2] = 4;
      $$0 = -1;
      break;
     } else {
      $$0 = $6;
      break;
     }
    } else {
     HEAP32[$__err>>2] = 4;
     $$0 = 0;
    }
   } while(0);
   $$1 = $$0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$1 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $$1 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   do {
    if ($11) {
     $12 = ($8|0)==(34);
     $13 = ($7>>>0)>(0);
     $14 = ($6>>>0)>(65535);
     $15 = ($7|0)==(0);
     $16 = $15 & $14;
     $17 = $13 | $16;
     $or$cond = $17 | $12;
     if ($or$cond) {
      HEAP32[$__err>>2] = 4;
      $$0 = -1;
      break;
     } else {
      $18 = $6&65535;
      $$0 = $18;
      break;
     }
    } else {
     HEAP32[$__err>>2] = 4;
     $$0 = 0;
    }
   } while(0);
   $$1 = $$0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $18 = 0;$19 = 0;
 } else {
  $1 = (___errno_location()|0);
  $2 = HEAP32[$1>>2]|0;
  HEAP32[$1>>2] = 0;
  $3 = (__ZNSt3__16__clocEv()|0);
  $4 = (_strtoll_l($__a,$__p2,$__base,$3)|0);
  $5 = tempRet0;
  $6 = HEAP32[$1>>2]|0;
  $7 = ($6|0)==(0);
  if ($7) {
   HEAP32[$1>>2] = $2;
  }
  $8 = HEAP32[$__p2>>2]|0;
  $9 = ($8|0)==($__a_end|0);
  if ($9) {
   $10 = ($6|0)==(34);
   if ($10) {
    HEAP32[$__err>>2] = 4;
    $11 = ($5|0)>(0);
    $12 = ($4>>>0)>(0);
    $13 = ($5|0)==(0);
    $14 = $13 & $12;
    $15 = $11 | $14;
    $16 = $15 ? -1 : 0;
    $17 = $15 ? 2147483647 : -2147483648;
    $20 = $16;$21 = $17;
   } else {
    $20 = $4;$21 = $5;
   }
  } else {
   HEAP32[$__err>>2] = 4;
   $20 = 0;$21 = 0;
  }
  $18 = $21;$19 = $20;
 }
 tempRet0 = ($18);
 STACKTOP = sp;return ($19|0);
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$1 = 0;
 } else {
  $1 = (___errno_location()|0);
  $2 = HEAP32[$1>>2]|0;
  HEAP32[$1>>2] = 0;
  $3 = (__ZNSt3__16__clocEv()|0);
  $4 = (_strtoll_l($__a,$__p2,$__base,$3)|0);
  $5 = tempRet0;
  $6 = HEAP32[$1>>2]|0;
  $7 = ($6|0)==(0);
  if ($7) {
   HEAP32[$1>>2] = $2;
  }
  $8 = HEAP32[$__p2>>2]|0;
  $9 = ($8|0)==($__a_end|0);
  L7: do {
   if ($9) {
    $10 = ($6|0)==(34);
    do {
     if ($10) {
      HEAP32[$__err>>2] = 4;
      $21 = ($5|0)>(0);
      $22 = ($4>>>0)>(0);
      $23 = ($5|0)==(0);
      $24 = $23 & $22;
      $25 = $21 | $24;
      if ($25) {
       $$0 = 2147483647;
       break L7;
      }
     } else {
      $11 = ($5|0)<(-1);
      $12 = ($4>>>0)<(2147483648);
      $13 = ($5|0)==(-1);
      $14 = $13 & $12;
      $15 = $11 | $14;
      if ($15) {
       HEAP32[$__err>>2] = 4;
       break;
      }
      $16 = ($5|0)>(0);
      $17 = ($4>>>0)>(2147483647);
      $18 = ($5|0)==(0);
      $19 = $18 & $17;
      $20 = $16 | $19;
      if ($20) {
       HEAP32[$__err>>2] = 4;
       $$0 = 2147483647;
       break L7;
      } else {
       $$0 = $4;
       break L7;
      }
     }
    } while(0);
    $$0 = -2147483648;
   } else {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
   }
  } while(0);
  $$1 = $$0;
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZNSt3__114__shared_countD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__114__shared_count12__add_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+1)|0);
 return;
}
function __ZNSt3__114__shared_count16__release_sharedEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+-1)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = HEAP32[$this>>2]|0;
  $4 = ((($3)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  FUNCTION_TABLE_vi[$5 & 1023]($this);
  $$0 = 1;
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function __ZNSt11logic_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (2908);
 $0 = ((($this)) + 4|0);
 __THREW__ = 0;
 invoke_vii(524,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___resumeException($3|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (2928);
 $0 = ((($this)) + 4|0);
 $1 = HEAP8[$msg>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 $4 = ((($msg)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($msg)) + 1|0);
 $7 = $3 ? $6 : $5;
 __THREW__ = 0;
 invoke_vii(524,($0|0),($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch()|0;
  $11 = tempRet0;
  ___resumeException($10|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt13runtime_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (2928);
 $0 = ((($this)) + 4|0);
 __THREW__ = 0;
 invoke_vii(524,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___resumeException($3|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt3__118__libcpp_refstringC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($msg)|0);
 $1 = (($0) + 13)|0;
 $2 = (__Znwj($1)|0);
 HEAP32[$2>>2] = $0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = $0;
 $4 = ((($2)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($2)) + 12|0);
 $6 = (($0) + 1)|0;
 _memcpy(($5|0),($msg|0),($6|0))|0;
 HEAP32[$this>>2] = $5;
 return;
}
function __ZNKSt3__114error_category23default_error_conditionEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = $ev;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = $this;
 return;
}
function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$this>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_viii[$3 & 1023]($0,$this,$code);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($condition)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if ($8) {
  $9 = HEAP32[$0>>2]|0;
  $10 = HEAP32[$condition>>2]|0;
  $11 = ($9|0)==($10|0);
  $12 = $11;
 } else {
  $12 = 0;
 }
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($code)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 $3 = HEAP32[$code>>2]|0;
 $4 = ($3|0)==($condition|0);
 $5 = $2 & $4;
 return ($5|0);
}
function __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strerror($ev)|0);
 $1 = (_strlen($0)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,$0,$1);
 return;
}
function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$ec,$what_arg) {
 $agg$result = $agg$result|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$ec>>2]|0;
 $2 = ($1|0)==(0);
 do {
  if (!($2)) {
   $3 = HEAP8[$what_arg>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = $3&255;
    $9 = $8 >>> 1;
    $10 = $9;
   } else {
    $6 = ((($what_arg)) + 4|0);
    $7 = HEAP32[$6>>2]|0;
    $10 = $7;
   }
   $11 = ($10|0)==(0);
   if ($11) {
    $17 = $1;
   } else {
    (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($what_arg,21813)|0);
    $$pre = HEAP32[$ec>>2]|0;
    $17 = $$pre;
   }
   $12 = ((($ec)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($14)) + 24|0);
   $16 = HEAP32[$15>>2]|0;
   FUNCTION_TABLE_viii[$16 & 1023]($0,$13,$17);
   $18 = HEAP8[$0>>0]|0;
   $19 = $18 & 1;
   $20 = ($19<<24>>24)==(0);
   $21 = ((($0)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($0)) + 1|0);
   $24 = $20 ? $23 : $22;
   $25 = ((($0)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $18&255;
   $28 = $27 >>> 1;
   $29 = $20 ? $28 : $26;
   __THREW__ = 0;
   (invoke_iiii(332,($what_arg|0),($24|0),($29|0))|0);
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    $32 = ___cxa_find_matching_catch()|0;
    $33 = tempRet0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
    ___resumeException($32|0);
    // unreachable;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
    break;
   }
  }
 } while(0);
 ;HEAP32[$agg$result>>2]=HEAP32[$what_arg>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$what_arg+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$what_arg+8>>2]|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $34 = (($what_arg) + ($__i$0$i$i<<2)|0);
  HEAP32[$34>>2] = 0;
  $35 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $35;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$ec,$what_arg) {
 $this = $this|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = sp;
 $2 = (_strlen($what_arg)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($1,$what_arg,$2);
 __THREW__ = 0;
 invoke_viii(525,($0|0),($ec|0),($1|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   $18 = ___cxa_find_matching_catch()|0;
   $19 = tempRet0;
   $$0 = $19;$$01 = $18;
  } else {
   __THREW__ = 0;
   invoke_vii(526,($this|0),($0|0));
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if ($6) {
    $20 = ___cxa_find_matching_catch()|0;
    $21 = tempRet0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
    $$0 = $21;$$01 = $20;
    break;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
    HEAP32[$this>>2] = (12112);
    $7 = ((($this)) + 8|0);
    $8 = $ec;
    $9 = $8;
    $10 = HEAP32[$9>>2]|0;
    $11 = (($8) + 4)|0;
    $12 = $11;
    $13 = HEAP32[$12>>2]|0;
    $14 = $7;
    $15 = $14;
    HEAP32[$15>>2] = $10;
    $16 = (($14) + 4)|0;
    $17 = $16;
    HEAP32[$17>>2] = $13;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
 ___resumeException($$01|0);
 // unreachable;
}
function __ZNSt3__112system_errorD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 return;
}
function __ZNSt3__112system_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__114error_categoryD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag,$arg,$func) {
 $flag = $flag|0;
 $arg = $arg|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_lock((12124|0))|0);
 while(1) {
  $0 = HEAP32[$flag>>2]|0;
  $1 = ($0|0)==(1);
  if (!($1)) {
   break;
  }
  (_pthread_cond_wait((12152|0),(12124|0))|0);
 }
 $2 = HEAP32[$flag>>2]|0;
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   HEAP32[$flag>>2] = 1;
   __THREW__ = 0;
   (invoke_ii(527,(12124|0))|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if (!($5)) {
    __THREW__ = 0;
    invoke_vi($func|0,($arg|0));
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     __THREW__ = 0;
     (invoke_ii(528,(12124|0))|0);
     $8 = __THREW__; __THREW__ = 0;
     $9 = $8&1;
     if (!($9)) {
      HEAP32[$flag>>2] = -1;
      __THREW__ = 0;
      (invoke_ii(527,(12124|0))|0);
      $10 = __THREW__; __THREW__ = 0;
      $11 = $10&1;
      if (!($11)) {
       __THREW__ = 0;
       (invoke_ii(529,(12152|0))|0);
       $12 = __THREW__; __THREW__ = 0;
       $13 = $12&1;
       if (!($13)) {
        break;
       }
      }
     }
    }
   }
   $14 = ___cxa_find_matching_catch(0|0)|0;
   $15 = tempRet0;
   (___cxa_begin_catch(($14|0))|0);
   __THREW__ = 0;
   (invoke_ii(528,(12124|0))|0);
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if (!($17)) {
    HEAP32[$flag>>2] = 0;
    __THREW__ = 0;
    (invoke_ii(527,(12124|0))|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     __THREW__ = 0;
     (invoke_ii(529,(12152|0))|0);
     $20 = __THREW__; __THREW__ = 0;
     $21 = $20&1;
     if (!($21)) {
      __THREW__ = 0;
      invoke_v(530);
      $22 = __THREW__; __THREW__ = 0;
     }
    }
   }
   $23 = ___cxa_find_matching_catch()|0;
   $24 = tempRet0;
   __THREW__ = 0;
   invoke_v(372);
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if ($26) {
    $27 = ___cxa_find_matching_catch(0|0)|0;
    $28 = tempRet0;
    ___clang_call_terminate($27);
    // unreachable;
   } else {
    ___resumeException($23|0);
    // unreachable;
   }
  } else {
   (_pthread_mutex_unlock((12124|0))|0);
  }
 } while(0);
 return;
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return FUNCTION_TABLE_iiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
  return FUNCTION_TABLE_iiiiiid[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,+a6)|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&1023](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&1023](a1|0,a2|0);
}


function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&1023](a1|0)|0;
}


function dynCall_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
  return FUNCTION_TABLE_iiiiiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&1023](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
  FUNCTION_TABLE_viiiiiiiiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  FUNCTION_TABLE_viiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}


function dynCall_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
  FUNCTION_TABLE_viiiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&511](a1|0,a2|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_diii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return +FUNCTION_TABLE_diii[index&1023](a1|0,a2|0,a3|0);
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&511]()|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&1023](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&1023](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&1023]();
}


function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return FUNCTION_TABLE_iiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}


function dynCall_iiiiid(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=+a5;
  return FUNCTION_TABLE_iiiiid[index&255](a1|0,a2|0,a3|0,a4|0,+a5)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&511](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(0);return 0;
}
function b1(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1);
}
function b2(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; nullFunc_iiiiiid(2);return 0;
}
function b3(p0) {
 p0 = p0|0; nullFunc_vi(3);
}
function b4(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(4);
}
function b5(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(5);return 0;
}
function b6(p0) {
 p0 = p0|0; nullFunc_ii(6);return 0;
}
function _IMG_Load__wrapper(p0) {
 p0 = p0|0; return _IMG_Load(p0|0)|0;
}
function _pthread_mutex_unlock__wrapper(p0) {
 p0 = p0|0; return _pthread_mutex_unlock(p0|0)|0;
}
function _pthread_mutex_lock__wrapper(p0) {
 p0 = p0|0; return _pthread_mutex_lock(p0|0)|0;
}
function _pthread_cond_broadcast__wrapper(p0) {
 p0 = p0|0; return _pthread_cond_broadcast(p0|0)|0;
}
function b7(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0; nullFunc_iiiiiiiiiiii(7);return 0;
}
function b8(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(8);return 0;
}
function b9(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0;p11 = p11|0;p12 = p12|0;p13 = p13|0;p14 = p14|0; nullFunc_viiiiiiiiiiiiiii(9);
}
function b10(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(10);
}
function b11(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(11);
}
function b12(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0; nullFunc_viiiiiiiiii(12);
}
function b13(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(13);return 0;
}
function b14(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(14);return 0;
}
function b15(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_diii(15);return +0;
}
function b16() {
 ; nullFunc_i(16);return 0;
}
function _glCreateProgram__wrapper() {
 ; return _glCreateProgram()|0;
}
function b17(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(17);return 0;
}
function b18(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(18);
}
function b19() {
 ; nullFunc_v(19);
}
function ___cxa_pure_virtual__wrapper() {
 ; ___cxa_pure_virtual();
}
function ___cxa_end_catch__wrapper() {
 ; ___cxa_end_catch();
}
function ___cxa_rethrow__wrapper() {
 ; ___cxa_rethrow();
}
function b20(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(20);return 0;
}
function b21(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = +p4; nullFunc_iiiiid(21);return 0;
}
function b22(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(22);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiiiiiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,b0,b0
,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b0,b0,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,__ZNSt3__18__searchIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0
,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0];
var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_iiiiiid = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,b2,b2,b2,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_vi = [b3,b3,b3,__ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,b3,b3,b3,__ZNSt9bad_allocD2Ev
,__ZNSt9bad_allocD0Ev,b3,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,b3,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,b3,__ZNSt12out_of_rangeD0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,b3,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b3,b3,b3,b3,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b3,b3,b3,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b3,b3,b3,b3,b3
,b3,b3,b3,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18ios_base7failureD2Ev,__ZNSt3__18ios_base7failureD0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__114error_categoryD2Ev,__ZNSt3__119__iostream_categoryD0Ev,b3,b3,b3,b3,b3,__ZNSt3__17collateIcED2Ev,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,b3
,b3,b3,__ZNSt3__17collateIwED2Ev,__ZNSt3__17collateIwED0Ev,b3,b3,b3,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev
,b3,__ZNSt3__110moneypunctIcLb0EED2Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110moneypunctIcLb1EED2Ev,__ZNSt3__110moneypunctIcLb1EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110moneypunctIwLb0EED2Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,b3,b3,b3,b3,b3
,b3,b3,b3,b3,__ZNSt3__110moneypunctIwLb1EED2Ev,__ZNSt3__110moneypunctIwLb1EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3
,b3,__ZNSt3__18messagesIcED2Ev,__ZNSt3__18messagesIcED0Ev,b3,b3,b3,__ZNSt3__18messagesIwED2Ev,__ZNSt3__18messagesIwED0Ev,b3,b3,b3,__ZNSt3__16locale5__impD2Ev,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,b3,b3,b3,b3,b3
,b3,b3,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev,b3,b3,b3,b3,b3,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,b3,b3,b3,b3,b3,__ZNSt3__16locale5facetD2Ev,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,__ZNSt3__112system_errorD2Ev,__ZNSt3__112system_errorD0Ev,b3
,__ZN10ExecutableC2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev,b3,b3,b3,b3,b3,b3,__ZN3glm5tvec3IfLNS_9precisionE0EEC2Ev,b3
,b3,__ZN3glm5tvec2IfLNS_9precisionE0EEC2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN5StoreD2Ev,__ZN5SceneD2Ev,b3,b3,b3,b3,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,_cleanup,b3,_cleanup_410,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_freelocale,b3,b3,__ZNSt3__112__do_nothingEPv,b3,__ZNSt3__121__throw_runtime_errorEPKc,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__16locale2id6__initEv,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,b3,b3,b3,b3,b3,b3,b3,b3,b3,___cxx_global_array_dtor,b3,___cxx_global_array_dtor_54,b3,___cxx_global_array_dtor_69,___cxx_global_array_dtor_93,___cxx_global_array_dtor_117,___cxx_global_array_dtor_120,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev
,b3,b3,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_free,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_vii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv
,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,__ZNKSt3__18messagesIcE8do_closeEi,b4,b4,b4,b4,__ZNKSt3__18messagesIwE8do_closeEi,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv,__ZNKSt3__18numpunctIcE12do_falsenameEv,b4,b4,b4,b4,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_,b4,b4,__ZNKSt3__16vectorIjNS_9allocatorIjEEE17__annotate_shrinkEj,__ZNSt3__114__split_bufferIjRNS_9allocatorIjEEE18__construct_at_endEj,__ZNSt3__16vectorIjNS_9allocatorIjEEE26__swap_out_circular_bufferERNS_14__split_bufferIjRS2_EE,b4,b4,b4,b4,__ZN6Models6Static8filenameERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZNSt3__18ios_base4initEPv,b4,b4,__ZNSt3__18ios_base5clearEj,b4,b4,b4,b4,b4,b4
,__ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_,b4,__ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc,__ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE,__ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE,b4,b4,__ZN6Models3Raw8filenameERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,b4,b4,b4,b4,__ZNSt3__16vectorItNS_9allocatorItEEE26__swap_out_circular_bufferERNS_14__split_bufferItRS2_EE,__ZN6Mtllib8filenameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b4,b4
,b4,b4,b4,__ZL6on_keyii,b4,b4,b4,__ZN7Objects9WithModelC2ERK5Model,b4,b4,b4,b4,b4,__ZNSt3__16vectorIPK6ObjectNS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE,b4,_abort_message,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__18ios_base16__call_callbacksENS0_5eventE,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt13runtime_errorC2EPKc,b4,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj,b4,b4,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw,b4,b4,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj
,b4,b4,b4,b4,b4,__ZNSt11logic_errorC2EPKc,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej,__ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_,__ZNSt3__17codecvtIwc11__mbstate_tEC2Ej,__ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_
,__ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_,b4,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj,__ZNSt3__118__libcpp_refstringC2EPKc,b4,__ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_iiiiiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b5,b5,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf
,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b5,b5,b5,b5,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,b5,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,b5,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,b5,b5,b5,b5,b5,b5,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm
,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b5,b5,b5
,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b5,b5,b5,b5,__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_ii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,b6,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,__ZNKSt9bad_alloc4whatEv,b6,b6,__ZNKSt11logic_error4whatEv,b6,b6,__ZNKSt13runtime_error4whatEv,b6,b6,b6,__ZNKSt8bad_cast4whatEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,___stdio_close
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__119__iostream_category4nameEv,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,b6,b6,b6,b6
,b6,b6,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv,__ZNKSt3__120__time_get_c_storageIcE3__XEv,b6,b6,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,b6,b6,b6,b6,b6,b6,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,b6,b6,b6,b6,b6
,b6,b6,b6,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,b6,b6,b6,b6,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,b6,b6,b6,b6,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,b6,b6,b6,b6,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,b6,b6,b6,b6,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,b6,b6,b6
,b6,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,b6,b6,b6,b6,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,b6,b6,b6,b6,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv
,b6,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,b6,b6,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,b6,b6,b6,b6,b6,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,b6,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,b6,b6,b6,b6,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,b6,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,b6,b6,b6,b6,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,b6,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,b6,b6,b6,b6,b6
,b6,__ZNSt3__111char_traitsIcE6lengthEPKc,b6,b6,b6,b6,b6,b6,b6,b6,_IMG_Load__wrapper,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__18ios_base6getlocEv,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv,b6,b6,b6,b6,b6,b6,b6,_fclose,b6,_feof,b6,b6,b6,b6,b6,__Znwj,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_uselocale,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,_wcslen,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_pthread_mutex_unlock__wrapper,_pthread_mutex_lock__wrapper,_pthread_cond_broadcast__wrapper,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_iiiiiiiiiiii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_,b7,b7,b7,b7,b7,b7,b7,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7];
var FUNCTION_TABLE_iiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE6setbufEPci,b8,b8,b8,b8,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,b8,b8,b8,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_sn_write,b8
,___stdio_write,___stdio_seek,___stdout_write,b8,b8,b8,b8,b8,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,b8,b8,b8,b8,b8
,b8,__ZNKSt3__17collateIcE7do_hashEPKcS3_,b8,b8,b8,b8,__ZNKSt3__17collateIwE7do_hashEPKwS3_,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b8,b8,b8,b8,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,b8,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,b8,b8,__ZNKSt3__15ctypeIcE9do_narrowEcc,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__15ctypeIwE5do_isEtw,b8,b8,b8,b8,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,b8,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,b8,b8,__ZNKSt3__15ctypeIwE9do_narrowEwc
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj,b8,b8,b8,__ZNSt3__111char_traitsIcE7compareEPKcS3_j,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj,b8,b8,b8,__ZNSt3__17getlineIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EES6_,b8,b8,_sscanf
,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN5Model19create_array_bufferEjiPKv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_fscanf,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,__ZL15on_em_mousemoveiPK20EmscriptenMouseEventPv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_do_read,b8,___stdio_read,b8,b8,b8,b8,b8,b8,b8,b8
,_newlocale,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,b8,b8,b8,b8,b8,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_wcrtomb,b8,b8,_mbtowc,_mbrlen,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_vasprintf,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,__ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i,b9,__ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9];
var FUNCTION_TABLE_viiiiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b10,b10,b10,b10,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,b10,b10,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_viiiiiii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,__ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b11,b11,__ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b11,b11,b11,__ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11];
var FUNCTION_TABLE_viiiiiiiiii = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri,b12,b12,b12,b12,b12,b12,__ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri,b12,b12,b12,b12
,__ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri,b12,__ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12];
var FUNCTION_TABLE_iii = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi,b13,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE8overflowEi,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNKSt3__15ctypeIcE10do_toupperEc,b13,__ZNKSt3__15ctypeIcE10do_tolowerEc,b13,__ZNKSt3__15ctypeIcE8do_widenEc,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNKSt3__15ctypeIwE10do_toupperEw,b13,__ZNKSt3__15ctypeIwE10do_tolowerEw,b13,__ZNKSt3__15ctypeIwE8do_widenEc,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZN5Store4loadI6ShaderEEPKT_RKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE
,b13,b13,b13,b13,__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP8ResourceEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE4findIS7_EENS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEEiEERKT_,b13,__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP8ResourceNS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEEixERSC_,b13,b13,b13,b13,b13,b13,b13,b13,_fopen,b13,__ZN5Store4loadI7ProgramEEPKT_RKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE,b13,b13,b13,b13,b13,b13,b13,__ZNKSt3__16locale9use_facetERNS0_2idE,b13,b13,b13,b13
,b13,b13,b13,b13,__ZNSt3__111char_traitsIcE2eqEcc,b13,b13,__ZN5Store4loadI6MtllibEEPKT_RKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE,__ZNK6MtllibixERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b13,b13,__ZNKSt3__16locale9has_facetERNS0_2idE,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPK8MaterialNS_4lessIS6_EENS4_INS_4pairIKS6_S9_EEEEEixEOS6_
,__ZN5Store4loadI7TextureEEPKT_RKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE,b13,b13,b13,b13,__ZN5Store4loadIN6Models6StaticEEEPKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEE,__ZN5Store4loadIN6Models3RawEEEPKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEE,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,_isxdigit_l,_isdigit_l,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc,b13,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw,b13,b13,b13,b13,b13
,b13,b13,b13];
var FUNCTION_TABLE_iiiiii = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_
,b14,b14,b14,b14,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,b14,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,b14,b14,b14,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,b14,b14,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,b14,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,b14,b14,b14,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,b14,b14,b14,b14,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b14,b14
,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,b14,b14,b14,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b14,b14,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,b14,b14,b14,b14,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b14,b14,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,b14,b14,b14,b14,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b14,b14,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNK7Program5buildEjPKPKcjS3_,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,_wcsnrtombs,b14,_mbsnrtowcs,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14];
var FUNCTION_TABLE_diii = [b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15];
var FUNCTION_TABLE_i = [b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,_glCreateProgram__wrapper,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,___cxa_get_globals_fast,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNSt3__16__clocEv,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,__ZNSt3__16locale5__imp12make_classicEv,b16,__ZNSt3__16locale5__imp11make_globalEv,__ZNSt3__16locale8__globalEv,b16,b16,___ctype_b_loc,___ctype_toupper_loc,___ctype_tolower_loc,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16];
var FUNCTION_TABLE_iiiii = [b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,b17,b17,b17,b17,b17,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z
,b17,b17,b17,__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz,b17,b17,b17,b17,b17,b17,b17,b17,b17,_mbsrtowcs,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,_catgets,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,_mbrtowc,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,__ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji,__ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17];
var FUNCTION_TABLE_viii = [b18,__ZNK7Objects9WithModel6renderERK5SceneRKN3glm7tmat4x4IfLNS4_9precisionE0EEE,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNKSt3__114error_category23default_error_conditionEi,b18,b18,__ZNKSt3__119__iostream_category7messageEi,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,__ZN6ShaderC2ER5StoreRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,__ZN4Mesh3addERKN3glm5tvec3IfLNS0_9precisionE0EEES5_,b18,b18,b18,__ZN7ProgramC2ER5StoreRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE,b18,b18,b18,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b,b18,b18,b18,b18,__ZN6MtllibC2ER5StoreRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE,b18,b18,b18,b18,__ZN3glmmiIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_S6_,__ZN3glmmlIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_S6_,b18,b18,b18,b18
,b18,b18,__ZN7TextureC2ER5StoreRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE,b18,b18,b18,b18,b18,b18,__ZN6Models6StaticC2ER5StoreRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE,__ZN6Models3RawC2ER5StoreRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__18ios_base7failureC2EPKcRKNS_10error_codeE,b18,b18,b18,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,__ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b18,b18,b18,b18,b18,b18,__ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18];
var FUNCTION_TABLE_v = [b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,___cxa_pure_virtual__wrapper,b19,__ZL25default_terminate_handlerv,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,___cxa_end_catch__wrapper,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,__ZL7iteratev,b19,b19,b19,b19,b19,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,__ZSt17__throw_bad_allocv,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,___cxa_rethrow__wrapper,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19];
var FUNCTION_TABLE_iiiiiiiii = [b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,b20,b20,b20,b20,b20,b20,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,b20,b20,b20,b20,b20,b20,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20];
var FUNCTION_TABLE_iiiiid = [b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,b21,b21,b21,b21,b21,b21,b21,b21,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21];
var FUNCTION_TABLE_viiii = [b22,b22,__ZNK6Models6Static4drawERK5SceneRKN3glm7tmat4x4IfLNS4_9precisionE0EEES9_,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNK6Models3Raw4drawERK5SceneRKN3glm7tmat4x4IfLNS4_9precisionE0EEES9_,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b22,b22,b22,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b22,b22,b22,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,__ZNKSt3__17collateIcE12do_transformEPKcS3_,b22,b22,b22,b22,__ZNKSt3__17collateIwE12do_transformEPKwS3_,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcjj,b22,b22,b22,b22,b22,__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP8ResourceEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSK_SK_,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,__ZN12TexturedMesh3addERKN3glm5tvec3IfLNS0_9precisionE0EEES5_RKNS0_5tvec2IfLS2_0EEE,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPK8MaterialEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSL_SL_,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22];

  return { ___cxa_can_catch: ___cxa_can_catch, _fflush: _fflush, _main: _main, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Add: _i64Add, _memmove: _memmove, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _bitshift64Lshr: _bitshift64Lshr, _free: _free, ___errno_location: ___errno_location, _bitshift64Shl: _bitshift64Shl, __GLOBAL__sub_I_main_cpp: __GLOBAL__sub_I_main_cpp, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_iiiiiid: dynCall_iiiiiid, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_ii: dynCall_ii, dynCall_iiiiiiiiiiii: dynCall_iiiiiiiiiiii, dynCall_iiii: dynCall_iiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiiiiii: dynCall_viiiiiiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_diii: dynCall_diii, dynCall_i: dynCall_i, dynCall_iiiii: dynCall_iiiii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiiid: dynCall_iiiiid, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real___GLOBAL__sub_I_main_cpp = asm["__GLOBAL__sub_I_main_cpp"]; asm["__GLOBAL__sub_I_main_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_main_cpp.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _main = Module["_main"] = asm["_main"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var __GLOBAL__sub_I_main_cpp = Module["__GLOBAL__sub_I_main_cpp"] = asm["__GLOBAL__sub_I_main_cpp"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _free = Module["_free"] = asm["_free"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = asm["dynCall_iiiiiid"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = asm["dynCall_viiiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiiid = Module["dynCall_iiiiid"] = asm["dynCall_iiiiid"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



